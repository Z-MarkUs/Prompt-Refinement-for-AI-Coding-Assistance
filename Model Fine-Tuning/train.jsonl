{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find how many battleships are on a board."}, {"role": "assistant", "content": "{\n  \"title\": \"Count Battleships on Board\",\n  \"description\": \"Given an `m x n` matrix `board`, determine the number of distinct battleships. A battleship is represented by a sequence of contiguous `'X'` cells arranged horizontally or vertically. Each battleship is separated by at least one empty cell `'.'` in both directions (horizontally and vertically).\",\n  \"objective\": \"Efficiently count the number of distinct battleships on the board, ensuring no modifications to the input matrix and using `O(1)` extra space.\",\n  \"input\": {\n    \"board\": {\n      \"type\": \"2D matrix\",\n      \"description\": \"A matrix where each cell is either `'X'` (battleship) or `'.'` (empty).\",\n      \"constraints\": \"1 <= m, n <= 200; board[i][j] \\u2208 {'.', 'X'}\"\n    }\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The number of distinct battleships on the board.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"board\": [\n          [\n            \"X\",\n            \".\",\n            \".\",\n            \"X\"\n          ],\n          [\n            \".\",\n            \".\",\n            \".\",\n            \"X\"\n          ],\n          [\n            \".\",\n            \".\",\n            \".\",\n            \"X\"\n          ]\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"There are 2 distinct battleships: one vertical (columns 3 and 4) and one horizontal (row 1).\"\n    },\n    {\n      \"input\": {\n        \"board\": [\n          [\n            \".\"\n          ]\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"There are no battleships on the board.\"\n    }\n  ],\n  \"hints\": [\n    \"A cell with `'X'` can only represent the start of a new battleship if there is no `'X'` directly above or to the left of it.\",\n    \"Traverse the board in one pass and count only valid starting cells.\",\n    \"Avoid recursive or multi-pass solutions to maintain O(1) extra space and O(m * n) time complexity.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Implement a single-pass solution with O(1) space complexity by only checking the current cell and its neighbors.\",\n    \"constraints\": \"Do not modify the input `board` matrix.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given two strings `s` and `t` representing numbers, determine if they are the same."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two strings `s` and `t`, each representing a non-negative rational number, return `true` if and only if they represent the same number. The strings may include parentheses to denote the repeating part of the rational number. The number can have up to three parts: an integer part, a non-repeating decimal part, and a repeating decimal part. Your task is to determine if both strings represent the same number.\",\n  \"objective\": \"Write a function that compares two rational numbers represented as strings, where the strings may contain parentheses to denote repeating decimals. Return `true` if the two numbers represent the same value, otherwise return `false`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The strings `s` and `t` may represent rational numbers with repeating decimal parts enclosed in parentheses. We need to determine if both strings represent the same value. For example, `0.(52)` and `0.5(25)` both represent the same rational number.\",\n    \"Step 2 - Parsing the Strings\": \"We need to process the strings to handle the repeating decimal parts correctly. This requires converting the strings into a common representation, such as fractions, to compare the two numbers.\",\n    \"Step 3 - Repeating Decimals Handling\": \"For strings that include repeating decimals, we need to handle the infinite repetition by converting them to equivalent fractions or decimal expansions to make the comparison possible.\",\n    \"Step 4 - Comparison\": \"After parsing both strings and handling repeating decimals, compare the values. If they are equal, return `true`; otherwise, return `false`.\",\n    \"Step 5 - Edge Cases\": \"Consider edge cases such as no repeating decimals, very small or large numbers, and cases where the numbers are already in a simple form (e.g., `1.` representing `1`).\",\n    \"Step 6 - Constraints Verification\": \"Ensure that the solution works for all constraints, including maximum string lengths of 4 and correct parsing of decimal numbers and parentheses.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"0.(52)\",\n        \"t\": \"0.5(25)\"\n      },\n      \"output\": true,\n      \"explanation\": \"Both strings represent the same rational number 0.52525252...\"\n    },\n    {\n      \"input\": {\n        \"s\": \"0.1666(6)\",\n        \"t\": \"0.166(66)\"\n      },\n      \"output\": true,\n      \"explanation\": \"Both strings represent the same rational number 0.1666666...\"\n    },\n    {\n      \"input\": {\n        \"s\": \"0.9(9)\",\n        \"t\": \"1.\"\n      },\n      \"output\": true,\n      \"explanation\": \"0.9(9) is equivalent to 1, so the numbers are equal.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 4, 1 <= t.length <= 4\",\n    \"decimal_part_length\": \"0 <= decimal length <= 4\",\n    \"integer_part_length\": \"1 <= integer length <= 4\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle larger inputs efficiently, especially with longer repeating decimal parts?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count all arithmetic subarrays in `nums`. A subarray has at least three elements, and the difference between numbers is constant."}, {"role": "assistant", "content": "{\n  \"title\": \"Count Arithmetic Subarrays\",\n  \"description\": \"Given an integer array `nums`, determine the number of arithmetic subarrays (subarrays where the difference between consecutive elements is the same).\",\n  \"definition\": {\n    \"arithmetic\": \"A subarray is arithmetic if it has at least three elements and the difference between any two consecutive elements is constant.\"\n  },\n  \"input\": {\n    \"name\": \"nums\",\n    \"type\": \"array of integers\",\n    \"description\": \"The array of integers to analyze.\",\n    \"constraints\": \"1 <= nums.length <= 5000, -1000 <= nums[i] <= 1000\"\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The number of arithmetic subarrays in the given array.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          4\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The arithmetic subarrays are [1, 2, 3], [2, 3, 4], and [1, 2, 3, 4].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"An array with fewer than three elements cannot have arithmetic subarrays.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          7,\n          7,\n          7,\n          7\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The arithmetic subarrays are [7, 7, 7], [7, 7, 7], and [7, 7, 7, 7].\"\n    }\n  ],\n  \"hints\": [\n    \"Iterate through the array and check if consecutive differences are constant.\",\n    \"Count arithmetic subarrays by extending the current subarray when possible.\",\n    \"Ensure subarrays have at least three elements before counting.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Use a single traversal of the array to achieve O(n) time complexity.\",\n    \"constraints\": \"Avoid nested loops or recomputation for overlapping subarrays.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find all processes that are terminated when a given process is killed."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two integer arrays `pid` and `ppid` representing the process IDs and their corresponding parent process IDs, and a process ID `kill`, find all the processes that will be terminated when the process with ID `kill` is killed. This includes the `kill` process and all of its direct and indirect child processes.\",\n  \"objective\": \"Implement an efficient algorithm using a HashMap and Breadth-First Search (BFS) to find all processes that need to be killed, ensuring the solution handles large input sizes within the given constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Build the Process Tree\": \"Create a HashMap (dictionary) `processTree` where each key is a parent process ID, and the corresponding value is a list of its direct child process IDs. Iterate over `ppid` and `pid` arrays to populate `processTree` by mapping each parent to its children.\",\n    \"Step 2 - Initialize BFS Queue\": \"Initialize a queue (e.g., `deque` in Python) and add the `kill` process ID to it. This queue will be used to perform BFS traversal to find all processes to be killed.\",\n    \"Step 3 - Perform BFS Traversal\": \"While the queue is not empty, perform the following steps:\\n- Dequeue a process ID `current` from the front of the queue.\\n- Add `current` to the result list `killedProcesses`.\\n- If `current` has any children (i.e., `processTree[current]` exists), enqueue all child process IDs of `current` to the queue.\",\n    \"Step 4 - Return the Result\": \"After the BFS traversal, `killedProcesses` will contain all the process IDs that need to be killed. Return this list as the final result.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution operates efficiently within the constraints, handling up to `5 * 10^4` processes. Avoid recursion to prevent stack overflow with large input sizes, and use iterative BFS instead.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"pid\": [\n          1,\n          3,\n          10,\n          5\n        ],\n        \"ppid\": [\n          3,\n          0,\n          5,\n          3\n        ],\n        \"kill\": 5\n      },\n      \"output\": [\n        5,\n        10\n      ],\n      \"explanation\": \"Killing process 5 will also kill its child process 10.\"\n    },\n    {\n      \"input\": {\n        \"pid\": [\n          1\n        ],\n        \"ppid\": [\n          0\n        ],\n        \"kill\": 1\n      },\n      \"output\": [\n        1\n      ],\n      \"explanation\": \"Killing the root process 1 will only kill itself since it has no children.\"\n    }\n  ],\n  \"constraints\": {\n    \"process_count\": \"1 <= n <= 5 * 10^4, where n == pid.length == ppid.length\",\n    \"pid_values\": \"1 <= pid[i] <= 5 * 10^4, all pid[i] are unique\",\n    \"ppid_values\": \"0 <= ppid[i] <= 5 * 10^4\",\n    \"kill_exists\": \"`kill` is guaranteed to be in `pid`\",\n    \"root_process\": \"Only one process has `ppid[i] == 0`\"\n  },\n  \"follow_up\": \"Consider how you might modify the algorithm to handle cycles in the process tree (although cycles do not exist in this problem due to the tree structure). Also, explore how Depth-First Search (DFS) could be used for this problem and compare its performance with BFS.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum cost to paint houses with given costs and constraints."}, {"role": "assistant", "content": "{\n  \"description\": \"Given `n` houses and `k` colors, each house can be painted with one of the `k` colors, and the cost of painting each house with a certain color is provided in a `n x k` cost matrix `costs`. No two adjacent houses can have the same color. Return the minimum cost to paint all the houses.\",\n  \"objective\": \"Design an efficient algorithm to calculate the minimum cost to paint all houses using dynamic programming, ensuring that the solution adheres to the adjacency constraints and is optimized for `O(nk)` runtime.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the cost of painting each house depends on the previous house's color. Dynamic programming is ideal for minimizing cumulative costs while respecting the no-adjacency constraint.\",\n    \"Step 2 - Dynamic Programming Approach\": \"Use a DP matrix `dp` where `dp[i][j]` represents the minimum cost to paint house `i` with color `j`. Transition formula: `dp[i][j] = costs[i][j] + min(dp[i-1][c])`, where `c` iterates over all colors except `j`.\",\n    \"Step 3 - Space Optimization\": \"Instead of maintaining a full DP matrix, reduce space usage by keeping only two rows to store costs for the previous and current houses.\",\n    \"Step 4 - Edge Cases\": \"Handle cases where `k = 2` (only two colors available), `n = 1` (single house), and small costs.\",\n    \"Step 5 - Output\": \"Return the minimum value in the last row of the DP matrix as the minimum cost to paint all houses.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"costs\": [\n          [\n            1,\n            5,\n            3\n          ],\n          [\n            2,\n            9,\n            4\n          ]\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"Paint house 0 with color 0 and house 1 with color 2, or paint house 0 with color 2 and house 1 with color 0. Minimum cost: 5.\"\n    },\n    {\n      \"input\": {\n        \"costs\": [\n          [\n            1,\n            3\n          ],\n          [\n            2,\n            4\n          ]\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"Paint house 0 with color 0 and house 1 with color 1, or vice versa. Minimum cost: 5.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size\": \"1 <= costs.length == n <= 100\",\n    \"color_count\": \"2 <= k <= 20\",\n    \"cost_range\": \"1 <= costs[i][j] <= 20\"\n  },\n  \"follow_up\": \"Can you reduce space complexity to `O(k)` by using an optimized DP array?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count the number of 1 bits in a binary string."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the binary representation of an unsigned integer, calculate the number of '1' bits it has, also known as the Hamming weight.\",\n  \"objective\": \"Design a function to count the number of '1' bits efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that Hamming weight counts the number of '1' bits in the binary representation of a number.\",\n    \"Step 2 - Bit Manipulation\": \"Iterate through the bits of the number using bitwise operations like AND and right-shift.\",\n    \"Step 3 - Optimize for Repeated Calls\": \"Precompute results for small bit patterns if the function is called multiple times.\",\n    \"Step 4 - Handle Edge Cases\": \"Ensure the function handles binary strings with all 0s or all 1s correctly.\",\n    \"Step 5 - Performance\": \"Ensure the solution is optimized for 32-bit binary strings.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": \"00000000000000000000000000001011\"\n      },\n      \"output\": 3,\n      \"explanation\": \"The input binary string has three '1' bits.\"\n    },\n    {\n      \"input\": {\n        \"n\": \"11111111111111111111111111111101\"\n      },\n      \"output\": 31,\n      \"explanation\": \"The input binary string has thirty-one '1' bits.\"\n    }\n  ],\n  \"constraints\": {\n    \"binary_string_length\": \"32\",\n    \"input_format\": \"Binary string representing a 32-bit unsigned integer.\"\n  },\n  \"follow_up\": \"How can this function be optimized if it is called multiple times?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find out if the number is a power of three."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `n`, determine if it is a power of three. An integer `n` is a power of three if there exists an integer `x` such that `n == 3^x`.\",\n  \"objective\": \"Write an efficient algorithm to determine if `n` is a power of three. Optimize for large values of `n` and consider edge cases such as negative numbers and zero.\",\n  \"meta_prompt\": {\n    \"Step 1 - Handle Edge Cases\": \"Check if `n` is less than or equal to 0. If so, return `false` since powers of three are positive.\",\n    \"Step 2 - Loop/Recursive Approach\": \"Iteratively or recursively divide `n` by 3 while `n % 3 == 0`. If `n` reduces to 1, return `true`; otherwise, return `false`.\",\n    \"Step 3 - Follow-Up Optimization\": \"For the follow-up question, use a mathematical approach to determine if `n` is a divisor of the largest power of three within the 32-bit integer range.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 27\n      },\n      \"output\": true,\n      \"explanation\": \"27 = 3^3, so it is a power of three.\"\n    },\n    {\n      \"input\": {\n        \"n\": 0\n      },\n      \"output\": false,\n      \"explanation\": \"Powers of three are positive numbers; hence, 0 is not a power of three.\"\n    },\n    {\n      \"input\": {\n        \"n\": -1\n      },\n      \"output\": false,\n      \"explanation\": \"Negative numbers cannot be powers of three.\"\n    },\n    {\n      \"input\": {\n        \"n\": 9\n      },\n      \"output\": true,\n      \"explanation\": \"9 = 3^2, so it is a power of three.\"\n    },\n    {\n      \"input\": {\n        \"n\": 45\n      },\n      \"output\": false,\n      \"explanation\": \"45 is not a power of three.\"\n    }\n  ],\n  \"constraints\": {\n    \"range\": \"-2^31 <= n <= 2^31 - 1\",\n    \"inputs\": \"Valid for all integers.\"\n  },\n  \"follow_up\": \"Can you solve the problem mathematically by using logarithms or precomputing the largest power of three within the integer range?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the speed Koko should eat bananas at so that she finishes within h hours."}, {"role": "assistant", "content": "{\n  \"description\": \"Koko the monkey needs to eat all the bananas from a set of piles before the guards return in a given number of hours. She can eat at a rate of 'k' bananas per hour, and she will eat bananas from the piles one by one. The task is to determine the minimum integer 'k' such that she can finish all the bananas within the given time.\",\n  \"objective\": \"Return the minimum eating speed 'k' that allows Koko to finish eating all the bananas in 'h' hours or less.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The task is to find the minimum speed 'k' at which Koko can eat the bananas such that all piles are finished in the given 'h' hours. The key is to determine the smallest possible speed 'k' that ensures all piles can be consumed within the time limit.\",\n    \"Step 2 - Approach\": \"We will perform a binary search to find the minimum 'k' such that Koko can eat all bananas in 'h' hours. The search space for 'k' will range from 1 (the minimum eating speed) to the largest pile size (the maximum possible speed if Koko eats one pile per hour). For each 'k', we calculate how long it would take Koko to eat all the bananas and adjust the search bounds accordingly.\",\n    \"Step 3 - Output Format\": \"Return the minimum value of 'k' that satisfies the condition.\",\n    \"Step 4 - Code Efficiency and Edge Cases\": \"The binary search allows us to find the solution in O(log(max(piles)) * n) time, where n is the number of piles and max(piles) is the size of the largest pile. This approach ensures we efficiently handle the problem even with large inputs.\",\n    \"Step 5 - Optimization Considerations\": \"The binary search helps to optimize the process of finding the minimum 'k' by narrowing down the possible values progressively.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"piles\": [\n          3,\n          6,\n          7,\n          11\n        ],\n        \"h\": 8\n      },\n      \"output\": 4,\n      \"explanation\": \"Koko can eat at a speed of 4 bananas per hour and finish all the piles in 8 hours.\"\n    },\n    {\n      \"input\": {\n        \"piles\": [\n          30,\n          11,\n          23,\n          4,\n          20\n        ],\n        \"h\": 5\n      },\n      \"output\": 30,\n      \"explanation\": \"The minimum speed is 30 bananas per hour, which ensures Koko can finish in 5 hours.\"\n    },\n    {\n      \"input\": {\n        \"piles\": [\n          30,\n          11,\n          23,\n          4,\n          20\n        ],\n        \"h\": 6\n      },\n      \"output\": 23,\n      \"explanation\": \"The minimum speed is 23 bananas per hour, allowing Koko to finish in 6 hours.\"\n    }\n  ],\n  \"constraints\": {\n    \"piles_length\": \"1 <= piles.length <= 10^4\",\n    \"piles_max_value\": \"1 <= piles[i] <= 10^9\",\n    \"hours_range\": \"piles.length <= h <= 10^9\"\n  },\n  \"follow_up\": \"How can we further optimize the solution if there are additional constraints on the number of piles or the maximum value of bananas in each pile?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the time each function spends running from a list of logs."}, {"role": "assistant", "content": "{\n  \"description\": \"Given logs of function start and end times on a single-threaded CPU, calculate the exclusive execution time for each function. This includes handling nested and recursive function calls efficiently.\",\n  \"objective\": \"Compute the exclusive execution time for each function based on logs using a stack to manage nested or overlapping function calls.\",\n  \"meta_prompt\": {\n    \"Step 1 - Parse Logs\": \"Iterate through the logs and split each log into `function_id`, `start`/`end`, and `timestamp` components.\",\n    \"Step 2 - Manage Call Stack\": \"Use a stack to track the currently active function. Push `function_id` and its `start` timestamp onto the stack when a function starts.\",\n    \"Step 3 - Handle End Logs\": \"When encountering an end log, calculate the function's execution time as `end_time - start_time + 1`. Update its exclusive time and pop it from the stack.\",\n    \"Step 4 - Adjust for Nested Calls\": \"For functions that enclose other calls, subtract the nested call's execution time from the enclosing function's exclusive time.\",\n    \"Final Step - Return Results\": \"Return an array where each index represents the exclusive time for the corresponding function.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 2,\n        \"logs\": [\n          \"0:start:0\",\n          \"1:start:2\",\n          \"1:end:5\",\n          \"0:end:6\"\n        ]\n      },\n      \"output\": [\n        3,\n        4\n      ],\n      \"explanation\": \"Function 0 runs twice (before and after function 1), and function 1 runs once. Exclusive times are calculated considering nesting.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1,\n        \"logs\": [\n          \"0:start:0\",\n          \"0:start:2\",\n          \"0:end:5\",\n          \"0:start:6\",\n          \"0:end:6\",\n          \"0:end:7\"\n        ]\n      },\n      \"output\": [\n        8\n      ],\n      \"explanation\": \"Function 0 has recursive calls. The total time is the sum of all exclusive intervals.\"\n    }\n  ],\n  \"constraints\": {\n    \"function_ids\": \"0 <= function_id < n\",\n    \"timestamps\": \"0 <= timestamp <= 10^9\",\n    \"log_ordering\": \"Each start log has a matching end log.\",\n    \"no_duplicates\": \"No two start or end logs share the same timestamp.\"\n  },\n  \"follow_up\": \"Optimize for larger input sizes or logs where functions have deeply nested calls by minimizing stack operations and ensuring constant time updates.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find words in a list that can be typed on one keyboard row."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of strings `words`, determine which words can be typed using letters from only one row of an American keyboard. The keyboard rows are: 'qwertyuiop', 'asdfghjkl', and 'zxcvbnm'. Each word in the input consists of English letters and is case-insensitive. Return an array of such words.\",\n  \"objective\": \"Design an efficient algorithm to check for each word whether all its characters belong to a single keyboard row, considering both uppercase and lowercase characters.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Identify the input (`words`) and recognize that the goal is to validate each word against the three predefined keyboard rows. Handle case-insensitivity by normalizing the words.\",\n    \"Step 2 - Keyboard Row Mapping\": \"Create a mapping of each character to its respective keyboard row for quick lookup. Use sets or dictionaries for efficient membership testing.\",\n    \"Step 3 - Word Validation\": \"For each word, check if all its characters are part of the same row by iterating through the letters and comparing them to the row mappings.\",\n    \"Step 4 - Output Collection\": \"Accumulate all valid words (those that can be typed using one row) into the result list.\",\n    \"Step 5 - Edge Cases\": \"Handle edge cases such as empty words, single-character words, and mixed case input.\",\n    \"Step 6 - Complexity Analysis\": \"Ensure the solution is efficient, with time complexity proportional to the total number of characters across all words.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"words\": [\n          \"Hello\",\n          \"Alaska\",\n          \"Dad\",\n          \"Peace\"\n        ]\n      },\n      \"output\": [\n        \"Alaska\",\n        \"Dad\"\n      ],\n      \"explanation\": \"Only 'Alaska' and 'Dad' can be typed using letters from a single keyboard row.\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"omk\"\n        ]\n      },\n      \"output\": [],\n      \"explanation\": \"None of the words can be typed using a single keyboard row.\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"adsdf\",\n          \"sfd\"\n        ]\n      },\n      \"output\": [\n        \"adsdf\",\n        \"sfd\"\n      ],\n      \"explanation\": \"Both words can be typed using the second keyboard row.\"\n    }\n  ],\n  \"constraints\": {\n    \"words_length\": \"1 <= words.length <= 20\",\n    \"word_length\": \"1 <= words[i].length <= 100\",\n    \"characters\": \"Words consist of English letters, both lowercase and uppercase.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"Can the solution handle dynamic keyboard layouts or additional rows?\",\n    \"question_2\": \"How would the implementation change if we allowed punctuation or special characters in the words?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create a class `MedianFinder` to find the median of numbers in a data stream."}, {"role": "assistant", "content": "{\n  \"description\": \"Implement the `MedianFinder` class to efficiently find the median of a dynamically growing data stream. The median is the middle value in an ordered list, or the mean of the two middle values if the size of the list is even. The class must handle frequent insertions (`addNum`) and queries (`findMedian`).\",\n  \"objective\": \"Design an algorithm that efficiently supports both operations, `addNum` and `findMedian`, ensuring scalability for up to `50,000` calls.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the requirements for calculating the median dynamically:\\n1. The data stream grows with each `addNum` operation.\\n2. The `findMedian` operation should quickly compute the median without sorting the entire list each time.\",\n    \"Step 2 - Data Structure Choice\": \"Use a combination of two heaps:\\n- A max-heap for the lower half of the numbers.\\n- A min-heap for the upper half of the numbers.\\nThis ensures efficient partitioning of the data into two halves.\",\n    \"Step 3 - Balance the Heaps\": \"Ensure the heaps are balanced:\\n- The max-heap may have at most one more element than the min-heap.\\n- Adjust the heaps whenever a new number is added.\",\n    \"Step 4 - Median Calculation\": \"Calculate the median efficiently:\\n- If the total number of elements is odd, the median is the top of the max-heap.\\n- If even, the median is the average of the tops of both heaps.\",\n    \"Step 5 - Edge Cases\": \"Handle cases like:\\n- Only one element in the data structure.\\n- Large ranges of values, e.g., spanning `-105` to `105`.\",\n    \"Step 6 - Output\": \"Implement `addNum` and `findMedian` to achieve `O(log n)` time complexity for insertion and `O(1)` time complexity for finding the median.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"operations\": [\n          \"MedianFinder\",\n          \"addNum\",\n          \"addNum\",\n          \"findMedian\",\n          \"addNum\",\n          \"findMedian\"\n        ],\n        \"arguments\": [\n          [],\n          [\n            1\n          ],\n          [\n            2\n          ],\n          [],\n          [\n            3\n          ],\n          []\n        ]\n      },\n      \"output\": [\n        null,\n        null,\n        null,\n        1.5,\n        null,\n        2.0\n      ],\n      \"explanation\": \"Numbers are dynamically added, and the median is updated efficiently. The median transitions from 1.5 to 2.0 after adding 3.\"\n    },\n    {\n      \"input\": {\n        \"operations\": [\n          \"MedianFinder\",\n          \"addNum\",\n          \"findMedian\"\n        ],\n        \"arguments\": [\n          [],\n          [\n            5\n          ],\n          []\n        ]\n      },\n      \"output\": [\n        null,\n        null,\n        5.0\n      ],\n      \"explanation\": \"With only one number, the median is the number itself.\"\n    }\n  ],\n  \"constraints\": {\n    \"range\": \"-10^5 <= num <= 10^5\",\n    \"calls\": \"At most 50,000 calls to `addNum` and `findMedian` combined.\",\n    \"initial_state\": \"At least one element must exist before calling `findMedian`.\"\n  },\n  \"follow_up\": [\n    \"How would you optimize the solution if all integers are in the range `[0, 100]`?\",\n    \"How would you handle cases where 99% of the integers are in `[0, 100]`?\"\n  ]\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Reverse a linked list in groups of `k` nodes."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `head` of a linked list, reverse the nodes of the list `k` at a time, and return the modified list. If the number of nodes is not a multiple of `k`, the remaining nodes at the end should stay as they are. The values of nodes must not be altered; only the nodes themselves may be rearranged.\",\n  \"objective\": \"Design an efficient algorithm to reverse nodes in groups of `k` in a linked list while minimizing memory usage and adhering to constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The task involves reversing the nodes of the linked list in groups of size `k`. Any nodes left at the end of the list that do not form a complete group should remain in their original order.\",\n    \"Step 2 - Iterative Approach\": \"Traverse the linked list in chunks of `k` nodes, reversing the nodes within each chunk. Use pointers to keep track of the current group, the next group, and the previous group's tail to connect reversed sections.\",\n    \"Step 3 - Recursive Approach\": \"Recursively reverse each group of `k` nodes, connecting the reversed group to the result of subsequent recursive calls.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider scenarios such as `k = 1` (no reversal needed), `n < k` (no reversal), and an empty list.\",\n    \"Step 5 - Optimization and Constraints Compliance\": \"Aim for `O(n)` time complexity and, if possible, solve the problem in `O(1)` extra space without using additional data structures like stacks or arrays.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2,\n          3,\n          4,\n          5\n        ],\n        \"k\": 2\n      },\n      \"output\": [\n        2,\n        1,\n        4,\n        3,\n        5\n      ],\n      \"explanation\": \"The nodes are reversed in groups of 2. The last node (5) remains as it is since it does not form a complete group.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2,\n          3,\n          4,\n          5\n        ],\n        \"k\": 3\n      },\n      \"output\": [\n        3,\n        2,\n        1,\n        4,\n        5\n      ],\n      \"explanation\": \"The nodes are reversed in groups of 3. The remaining two nodes (4 and 5) stay in their original order.\"\n    }\n  ],\n  \"constraints\": {\n    \"list_length\": \"1 <= n <= 5000\",\n    \"group_size\": \"1 <= k <= n\",\n    \"node_values\": \"0 <= Node.val <= 1000\"\n  },\n  \"follow_up\": \"Can you solve the problem in `O(1)` extra memory space while maintaining `O(n)` time complexity? How would you handle even larger lists efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count the number of unique combinations of coins that make up a given amount. Return `0` if the amount cannot be made up."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `coins` representing different denominations and an integer `amount`, return the number of unique combinations of coins that make up `amount`. You may assume an infinite number of each type of coin. If the amount cannot be made up by any combination of the coins, return `0`.\",\n  \"objective\": \"Design a dynamic programming solution that calculates the number of ways to achieve the target amount using space-optimized 1D array `dp`, ensuring that each combination is counted only once.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Recognize that this problem is about counting combinations rather than permutations, meaning order doesn\\u2019t matter, and each unique grouping of coins counts as a valid solution.\",\n    \"Step 2 - State Transition for DP\": \"Define the state transition based on including or excluding a coin for each sub-amount. If `coins[i] <= j`, then `dp[j] += dp[j - coins[i]]`, representing the case where the current coin is used to build up amount `j`.\",\n    \"Step 3 - Initializing Base Cases\": \"Initialize `dp[0] = 1` as a base case because there is one way to achieve amount 0 (by using no coins). Other values in `dp` are initially set to 0.\",\n    \"Step 4 - Outer Loop for Coins and Inner Loop for Amount\": \"Ensure the outer loop iterates over each coin type, and the inner loop iterates from the coin value up to the target amount. This order ensures that each combination is counted without duplication or permutations.\",\n    \"Step 5 - Complexity and Constraints\": \"The solution should have O(n * amount) complexity and fit within the 32-bit integer range, handling up to 10,000 distinct coins and large target amounts efficiently.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution meets constraints by handling up to 300 coins and target amounts up to 5,000, ensuring the answer fits within a 32-bit integer.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"amount\": 5,\n        \"coins\": [\n          1,\n          2,\n          5\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"There are four ways to make up 5: (5), (2 + 2 + 1), (2 + 1 + 1 + 1), (1 + 1 + 1 + 1 + 1).\"\n    },\n    {\n      \"input\": {\n        \"amount\": 3,\n        \"coins\": [\n          2\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"It is impossible to make up amount 3 using only coins of denomination 2.\"\n    },\n    {\n      \"input\": {\n        \"amount\": 10,\n        \"coins\": [\n          10\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"There is only one way to make up 10 using a single coin of denomination 10.\"\n    }\n  ],\n  \"constraints\": {\n    \"coins_length_range\": \"1 <= coins.length <= 300\",\n    \"coin_value_range\": \"1 <= coins[i] <= 5000\",\n    \"amount_range\": \"0 <= amount <= 5000\",\n    \"unique_values\": \"All values in coins are unique.\"\n  },\n  \"follow_up\": \"Could you implement this solution with minimal space usage by further optimizing `dp` to track only relevant previous states?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number of numbers that can be formed using a list of digits that are less than or equal to a given number."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a sorted array of digits, you can use each digit as many times as needed to form positive integers. Your task is to calculate how many distinct positive integers can be formed that are less than or equal to a given number n.\",\n  \"objective\": \"Design an efficient algorithm to determine the number of positive integers that can be formed from the given digits and are less than or equal to n. The solution should handle varying lengths of n and ensure no invalid numbers are counted.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The input consists of a sorted array of digits and a number n. We need to count how many valid numbers less than or equal to n can be formed using any combination of digits in the array. Numbers formed must be positive integers.\",\n    \"Step 2 - Approach Overview\": \"A brute force solution would involve generating all possible combinations of the digits and counting how many are less than or equal to n. However, this would be inefficient for large values of n.\",\n    \"Step 3 - Optimized Approach\": \"Instead of generating all combinations, consider using dynamic programming or backtracking to efficiently count how many valid numbers can be formed without exceeding n. This will allow you to handle larger inputs.\",\n    \"Step 4 - Output Format\": \"Return the total count of valid integers formed using the digits array that are less than or equal to n.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure the algorithm is efficient enough for large values of n. Consider edge cases where the digits array is small or n is large, and ensure that the algorithm can handle all constraints.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution works within the constraints, handling n up to 10^9 and digit arrays of length up to 9.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"digits\": [\n          \"1\",\n          \"3\",\n          \"5\",\n          \"7\"\n        ],\n        \"n\": 100\n      },\n      \"output\": 20,\n      \"explanation\": \"The 20 numbers that can be formed are: 1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.\"\n    },\n    {\n      \"input\": {\n        \"digits\": [\n          \"1\",\n          \"4\",\n          \"9\"\n        ],\n        \"n\": 1000000000\n      },\n      \"output\": 29523,\n      \"explanation\": \"Using the digits array, we can form various numbers: 3 one-digit, 9 two-digit, 27 three-digit, etc., up to 9-digit numbers. In total, we can form 29523 valid numbers.\"\n    },\n    {\n      \"input\": {\n        \"digits\": [\n          \"7\"\n        ],\n        \"n\": 8\n      },\n      \"output\": 1,\n      \"explanation\": \"Only one valid number can be formed, which is 7.\"\n    }\n  ],\n  \"constraints\": {\n    \"digits_length\": \"1 <= digits.length <= 9\",\n    \"digits_elements_range\": \"digits[i] is between '1' and '9'\",\n    \"unique_digits\": \"All digits in the array are unique\",\n    \"sorted_digits\": \"The digits array is sorted in non-decreasing order\",\n    \"n_range\": \"1 <= n <= 10^9\"\n  },\n  \"follow_up\": \"Can you come up with a solution that efficiently handles larger values of n, ideally avoiding generating every possible number, and instead counting possible combinations?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the length of the longest path in a binary tree where all nodes have the same value."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the length of the longest path in a binary tree where all nodes have the same value.\",\n  \"objective\": \"Use a recursive approach to compute the maximum univalue path in the binary tree by considering both left and right subtrees for each node.\",\n  \"meta_prompt\": {\n    \"Step 1 - Define Recursive Function\": \"Create a helper function `solve(node, parent_value)` that calculates the longest univalue path for a given node and its parent value.\",\n    \"Step 2 - Base Case\": \"If the current node is null, return 0 as there are no nodes to process.\",\n    \"Step 3 - Recursive Traversal\": \"Recursively calculate the longest univalue paths for the left and right children of the current node.\",\n    \"Step 4 - Update Longest Path\": \"If the left or right subtree contributes to a univalue path, update the total path length and store it in a global variable.\",\n    \"Step 5 - Return Path Length\": \"Return the maximum length of the univalue path that includes the current node and one of its children (left or right) to the parent call.\",\n    \"Step 6 - Execute Main Function\": \"Call the recursive function starting with the root node and an arbitrary initial parent value.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          5,\n          4,\n          5,\n          1,\n          1,\n          null,\n          5\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The longest path with the same value (5) has length 2, passing through two edges.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          4,\n          5,\n          4,\n          4,\n          null,\n          5\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The longest path with the same value (4) has length 2, passing through two edges.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_range\": \"0 <= number of nodes <= 10^4\",\n    \"node_values\": \"-1000 <= Node.val <= 1000\",\n    \"tree_depth\": \"Depth of the tree will not exceed 1000.\"\n  },\n  \"follow_up\": \"Discuss the time complexity of the recursive solution and whether iterative methods or memoization could further optimize performance.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum water a container can store given an array of heights."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `height` of length `n`, where each element represents the height of a vertical line drawn at its corresponding index, find two lines that, together with the x-axis, form a container that holds the maximum amount of water. Return the maximum area of water the container can store. The container cannot slant.\",\n  \"objective\": \"Design an efficient algorithm to calculate the maximum area of water a container can store, using a two-pointer approach to achieve linear time complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the height of each vertical line is determined by the elements of the array `height`. The area of water a container can store is determined by the shorter of the two lines multiplied by the distance between them.\",\n    \"Step 2 - Initial Approach\": \"Consider calculating the area for all possible pairs of lines using a nested loop. However, this brute-force approach results in `O(n^2)` time complexity and is inefficient for larger inputs.\",\n    \"Step 3 - Optimal Solution with Two Pointers\": \"Use a two-pointer technique: place one pointer at the beginning and one at the end of the array. Move the pointer corresponding to the shorter line inward to potentially find a larger area. This reduces the time complexity to `O(n)`.\",\n    \"Step 4 - Edge Cases\": \"Handle cases where all heights are zero, the heights are uniform, or the array contains only two elements.\",\n    \"Step 5 - Final Output\": \"Return the maximum area as an integer after evaluating all possible container configurations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"height\": [\n          1,\n          8,\n          6,\n          2,\n          5,\n          4,\n          8,\n          3,\n          7\n        ]\n      },\n      \"output\": 49,\n      \"explanation\": \"The two lines at indices 1 and 8 form a container with an area of 49.\"\n    },\n    {\n      \"input\": {\n        \"height\": [\n          1,\n          1\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The only two lines form a container with an area of 1.\"\n    },\n    {\n      \"input\": {\n        \"height\": [\n          4,\n          3,\n          2,\n          1,\n          4\n        ]\n      },\n      \"output\": 16,\n      \"explanation\": \"The two lines at indices 0 and 4 form a container with an area of 16.\"\n    },\n    {\n      \"input\": {\n        \"height\": [\n          1,\n          2,\n          1\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The two lines at indices 0 and 2 form a container with an area of 2.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"2 <= n <= 10^5\",\n    \"height_range\": \"0 <= height[i] <= 10^4\",\n    \"time_complexity\": \"The solution must run in linear time, O(n).\"\n  },\n  \"follow_up\": \"Can you further optimize the space complexity of the solution to ensure minimal additional memory usage?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Add numbers to the array so that you can form all sums up to a certain number."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a sorted integer array `nums` and an integer `n`, find the minimum number of patches (new numbers) to add to the array such that all numbers in the range `[1, n]` can be formed as the sum of some subset of elements in the array.\",\n  \"objective\": \"Design an efficient algorithm to determine the minimum number of patches while ensuring the solution works for large ranges of `n` and considers edge cases in `nums`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that a patch is required when there is a gap in the range `[1, n]` that cannot be formed using the existing elements.\",\n    \"Step 2 - Greedy Approach\": \"Use a greedy algorithm to iteratively patch the smallest missing number in the range `[1, n]` until all gaps are covered.\",\n    \"Step 3 - Efficient Tracking\": \"Maintain a variable `miss` to track the smallest number that cannot currently be formed and extend the range iteratively.\",\n    \"Step 4 - Iterate Over `nums` and Patch\": \"Loop through `nums` to include numbers that are smaller than or equal to `miss`. Patch numbers when required to close the gaps.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          3\n        ],\n        \"n\": 6\n      },\n      \"output\": 1,\n      \"explanation\": \"Add the number 2 to cover the range [1, 6].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          5,\n          10\n        ],\n        \"n\": 20\n      },\n      \"output\": 2,\n      \"explanation\": \"Add the numbers 2 and 4 to cover the range [1, 20].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          2\n        ],\n        \"n\": 5\n      },\n      \"output\": 0,\n      \"explanation\": \"The array already covers the range [1, 5].\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"1 <= nums.length <= 1000\",\n    \"number_range\": \"1 <= n <= 2^31 - 1\",\n    \"array_values\": \"1 <= nums[i] <= 10^4\",\n    \"sorted_array\": \"`nums` is sorted in ascending order.\"\n  },\n  \"follow_up\": \"How would your solution scale for extremely large values of `n`? Can you optimize the space complexity further?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the longest substring with k characters."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s` and an integer `k`, find the length of the longest substring of `s` that contains at most `k` distinct characters.\",\n  \"objective\": \"Implement an efficient algorithm using the sliding window technique to solve the problem in O(n) time.\",\n  \"meta_prompt\": {\n    \"Step 1 - Handle Edge Cases\": \"If `k` is 0 or the string is empty, return 0. If `k` is greater than or equal to the number of unique characters in the string, return the length of the string.\",\n    \"Step 2 - Sliding Window\": \"Use two pointers to create a sliding window. Expand the window by moving the right pointer and include characters until the window has more than `k` distinct characters.\",\n    \"Step 3 - Shrink the Window\": \"If the window exceeds `k` distinct characters, move the left pointer to shrink the window until it contains at most `k` distinct characters.\",\n    \"Step 4 - Track the Longest Substring\": \"Keep a variable to track the length of the longest valid substring encountered during the iteration.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"eceba\",\n        \"k\": 2\n      },\n      \"output\": 3,\n      \"explanation\": \"The longest substring with at most 2 distinct characters is 'ece'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"aa\",\n        \"k\": 1\n      },\n      \"output\": 2,\n      \"explanation\": \"The longest substring with at most 1 distinct character is 'aa'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"\",\n        \"k\": 2\n      },\n      \"output\": 0,\n      \"explanation\": \"An empty string has no substrings.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 5 * 10^4\",\n    \"distinct_character_limit\": \"0 <= k <= 50\"\n  },\n  \"follow_up\": \"How would your solution handle very large strings efficiently? Can you optimize memory usage if `k` is much smaller than the length of `s`?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum number of jumps to reach the end of an array."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a **0-indexed** array of integers `nums` where each element `nums[i]` represents the maximum forward jump length from index `i`. Starting at index `0`, determine the minimum number of jumps required to reach the last index (`nums[n - 1]`).\",\n  \"objective\": \"Design an efficient algorithm to compute the minimum number of jumps needed to reach the end of the array, ensuring compliance with the constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task requires minimizing the number of jumps to reach the last index while respecting the jump limits defined by `nums[i]` at each index.\",\n    \"Step 2 - Greedy Approach\": \"Use a greedy algorithm to calculate the farthest position reachable from the current index in one jump. Keep track of the current range of reachable indices and update it whenever a jump is made.\",\n    \"Step 3 - Optimization\": \"Track the farthest index reachable without iterating beyond the current jump range, reducing unnecessary checks.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution adheres to constraints such as `1 <= nums.length <= 10^4` and `0 <= nums[i] <= 1000`, and handle large inputs efficiently.\",\n    \"Step 5 - Edge Cases\": \"Consider edge cases such as an array of length 1 (no jumps needed) or `nums` containing multiple 0s but still guaranteeing a path to the last index.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          3,\n          1,\n          1,\n          4\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The minimum jumps are 2: jump from index 0 to 1, then from index 1 to the last index.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          3,\n          0,\n          1,\n          4\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The minimum jumps are 2: jump from index 0 to 1, then from index 1 to the last index.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10^4\",\n    \"jump_range\": \"0 <= nums[i] <= 1000\",\n    \"reachability\": \"It is guaranteed that you can reach the last index.\"\n  },\n  \"follow_up\": \"Can you improve the solution further by reducing the number of checks or using dynamic programming for similar problems?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum time to finish tasks with a cooldown."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a list of tasks represented by characters and a cooldown period, determine the minimum time required to execute all tasks such that the same tasks are at least `n` intervals apart.\",\n  \"objective\": \"Optimize task scheduling to minimize total time, considering constraints on task repetitions and idle time.\",\n  \"meta_prompt\": {\n    \"Step 1 - Count Task Frequencies\": \"Create a frequency array to store the occurrences of each task in the input list.\",\n    \"Step 2 - Identify Most Frequent Task\": \"Find the maximum frequency of any task and count how many tasks have this maximum frequency.\",\n    \"Step 3 - Calculate Total Intervals\": \"Compute the number of intervals needed to schedule the most frequent tasks with their required cooldowns.\",\n    \"Step 4 - Fill Remaining Slots\": \"Calculate idle slots and fill them with less frequent tasks or idle time if tasks are insufficient.\",\n    \"Step 5 - Return Result\": \"Add total tasks and idle periods to determine the total execution time.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"tasks\": [\n          \"A\",\n          \"A\",\n          \"A\",\n          \"B\",\n          \"B\",\n          \"B\"\n        ],\n        \"n\": 2\n      },\n      \"output\": 8,\n      \"explanation\": \"Tasks are scheduled as A -> B -> idle -> A -> B -> idle -> A -> B.\"\n    },\n    {\n      \"input\": {\n        \"tasks\": [\n          \"A\",\n          \"A\",\n          \"A\",\n          \"B\",\n          \"B\",\n          \"B\"\n        ],\n        \"n\": 0\n      },\n      \"output\": 6,\n      \"explanation\": \"No cooldown required; tasks are scheduled in any order, e.g., A -> A -> A -> B -> B -> B.\"\n    },\n    {\n      \"input\": {\n        \"tasks\": [\n          \"A\",\n          \"A\",\n          \"A\",\n          \"A\",\n          \"A\",\n          \"A\",\n          \"B\",\n          \"C\",\n          \"D\",\n          \"E\",\n          \"F\",\n          \"G\"\n        ],\n        \"n\": 2\n      },\n      \"output\": 16,\n      \"explanation\": \"Tasks are scheduled with cooldowns between the most frequent task A and other tasks.\"\n    }\n  ],\n  \"constraints\": {\n    \"task_count\": \"1 <= tasks.length <= 10^4\",\n    \"task_range\": \"tasks[i] is an uppercase English letter\",\n    \"cooldown_range\": \"0 <= n <= 100\"\n  },\n  \"follow_up\": \"Explore alternate strategies such as heap-based scheduling to prioritize tasks dynamically and handle large cooldown periods efficiently.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a line of dominoes, return the final state after all forces have been applied."}, {"role": "assistant", "content": "{\n  \"description\": \"In this problem, we are given a line of dominoes where each domino can either fall to the left ('L'), fall to the right ('R'), or remain standing ('.'). When a domino falls in one direction, it can push adjacent dominoes in that direction. If a domino is pushed from both sides, it remains standing. Our task is to simulate the process and return the final state of the dominoes after all the forces have been applied.\",\n  \"objective\": \"Simulate the falling process of dominoes based on the given initial configuration and return the final state of the dominoes after all possible interactions have occurred.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the basic dynamics of the problem: dominoes can either fall left, right, or remain standing. The goal is to simulate this process and determine the final configuration of the dominoes.\",\n    \"Step 2 - Simulation Approach\": \"To simulate this process, iterate through the dominoes and track the forces applied on each domino. Consider the leftward and rightward forces on each domino and compute the final state based on these forces.\",\n    \"Step 3 - Direction Propagation\": \"If a domino is pushed to the right ('R'), propagate this force to the adjacent dominoes. Similarly, propagate leftward forces from dominoes pushed to the left ('L').\",\n    \"Step 4 - Conflict Resolution\": \"If a domino is being pushed by both sides simultaneously, it remains stationary. This can be resolved by checking the timing of forces from both sides and determining which force prevails.\",\n    \"Step 5 - Time Complexity Consideration\": \"The solution should efficiently handle input sizes up to 10^5, ensuring a time complexity of O(n) where n is the length of the domino string.\",\n    \"Final Check - Edge Case Verification\": \"Ensure that edge cases are handled, such as when all dominoes are pushed in the same direction, when no dominoes are pushed, or when there are conflicting forces on a single domino.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"dominoes\": \"RR.L\"\n      },\n      \"output\": \"RR.L\",\n      \"explanation\": \"In this case, the first domino falls right, but it doesn't affect the second domino as it is blocked by the third domino, which is upright.\"\n    },\n    {\n      \"input\": {\n        \"dominoes\": \".L.R...LR..L..\"\n      },\n      \"output\": \"LL.RR.LLRRLL..\",\n      \"explanation\": \"Here, the forces propagate in both directions, causing the dominoes to eventually fall according to the rules.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 10^5\",\n    \"dominoes_chars\": \"'L', 'R', '.'\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the most frequent word that is not banned."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a paragraph and an array of banned words, find the most frequent non-banned word in the paragraph. The words should be treated case-insensitively, and punctuation should be ignored. The result should be returned in lowercase.\",\n  \"objective\": \"Write a function to find the most frequent word in the paragraph that is not banned, ignoring case and punctuation.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We need to analyze the paragraph to count the frequency of words, ensuring that banned words are excluded and that the frequency count is case-insensitive. Punctuation in the paragraph should not affect the word counting.\",\n    \"Step 2 - Constraints\": \"The paragraph can contain spaces and various punctuation marks. The banned words are case-sensitive, and we are guaranteed that there is at least one non-banned word. The solution must be efficient enough to handle up to 1000 characters in the paragraph.\",\n    \"Step 3 - Approach\": \"First, clean the paragraph by removing punctuation and converting it to lowercase. Then, count the frequency of each word, excluding the banned ones. Finally, find the word with the highest frequency.\",\n    \"Step 4 - Edge Case Handling\": \"Ensure that punctuation marks like `!?',;. ` are handled correctly by removing them. Also, if there are no banned words, every word in the paragraph should be considered.\",\n    \"Step 5 - Optimization\": \"Using a dictionary to count the frequency of each word will be efficient, and the use of a set for banned words ensures constant time lookups.\",\n    \"Step 6 - Implementation Details\": \"To clean the text, you can use regular expressions to split the paragraph into words. Then, iterate through the words, count their frequency, and check if they are banned.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"paragraph\": \"Bob hit a ball, the hit BALL flew far after it was hit. \",\n        \"banned\": [\n          \"hit\"\n        ]\n      },\n      \"output\": \"ball\",\n      \"explanation\": \"The word 'hit' is banned, so the most frequent non-banned word is 'ball', which occurs twice.\"\n    },\n    {\n      \"input\": {\n        \"paragraph\": \"a. \",\n        \"banned\": []\n      },\n      \"output\": \"a\",\n      \"explanation\": \"Since there are no banned words, the only word in the paragraph is 'a'.\"\n    }\n  ],\n  \"constraints\": {\n    \"paragraph_length_range\": \"1 <= paragraph.length <= 1000\",\n    \"banned_length_range\": \"0 <= banned.length <= 100\",\n    \"banned_word_length_range\": \"1 <= banned[i].length <= 10\"\n  },\n  \"follow_up\": \"How would you handle the case where the paragraph contains a mix of uppercase and lowercase letters, and there are multiple non-banned words with the same frequency?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the kth smallest element in an m x n multiplication table where each element is the product of its row and column indices."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the kth smallest element in an m x n multiplication table where mat[i][j] = i * j.\",\n  \"objective\": \"Use binary search to efficiently determine the kth smallest element by counting how many elements are less than or equal to a candidate value.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Binary Search\": \"Set low = 1 (smallest element) and high = m * n (largest element) as the range for the binary search.\",\n    \"Step 2 - Define Enough Function\": \"Create a helper function `enough(x)` that counts how many values in the table are less than or equal to x. For each row i, add `min(x // i, n)` to the count to handle edge cases where x exceeds row values.\",\n    \"Step 3 - Perform Binary Search\": \"While low < high, calculate mid = (low + high) // 2. If `enough(mid)` returns true (at least k elements are <= mid), set high = mid; otherwise, set low = mid + 1.\",\n    \"Step 4 - Return Result\": \"After the loop, low will point to the kth smallest element. Return low as the result.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"m\": 3,\n        \"n\": 3,\n        \"k\": 5\n      },\n      \"output\": 3,\n      \"explanation\": \"The multiplication table is [[1, 2, 3], [2, 4, 6], [3, 6, 9]]. The 5th smallest element is 3.\"\n    },\n    {\n      \"input\": {\n        \"m\": 2,\n        \"n\": 3,\n        \"k\": 6\n      },\n      \"output\": 6,\n      \"explanation\": \"The multiplication table is [[1, 2, 3], [2, 4, 6]]. The 6th smallest element is 6.\"\n    }\n  ],\n  \"constraints\": {\n    \"table_size\": \"1 <= m, n <= 3 * 10^4\",\n    \"k_range\": \"1 <= k <= m * n\"\n  },\n  \"follow_up\": \"Discuss the time complexity of the binary search approach and its advantages over constructing the entire table for large m and n.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if two rectangles overlap."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two axis-aligned rectangles represented by lists rec1 and rec2, where rec1 = [x1, y1, x2, y2] and rec2 = [x1', y1', x2', y2'], determine if these two rectangles overlap. The overlap is defined as having a positive intersection area, meaning that they must not only touch at the corner or edges but must have a non-zero intersection.\",\n  \"objective\": \"Design an efficient algorithm that checks if two rectangles overlap based on their coordinates. The algorithm should handle all edge cases where the rectangles either fully overlap, partially overlap, or do not overlap at all.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Start by analyzing the coordinates of both rectangles. A rectangle is defined by its bottom-left and top-right corners. The task is to check if the two rectangles overlap.\",\n    \"Step 2 - Overlap Condition\": \"Rectangles overlap if one rectangle is not entirely to the left, right, above, or below the other. This can be checked by comparing the x and y coordinates of the corners of both rectangles.\",\n    \"Step 3 - Efficient Check\": \"To check overlap, ensure that rec1's right side is greater than rec2's left side, rec1's left side is less than rec2's right side, rec1's top side is greater than rec2's bottom side, and rec1's bottom side is less than rec2's top side.\",\n    \"Step 4 - Output Format\": \"Return true if the rectangles overlap, and false if they do not.\",\n    \"Step 5 - Code Efficiency\": \"Write the algorithm with a time complexity of O(1), since only a few comparisons are needed for the overlap check.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution handles all valid rectangle coordinates, ensuring that both rec1 and rec2 represent valid rectangles within the given coordinate range.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"rec1\": [\n          0,\n          0,\n          2,\n          2\n        ],\n        \"rec2\": [\n          1,\n          1,\n          3,\n          3\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The rectangles overlap because their intersection area is positive.\"\n    },\n    {\n      \"input\": {\n        \"rec1\": [\n          0,\n          0,\n          1,\n          1\n        ],\n        \"rec2\": [\n          1,\n          0,\n          2,\n          1\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The rectangles do not overlap as they only touch at the edge.\"\n    },\n    {\n      \"input\": {\n        \"rec1\": [\n          0,\n          0,\n          1,\n          1\n        ],\n        \"rec2\": [\n          2,\n          2,\n          3,\n          3\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The rectangles do not overlap as they are completely separate.\"\n    }\n  ],\n  \"constraints\": {\n    \"rec_length\": \"rec1.length == 4 and rec2.length == 4\",\n    \"rec_elements_range\": \"-10^9 <= rec1[i], rec2[i] <= 10^9\",\n    \"valid_rectangle\": \"Both rec1 and rec2 represent valid rectangles with non-zero area.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find where to draw a vertical line to cross the fewest bricks in a wall."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a brick wall represented by rows of integers, where each integer represents the width of a brick, determine the minimum number of bricks crossed by a vertical line drawn from the top to the bottom of the wall. The line should minimize the number of bricks it crosses and should not cross along the edges of the wall.\",\n  \"objective\": \"Implement a solution that finds the minimum number of bricks crossed by leveraging cumulative brick widths to track potential gaps where the line can pass without crossing bricks.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize HashMap for Brick Boundaries\": \"Initialize a hashmap (dictionary) `map` where keys represent the cumulative width sums up to each brick boundary (excluding the rightmost edge) and values represent how often each boundary is encountered across all rows.\",\n    \"Step 2 - Traverse Each Row and Track Boundaries\": \"For each row, compute cumulative sums as you add brick widths. For each boundary before the last brick in each row, add 1 to the corresponding entry in `map` to track this boundary\\u2019s occurrence across rows.\",\n    \"Step 3 - Calculate Minimum Bricks Crossed\": \"After tracking all boundaries, find the maximum count of any boundary in `map`, which represents the most common vertical line position where bricks are not crossed. Subtract this maximum boundary count from the total number of rows to get the minimum number of bricks crossed.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution handles large input sizes and edge cases, such as when the wall has only one column or when all rows consist of single bricks, as outlined by constraints.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"wall\": [\n          [\n            1,\n            2,\n            2,\n            1\n          ],\n          [\n            3,\n            1,\n            2\n          ],\n          [\n            1,\n            3,\n            2\n          ],\n          [\n            2,\n            4\n          ],\n          [\n            3,\n            1,\n            2\n          ],\n          [\n            1,\n            3,\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The line crosses only 2 bricks at the optimal vertical position, where multiple rows align brick boundaries at the same cumulative width.\"\n    },\n    {\n      \"input\": {\n        \"wall\": [\n          [\n            1\n          ],\n          [\n            1\n          ],\n          [\n            1\n          ]\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"Each row has only one brick, so any vertical line crosses all rows.\"\n    }\n  ],\n  \"constraints\": {\n    \"n\": \"1 <= n <= 10^4\",\n    \"row_width\": \"Each row has total width equal to all other rows, and rows contain integers 1 <= wall[i][j] <= 2^31 - 1\"\n  },\n  \"follow_up\": \"Consider how to further optimize this solution for cases with extremely large input sizes or where cumulative widths lead to very large numbers.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the smallest base for `n` where its digits in that base are all `1`'s."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `n` represented as a string, your task is to find the smallest 'good base' of `n`. A good base is a number `k >= 2` such that when `n` is represented in base `k`, all its digits are `1`'s.\",\n  \"objective\": \"Efficiently compute the smallest good base for `n` by leveraging mathematical properties, binary search, and constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Parse Input\": \"Parse the input string `n` as an integer and understand its constraints: `n` is very large, so computational efficiency is crucial.\",\n    \"Step 2 - Mathematical Insight\": \"Recognize that for a number to have all `1`'s in base `k`, it must satisfy the equation `n = k^m + k^(m-1) + ... + k^0` for some integer `m >= 1`. Reorganize this as `n = (k^(m+1) - 1) / (k - 1)`.\",\n    \"Step 3 - Find Maximum `m`\": \"Estimate the maximum value of `m` using logarithms, i.e., `m <= log2(n)`. Iterate over possible values of `m` from high to low.\",\n    \"Step 4 - Binary Search for `k`\": \"For a given `m`, use binary search to determine the smallest base `k` such that the equation holds.\",\n    \"Step 5 - Output Smallest Base\": \"Track the smallest valid base across all `m` values and return it as the output.\",\n    \"Final Check\": \"Ensure correctness for edge cases, such as very large `n` values or scenarios where the smallest base is `n-1` (i.e., the trivial base).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": \"13\"\n      },\n      \"output\": \"3\",\n      \"explanation\": \"13 in base 3 is represented as 111, making 3 the smallest good base.\"\n    },\n    {\n      \"input\": {\n        \"n\": \"4681\"\n      },\n      \"output\": \"8\",\n      \"explanation\": \"4681 in base 8 is represented as 11111, making 8 the smallest good base.\"\n    },\n    {\n      \"input\": {\n        \"n\": \"1000000000000000000\"\n      },\n      \"output\": \"999999999999999999\",\n      \"explanation\": \"1000000000000000000 in base 999999999999999999 is represented as 11, making 999999999999999999 the smallest good base.\"\n    }\n  ],\n  \"constraints\": {\n    \"input_range\": \"`n` is in the range [3, 10^18]\",\n    \"valid_format\": \"`n` is provided as a string with no leading zeros.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"How would the algorithm handle larger values of `n` if Python's arbitrary-precision integers weren't available?\",\n    \"question_2\": \"Could the approach be extended to find multiple good bases, not just the smallest one?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Replace parts of a string `s` with other strings based on given indices and sources."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a 0-indexed string `s` and `k` replacement operations, where each operation consists of an index, a source substring, and a target substring. For each operation, check if the source substring occurs at the given index in `s`. If it does, replace it with the target substring. Perform all operations simultaneously without affecting each other's indexing, and return the resulting string after all operations.\",\n  \"objective\": \"Design an efficient algorithm that performs `k` replacement operations on the string `s`. Each operation must replace a substring at the given index if it matches the source. The challenge is to handle multiple replacements simultaneously without affecting each other\\u2019s positions. Your solution should handle edge cases, such as non-matching substrings, and work efficiently for strings up to length 1000.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Start by understanding the input: you have a string `s` and three arrays: `indices`, `sources`, and `targets`. For each replacement operation, check if the substring at the specified index matches the source substring. If it does, replace it with the target substring.\",\n    \"Step 2 - Approach Design\": \"Consider iterating over each operation and checking if the source substring is present at the given index. If it matches, perform the replacement. Since the replacements occur simultaneously, ensure that each replacement is independent and does not affect the others.\",\n    \"Step 3 - Algorithm Efficiency\": \"Ensure that your approach works efficiently, considering the constraints. The number of operations `k` is at most 100, and the length of the string `s` can be up to 1000. Avoid overlapping operations and handle edge cases where no replacements occur.\",\n    \"Step 4 - Output\": \"Return the final string after all replacements are applied. The order of replacement operations matters, and the replacements should be non-overlapping.\",\n    \"Final Check - Constraints Verification\": \"Verify that the algorithm works within the given constraints: the length of `s` is between 1 and 1000, and `k` is between 1 and 100. Ensure that the approach is robust and works efficiently for all valid inputs.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"abcd \",\n        \"indices\": [\n          0,\n          2\n        ],\n        \"sources\": [\n          \"a \",\n          \"cd \"\n        ],\n        \"targets\": [\n          \"eee \",\n          \"ffff \"\n        ]\n      },\n      \"output\": \"eeebffff \",\n      \"explanation\": \"At index 0, 'a ' is replaced with 'eee '. At index 2, 'cd ' is replaced with 'ffff '.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"abcd \",\n        \"indices\": [\n          0,\n          2\n        ],\n        \"sources\": [\n          \"ab \",\n          \"ec \"\n        ],\n        \"targets\": [\n          \"eee \",\n          \"ffff \"\n        ]\n      },\n      \"output\": \"eeecd \",\n      \"explanation\": \"At index 0, 'ab ' is replaced with 'eee '. However, 'ec ' does not match at index 2, so no replacement occurs.\"\n    }\n  ],\n  \"constraints\": {\n    \"s_length\": \"1 <= s.length <= 1000\",\n    \"k_length\": \"1 <= k <= 100\",\n    \"index_range\": \"0 <= indices[i] < s.length\",\n    \"substring_length\": \"1 <= sources[i].length, targets[i].length <= 50\",\n    \"s_characters\": \"s consists of only lowercase English letters\",\n    \"valid_inputs\": \"sources[i] and targets[i] consist of only lowercase English letters\"\n  },\n  \"follow_up\": \"Can you design a solution that handles this problem efficiently in terms of both time and space complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given a knight and a phone pad with numbers. Calculate how many phone numbers of length n the knight can dial, given its movement. The answer should be modulo 10^9 + 7."}, {"role": "assistant", "content": "{\n  \"description\": \"The chess knight has a unique movement where it moves in an 'L' shape, either two squares vertically and one horizontally, or two squares horizontally and one vertically. Given a chess knight and a phone pad with numeric cells, the task is to determine how many distinct phone numbers of length 'n' we can dial. The knight starts on any numeric cell and then makes 'n - 1' valid knight moves to dial a number of length 'n'. The result should be returned modulo 10^9 + 7.\",\n  \"objective\": \"Implement an algorithm to calculate the number of distinct phone numbers the knight can dial, given the constraints of the knight's movement and the phone pad layout.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand the movement\": \"A chess knight moves in an L-shape, which allows it to jump from a number to certain other numbers on the pad. These movements need to be considered when calculating the total number of possible phone numbers of length n.\",\n    \"Step 2 - Input format\": \"You are given an integer 'n' representing the length of the number to be dialed. The knight can start on any numeric cell of the phone pad.\",\n    \"Step 3 - Approach\": \"Start by creating a mapping of valid knight moves from each numeric cell on the phone pad. Use dynamic programming to track the number of ways the knight can reach each numeric cell at each step of the dialing process. The result is obtained by calculating all valid paths of length 'n' starting from any numeric cell.\",\n    \"Step 4 - Output format\": \"Return the total number of distinct phone numbers modulo 10^9 + 7.\",\n    \"Step 5 - Edge case considerations\": \"Consider the edge case where n = 1, where any number can be dialed from any numeric cell. For large n, use modular arithmetic to ensure the result does not exceed the modulo value.\",\n    \"Step 6 - Optimized approach\": \"Use dynamic programming with a state that stores the number of ways to reach each numeric cell at each step. This will allow efficient calculation for large values of n up to 5000.\"\n  },\n  \"examples\": [\n    {\n      \"input\": 1,\n      \"output\": 10,\n      \"explanation\": \"With n = 1, the knight can be placed on any of the 10 numeric cells. Therefore, there are 10 possible phone numbers.\"\n    },\n    {\n      \"input\": 2,\n      \"output\": 20,\n      \"explanation\": \"For n = 2, the knight makes one move, and the number of valid sequences of length 2 is 20.\"\n    },\n    {\n      \"input\": 3131,\n      \"output\": 136006598,\n      \"explanation\": \"For n = 3131, the answer is calculated as 136006598, considering all knight movements and their modular results.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 5000\",\n    \"modulus\": \"10^9 + 7\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle the maximum constraint of n = 5000 efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Make a permutation using numbers from 1 to n that matches the string 'I' and 'D'."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s` of length `n-1` that encodes a permutation of integers from `1` to `n` based on the conditions: (1) 'I' means increasing order between adjacent elements and (2) 'D' means decreasing order between adjacent elements, reconstruct the lexicographically smallest permutation that satisfies these conditions.\",\n  \"objective\": \"Design an efficient algorithm to reconstruct the smallest permutation `perm` in `O(n)` time by carefully assigning numbers in increasing or decreasing order based on the conditions encoded in `s`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand the Encoding\": \"Recognize that the string `s` describes the relative relationships between consecutive elements in `perm`. Each 'I' implies an ascending pair, while each 'D' implies a descending pair.\",\n    \"Step 2 - Plan the Permutation Construction\": \"Use a greedy approach to construct `perm` while ensuring the result is lexicographically smallest. Start with the smallest and largest available numbers in the range `[1, n]`.\",\n    \"Step 3 - Implement Greedy Allocation\": \"Iterate through `s` and append the smallest or largest remaining number to the permutation based on whether the current character is 'I' or 'D'.\",\n    \"Step 4 - Handle Remaining Numbers\": \"At the end of the iteration, add the final number to `perm` since the length of `perm` is always `n` (one more than `s`).\",\n    \"Step 5 - Verify Correctness\": \"Ensure that `perm` satisfies the encoded conditions and is the lexicographically smallest valid result.\",\n    \"Final Check\": \"Test the algorithm on edge cases such as all 'I's, all 'D's, or alternating 'I's and 'D's.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"I\"\n      },\n      \"output\": [\n        1,\n        2\n      ],\n      \"explanation\": \"The only valid permutation is [1, 2], as it satisfies the 'I' condition.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"DI\"\n      },\n      \"output\": [\n        2,\n        1,\n        3\n      ],\n      \"explanation\": \"[2, 1, 3] is lexicographically smaller than [3, 1, 2], both of which satisfy the 'DI' condition.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"IDID\"\n      },\n      \"output\": [\n        1,\n        3,\n        2,\n        5,\n        4\n      ],\n      \"explanation\": \"The output satisfies the alternating 'I' and 'D' conditions and is the smallest lexicographical result.\"\n    }\n  ],\n  \"constraints\": {\n    \"s_length\": \"1 <= s.length <= 10^5\",\n    \"s_values\": \"Each character in `s` is either 'I' or 'D'.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"How would you modify the algorithm to generate the lexicographically largest permutation?\",\n    \"question_2\": \"What changes would be needed to handle custom order conditions, such as a mix of 'I', 'D', and '='?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Flip a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of a binary tree, invert the tree.\",\n  \"objective\": \"Swap the left and right child of every node in the tree.\",\n  \"meta_prompt\": {\n    \"Step 1 - Base Case\": \"Identify the base case for recursion or iteration.\",\n    \"Step 2 - Traverse the Tree\": \"Visit each node and swap its left and right children.\",\n    \"Step 3 - Return the Tree\": \"Ensure the root of the inverted tree is returned.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          4,\n          2,\n          7,\n          1,\n          3,\n          6,\n          9\n        ]\n      },\n      \"output\": [\n        4,\n        7,\n        2,\n        9,\n        6,\n        3,\n        1\n      ],\n      \"explanation\": \"The left and right children of each node are swapped.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          2,\n          1,\n          3\n        ]\n      },\n      \"output\": [\n        2,\n        3,\n        1\n      ],\n      \"explanation\": \"The tree with root 2 has its children swapped.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"The number of nodes is in the range [0, 100].\",\n    \"node_values\": \"-100 <= Node.val <= 100\"\n  },\n  \"follow_up\": \"Can you implement both recursive and iterative solutions efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a binary tree is height-balanced."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary tree, determine if it is height-balanced. A height-balanced tree is defined as a binary tree in which the depth of the two subtrees of every node never differs by more than one.\",\n  \"objective\": \"Design an algorithm to check whether a binary tree is height-balanced.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves calculating the height of subtrees and ensuring the difference in height is at most one for all nodes.\",\n    \"Step 2 - Recursive Approach\": \"Write a recursive function that calculates the height of the tree and checks for balance simultaneously.\",\n    \"Step 3 - Early Exit\": \"Terminate recursion early if any subtree is found to be unbalanced.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider cases such as an empty tree or a single-node tree.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(n) time with O(h) space, where `h` is the height of the tree.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          9,\n          20,\n          null,\n          null,\n          15,\n          7\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The tree is height-balanced, as the depth of all subtrees differs by at most one.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          2,\n          3,\n          3,\n          null,\n          null,\n          4,\n          4\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The left subtree has a greater depth than the right subtree, making the tree unbalanced.\"\n    },\n    {\n      \"input\": {\n        \"root\": []\n      },\n      \"output\": true,\n      \"explanation\": \"An empty tree is considered height-balanced.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 5000\",\n    \"node_values\": \"-10^4 <= Node.val <= 10^4\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if two sentences are similar."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if two sentences represented as word arrays are similar based on a given list of similar word pairs.\",\n  \"objective\": \"Use a hash map to store word similarity relations and efficiently check if corresponding words in two sentences are similar.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Check if the lengths of `sentence1` and `sentence2` are the same. If they are not, return `false` as they cannot be similar.\",\n    \"Step 2\": \"Create a hash map `wordToSimilarWords` where each key is a word and its value is a hash set of similar words. This will facilitate quick lookups.\",\n    \"Step 3\": \"Populate `wordToSimilarWords` using `similarPairs`. For each pair `[x, y]`, ensure `x` is added to the set of similar words for `y` and vice versa.\",\n    \"Step 4\": \"Iterate over the indices of `sentence1` and `sentence2`. For each index `i`, check if the words at that index are either identical or exist as similar pairs in `wordToSimilarWords`.\",\n    \"Step 5\": \"If all words pass the similarity check, return `true`. Otherwise, return `false` at the first instance of a mismatch.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"sentence1\": [\n          \"great\",\n          \"acting\",\n          \"skills\"\n        ],\n        \"sentence2\": [\n          \"fine\",\n          \"drama\",\n          \"talent\"\n        ],\n        \"similarPairs\": [\n          [\n            \"great\",\n            \"fine\"\n          ],\n          [\n            \"drama\",\n            \"acting\"\n          ],\n          [\n            \"skills\",\n            \"talent\"\n          ]\n        ]\n      },\n      \"output\": true,\n      \"explanation\": [\n        \"Both sentences have the same length.\",\n        \"Each word pair is either identical or found as similar in `similarPairs`.\",\n        \"`great` is similar to `fine`, `acting` to `drama`, and `skills` to `talent`.\"\n      ]\n    },\n    {\n      \"input\": {\n        \"sentence1\": [\n          \"great\"\n        ],\n        \"sentence2\": [\n          \"great\"\n        ],\n        \"similarPairs\": []\n      },\n      \"output\": true,\n      \"explanation\": [\n        \"Sentences have one word each.\",\n        \"The word `great` matches itself as a word is always similar to itself.\"\n      ]\n    },\n    {\n      \"input\": {\n        \"sentence1\": [\n          \"great\"\n        ],\n        \"sentence2\": [\n          \"doubleplus\",\n          \"good\"\n        ],\n        \"similarPairs\": [\n          [\n            \"great\",\n            \"doubleplus\"\n          ]\n        ]\n      },\n      \"output\": false,\n      \"explanation\": [\n        \"The sentences have different lengths, so they cannot be similar.\"\n      ]\n    }\n  ],\n  \"constraints\": {\n    \"sentence_length\": \"1 <= sentence1.length, sentence2.length <= 1000\",\n    \"word_length\": \"1 <= sentence1[i].length, sentence2[i].length <= 20\",\n    \"similar_pairs_length\": \"0 <= similarPairs.length <= 1000\",\n    \"word_format\": \"Words consist of lower-case and upper-case English letters.\"\n  },\n  \"follow_up\": \"Discuss the time complexity of this approach in terms of the number of words and pairs. Explore optimizations, such as using disjoint sets if transitive similarity is considered in future extensions of the problem.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given an array of rooms, determine if you can visit all the rooms starting from room 0."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a set of rooms, each containing a distinct set of keys that unlock other rooms, determine whether it's possible to visit all rooms starting from room 0. You are allowed to visit a room only if you have its key. The keys you pick up in a room allow you to visit other rooms, and you need to check if you can eventually visit all rooms.\",\n  \"objective\": \"Design an algorithm that checks if it is possible to visit all the rooms starting from room 0. You are given an array 'rooms', where 'rooms[i]' represents the set of keys available in room 'i'. Your task is to return true if all rooms can be visited or false otherwise.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"You have 'n' rooms labeled from 0 to n-1. Room 0 is unlocked, and each subsequent room contains a set of keys. Each key in a room unlocks another room. You need to check if it's possible to visit all rooms starting from room 0.\",\n    \"Step 2 - Graph Representation\": \"The rooms can be represented as a directed graph where nodes are rooms, and edges are the keys that unlock other rooms.\",\n    \"Step 3 - Traversal Algorithm\": \"Use a traversal algorithm like BFS or DFS to simulate visiting the rooms starting from room 0. Keep track of the visited rooms and the keys you acquire during the traversal. If all rooms are visited, return true. Otherwise, return false.\",\n    \"Step 4 - Code Efficiency and Edge Cases\": \"Make sure to handle edge cases such as having no keys in certain rooms or encountering loops in the graph structure. Ensure the code runs efficiently within the given constraints.\",\n    \"Step 5 - Output Format\": \"Return a boolean value: 'true' if all rooms are accessible, 'false' otherwise.\",\n    \"Step 6 - Final Check\": \"Verify that your solution works with different inputs, including cases with no keys and multiple rooms having interdependencies between keys.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"rooms\": [\n          [\n            1\n          ],\n          [\n            2\n          ],\n          [\n            3\n          ],\n          []\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"Start from room 0, collect key 1, then go to room 1, collect key 2, go to room 2, collect key 3, and visit room 3. All rooms can be visited.\"\n    },\n    {\n      \"input\": {\n        \"rooms\": [\n          [\n            1,\n            3\n          ],\n          [\n            3,\n            0,\n            1\n          ],\n          [\n            2\n          ],\n          [\n            0\n          ]\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"You cannot visit room 2 because its key is only available in that room, and you cannot access it.\"\n    }\n  ],\n  \"constraints\": {\n    \"rooms_count\": \"2 <= n <= 1000\",\n    \"key_count_per_room\": \"0 <= rooms[i].length <= 1000\",\n    \"total_keys_count\": \"1 <= sum(rooms[i].length) <= 3000\",\n    \"unique_keys\": \"All keys are distinct and between 0 and n-1.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if the array `nums` can be divided into `k` subsets with equal sums."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if the given array `nums` can be divided into `k` non-empty subsets with equal sums.\",\n  \"objective\": \"Use backtracking to explore all possible subsets and validate that each subset's sum equals the target sum, derived from the total array sum divided by `k`.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Calculate `totalArraySum`. If `totalArraySum % k != 0`, return `false`. Compute `targetSum = totalArraySum / k`.\",\n    \"Step 2\": \"Sort `nums` in descending order to optimize the backtracking process by attempting to fit larger numbers first.\",\n    \"Step 3\": \"Create a boolean array `taken` to track whether each element in `nums` has been included in a subset.\",\n    \"Step 4\": \"Define a recursive function to build subsets by including elements from `nums` while ensuring the current subset sum (`currSum`) doesn't exceed `targetSum`. If `currSum` equals `targetSum`, reset `currSum` to 0 and proceed to the next subset. Return `true` when `k - 1` subsets are successfully formed, as the last subset must also meet the target sum.\",\n    \"Step 5\": \"Iterate through `nums` to find the next element not yet included (`!taken[j]`). Include it in the subset, mark it as `taken`, and make a recursive call. Backtrack if the inclusion doesn't lead to a valid solution.\",\n    \"Step 6\": \"Return `true` if valid subsets are formed; otherwise, return `false`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          4,\n          3,\n          2,\n          3,\n          5,\n          2,\n          1\n        ],\n        \"k\": 4\n      },\n      \"output\": true,\n      \"explanation\": \"The array can be divided into 4 subsets: [5], [1, 4], [2, 3], [2, 3], each with sum 5.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          4\n        ],\n        \"k\": 3\n      },\n      \"output\": false,\n      \"explanation\": \"It is impossible to divide the array into 3 subsets with equal sums.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 16\",\n    \"element_value\": \"1 <= nums[i] <= 10^4\",\n    \"subset_count\": \"1 <= k <= nums.length\"\n  },\n  \"follow_up\": \"Discuss the time complexity of this backtracking approach and potential optimizations for larger inputs, such as pruning invalid branches early.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find how many bits differ between two numbers."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two integers `x` and `y`, calculate the **Hamming distance** between their binary representations. The Hamming distance is defined as the number of positions at which the corresponding bits of `x` and `y` differ. You need to implement an efficient algorithm to compute this distance.\",\n  \"objective\": \"Design an algorithm that calculates the Hamming distance between two integers by comparing their binary representations and counting differing positions.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves comparing the binary forms of `x` and `y`. Use bitwise operations to identify positions where the bits differ.\",\n    \"Step 2 - Bitwise XOR\": \"Apply the XOR operation (`x ^ y`) to get a number where each bit set to `1` corresponds to differing bits in `x` and `y`.\",\n    \"Step 3 - Count Set Bits\": \"Count the number of `1`s in the result of the XOR operation. This count represents the Hamming distance.\",\n    \"Step 4 - Optimize the Counting\": \"Use efficient methods to count set bits in an integer, such as the Kernighan's algorithm or built-in functions in programming languages.\",\n    \"Step 5 - Edge Cases\": \"Handle edge cases, such as `x = y` (output should be `0`) and cases where `x` or `y` is `0`. Ensure the solution handles the full range of 32-bit integers (`0 <= x, y <= 2^31 - 1`).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"x\": 1,\n        \"y\": 4\n      },\n      \"output\": 2,\n      \"explanation\": \"Binary representation of `1` is `0001` and `4` is `0100`. They differ at two bit positions.\"\n    },\n    {\n      \"input\": {\n        \"x\": 3,\n        \"y\": 1\n      },\n      \"output\": 1,\n      \"explanation\": \"Binary representation of `3` is `0011` and `1` is `0001`. They differ at one bit position.\"\n    },\n    {\n      \"input\": {\n        \"x\": 0,\n        \"y\": 15\n      },\n      \"output\": 4,\n      \"explanation\": \"Binary representation of `0` is `0000` and `15` is `1111`. They differ at all four bit positions.\"\n    }\n  ],\n  \"constraints\": {\n    \"range\": \"0 <= x, y <= 2^31 - 1\",\n    \"result_type\": \"Output must be a non-negative integer representing the Hamming distance.\"\n  },\n  \"follow_up\": \"Can you further optimize the algorithm to handle very large integers or cases where this calculation is performed repeatedly in bulk?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Solve an equation for x or determine if it has no or infinite solutions."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a mathematical equation as a string, determine the value of `x`, or identify if there is no solution or infinite solutions.\",\n  \"objective\": \"Efficiently solve the equation by parsing coefficients and constants and determining the type of solution.\",\n  \"meta_prompt\": {\n    \"Step 1 - Parse the Equation\": \"Split the equation into LHS and RHS using the `=` character and extract individual terms from both sides.\",\n    \"Step 2 - Process Terms\": \"Iterate through the terms on both sides to compute the net coefficient of `x` and the net constant value.\",\n    \"Step 3 - Simplify the Equation\": \"Bring all `x` terms to one side of the equation and all constant values to the other side by combining like terms.\",\n    \"Step 4 - Compute the Solution\": \"Based on the simplified equation, determine whether there is a unique solution, no solution, or infinite solutions for `x`.\",\n    \"Step 5 - Format the Result\": \"Return the solution as `x=#value` if there is a unique solution, or return `No solution` or `Infinite solutions` as appropriate.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"equation\": \"x+5-3+x=6+x-2\"\n      },\n      \"output\": \"x=2\",\n      \"explanation\": \"After simplification, the equation becomes `2x + 2 = x + 4`, leading to `x = 2`.\"\n    },\n    {\n      \"input\": {\n        \"equation\": \"x=x\"\n      },\n      \"output\": \"Infinite solutions\",\n      \"explanation\": \"Both sides of the equation are equivalent, making the equation true for all values of `x`.\"\n    },\n    {\n      \"input\": {\n        \"equation\": \"2x=x\"\n      },\n      \"output\": \"x=0\",\n      \"explanation\": \"Simplify to `x = 0` by subtracting `x` from both sides.\"\n    }\n  ],\n  \"constraints\": {\n    \"length_range\": \"3 <= equation.length <= 1000\",\n    \"format\": \"The equation contains exactly one `=` character.\",\n    \"valid_characters\": \"The equation consists of digits, `x`, `+`, `-`, and `=`.\"\n  },\n  \"follow_up\": \"Explore how the approach can be extended to handle equations with multiple variables or higher complexity operations like multiplication and division.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the repeated and missing numbers in an array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of integers where one number is duplicated and another is missing, determine the repeated and missing numbers using XOR operations.\",\n  \"objective\": \"Efficiently find the repeated and missing numbers in the given array using the properties of XOR.\",\n  \"meta_prompt\": {\n    \"Step 1 - Calculate XOR of All Numbers\": \"Compute the XOR of all elements in the array with all numbers from 1 to n.\",\n    \"Step 2 - Identify Differentiating Bit\": \"Determine the rightmost bit where the XOR result is 1 to differentiate between the repeated and missing numbers.\",\n    \"Step 3 - Split Numbers into Two Sets\": \"Separate the numbers in the array and the range 1 to n into two groups based on the differentiating bit.\",\n    \"Step 4 - XOR Within Each Set\": \"Calculate the XOR for each set individually to identify the repeated and missing numbers.\",\n    \"Step 5 - Validate and Return Result\": \"Verify which number is repeated and which is missing, and return the result in an array.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          2,\n          4\n        ]\n      },\n      \"output\": [\n        2,\n        3\n      ],\n      \"explanation\": \"The number 2 is repeated, and the number 3 is missing.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          1\n        ]\n      },\n      \"output\": [\n        1,\n        2\n      ],\n      \"explanation\": \"The number 1 is repeated, and the number 2 is missing.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"2 <= nums.length <= 10^4\",\n    \"value_range\": \"1 <= nums[i] <= 10^4\"\n  },\n  \"follow_up\": \"Analyze the time complexity of this XOR-based approach compared to alternative methods like sorting or using hash maps. Discuss its advantages in terms of space efficiency.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Implement Conway's Game of Life for a 2D grid."}, {"role": "assistant", "content": "{\n  \"description\": \"Implement Conway's Game of Life on an `m x n` grid, where each cell is either alive (`1`) or dead (`0`). Compute the next state of the grid based on the following rules:\\n1. Any live cell with fewer than two live neighbors dies (underpopulation).\\n2. Any live cell with two or three live neighbors survives.\\n3. Any live cell with more than three live neighbors dies (overpopulation).\\n4. Any dead cell with exactly three live neighbors becomes a live cell (reproduction).\\nThe board must be updated simultaneously, and the solution should support in-place computation to save space.\",\n  \"objective\": \"Design an efficient algorithm to compute the next state of the board while adhering to in-place updates and constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the rules for updating the state of the board. Consider all neighbors of a cell (8 directions: horizontal, vertical, and diagonal).\",\n    \"Step 2 - In-Place Updates\": \"To achieve in-place updates:\\n- Use temporary states to encode both current and next states in the same cell.\\n- For example, represent a live-to-dead transition as `2` and a dead-to-live transition as `3`.\",\n    \"Step 3 - Transition Logic\": \"Iterate through each cell in the board. Count the live neighbors and determine the next state based on the rules. Use the temporary states to ensure updates are done simultaneously.\",\n    \"Step 4 - Final Update\": \"After processing all cells, replace temporary states (`2` -> `0` and `3` -> `1`) with their final states.\",\n    \"Step 5 - Edge Cases\": \"Handle edge cases like:\\n- Small grids (`1x1` or `1xN`).\\n- Grids where all cells are initially dead or alive.\",\n    \"Step 6 - Output\": \"Return the modified grid representing the next state.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"board\": [\n          [\n            0,\n            1,\n            0\n          ],\n          [\n            0,\n            0,\n            1\n          ],\n          [\n            1,\n            1,\n            1\n          ],\n          [\n            0,\n            0,\n            0\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          0,\n          0,\n          0\n        ],\n        [\n          1,\n          0,\n          1\n        ],\n        [\n          0,\n          1,\n          1\n        ],\n        [\n          0,\n          1,\n          0\n        ]\n      ],\n      \"explanation\": \"Each cell is updated based on the rules of the game.\"\n    },\n    {\n      \"input\": {\n        \"board\": [\n          [\n            1,\n            1\n          ],\n          [\n            1,\n            0\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          1,\n          1\n        ],\n        [\n          1,\n          1\n        ]\n      ],\n      \"explanation\": \"The grid transitions to the next state.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_size\": \"1 <= m, n <= 25\",\n    \"cell_values\": \"Each cell is either 0 (dead) or 1 (alive).\",\n    \"in_place\": \"Updates must be done in-place without using additional space.\"\n  },\n  \"follow_up\": [\n    \"Can you extend your solution to handle an infinite grid by dynamically expanding the boundaries as needed?\",\n    \"What optimizations can you make for larger grids, given the constraints on in-place updates?\"\n  ]\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Add land to a grid and count islands after each operation."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a 2D binary grid of size `m x n` initially filled with water (`0`), implement a method to simulate turning specific water cells into land (`1`) using an array `positions`. For each operation in `positions`, calculate the number of islands formed in the grid. An island is defined as a group of connected land cells (connected horizontally or vertically).\",\n  \"objective\": \"Design an efficient algorithm to handle multiple land addition operations and compute the number of islands after each operation. The solution should aim for a time complexity of O(k log(mn)), where `k` is the length of `positions`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Each position in `positions` represents a water-to-land operation. For each operation, update the grid and calculate the number of connected components (islands). Use a Union-Find data structure to efficiently manage connected components.\",\n    \"Step 2 - Grid Updates and Connectivity\": \"When converting a water cell to land, check its four neighbors (up, down, left, right). Merge the current cell with its adjacent land cells to ensure all connected cells belong to the same component.\",\n    \"Step 3 - Counting Islands\": \"Maintain a counter to track the number of disjoint sets (islands). Initially, the counter is zero. For each operation:\\n1. Increment the counter when a new land cell is added.\\n2. Decrement the counter when merging reduces the number of islands.\",\n    \"Step 4 - Edge Cases\": \"Handle cases such as:\\n1. Operations on the same cell multiple times.\\n2. Grid boundaries.\\n3. Large grid sizes and a high number of operations.\",\n    \"Step 5 - Complexity Analysis\": \"Preprocess the Union-Find structure with path compression and union by rank to achieve O(log(mn)) operations for union and find.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"m\": 3,\n        \"n\": 3,\n        \"positions\": [\n          [\n            0,\n            0\n          ],\n          [\n            0,\n            1\n          ],\n          [\n            1,\n            2\n          ],\n          [\n            2,\n            1\n          ]\n        ]\n      },\n      \"output\": [\n        1,\n        1,\n        2,\n        3\n      ],\n      \"explanation\": \"Initially, the grid is all water. Each operation modifies the grid as follows:\\n1. Add land at (0, 0): 1 island.\\n2. Add land at (0, 1): Still 1 island (connected to (0, 0)).\\n3. Add land at (1, 2): 2 islands (separate from the first island).\\n4. Add land at (2, 1): 3 islands (separate from the other two).\"\n    },\n    {\n      \"input\": {\n        \"m\": 1,\n        \"n\": 1,\n        \"positions\": [\n          [\n            0,\n            0\n          ]\n        ]\n      },\n      \"output\": [\n        1\n      ],\n      \"explanation\": \"Adding land at (0, 0) creates 1 island in the 1x1 grid.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_dimensions\": \"1 <= m, n <= 10^4\",\n    \"total_operations\": \"1 <= m * n <= 10^4\",\n    \"positions_length\": \"1 <= positions.length <= 10^4\",\n    \"position_bounds\": \"0 <= ri < m, 0 <= ci < n\"\n  },\n  \"follow_up\": \"Optimize the solution to run in O(k log(mn)) time using Union-Find with path compression and union by rank.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find how many attendance records are valid for an award."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `n`, find the number of valid attendance records of length `n` for a student who is eligible for an award. The eligibility is determined by having fewer than 2 absences ('A') and no instances of 3 consecutive lates ('L'). Return the count modulo 10^9 + 7.\",\n  \"objective\": \"Implement an efficient bottom-up dynamic programming solution to count all valid attendance records of length `n`, ensuring the solution adheres to constraints and returns results modulo 10^9 + 7.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize DP Array\": \"Create a 3D array `dp` where `dp[len][absences][lates]` holds the number of valid records of length `len`, with `absences` representing total absences and `lates` the number of consecutive lates at the end of the sequence. Initialize `dp[0][0][0] = 1`, as there is 1 way to have an empty record with no absences or lates.\",\n    \"Step 2 - Fill DP Array Using Transitions\": \"Use nested loops to iterate over `len`, `absences`, and `lates`, updating each cell based on three choices: appending 'P' (present), 'A' (absent), or 'L' (late) based on valid conditions.\",\n    \"Step 3 - Handle Each Choice in Transitions\": \"For each combination of `len`, `absences`, and `lates`, apply the following transitions:\\n  - If adding 'P', increment `len` by 1, reset `lates` to 0, and keep `absences` the same.\\n  - If adding 'A' and `absences < 1`, increment `len` by 1, set `absences` to `absences + 1`, and reset `lates` to 0.\\n  - If adding 'L' and `lates < 2`, increment `len` by 1, keep `absences` the same, and set `lates` to `lates + 1`.\\nUpdate the relevant `dp` cell with the sum modulo 10^9 + 7.\",\n    \"Step 4 - Calculate Final Result\": \"After filling the DP array, sum up `dp[n][0 to 1][0 to 2]` to get the total number of valid records of length `n` that meet the award criteria. Return the result modulo 10^9 + 7.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution efficiently handles input up to the maximum constraint (`1 <= n <= 10^5`) using modular arithmetic and that the 3D DP array does not exceed memory limits.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 2\n      },\n      \"output\": 8,\n      \"explanation\": \"The 8 valid records of length 2 are: 'PP', 'AP', 'PA', 'LP', 'PL', 'AL', 'LA', and 'LL'. Only 'AA' is invalid as it has 2 absences.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1\n      },\n      \"output\": 3,\n      \"explanation\": \"The 3 valid records of length 1 are: 'P', 'A', and 'L'.\"\n    },\n    {\n      \"input\": {\n        \"n\": 10101\n      },\n      \"output\": 183236316,\n      \"explanation\": \"Due to large input, the answer must be computed modulo 10^9 + 7.\"\n    }\n  ],\n  \"constraints\": {\n    \"n\": \"1 <= n <= 10^5\"\n  },\n  \"follow_up\": \"Consider optimizing memory usage by reducing DP dimensions or exploring more space-efficient iterative solutions.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find how many ways you can use numbers in `nums` to make `target`."}, {"role": "assistant", "content": "{\n  \"title\": \"Number of Combinations to Reach Target\",\n  \"description\": \"Given an array of distinct integers `nums` and a target integer `target`, determine the number of possible combinations where the order of elements matters and the sum equals the target.\",\n  \"objective\": \"Calculate the number of ways to sum up to `target` using numbers from `nums` where order is significant.\",\n  \"meta_prompt\": {\n    \"Step 1 - Dynamic Programming Setup\": {\n      \"Define dp[i]\": \"`dp[i]` represents the number of ways to achieve a sum `i`.\",\n      \"Base Case\": \"Initialize `dp[0] = 1` since there is one way to make a sum of 0 (using no numbers).\"\n    },\n    \"Step 2 - Transition\": {\n      \"For each `i` from 1 to `target`\": \"Iterate through each number in `nums`.\",\n      \"Condition\": \"If `i >= num`, add `dp[i - num]` to `dp[i]`.\",\n      \"Goal\": \"Accumulate all ways to make sum `i` by considering each number.\"\n    },\n    \"Step 3 - Return Result\": {\n      \"Output\": \"The value of `dp[target]` which represents the total combinations to reach `target`.\"\n    }\n  },\n  \"input\": {\n    \"parameters\": [\n      {\n        \"name\": \"nums\",\n        \"type\": \"array of integers\",\n        \"description\": \"An array of distinct positive integers representing the possible numbers to use.\",\n        \"constraints\": \"1 <= nums.length <= 200, 1 <= nums[i] <= 1000, all elements in `nums` are unique.\"\n      },\n      {\n        \"name\": \"target\",\n        \"type\": \"integer\",\n        \"description\": \"The target sum to achieve using combinations from `nums`.\",\n        \"constraints\": \"1 <= target <= 1000.\"\n      }\n    ]\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The total number of unique combinations that add up to `target`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3\n        ],\n        \"target\": 4\n      },\n      \"output\": 7,\n      \"explanation\": \"Combinations include (1, 1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 3), (2, 1, 1), (2, 2), and (3, 1).\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          9\n        ],\n        \"target\": 3\n      },\n      \"output\": 0,\n      \"explanation\": \"There are no combinations to reach the target.\"\n    }\n  ],\n  \"hints\": [\n    \"Use dynamic programming with a one-dimensional array to store intermediate results.\",\n    \"Iterate through the target values from 1 to `target` and update `dp` based on the values in `nums`.\",\n    \"Ensure that the solution respects order sensitivity for counting combinations.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve `O(target * nums.length)` time complexity with `O(target)` space complexity.\",\n    \"constraints\": \"Avoid recomputing overlapping subproblems by using a dynamic programming table.\"\n  },\n  \"follow_up\": {\n    \"negative_numbers\": {\n      \"Impact\": \"Allowing negative numbers creates potential infinite loops.\",\n      \"Solution\": \"Introduce a constraint to limit the number of elements used or disallow duplicate negative numbers.\"\n    }\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the length and width of a rectangle that has the same area as the given number."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a target rectangular web page area, design the dimensions of the rectangle (length L and width W) such that the following requirements are satisfied: 1) The area equals the given target area. 2) The width W is not greater than the length L (L >= W). 3) The difference between L and W is minimized.\",\n  \"objective\": \"Create an algorithm that efficiently finds the dimensions of the rectangle satisfying the above conditions, minimizing the computational complexity for large values of the area.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understanding the Problem\": \"Recognize that the task is to decompose the given area into two factors L and W, where L * W = area, and minimize the absolute difference |L - W|.\",\n    \"Step 2 - Brute Force Approach\": \"Iterate through all possible values of W from 1 to sqrt(area). For each W, calculate L = area / W. If L * W = area and L >= W, check the difference |L - W| and update the result if this difference is smaller than the previously recorded difference.\",\n    \"Step 3 - Optimized Approach\": \"Reduce iterations by starting from sqrt(area) and working downward to find the first valid factor pair where L * W = area and L >= W.\",\n    \"Step 4 - Output Format\": \"Return the result as an array [L, W] where L is the length and W is the width of the rectangle.\",\n    \"Step 5 - Edge Cases\": \"Handle edge cases such as area = 1 (L = W = 1), very large area values, and cases where the area is a perfect square (e.g., area = 4, result [2, 2]).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"area\": 4\n      },\n      \"output\": [\n        2,\n        2\n      ],\n      \"explanation\": \"The area 4 can be decomposed as [1,4], [2,2], and [4,1]. Only [2,2] satisfies the requirements.\"\n    },\n    {\n      \"input\": {\n        \"area\": 37\n      },\n      \"output\": [\n        37,\n        1\n      ],\n      \"explanation\": \"The only possible dimensions satisfying the conditions are [37, 1].\"\n    },\n    {\n      \"input\": {\n        \"area\": 122122\n      },\n      \"output\": [\n        427,\n        286\n      ],\n      \"explanation\": \"Out of all possible decompositions of 122122, [427, 286] minimizes the difference |L - W|.\"\n    }\n  ],\n  \"constraints\": {\n    \"area_range\": \"1 <= area <= 10^7\",\n    \"output_format\": \"Return an array [L, W] such that L * W = area, L >= W, and |L - W| is minimized.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"Can you generalize the approach to handle non-rectangular shapes with similar constraints?\",\n    \"question_2\": \"How would you optimize this algorithm further for extremely large areas or real-time calculations?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Write a function to get random points in a circle."}, {"role": "assistant", "content": "{\n  \"description\": \"Implement the `randPoint` function to generate random points uniformly distributed within a circle, given its radius and center. A point on the circumference is considered inside the circle.\",\n  \"objective\": \"Design a solution to generate uniformly random points within a circle using mathematical techniques for random distribution in a 2D area.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Understand that the goal is to generate random points uniformly distributed within a circle with a given radius and center. The circle includes its boundary.\",\n    \"Step 2 - Uniform Distribution Insight\": \"Uniform random sampling in a circle cannot be achieved directly by generating x and y coordinates independently. Instead, use polar coordinates or rejection sampling.\",\n    \"Step 3 - Polar Coordinates Method\": \"Use polar coordinates to generate points: 1. Randomly choose an angle `theta` between [0, 2\\u03c0). 2. Randomly choose a radius `r` within [0, radius], weighted by the area factor `sqrt(random())` to ensure uniformity.\",\n    \"Step 4 - Cartesian Conversion\": \"Convert the polar coordinates into Cartesian coordinates using the formulas: x = x_center + r * cos(theta), y = y_center + r * sin(theta).\",\n    \"Step 5 - Code Implementation and Optimization\": \"Ensure the implementation efficiently generates points within the circle. Use built-in random number generators to get high precision.\",\n    \"Step 6 - Constraints Handling\": \"Handle constraints such as very large radius values and negative/positive coordinates for the center effectively.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"radius\": 1.0,\n        \"x_center\": 0.0,\n        \"y_center\": 0.0\n      },\n      \"output\": \"A point randomly chosen within a unit circle centered at the origin, such as [-0.02493, -0.38077].\"\n    },\n    {\n      \"input\": {\n        \"radius\": 5.0,\n        \"x_center\": 2.0,\n        \"y_center\": 3.0\n      },\n      \"output\": \"A point randomly chosen within a circle of radius 5 centered at (2, 3), such as [3.12345, 1.67890].\"\n    }\n  ],\n  \"constraints\": {\n    \"radius_range\": \"0 < radius <= 10^8\",\n    \"center_range\": \"-10^7 <= x_center, y_center <= 10^7\",\n    \"calls_limit\": \"At most 3 * 10^4 calls to `randPoint`.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"What alternative methods could you use to generate uniform points in a circle if polar coordinates were not available?\",\n    \"question_2\": \"How would you modify the solution to generate random points uniformly within an ellipse?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a string `s`, return the number of subsequences of `s` modulo 10^9 + 7."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s`, return the number of distinct non-empty subsequences of `s`. Since the answer may be very large, return it modulo 10^9 + 7.\",\n  \"objective\": \"Calculate the number of distinct subsequences of a string, ensuring that large numbers are handled by returning the result modulo 10^9 + 7.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understanding the Problem\": \"A subsequence is formed by deleting some (or none) characters from the original string while maintaining the relative order of the remaining characters. We need to count how many distinct non-empty subsequences can be formed from the string `s`.\",\n    \"Step 2 - Plan\": \"To calculate the number of distinct subsequences, dynamic programming (DP) is an effective approach. For each character in the string, we can track how many distinct subsequences exist up to that point, while considering the possibility of forming new subsequences by including or excluding each character.\",\n    \"Step 3 - Optimization\": \"A key challenge in this problem is handling repeated characters. If we encounter the same character again, the number of distinct subsequences that can be formed by including this character is influenced by the previous occurrence of that character. We can optimize this by storing the last occurrence of each character to avoid counting duplicate subsequences.\",\n    \"Step 4 - Constraints Consideration\": \"The input string can be as long as 2000 characters, so an O(n) solution using dynamic programming is necessary. This ensures that the solution can handle the largest possible input sizes efficiently while avoiding excessive time complexity.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"abc\"\n      },\n      \"output\": 7,\n      \"explanation\": \"The 7 distinct subsequences are: 'a', 'b', 'c', 'ab', 'ac', 'bc', and 'abc'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"aba\"\n      },\n      \"output\": 6,\n      \"explanation\": \"The 6 distinct subsequences are: 'a', 'b', 'ab', 'aa', 'ba', and 'aba'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"aaa\"\n      },\n      \"output\": 3,\n      \"explanation\": \"The 3 distinct subsequences are: 'a', 'aa', and 'aaa'.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length_range\": \"1 <= s.length <= 2000\",\n    \"character_set\": \"s consists of lowercase English letters.\"\n  },\n  \"follow_up\": \"How can you optimize the solution for even larger strings? Can you reduce the time complexity further by applying advanced techniques or dynamic programming optimizations?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Keep track of intervals from a data stream of numbers and return them."}, {"role": "assistant", "content": "{\n  \"description\": \"Manage a stream of integers as disjoint intervals, merging intervals when needed, and return the intervals efficiently.\",\n  \"objective\": \"Implement the `SummaryRanges` class to handle addition of numbers and summarization of intervals with optimal operations.\",\n  \"meta_prompt\": {\n    \"Step 1 - Data Structure Design\": \"Use a balanced data structure, such as a TreeSet or sorted list, to maintain intervals in sorted order by `start`.\",\n    \"Step 2 - Adding Numbers\": \"On adding a number, check for overlapping or adjacent intervals. Merge intervals if necessary or insert a new one.\",\n    \"Step 3 - Querying Intervals\": \"Return the current state of the intervals in sorted order with minimal computation overhead.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"actions\": [\n          \"SummaryRanges\",\n          \"addNum\",\n          \"getIntervals\",\n          \"addNum\",\n          \"getIntervals\",\n          \"addNum\",\n          \"getIntervals\",\n          \"addNum\",\n          \"getIntervals\",\n          \"addNum\",\n          \"getIntervals\"\n        ],\n        \"arguments\": [\n          [],\n          [\n            1\n          ],\n          [],\n          [\n            3\n          ],\n          [],\n          [\n            7\n          ],\n          [],\n          [\n            2\n          ],\n          [],\n          [\n            6\n          ],\n          []\n        ]\n      },\n      \"output\": [\n        null,\n        null,\n        [\n          [\n            1,\n            1\n          ]\n        ],\n        null,\n        [\n          [\n            1,\n            1\n          ],\n          [\n            3,\n            3\n          ]\n        ],\n        null,\n        [\n          [\n            1,\n            1\n          ],\n          [\n            3,\n            3\n          ],\n          [\n            7,\n            7\n          ]\n        ],\n        null,\n        [\n          [\n            1,\n            3\n          ],\n          [\n            7,\n            7\n          ]\n        ],\n        null,\n        [\n          [\n            1,\n            3\n          ],\n          [\n            6,\n            7\n          ]\n        ]\n      ]\n    }\n  ],\n  \"constraints\": {\n    \"value_range\": \"0 <= value <= 10^4\",\n    \"performance\": \"Handle at most 3 * 10^4 calls to `addNum` and `getIntervals` efficiently.\"\n  },\n  \"follow_up\": {\n    \"handling_large_streams\": \"Optimize for scenarios where the number of intervals is small compared to the total size of the stream.\",\n    \"balanced_structures\": \"Use a data structure that ensures `O(log n)` operations for insertions and merges, such as TreeMap or TreeSet.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find out how many unique candies Alice can eat if she can only eat half of her candies."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `candyType` representing types of candies Alice has, determine the maximum number of unique candy types she can eat while only consuming `n / 2` candies as advised by her doctor.\",\n  \"objective\": \"Maximize the number of unique candy types Alice can consume within the constraint of eating only half of her total candies.\",\n  \"meta_prompt\": {\n    \"Step 1 - Calculate Candy Limit\": \"Determine the maximum number of candies Alice is allowed to eat, which is `n / 2`.\",\n    \"Step 2 - Identify Unique Candy Types\": \"Use a hash set to collect all unique candy types from `candyType`. This will prevent duplicates and help find the total unique candy types.\",\n    \"Step 3 - Compare Limits\": \"Calculate the minimum between the number of unique types (from the set size) and the allowed candy limit (`n / 2`). This ensures Alice eats as many types as possible without exceeding her limit.\",\n    \"Final Check - Constraints Verification\": \"Confirm that the output meets the constraints, particularly that the result does not exceed `n / 2` and that only unique types are counted, in line with the input constraints of `2 <= n <= 10^4`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"candyType\": [\n          1,\n          1,\n          2,\n          2,\n          3,\n          3\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"With 6 candies total, Alice can eat only 3. Since there are 3 types, she can have one of each.\"\n    },\n    {\n      \"input\": {\n        \"candyType\": [\n          1,\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"Alice can eat 4 / 2 = 2 candies, and can choose any two unique types.\"\n    },\n    {\n      \"input\": {\n        \"candyType\": [\n          6,\n          6,\n          6,\n          6\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"All candies are the same type, so Alice can only eat one type even though she can eat 2 candies.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"n == candyType.length and is even\",\n    \"range\": \"-10^5 <= candyType[i] <= 10^5\"\n  },\n  \"follow_up\": \"Explore the implications of larger data ranges or variations with additional dietary restrictions (e.g., eating only even-numbered types).\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the longest substring where all characters occur at least `k` times."}, {"role": "assistant", "content": "{\n  \"title\": \"Longest Substring with Minimum Character Frequency\",\n  \"description\": \"Given a string `s` and an integer `k`, determine the length of the longest substring in which every character appears at least `k` times.\",\n  \"objective\": \"Efficiently calculate the longest substring that satisfies the character frequency requirement.\",\n  \"input\": {\n    \"name\": \"s\",\n    \"type\": \"string\",\n    \"description\": \"The input string consisting of only lowercase English letters.\",\n    \"constraints\": \"1 <= s.length <= 10^4\"\n  },\n  \"parameters\": {\n    \"name\": \"k\",\n    \"type\": \"integer\",\n    \"description\": \"The minimum frequency each character in the substring must have.\",\n    \"constraints\": \"1 <= k <= 10^5\"\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The length of the longest substring where each character appears at least `k` times.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"aaabb\",\n        \"k\": 3\n      },\n      \"output\": 3,\n      \"explanation\": \"The substring 'aaa' is the longest valid substring, as 'a' appears 3 times.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"ababbc\",\n        \"k\": 2\n      },\n      \"output\": 5,\n      \"explanation\": \"The substring 'ababb' is the longest valid substring, as 'a' appears 2 times and 'b' appears 3 times.\"\n    }\n  ],\n  \"hints\": [\n    \"Use a divide-and-conquer approach by splitting the string around characters that appear fewer than `k` times.\",\n    \"If all characters meet the frequency requirement, return the length of the string.\",\n    \"Recursively solve for substrings created after splitting the input.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Optimize for `O(n log n)` complexity using divide-and-conquer or `O(n)` for advanced sliding window approaches.\",\n    \"constraints\": \"Avoid recomputing character frequencies for overlapping substrings.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a binary tree has a root-to-leaf path with a given sum."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary tree and an integer `targetSum`, return `true` if the tree has a **root-to-leaf** path such that the sum of the node values along the path equals `targetSum`. A leaf is defined as a node with no children.\",\n  \"objective\": \"Design an algorithm to determine if a root-to-leaf path exists with the given target sum.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task requires traversing the tree to find a root-to-leaf path where the sum of node values equals `targetSum`.\",\n    \"Step 2 - Recursive Approach\": \"Implement a recursive function to check for a path by subtracting the node value from the target sum as the recursion progresses.\",\n    \"Step 3 - Iterative Approach\": \"Alternatively, use a stack to simulate depth-first traversal and track the remaining sum for each path.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as an empty tree, a single-node tree, or negative values in the tree.\",\n    \"Step 5 - Optimize\": \"Ensure the solution runs in O(n) time and uses O(h) space, where `h` is the height of the tree.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          5,\n          4,\n          8,\n          11,\n          null,\n          13,\n          4,\n          7,\n          2,\n          null,\n          null,\n          null,\n          1\n        ],\n        \"targetSum\": 22\n      },\n      \"output\": true,\n      \"explanation\": \"The path 5 -> 4 -> 11 -> 2 has a sum of 22.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3\n        ],\n        \"targetSum\": 5\n      },\n      \"output\": false,\n      \"explanation\": \"There is no root-to-leaf path with a sum of 5.\"\n    },\n    {\n      \"input\": {\n        \"root\": [],\n        \"targetSum\": 0\n      },\n      \"output\": false,\n      \"explanation\": \"An empty tree has no paths.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 5000\",\n    \"node_values\": \"-1000 <= Node.val <= 1000\",\n    \"target_sum\": \"-1000 <= targetSum <= 1000\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given an array nums and an integer k. You can change the elements of the array by adding a value from [-k, k] to each element. The goal is to find the minimum score after applying these operations."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an integer array nums and an integer k. In one operation, you can choose any index i where 0 <= i < nums.length and change nums[i] to nums[i] + x, where x is an integer from the range [-k, k]. You can apply this operation at most once for each index. The goal is to minimize the score of the array nums, where the score is the difference between the maximum and minimum values in the array after performing the operation. Your task is to return the minimum possible score of the array after these operations.\",\n  \"objective\": \"Design an efficient algorithm that minimizes the score of nums after applying the operation at most once to each element, aiming for an optimal solution in terms of time complexity, ideally better than O(n^2).\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the score of the array is the difference between its maximum and minimum elements. You are allowed to change each element by adding a value in the range [-k, k] to minimize this difference.\",\n    \"Step 2 - Initial Approach\": \"Consider a brute force approach where you test all possible values for each element. However, this would likely lead to an inefficient O(n^2) solution. Instead, think of ways to minimize the maximum and maximum difference efficiently with one pass through the array.\",\n    \"Step 3 - Efficient Solution\": \"The optimal solution involves adjusting the minimum and maximum values using the range [-k, k]. By considering how changing the extremes of the array impacts the score, you can compute the minimum possible score in O(n) time.\",\n    \"Step 4 - Output Format\": \"Return the minimum possible score as a single integer, ensuring the solution is efficient and handles edge cases such as arrays with only one element or large values for nums[i] and k.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure that the solution achieves O(n) time complexity by iterating over the array only once. Handle edge cases such as arrays with only one element or when k is 0.\",\n    \"Final Check - Constraints Verification\": \"Verify that your code runs within the problem's constraints, where the length of nums is between 1 and 10^4, and the values of nums[i] and k are between 0 and 10^4.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1\n        ],\n        \"k\": 0\n      },\n      \"output\": 0,\n      \"explanation\": \"Since there is only one element, the score is max(nums) - min(nums) = 1 - 1 = 0.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          10\n        ],\n        \"k\": 2\n      },\n      \"output\": 6,\n      \"explanation\": \"By changing nums[0] to 2 and nums[1] to 8, the score becomes max(nums) - min(nums) = 8 - 2 = 6.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          3,\n          6\n        ],\n        \"k\": 3\n      },\n      \"output\": 0,\n      \"explanation\": \"By changing all elements to 4, the score becomes max(nums) - min(nums) = 4 - 4 = 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 10^4\",\n    \"nums_elements_range\": \"0 <= nums[i] <= 10^4\",\n    \"k_range\": \"0 <= k <= 10^4\"\n  },\n  \"follow_up\": \"Can you develop an algorithm that minimizes the score in O(n) time complexity while maintaining minimal space usage and avoiding unnecessary calculations?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Evaluate a Lisp expression."}, {"role": "assistant", "content": "{\n  \"description\": \"Evaluate a Lisp-like expression to return an integer value by implementing recursive parsing and evaluation of nested expressions.\",\n  \"objective\": \"Parse and evaluate the expression recursively, handling the nested scopes and operations for 'let', 'add', and 'mult' while maintaining variable scope resolution.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Define a function `evaluate` that processes the expression string recursively based on the type of expression ('let', 'add', 'mult', or variable).\",\n    \"Step 2\": \"Parse the expression by identifying and separating tokens, considering nested parentheses. For nested expressions, recursively call `evaluate`.\",\n    \"Step 3\": \"Handle the `let` expression by updating the scope with variable assignments in sequence and evaluating the final expression within the updated scope.\",\n    \"Step 4\": \"Handle the `add` expression by recursively evaluating its two operands and returning their sum.\",\n    \"Step 5\": \"Handle the `mult` expression by recursively evaluating its two operands and returning their product.\",\n    \"Step 6\": \"Resolve variables by checking the current and outer scopes for their assigned values.\",\n    \"Step 7\": \"Return the evaluated result for the given expression.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"expression\": \"(let x 2 (mult x (let x 3 y 4 (add x y))))\"\n      },\n      \"output\": 14,\n      \"explanation\": [\n        \"In the innermost 'let', x = 3 and y = 4. The 'add x y' evaluates to 7.\",\n        \"Back in the outer scope, x = 2 and the 'mult x 7' evaluates to 14.\"\n      ]\n    },\n    {\n      \"input\": {\n        \"expression\": \"(let x 3 x 2 x)\"\n      },\n      \"output\": 2,\n      \"explanation\": [\n        \"Sequential assignments make x = 3, then x = 2. The value of x is 2.\"\n      ]\n    },\n    {\n      \"input\": {\n        \"expression\": \"(let x 1 y 2 x (add x y) (add x y))\"\n      },\n      \"output\": 5,\n      \"explanation\": [\n        \"The first 'add x y' evaluates to 3 and assigns 3 to x.\",\n        \"The second 'add x y' evaluates to 3 (x) + 2 (y) = 5.\"\n      ]\n    }\n  ],\n  \"constraints\": {\n    \"expression_length\": \"1 <= expression.length <= 2000\",\n    \"expression_format\": \"No leading/trailing spaces; tokens are separated by a single space.\",\n    \"validity\": \"The expression is guaranteed to be valid and evaluate to a 32-bit integer.\"\n  },\n  \"follow_up\": \"Analyze the time complexity of parsing and evaluating nested expressions. Discuss optimizations for large nested expressions or deeply nested scopes.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Generate all subsets of a given array of unique numbers."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums` with unique elements, generate all possible subsets (the power set) of `nums`. The result should not contain duplicate subsets, and the subsets can be returned in any order.\",\n  \"objective\": \"Design an efficient backtracking algorithm to generate all subsets of `nums`, ensuring no duplicates and maintaining unique combinations.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves generating all subsets of `nums`, which includes subsets of all sizes from 0 (empty set) to the size of `nums`.\",\n    \"Step 2 - Recursive Backtracking\": \"Use a recursive backtracking approach to build subsets incrementally. At each step, decide whether to include or exclude the current element.\",\n    \"Step 3 - Iterative Approach\": \"Alternatively, use an iterative approach to build subsets by adding each element to all existing subsets in the current solution.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution handles constraints efficiently for `1 <= nums.length <= 10`, where the number of subsets can be up to `2^nums.length`.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider edge cases such as an empty array, an array with one element, or an array with negative numbers.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": [\n        [],\n        [\n          1\n        ],\n        [\n          2\n        ],\n        [\n          1,\n          2\n        ],\n        [\n          3\n        ],\n        [\n          1,\n          3\n        ],\n        [\n          2,\n          3\n        ],\n        [\n          1,\n          2,\n          3\n        ]\n      ],\n      \"explanation\": \"All 2^3 = 8 subsets of [1, 2, 3] are generated.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0\n        ]\n      },\n      \"output\": [\n        [],\n        [\n          0\n        ]\n      ],\n      \"explanation\": \"The power set of [0] contains two subsets: [] and [0].\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10\",\n    \"valid_values\": \"-10 <= nums[i] <= 10\",\n    \"unique_elements\": \"All elements of `nums` are unique.\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm to handle scenarios where duplicate subsets might be generated (e.g., when `nums` contains duplicate elements)?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given two soups A and B with `n` milliliters each, calculate the probability that soup A will become empty first, plus half the probability that both soups become empty at the same time."}, {"role": "assistant", "content": "{\n  \"description\": \"We have two types of soup (A and B) with `n` milliliters of each. We can perform one of four operations each turn with equal probability, where each operation reduces the amount of soup in A and B. We are tasked with calculating the probability that soup A becomes empty first, plus half the probability that both soups A and B become empty at the same time.\",\n  \"objective\": \"Design a function to calculate the probability that soup A will become empty first, plus half the probability that both soups A and B become empty at the same time.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We are given two types of soup (A and B) with an initial quantity of `n` milliliters each. Each turn, we select one of four operations randomly, which decrease the amounts of soup in A and B in different proportions. The goal is to compute the probability that soup A empties first, and half the probability that both soups A and B empty at the same time.\",\n    \"Step 2 - Key Concepts\": \"This is a probability problem involving random events and state transitions. The operations each affect the amount of soup A and B, and our goal is to compute the final state of the system (whether A empties first, or both empty at the same time). The problem requires dynamic programming or recursion to track the possible states of the soups as they are reduced.\",\n    \"Step 3 - Approach\": \"We need to recursively simulate the operations, maintaining the states of soup A and B. At each step, the probability of transitioning to a new state depends on the current state and the available operations. The base cases are when soup A is empty, or both soups are empty simultaneously.\",\n    \"Step 4 - Solution Strategy\": \"Use dynamic programming (DP) or memoization to compute the probabilities for all possible states. Define a recursive function that returns the probability of soup A emptying first, plus half the probability of both soups emptying simultaneously, given the current amounts of A and B.\",\n    \"Step 5 - Optimizations\": \"Memoization will help avoid redundant computations for the same states. We can store the probability of emptying A or both soups at each state and reuse these values in recursive calls.\",\n    \"Step 6 - Final Solution\": \"The solution will define a recursive function with memoization that computes the desired probability based on the available operations and the current amounts of A and B.\",\n    \"Step 7 - Edge Case Handling\": \"Handle edge cases where `n = 0`, meaning there is no soup to begin with. Additionally, ensure that probabilities are correctly calculated for small `n` values where fewer operations can be performed.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 50\n      },\n      \"output\": 0.625,\n      \"explanation\": \"If we choose the first two operations, A will become empty first. For the third operation, A and B will become empty at the same time. For the fourth operation, B will become empty first. The total probability of A becoming empty first plus half the probability of both becoming empty at the same time is 0.625.\"\n    },\n    {\n      \"input\": {\n        \"n\": 100\n      },\n      \"output\": 0.71875,\n      \"explanation\": \"For `n = 100`, the probabilities of A becoming empty first or both soups becoming empty at the same time are calculated based on the available operations. The result is 0.71875.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"0 <= n <= 109\"\n  },\n  \"follow_up\": \"How would you approach this problem if there were additional operations that could also be chosen, or if the probabilities of the operations were not equal?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the smallest subarray with a sum greater than or equal to the target."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the length of the smallest contiguous subarray whose sum is greater than or equal to the target.\",\n  \"objective\": \"Develop an efficient algorithm to find the smallest subarray meeting the sum condition, optimizing for linear time complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Recognize the goal of finding the smallest contiguous subarray meeting a sum condition.\",\n    \"Step 2 - Sliding Window Approach\": \"Use a sliding window to dynamically adjust the range of the subarray while maintaining the sum condition.\",\n    \"Step 3 - Optimization\": \"Ensure the algorithm runs in O(n) by moving the window efficiently.\",\n    \"Step 4 - Handle Edge Cases\": \"Account for cases where the target cannot be met or the array has a single element.\",\n    \"Step 5 - Alternative Approach\": \"Explore an O(n log n) solution using binary search for practice with advanced methods.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"target\": 7,\n        \"nums\": [\n          2,\n          3,\n          1,\n          2,\n          4,\n          3\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The subarray [4, 3] has the smallest length with a sum >= 7.\"\n    },\n    {\n      \"input\": {\n        \"target\": 4,\n        \"nums\": [\n          1,\n          4,\n          4\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The subarray [4] meets the condition.\"\n    },\n    {\n      \"input\": {\n        \"target\": 11,\n        \"nums\": [\n          1,\n          1,\n          1,\n          1,\n          1,\n          1,\n          1\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"No subarray meets the target sum.\"\n    }\n  ],\n  \"constraints\": {\n    \"target\": \"1 <= target <= 10^9\",\n    \"nums_length\": \"1 <= nums.length <= 10^5\",\n    \"values\": \"1 <= nums[i] <= 10^4\"\n  },\n  \"follow_up\": \"Can you implement a solution using O(n log n) time complexity with binary search?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Format a list of words into lines of a given width with proper justification."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of strings `words` and an integer `maxWidth`, format the text such that each line is fully justified with exactly `maxWidth` characters. Use a greedy approach to fit as many words as possible into each line, distribute spaces evenly, and handle the last line with left justification.\",\n  \"objective\": \"Design an efficient algorithm to format text into justified lines while adhering to the constraints for space distribution and line justification.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task requires grouping words into lines, ensuring each line is `maxWidth` characters long. Spaces between words should be evenly distributed, with extra spaces placed towards the left.\",\n    \"Step 2 - Greedy Word Packing\": \"Iterate through the words and pack as many as possible into a line without exceeding `maxWidth`. Keep track of the total length of words and spaces required for each line.\",\n    \"Step 3 - Space Distribution\": \"Distribute spaces between words for fully justified lines. For the last line or lines with a single word, left-justify the text and pad with spaces at the end.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the algorithm handles constraints such as `1 <= words.length <= 300` and `1 <= maxWidth <= 100` efficiently.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider edge cases such as a single word per line, very short `maxWidth`, or `words` where all words fit perfectly without extra spaces.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"words\": [\n          \"This\",\n          \"is\",\n          \"an\",\n          \"example\",\n          \"of\",\n          \"text\",\n          \"justification.\"\n        ],\n        \"maxWidth\": 16\n      },\n      \"output\": [\n        \"This    is    an\",\n        \"example  of text\",\n        \"justification.  \"\n      ],\n      \"explanation\": \"Spaces are evenly distributed between words, with extra spaces added to the left where necessary.\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"What\",\n          \"must\",\n          \"be\",\n          \"acknowledgment\",\n          \"shall\",\n          \"be\"\n        ],\n        \"maxWidth\": 16\n      },\n      \"output\": [\n        \"What   must   be\",\n        \"acknowledgment  \",\n        \"shall be        \"\n      ],\n      \"explanation\": \"The last line is left-justified, and spaces are added to ensure a length of `maxWidth`.\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"Science\",\n          \"is\",\n          \"what\",\n          \"we\",\n          \"understand\",\n          \"well\",\n          \"enough\",\n          \"to\",\n          \"explain\",\n          \"to\",\n          \"a\",\n          \"computer.\",\n          \"Art\",\n          \"is\",\n          \"everything\",\n          \"else\",\n          \"we\",\n          \"do\"\n        ],\n        \"maxWidth\": 20\n      },\n      \"output\": [\n        \"Science  is  what we\",\n        \"understand      well\",\n        \"enough to explain to\",\n        \"a  computer.  Art is\",\n        \"everything  else  we\",\n        \"do                  \"\n      ],\n      \"explanation\": \"Each line is fully justified except for the last line, which is left-justified.\"\n    }\n  ],\n  \"constraints\": {\n    \"words_length\": \"1 <= words.length <= 300\",\n    \"word_length\": \"1 <= words[i].length <= 20\",\n    \"max_width\": \"1 <= maxWidth <= 100\",\n    \"valid_words\": \"Each word length does not exceed `maxWidth`.\"\n  },\n  \"follow_up\": \"Can you modify the algorithm to justify text for variable-width characters, where each character has a specific width?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find a number whose digits multiply to the given number."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a positive integer `num`, determine the smallest positive integer `x` such that the product of `x`'s digits equals `num`. Return 0 if no such integer exists or if the result exceeds the 32-bit signed integer range.\",\n  \"objective\": \"Factorize `num` into digits (from 9 to 2) to construct the smallest possible integer, ensuring the result is within valid constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Handle Base Case\": \"If `num` is 1, return 1 immediately since 1 multiplied by itself is 1.\",\n    \"Step 2 - Factorize Using Digits\": \"Iterate from 9 to 2 and divide `num` by the current digit as many times as it is a factor. Collect these digits in reverse order.\",\n    \"Step 3 - Validate Result\": \"If the final `num` after factorization is greater than 1, return 0, as it cannot be fully factorized using digits 2-9.\",\n    \"Step 4 - Construct Integer\": \"Combine the collected digits into an integer. If the resulting number exceeds the 32-bit signed integer range, return 0.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"num\": 48\n      },\n      \"output\": 68,\n      \"explanation\": \"The factors of 48 are decomposed into digits 6 and 8. Combining them in ascending order gives 68.\"\n    },\n    {\n      \"input\": {\n        \"num\": 15\n      },\n      \"output\": 35,\n      \"explanation\": \"The factors of 15 are decomposed into digits 3 and 5. Combining them gives 35.\"\n    },\n    {\n      \"input\": {\n        \"num\": 7\n      },\n      \"output\": 7,\n      \"explanation\": \"7 is already a single-digit number, so it remains unchanged.\"\n    }\n  ],\n  \"constraints\": {\n    \"range\": \"1 <= num <= 2^31 - 1\",\n    \"output_limit\": \"The result must fit within a 32-bit signed integer.\"\n  },\n  \"follow_up\": \"Explore optimizations for cases where `num` is extremely large or when divisors are limited, and discuss the implications of handling large factorization results.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create a data structure to insert, remove, and get random elements with duplicates allowed."}, {"role": "assistant", "content": "{\n  \"title\": \"Implement RandomizedCollection\",\n  \"description\": \"Design a `RandomizedCollection` to handle inserting, removing, and retrieving random elements with support for duplicates.\",\n  \"objective\": \"Implement `insert`, `remove`, and `getRandom` methods with average time complexity of `O(1)`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Data Structures\": {\n      \"List\": \"Use a list to store the elements in the collection for random access.\",\n      \"HashMap\": \"Maintain a hashmap to store each element's value as the key and a set of indices where the value appears in the list.\"\n    },\n    \"Step 2 - Insert Operation\": {\n      \"Check Presence\": \"If the value is not in the hashmap, return `true`.\",\n      \"Update Structures\": \"Add the value to the list and store its index in the hashmap.\"\n    },\n    \"Step 3 - Remove Operation\": {\n      \"Check Presence\": \"If the value is not in the hashmap, return `false`.\",\n      \"Efficient Deletion\": \"Replace the value to be removed with the last element in the list. Update indices in the hashmap, remove the last element, and adjust the list.\"\n    },\n    \"Step 4 - Random Access\": {\n      \"Random Index\": \"Generate a random index and retrieve the corresponding element from the list.\",\n      \"Probability\": \"Ensure each element's probability of being returned is proportional to its frequency in the list.\"\n    }\n  },\n  \"input\": {\n    \"methods\": [\n      \"RandomizedCollection\",\n      \"insert\",\n      \"remove\",\n      \"getRandom\"\n    ],\n    \"arguments\": [\n      [],\n      [\n        \"int val\"\n      ],\n      [\n        \"int val\"\n      ],\n      []\n    ]\n  },\n  \"output\": {\n    \"type\": \"array\",\n    \"description\": \"The output for each method, with `null` for void operations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"methods\": [\n          \"RandomizedCollection\",\n          \"insert\",\n          \"insert\",\n          \"insert\",\n          \"getRandom\",\n          \"remove\",\n          \"getRandom\"\n        ],\n        \"arguments\": [\n          [],\n          [\n            1\n          ],\n          [\n            1\n          ],\n          [\n            2\n          ],\n          [],\n          [\n            1\n          ],\n          []\n        ]\n      },\n      \"output\": [\n        null,\n        true,\n        false,\n        true,\n        2,\n        true,\n        1\n      ],\n      \"explanation\": [\n        \"Initialize the collection.\",\n        \"`insert(1)` inserts 1 and returns `true` since it was not present.\",\n        \"`insert(1)` inserts another 1 and returns `false` as 1 was already present.\",\n        \"`insert(2)` inserts 2 and returns `true`.\",\n        \"`getRandom()` returns 1 with probability 2/3 or 2 with probability 1/3.\",\n        \"`remove(1)` removes one instance of 1 and returns `true`.\",\n        \"`getRandom()` returns 1 or 2 with equal probability.\"\n      ]\n    }\n  ],\n  \"hints\": [\n    \"Use a list for efficient random access.\",\n    \"Use a hashmap to track indices for fast insertions and deletions.\",\n    \"When removing, swap the target value with the last value for efficiency.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Ensure `O(1)` average time complexity for all operations.\",\n    \"constraints\": \"Avoid redundant iterations or duplicate data structures.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the `k` closest integers to `x` in a sorted array."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the `k` closest integers to `x` in a sorted integer array `arr` and return them sorted in ascending order.\",\n  \"objective\": \"Use binary search to efficiently find the leftmost bound of the sliding window containing the `k` closest elements to `x`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Binary Search\": \"Set left to 0 and right to arr.length - k. The left bound of the k-element window must be in this range.\",\n    \"Step 2 - Perform Binary Search\": \"While left < right, calculate mid = (left + right) / 2. Compare arr[mid] and arr[mid + k] with respect to their distance to x. If arr[mid] is closer, move the right pointer to mid. Otherwise, move the left pointer to mid + 1.\",\n    \"Step 3 - Extract Closest Elements\": \"After the binary search, left will point to the start of the k closest elements. Extract the subarray arr[left:left + k].\",\n    \"Step 4 - Return Result\": \"Return the extracted subarray, which is already sorted due to the input array being sorted.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"arr\": [\n          1,\n          2,\n          3,\n          4,\n          5\n        ],\n        \"k\": 4,\n        \"x\": 3\n      },\n      \"output\": [\n        1,\n        2,\n        3,\n        4\n      ],\n      \"explanation\": \"The 4 closest elements to 3 are [1, 2, 3, 4], which are already sorted.\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          1,\n          2,\n          3,\n          4,\n          5\n        ],\n        \"k\": 4,\n        \"x\": -1\n      },\n      \"output\": [\n        1,\n        2,\n        3,\n        4\n      ],\n      \"explanation\": \"All elements are closer to -1 than the furthest elements, so [1, 2, 3, 4] is the result.\"\n    }\n  ],\n  \"constraints\": {\n    \"k_range\": \"1 <= k <= arr.length\",\n    \"array_length\": \"1 <= arr.length <= 10^4\",\n    \"value_range\": \"-10^4 <= arr[i], x <= 10^4\",\n    \"array_property\": \"arr is sorted in ascending order.\"\n  },\n  \"follow_up\": \"Discuss the time complexity of the binary search approach and compare it with a brute-force approach for finding the k closest elements.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a 2D integer array `matrix`, return the transpose of the matrix."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a 2D integer array `matrix`. The task is to return the **transpose** of the matrix. The transpose of a matrix is formed by flipping the matrix over its main diagonal, which results in switching the row and column indices of the matrix.\",\n  \"objective\": \"The goal is to transform the given matrix such that the row and column positions are interchanged, creating the transpose of the original matrix.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The task requires transforming a matrix by swapping its rows and columns. For each element at position `(i, j)` in the original matrix, it should be moved to position `(j, i)` in the result.\",\n    \"Step 2 - Approach\": \"To find the transpose of a matrix, iterate over each element of the original matrix and place it in the corresponding transposed position in the result matrix. If the original matrix has dimensions `m x n`, the transposed matrix will have dimensions `n x m`.\",\n    \"Step 3 - Output Format\": \"Return the transposed matrix, which will have swapped rows and columns compared to the input matrix.\",\n    \"Step 4 - Code Efficiency and Edge Cases\": \"The solution must handle matrices of varying sizes up to the constraints `1 <= m, n <= 1000`. The time complexity of the solution should be O(m * n), as each element of the matrix must be accessed and moved to a new position.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            1,\n            2,\n            3\n          ],\n          [\n            4,\n            5,\n            6\n          ],\n          [\n            7,\n            8,\n            9\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          1,\n          4,\n          7\n        ],\n        [\n          2,\n          5,\n          8\n        ],\n        [\n          3,\n          6,\n          9\n        ]\n      ],\n      \"explanation\": \"The input matrix is 3x3, and its transpose is obtained by flipping it over the main diagonal, resulting in a 3x3 matrix.\"\n    },\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            1,\n            2,\n            3\n          ],\n          [\n            4,\n            5,\n            6\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          1,\n          4\n        ],\n        [\n          2,\n          5\n        ],\n        [\n          3,\n          6\n        ]\n      ],\n      \"explanation\": \"The input matrix is 2x3, and its transpose is obtained by swapping rows and columns, resulting in a 3x2 matrix.\"\n    }\n  ],\n  \"constraints\": {\n    \"m_range\": \"1 <= m <= 1000\",\n    \"n_range\": \"1 <= n <= 1000\",\n    \"matrix_size\": \"1 <= m * n <= 10^5\",\n    \"value_range\": \"-10^9 <= matrix[i][j] <= 10^9\"\n  },\n  \"follow_up\": \"What would be the optimal approach to transpose a sparse matrix?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Perform level order traversal on a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary tree, return the level order traversal of its nodes' values (i.e., traverse the tree level by level from left to right).\",\n  \"objective\": \"Design an algorithm to perform a level order traversal of a binary tree.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that level order traversal visits nodes level by level from left to right.\",\n    \"Step 2 - Use a Queue\": \"Use a queue to process nodes level by level, storing the nodes of the next level as you process the current level.\",\n    \"Step 3 - Group Nodes by Level\": \"Collect the values of nodes at each level and store them in a list of lists.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as an empty tree or a single-node tree.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(n) time and O(n) space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          9,\n          20,\n          null,\n          null,\n          15,\n          7\n        ]\n      },\n      \"output\": [\n        [\n          3\n        ],\n        [\n          9,\n          20\n        ],\n        [\n          15,\n          7\n        ]\n      ],\n      \"explanation\": \"The tree's nodes are grouped level by level: [3], then [9, 20], and finally [15, 7].\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1\n        ]\n      },\n      \"output\": [\n        [\n          1\n        ]\n      ],\n      \"explanation\": \"A single-node tree has only one level.\"\n    },\n    {\n      \"input\": {\n        \"root\": []\n      },\n      \"output\": [],\n      \"explanation\": \"An empty tree results in an empty list.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 2000\",\n    \"node_values\": \"-1000 <= Node.val <= 1000\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Distribute candies to children based on ratings."}, {"role": "assistant", "content": "{\n  \"description\": \"There are `n` children standing in a line, each with a rating value given in the array `ratings`. You must distribute candies to the children such that each child gets at least one candy, and children with higher ratings get more candies than their neighbors. Return the minimum number of candies needed.\",\n  \"objective\": \"Design an efficient algorithm to compute the minimum candies required while satisfying the constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the problem involves a two-pass approach: one forward and one backward to satisfy the conditions.\",\n    \"Step 2 - Forward Pass\": \"Iterate left to right, ensuring each child gets more candies than their left neighbor if their rating is higher.\",\n    \"Step 3 - Backward Pass\": \"Iterate right to left, ensuring each child gets more candies than their right neighbor if their rating is higher.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as all children having the same rating or a single child.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(n) time and O(n) space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"ratings\": [\n          1,\n          0,\n          2\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"Allocate candies as [2, 1, 2] for a total of 5.\"\n    },\n    {\n      \"input\": {\n        \"ratings\": [\n          1,\n          2,\n          2\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"Allocate candies as [1, 2, 1] for a total of 4.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= n <= 2 * 10^4\",\n    \"rating_values\": \"0 <= ratings[i] <= 2 * 10^4\"\n  },\n  \"follow_up\": \"Can you reduce the space complexity to O(1) while maintaining O(n) time complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Wrap parts of a string with bold tags."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s` and an array of strings `words`, wrap substrings of `s` that match any word in `words` with bold tags `<b>` and `</b>`. Overlapping or consecutive substrings should be merged into a single bolded section.\",\n  \"objective\": \"Efficiently identify and wrap all substrings of `s` that match words in `words` using bold tags while ensuring overlapping and consecutive substrings are merged.\",\n  \"meta_prompt\": {\n    \"Step 1 - Mark Bold Ranges\": \"Initialize a boolean array `bold` of size `s.length`. For each word in `words`, mark the indices in `bold` as true where the word appears in `s`.\",\n    \"Step 2 - Iterate Over `s`\": \"Traverse the string `s` and build the result string `ans`. Insert `<b>` when entering a bold region and `</b>` when exiting it.\",\n    \"Step 3 - Handle Edge Cases\": \"Ensure consecutive or overlapping bold regions are merged seamlessly by checking adjacent indices in the `bold` array.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"abcxyz123\",\n        \"words\": [\n          \"abc\",\n          \"123\"\n        ]\n      },\n      \"output\": \"**abc**xyz**123**\",\n      \"explanation\": \"The substrings 'abc' and '123' are wrapped in bold tags, with no overlap or consecutive regions.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"aaabbb\",\n        \"words\": [\n          \"aa\",\n          \"b\"\n        ]\n      },\n      \"output\": \"**aaabbb**\",\n      \"explanation\": \"The substrings 'aa' and 'b' overlap and are merged into a single bold region.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 1000\",\n    \"words_length\": \"0 <= words.length <= 100\",\n    \"word_length\": \"1 <= words[i].length <= 1000\"\n  },\n  \"follow_up\": \"Optimize the solution for cases with very large `words` arrays or overlapping word matches by using Trie-based matching algorithms.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the top `k` most frequent words from a list of words, sorted by frequency and lexicographically."}, {"role": "assistant", "content": "{\n  \"description\": \"Identify the top `k` most frequent words from an array of strings, sorted by frequency in descending order and lexicographically for ties.\",\n  \"objective\": \"Use a min-heap to maintain the top `k` most frequent words efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Count Frequencies\": \"Use a `Counter` or a dictionary to calculate the frequency of each word in the input array `words`.\",\n    \"Step 2 - Build a Min-Heap\": \"Iterate through the frequency dictionary and use a min-heap of size `k` to store words along with their frequencies. Use a tuple where the frequency is negated for reverse ordering and the word is stored lexicographically.\",\n    \"Step 3 - Handle Ties\": \"Ensure that words with the same frequency are compared lexicographically when added to the heap.\",\n    \"Step 4 - Extract Results\": \"Extract all elements from the heap and reverse them to get the correct order, as the smallest elements in the heap represent the largest elements in the desired order.\",\n    \"Step 5 - Return Results\": \"Return the `k` words sorted by frequency and lexicographical order as the final output.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"words\": [\n          \"i\",\n          \"love\",\n          \"leetcode\",\n          \"i\",\n          \"love\",\n          \"coding\"\n        ],\n        \"k\": 2\n      },\n      \"output\": [\n        \"i\",\n        \"love\"\n      ],\n      \"explanation\": \"The words 'i' and 'love' appear most frequently (2 times each), and 'i' comes before 'love' lexicographically.\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"the\",\n          \"day\",\n          \"is\",\n          \"sunny\",\n          \"the\",\n          \"the\",\n          \"the\",\n          \"sunny\",\n          \"is\",\n          \"is\"\n        ],\n        \"k\": 4\n      },\n      \"output\": [\n        \"the\",\n        \"is\",\n        \"sunny\",\n        \"day\"\n      ],\n      \"explanation\": \"The words 'the', 'is', 'sunny', and 'day' have frequencies of 4, 3, 2, and 1, respectively.\"\n    }\n  ],\n  \"constraints\": {\n    \"word_count\": \"1 <= words.length <= 500\",\n    \"word_length\": \"1 <= words[i].length <= 10\",\n    \"character_set\": \"All words consist of lowercase English letters.\",\n    \"k_range\": \"1 <= k <= The number of unique words\"\n  },\n  \"follow_up\": \"Discuss how the algorithm achieves O(n log(k)) time complexity by using a heap of size `k`, and analyze the space complexity of the heap and frequency dictionary.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Construct a binary tree from a string representation where integers are followed by pairs of parentheses for child subtrees. Return the root node of the constructed tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string representation of a binary tree, construct the binary tree and return the root node. The string represents a tree where each integer value is followed by zero, one, or two pairs of parentheses. The integer represents the node\\u2019s value, and each pair of parentheses contains a child subtree. Start by constructing the left child node, if it exists.\",\n  \"objective\": \"Use an iterative stack-based approach to build the tree from the string by parsing integers and managing child nodes based on parentheses structure.\",\n  \"meta_prompt\": {\n    \"Step 1 - Parse Root Node\": \"Define a helper function `getNumber` to extract the integer value at the current index (including any negative sign). Create the root node with this value, initialize a stack to manage nodes, and push the root node onto it.\",\n    \"Step 2 - Stack-Based Child Management\": \"Process the string using a stack to manage node states. For each node in the stack, determine whether it\\u2019s at a NOT_STARTED, LEFT_DONE, or RIGHT_DONE stage based on its children. Begin with NOT_STARTED.\",\n    \"Step 3 - Process Left Child\": \"If the node is in the NOT_STARTED state and the next character is an opening parenthesis '(', create a left child, set it as the current node's left child, and push the node back with a LEFT_DONE state.\",\n    \"Step 4 - Process Right Child\": \"If the node is in the LEFT_DONE state and the next character is '(', create a right child, set it as the current node's right child, and push the node back with a RIGHT_DONE state.\",\n    \"Step 5 - Finalize Nodes and Subtrees\": \"If the character is a closing parenthesis ')', pop the top node from the stack since its subtree is complete. Continue parsing until all characters are processed and the stack is empty.\",\n    \"Final Check - Constraints Verification\": \"Ensure that each character in the input string is processed only once, resulting in an O(n) time complexity for string traversal and tree construction. The stack-based approach also limits the space complexity to O(n) for large trees with deep nesting.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"4(2(3)(1))(6(5))\"\n      },\n      \"output\": [\n        4,\n        2,\n        6,\n        3,\n        1,\n        5\n      ],\n      \"explanation\": \"The string represents a tree with root 4, left child subtree '2(3)(1)', and right child subtree '6(5)'. The final tree is [4,2,6,3,1,5].\"\n    },\n    {\n      \"input\": {\n        \"s\": \"-4(2(3)(1))(6(5)(7))\"\n      },\n      \"output\": [\n        -4,\n        2,\n        6,\n        3,\n        1,\n        5,\n        7\n      ],\n      \"explanation\": \"The string represents a tree with root -4, left subtree '2(3)(1)', and right subtree '6(5)(7)'. The final tree is [-4,2,6,3,1,5,7].\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"0 <= s.length <= 3 * 10^4\",\n    \"valid_characters\": \"s consists of digits, '(', ')', and '-' only.\"\n  },\n  \"follow_up\": \"Can you optimize for cases where the tree is very deep, potentially requiring more memory-efficient parsing and stack management?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the numbers that are in both arrays. Return only one of each."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two integer arrays `nums1` and `nums2`, find their intersection. Return an array containing unique elements that are present in both arrays. The result may be returned in any order.\",\n  \"objective\": \"Design an efficient solution to compute the intersection of two arrays, ensuring that duplicate values do not appear in the output.\",\n  \"meta_prompt\": {\n    \"Step 1 - Identify Common Elements\": \"Use a set to find the unique elements in `nums1` and `nums2`. Find their intersection.\",\n    \"Step 2 - Ensure Uniqueness\": \"Return only unique elements from the intersection.\",\n    \"Step 3 - Optimize\": \"Aim for time and space efficiency using hash sets.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums1\": [\n          1,\n          2,\n          2,\n          1\n        ],\n        \"nums2\": [\n          2,\n          2\n        ]\n      },\n      \"output\": [\n        2\n      ],\n      \"explanation\": \"The only unique element common to both arrays is 2.\"\n    },\n    {\n      \"input\": {\n        \"nums1\": [\n          4,\n          9,\n          5\n        ],\n        \"nums2\": [\n          9,\n          4,\n          9,\n          8,\n          4\n        ]\n      },\n      \"output\": [\n        9,\n        4\n      ],\n      \"explanation\": \"The unique elements common to both arrays are 9 and 4.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_lengths\": \"1 <= nums1.length, nums2.length <= 1000\",\n    \"element_values\": \"0 <= nums1[i], nums2[i] <= 1000\",\n    \"output_format\": \"Result may be returned in any order.\"\n  },\n  \"follow_up\": \"Can you reduce the space complexity of the solution? What if one array is significantly larger than the other?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given a deck of cards. Reorder the deck so that the cards reveal in increasing order."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a deck of unique integer cards, represented as an array. The cards are initially face down, and you perform a series of operations to reveal the cards in increasing order. The task is to reorder the deck such that when revealed in the specified pattern, the cards appear in increasing order. Specifically, you need to find an ordering of the deck that would allow the cards to be revealed in ascending order by performing the steps described below.\",\n  \"objective\": \"Design an algorithm to reorder the deck such that revealing the cards in the described sequence results in an increasing order. The process consists of revealing the top card, moving the next card to the bottom, and repeating until all cards are revealed.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Given a deck of unique cards, the goal is to find an arrangement of the cards such that when the cards are revealed by repeatedly revealing the top card and moving the next to the bottom, the sequence of revealed cards is in increasing order.\",\n    \"Step 2 - Initial Approach\": \"To solve this problem, you can simulate the process in reverse. Start with an empty deck and place the smallest card in the first revealed position. Then, simulate the rest of the card movements backwards to determine the correct position for each subsequent card.\",\n    \"Step 3 - Simulation of Reveals\": \"Work backward by placing cards in the appropriate positions based on the order of the reveal process. For example, the last card in the reveal sequence should be placed first in the reordered deck, and so on.\",\n    \"Step 4 - Reordering Strategy\": \"Use a deque (double-ended queue) to efficiently simulate the card movements. As you simulate the process backwards, insert each card in the front of the deque and then move the last card to the back of the deque.\",\n    \"Step 5 - Edge Cases\": \"Consider edge cases such as decks with only one card, or decks that are already sorted. Ensure the algorithm handles these cases correctly.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"deck\": [\n          17,\n          13,\n          11,\n          2,\n          3,\n          5,\n          7\n        ]\n      },\n      \"output\": [\n        2,\n        13,\n        3,\n        11,\n        5,\n        17,\n        7\n      ],\n      \"explanation\": \"Reorder the deck such that the cards are revealed in increasing order. The final order of the deck is [2, 13, 3, 11, 5, 17, 7].\"\n    },\n    {\n      \"input\": {\n        \"deck\": [\n          1,\n          1000\n        ]\n      },\n      \"output\": [\n        1,\n        1000\n      ],\n      \"explanation\": \"In this case, the deck is already sorted, so the final order is [1, 1000].\"\n    }\n  ],\n  \"constraints\": {\n    \"deck_length\": \"1 <= deck.length <= 1000\",\n    \"deck_elements_range\": \"1 <= deck[i] <= 106\",\n    \"uniqueness\": \"All elements in deck are unique\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm for larger deck sizes?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Reshape a matrix into a new size if possible."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `m x n` matrix `mat` and two integers `r` and `c`, reshape the matrix into a new `r x c` matrix if possible, preserving the order of elements. If reshaping is not possible, return the original matrix.\",\n  \"objective\": \"Implement a reshaping solution using division and modulus to handle element placement in the new matrix efficiently, treating both matrices as 1D sequences for linear traversal.\",\n  \"meta_prompt\": {\n    \"Step 1 - Validate Reshape Feasibility\": \"Calculate the total number of elements in `mat` as `total_elements = m * n`. If `total_elements` is not equal to `r * c`, return `mat` since reshaping is impossible.\",\n    \"Step 2 - Initialize Reshaped Matrix\": \"If reshaping is feasible, initialize a new matrix `res` with dimensions `r x c` to hold the reshaped elements.\",\n    \"Step 3 - Traverse Original Matrix\": \"Iterate over all elements of `mat` using nested loops over `m` rows and `n` columns, while tracking a `count` variable as if the elements were in a 1D sequence.\",\n    \"Step 4 - Calculate New Position Using Division and Modulus\": \"For each element at `mat[i][j]`, calculate its position in `res` using division and modulus: place `mat[i][j]` at `res[count / c][count % c]` where `count / c` gives the row index in `res` and `count % c` gives the column index.\",\n    \"Step 5 - Return Reshaped Matrix\": \"After populating all elements, return `res` as the reshaped matrix.\",\n    \"Final Check - Constraints Verification\": \"Ensure the solution efficiently handles maximum input constraints (with up to 10,000 elements) using an O(m * n) traversal.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"mat\": [\n          [\n            1,\n            2\n          ],\n          [\n            3,\n            4\n          ]\n        ],\n        \"r\": 1,\n        \"c\": 4\n      },\n      \"output\": [\n        [\n          1,\n          2,\n          3,\n          4\n        ]\n      ],\n      \"explanation\": \"All elements are placed into a single row while maintaining order.\"\n    },\n    {\n      \"input\": {\n        \"mat\": [\n          [\n            1,\n            2\n          ],\n          [\n            3,\n            4\n          ]\n        ],\n        \"r\": 2,\n        \"c\": 4\n      },\n      \"output\": [\n        [\n          1,\n          2\n        ],\n        [\n          3,\n          4\n        ]\n      ],\n      \"explanation\": \"Reshape is impossible with given dimensions, so return the original matrix.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_dimensions\": \"1 <= m, n <= 100\",\n    \"element_range\": \"-1000 <= mat[i][j] <= 1000\",\n    \"target_dimensions\": \"1 <= r, c <= 300\"\n  },\n  \"follow_up\": \"Explore optimizing in-place reshaping, if allowed, by converting directly within the input matrix for languages supporting dynamic resizing.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a string of brackets is valid."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s` containing just the characters `'('`, `')'`, `'{'`, `'}'`, `'['`, and `']'`, determine if the input string is valid based on the following conditions: open brackets must be closed by the same type of brackets, open brackets must be closed in the correct order, and every close bracket must have a corresponding open bracket of the same type.\",\n  \"objective\": \"Design an algorithm to validate the string efficiently, ensuring all conditions for a valid bracket sequence are met.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task requires matching each closing bracket with its corresponding opening bracket while preserving correct order.\",\n    \"Step 2 - Use a Stack for Validation\": \"Implement a stack data structure to keep track of opening brackets. Push opening brackets onto the stack and pop them when encountering matching closing brackets. Ensure the stack is empty by the end.\",\n    \"Step 3 - Handle Invalid Cases\": \"Return false if a closing bracket does not match the top of the stack, or if the stack is not empty after processing the entire string.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution adheres to the constraints, such as `1 <= s.length <= 10^4` and that `s` only consists of valid bracket characters.\",\n    \"Step 5 - Optimization\": \"Aim for a solution with `O(n)` time complexity, where `n` is the length of the string, by traversing the string once and using a stack.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"()\"\n      },\n      \"output\": true,\n      \"explanation\": \"The string has matching and correctly ordered brackets.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"()[]{}\"\n      },\n      \"output\": true,\n      \"explanation\": \"The string contains multiple types of matching brackets in the correct order.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"(]\"\n      },\n      \"output\": false,\n      \"explanation\": \"The string has mismatched brackets.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 10^4\",\n    \"string_content\": \"s consists only of characters '()[]{}'.\"\n  },\n  \"follow_up\": \"Can you extend the solution to handle additional types of brackets or custom matching rules?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given an array, find the number of tuples (i, j, k) such that the sum of arr[i] + arr[j] + arr[k] equals the target."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an integer array 'arr' and an integer 'target'. Your task is to find the number of tuples (i, j, k) such that i < j < k and arr[i] + arr[j] + arr[k] == target. Since the answer could be large, return the result modulo 10^9 + 7.\",\n  \"objective\": \"Design an efficient algorithm to count the number of valid tuples that satisfy the given condition. Use the constraints to come up with an optimized solution.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The task requires identifying all possible triplets (i, j, k) such that the sum of the elements at these positions equals the target. The order of indices must be i < j < k.\",\n    \"Step 2 - Initial Approach\": \"A brute-force approach would be to iterate through all triplets of indices, checking if their sum equals the target. This could work, but it would have a time complexity of O(n^3), which might be inefficient for large arrays.\",\n    \"Step 3 - Optimized Approach\": \"Instead of a brute-force approach, we can use a more efficient algorithm. For instance, fixing one element (say arr[i]) and using two pointers to find two other elements (arr[j], arr[k]) that complete the triplet. This would reduce the time complexity to O(n^2).\",\n    \"Step 4 - Modulo Operation\": \"Remember that since the result can be very large, you need to return it modulo 10^9 + 7 to prevent overflow and comply with the problem constraints.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure that the algorithm is efficient enough to handle arrays of length up to 3000. Consider edge cases like arrays with multiple duplicate elements or arrays with only a few unique elements.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution works within the given constraints: array length between 3 and 3000, elements in the range [0, 100], and the target in the range [0, 300].\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"arr\": [\n          1,\n          1,\n          2,\n          2,\n          3,\n          3,\n          4,\n          4,\n          5,\n          5\n        ],\n        \"target\": 8\n      },\n      \"output\": 20,\n      \"explanation\": \"There are 20 valid triplets where the sum of three elements equals 8. For example, (1, 2, 5) occurs 8 times, (1, 3, 4) occurs 8 times, (2, 2, 4) occurs 2 times, and (2, 3, 3) occurs 2 times.\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          1,\n          1,\n          2,\n          2,\n          2,\n          2\n        ],\n        \"target\": 5\n      },\n      \"output\": 12,\n      \"explanation\": \"The valid triplet (1, 2, 2) occurs 12 times, as we can choose one '1' in 2 ways and two '2's in 6 ways.\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          2,\n          1,\n          3\n        ],\n        \"target\": 6\n      },\n      \"output\": 1,\n      \"explanation\": \"There is exactly one valid triplet (1, 2, 3) that sums up to 6.\"\n    }\n  ],\n  \"constraints\": {\n    \"arr_length\": \"3 <= arr.length <= 3000\",\n    \"arr_elements_range\": \"0 <= arr[i] <= 100\",\n    \"target_range\": \"0 <= target <= 300\"\n  },\n  \"follow_up\": \"Can you solve this problem in an optimized way with a time complexity better than O(n^3)?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a string can be rearranged to form a palindrome."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s`, determine if any permutation of the string can form a palindrome. Return `true` if it is possible, and `false` otherwise. A string can form a palindrome if at most one character appears an odd number of times.\",\n  \"objective\": \"Design an efficient algorithm to check if a permutation of the string can form a palindrome by analyzing the frequency of each character.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that a palindrome requires characters to be symmetric. For a permutation to form a palindrome, at most one character can have an odd frequency.\",\n    \"Step 2 - Frequency Count\": \"Count the frequency of each character in the string using a hash map or an array of size 26 (for lowercase English letters).\",\n    \"Step 3 - Odd Frequency Check\": \"Iterate through the character counts and track the number of characters with odd frequencies. If more than one character has an odd frequency, return `false`.\",\n    \"Step 4 - Edge Cases\": \"Handle strings of length 1 (always `true`) and strings with all identical characters (always `true`).\",\n    \"Step 5 - Output\": \"Return `true` if the string can be permuted to form a palindrome, and `false` otherwise.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"code\"\n      },\n      \"output\": false,\n      \"explanation\": \"No permutation of 'code' can form a palindrome.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"aab\"\n      },\n      \"output\": true,\n      \"explanation\": \"The string 'aab' can be permuted to form 'aba', which is a palindrome.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"carerac\"\n      },\n      \"output\": true,\n      \"explanation\": \"The string 'carerac' can be permuted to form 'racecar', which is a palindrome.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 5000\",\n    \"character_set\": \"The string consists of only lowercase English letters.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to use a single pass and constant space by leveraging bit manipulation?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum number of changes needed to make all elements in an array the same."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums`, find the minimum number of moves required to make all elements equal. In each move, you can increment or decrement any element of the array by `1`. Your task is to return the total number of moves required.\",\n  \"objective\": \"Devise an efficient algorithm that minimizes the number of moves required to equalize all array elements, aiming for a runtime better than `O(n^2)`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the problem involves minimizing the absolute differences between elements of the array. Moving all elements towards the median minimizes the total number of moves due to properties of absolute differences.\",\n    \"Step 2 - Median Calculation\": \"Sort the array and find the median. The median is the optimal target value to minimize the total number of moves.\",\n    \"Step 3 - Total Moves Calculation\": \"Calculate the sum of absolute differences between each array element and the median. This gives the total moves required.\",\n    \"Step 4 - Complexity Optimization\": \"Sorting the array requires `O(n log n)`, and calculating the total absolute difference is `O(n)`. Thus, the algorithm runs in `O(n log n)` time.\",\n    \"Step 5 - Edge Cases\": \"Handle edge cases such as when `nums` contains only one element (output is `0`) or all elements are already equal (output is `0`). Ensure the solution works for arrays with negative and positive values.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The median is 2. Moves required: |1-2| + |2-2| + |3-2| = 2.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          10,\n          2,\n          9\n        ]\n      },\n      \"output\": 16,\n      \"explanation\": \"The median is 5. Moves required: |1-5| + |10-5| + |2-5| + |9-5| = 16.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          0,\n          0\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"All elements are already equal. No moves required.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"1 <= nums.length <= 10^5\",\n    \"value_range\": \"-10^9 <= nums[i] <= 10^9\",\n    \"result_fits\": \"The result will always fit in a 32-bit integer.\"\n  },\n  \"follow_up\": \"Can you solve this problem using an algorithm that avoids explicit sorting, such as by using the Quickselect method to find the median in `O(n)` on average?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You have a graph with `n` nodes. Find the shortest path to visit all nodes."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an undirected, connected graph with `n` nodes labeled from `0` to `n - 1`. You are provided with an adjacency list `graph`, where `graph[i]` is a list of all the nodes connected to node `i` by an edge. Your task is to find and return the length of the shortest path that visits every node at least once. You may start and stop at any node, revisit nodes multiple times, and reuse edges. The objective is to minimize the number of steps taken to visit all nodes.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understanding the Problem\": \"You need to find the shortest path that visits every node in the graph at least once. The problem is a variant of the well-known Travelling Salesman Problem (TSP), but the path doesn't need to end at the starting node, and you can revisit nodes.\",\n    \"Step 2 - Approach\": \"Since `n` (the number of nodes) is at most 12, a brute force approach such as dynamic programming (DP) or breadth-first search (BFS) is feasible. One possible approach is to use a bitmask to represent the state of visited nodes and apply DP to explore all possible paths.\",\n    \"Step 3 - Efficient Solution\": \"You can represent the visited nodes as a bitmask, where each bit corresponds to whether a node has been visited. Use a dynamic programming (DP) approach where `dp[mask][i]` represents the shortest path to visit all nodes in the bitmask `mask`, ending at node `i`. Then, you can compute the shortest path by considering all transitions from one node to another.\",\n    \"Step 4 - Output Format\": \"Return an integer representing the length of the shortest path that visits every node. The length is the total number of steps in the path.\",\n    \"Step 5 - Edge Cases\": \"Consider cases with a small number of nodes (e.g., 1 or 2 nodes), as well as cases where all nodes are connected in a simple chain or loop.\",\n    \"Step 6 - Code Efficiency and Constraints\": \"The solution should efficiently handle graphs with up to 12 nodes. A time complexity of O(n^2 * 2^n) is feasible for this problem, where n is the number of nodes in the graph.\",\n    \"Step 7 - Solution Validation\": \"Ensure that the solution works for edge cases like very small graphs or graphs with a large number of edges. The graph is always connected, so there will be no isolated nodes.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"graph\": [\n          [\n            1,\n            2,\n            3\n          ],\n          [\n            0\n          ],\n          [\n            0\n          ],\n          [\n            0\n          ]\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"One possible shortest path is [1, 0, 2, 0, 3], which visits all nodes in 4 steps.\"\n    },\n    {\n      \"input\": {\n        \"graph\": [\n          [\n            1\n          ],\n          [\n            0,\n            2,\n            4\n          ],\n          [\n            1,\n            3,\n            4\n          ],\n          [\n            2\n          ],\n          [\n            1,\n            2\n          ]\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"One possible shortest path is [0, 1, 4, 2, 3], which visits all nodes in 4 steps.\"\n    }\n  ],\n  \"constraints\": {\n    \"n\": \"1 <= n <= 12\",\n    \"graph_length\": \"0 <= graph[i].length < n\",\n    \"graph_edges\": \"graph[i] does not contain i\",\n    \"graph_symmetry\": \"If graph[a] contains b, then graph[b] contains a\",\n    \"graph_connected\": \"The input graph is always connected\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle the upper limits of n (e.g., n=12) efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Compute the sum of elements in an array for given ranges."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums`, efficiently handle multiple queries to calculate the sum of elements in a specific range `[left, right]` inclusive. The solution should allow for quick sum computation across multiple queries.\",\n  \"objective\": \"Implement a `NumArray` class with efficient initialization and query methods to compute range sums for given indices `left` and `right`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Preprocessing with Prefix Sum\": \"Precompute a prefix sum array where `prefix[i]` stores the sum of elements from the start of the array up to index `i`. This allows for constant-time range sum queries.\",\n    \"Step 2 - Calculating Range Sums\": \"Use the formula `prefix[right + 1] - prefix[left]` to compute the sum for the range `[left, right]` efficiently.\",\n    \"Step 3 - Edge Cases\": \"Handle edge cases such as:\\n- Single-element arrays.\\n- Queries with the smallest or largest valid ranges.\\n- Arrays with negative numbers.\",\n    \"Step 4 - Complexity Analysis\": \"Ensure that the initialization time is O(n), and each range sum query runs in O(1) time.\",\n    \"Step 5 - Robustness\": \"Validate input indices to ensure they satisfy `0 <= left <= right < nums.length`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          -2,\n          0,\n          3,\n          -5,\n          2,\n          -1\n        ],\n        \"queries\": [\n          [\n            0,\n            2\n          ],\n          [\n            2,\n            5\n          ],\n          [\n            0,\n            5\n          ]\n        ]\n      },\n      \"output\": [\n        1,\n        -1,\n        -3\n      ],\n      \"explanation\": \"Using prefix sums, calculate:\\n1. `sumRange(0, 2)` as (-2) + 0 + 3 = 1.\\n2. `sumRange(2, 5)` as 3 + (-5) + 2 + (-1) = -1.\\n3. `sumRange(0, 5)` as (-2) + 0 + 3 + (-5) + 2 + (-1) = -3.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3\n        ],\n        \"queries\": [\n          [\n            0,\n            1\n          ],\n          [\n            1,\n            2\n          ]\n        ]\n      },\n      \"output\": [\n        3,\n        5\n      ],\n      \"explanation\": \"Compute range sums using prefix sums:\\n1. `sumRange(0, 1)` as 1 + 2 = 3.\\n2. `sumRange(1, 2)` as 2 + 3 = 5.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10^4\",\n    \"element_range\": \"-10^5 <= nums[i] <= 10^5\",\n    \"query_range\": \"0 <= left <= right < nums.length\",\n    \"query_count\": \"At most 10^4 calls to `sumRange`.\"\n  },\n  \"follow_up\": \"How would you adapt this implementation to handle dynamic updates to the array (e.g., when elements of `nums` can change)?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find out if an array can be split into two equal sum groups."}, {"role": "assistant", "content": "{\n  \"title\": \"Partition Equal Subset Sum\",\n  \"description\": \"Given an integer array `nums`, determine if it can be partitioned into two subsets such that the sum of elements in both subsets is equal.\",\n  \"objective\": \"Check if a given array can be split into two subsets with equal sums using a subset-sum approach.\",\n  \"input\": {\n    \"name\": \"nums\",\n    \"type\": \"array of integers\",\n    \"description\": \"An array of integers to check for partition possibility.\",\n    \"constraints\": \"1 <= nums.length <= 200; 1 <= nums[i] <= 100\"\n  },\n  \"output\": {\n    \"type\": \"boolean\",\n    \"description\": \"`true` if the array can be partitioned into two subsets with equal sums, otherwise `false`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          5,\n          11,\n          5\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The array can be partitioned as [1, 5, 5] and [11].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          5\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The array cannot be partitioned into equal sum subsets.\"\n    }\n  ],\n  \"hints\": [\n    \"Calculate the total sum of the array.\",\n    \"If the total sum is odd, it's impossible to partition the array into two subsets with equal sums.\",\n    \"Use a dynamic programming approach to check if a subset with sum equal to `totalSum / 2` exists.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Use dynamic programming to achieve O(n * target) time complexity, where `target = totalSum / 2`.\",\n    \"constraints\": \"Avoid unnecessary recomputations using a memoization or tabulation approach.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Convert a Binary Search Tree (BST) to a Greater Tree by updating each node's value to include the sum of all nodes greater than it."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of a Binary Search Tree (BST), convert it to a Greater Tree so that every node's value is updated to its original value plus the sum of all nodes greater than it in the BST.\",\n  \"objective\": \"Use a reverse in-order traversal with Morris Traversal to update the values without using extra space, maintaining linear time complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Node and Sum\": \"Initialize the current node to the root of the BST and a running sum variable to keep track of the accumulated values from larger nodes.\",\n    \"Step 2 - Reverse Morris In-order Traversal\": \"While the current node is not null, check if the current node has a right subtree. If it doesn't, add the current node's value to the sum, update the node's value with the sum, and move to the left subtree. If the node does have a right subtree, find its in-order successor (the smallest node in the right subtree) and create a temporary link back to the current node. Move to the right subtree. When revisiting the node from the left subtree, break the temporary link, add the current node's value to the sum, and update it with the sum.\",\n    \"Step 3 - Update Values\": \"As each node is visited in reverse in-order, update its value by adding it to the running sum, ensuring the node accumulates the values of all larger nodes.\",\n    \"Step 4 - Complexity Analysis\": \"This algorithm visits each node only once in a constant amount of work, making the time complexity O(n), with only O(1) additional space (no extra stack/recursion calls).\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution handles edge cases, such as when the BST is empty (0 nodes) or has only one node. Additionally, confirm that node values remain within the range [-10^4, 10^4] as specified, even after transformation.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          4,\n          1,\n          6,\n          0,\n          2,\n          5,\n          7,\n          null,\n          null,\n          null,\n          3,\n          null,\n          null,\n          null,\n          8\n        ]\n      },\n      \"output\": [\n        30,\n        36,\n        21,\n        36,\n        35,\n        26,\n        15,\n        null,\n        null,\n        null,\n        33,\n        null,\n        null,\n        null,\n        8\n      ],\n      \"explanation\": \"After transforming each node value to include the sum of all larger nodes, the BST's in-order traversal reflects these updates.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          0,\n          null,\n          1\n        ]\n      },\n      \"output\": [\n        1,\n        null,\n        1\n      ],\n      \"explanation\": \"The right node value is added to the root, transforming it into a Greater Tree.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_range\": \"The number of nodes is between 0 and 10^4.\",\n    \"node_values\": \"Each node's value is between -10^4 and 10^4.\",\n    \"BST_properties\": \"The tree is a valid BST with unique values.\"\n  },\n  \"follow_up\": \"Can you adapt this solution to handle a general binary tree (not a BST) or explore methods to serialize and deserialize the Greater Tree format for storage and retrieval?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Generate minimal unique abbreviations for each word in an array of distinct strings. Each abbreviation starts with the first character, followed by the number of characters in between, and ends with the last character. If conflicts arise, increase the prefix length until all abbreviations are unique."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of **distinct** strings `words`, return the minimal possible **abbreviations** for each word. Each abbreviation should start with the first character, followed by the number of characters in between, and end with the last character. If multiple words share the same abbreviation, incrementally increase their unique prefix until all abbreviations are unique.\",\n  \"objective\": \"Implement a solution that generates minimal unique abbreviations for each word by initially grouping words by length, first, and last characters, and using a trie to manage prefixes for efficient uniqueness checking.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Identify that abbreviations must be generated in minimal form with a unique prefix for each word. Initial abbreviations start with the first character, followed by a count of inner characters, and end with the last character.\",\n    \"Step 2 - Grouping by Structure\": \"Group words based on length, first character, and last character, as words with the same structure are likely to conflict in abbreviation.\",\n    \"Step 3 - Using a Trie for Prefix Management\": \"Use a trie to insert words from each group. Track the frequency of each prefix as words are added, noting unique prefixes where only one word matches a given prefix.\",\n    \"Step 4 - Incrementing Prefix Length\": \"For each group, if conflicts exist, increment the prefix length by one character until each abbreviation is unique. Check that abbreviations shorten the word; if not, return the original word.\",\n    \"Step 5 - Complexity and Constraints\": \"Ensure the solution operates efficiently with up to 400 words, each of length up to 400, leveraging the trie structure to keep prefix management optimal.\",\n    \"Final Check - Constraints Verification\": \"Confirm that the solution works within constraints of `1 <= words.length <= 400`, `2 <= words[i].length <= 400`, handling uniqueness and abbreviation length requirements efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"words\": [\n          \"like\",\n          \"god\",\n          \"internal\",\n          \"me\",\n          \"internet\",\n          \"interval\",\n          \"intension\",\n          \"face\",\n          \"intrusion\"\n        ]\n      },\n      \"output\": [\n        \"l2e\",\n        \"god\",\n        \"internal\",\n        \"me\",\n        \"i6t\",\n        \"interval\",\n        \"inte4n\",\n        \"f2e\",\n        \"intr4n\"\n      ],\n      \"explanation\": \"Abbreviations are made unique by incrementing prefixes for conflicting words, resulting in minimal abbreviations where possible.\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"aa\",\n          \"aaa\"\n        ]\n      },\n      \"output\": [\n        \"aa\",\n        \"aaa\"\n      ],\n      \"explanation\": \"Abbreviations do not shorten the words, so the original words are returned.\"\n    }\n  ],\n  \"constraints\": {\n    \"word_count\": \"1 <= words.length <= 400\",\n    \"word_length\": \"2 <= words[i].length <= 400\",\n    \"character_type\": \"words[i] consists of lowercase English letters.\"\n  },\n  \"follow_up\": \"Could you optimize this solution further to handle cases where multiple conflicting abbreviations require additional prefix adjustments?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find out how much water is trapped in a height map after it rains."}, {"role": "assistant", "content": "{\n  \"title\": \"Calculate Water Trapped in 2D Elevation Map\",\n  \"description\": \"Given a `m x n` matrix `heightMap` representing the height of each unit cell in a 2D elevation map, compute the total volume of water that can be trapped after raining.\",\n  \"input\": {\n    \"name\": \"heightMap\",\n    \"type\": \"2D integer matrix\",\n    \"description\": \"Each cell represents the height of the terrain at that position.\",\n    \"constraints\": [\n      \"1 <= m, n <= 200\",\n      \"0 <= heightMap[i][j] <= 20,000\"\n    ]\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The total volume of water trapped in the elevation map after raining.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"heightMap\": [\n          [\n            1,\n            4,\n            3,\n            1,\n            3,\n            2\n          ],\n          [\n            3,\n            2,\n            1,\n            3,\n            2,\n            4\n          ],\n          [\n            2,\n            3,\n            3,\n            2,\n            3,\n            1\n          ]\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"After the rain, water is trapped between the blocks in two small ponds with volumes of 1 and 3 units.\"\n    },\n    {\n      \"input\": {\n        \"heightMap\": [\n          [\n            3,\n            3,\n            3,\n            3,\n            3\n          ],\n          [\n            3,\n            2,\n            2,\n            2,\n            3\n          ],\n          [\n            3,\n            2,\n            1,\n            2,\n            3\n          ],\n          [\n            3,\n            2,\n            2,\n            2,\n            3\n          ],\n          [\n            3,\n            3,\n            3,\n            3,\n            3\n          ]\n        ]\n      },\n      \"output\": 10,\n      \"explanation\": \"Water fills the lower areas surrounded by higher terrain, forming a pond with volume 10.\"\n    }\n  ],\n  \"hints\": [\n    \"Use a priority queue to manage the boundary cells and their heights.\",\n    \"Process cells starting from the outermost boundary and move inward.\",\n    \"Keep track of the maximum height encountered so far to calculate trapped water.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve time complexity of `O(m * n * log(m * n))` by using a min-heap to efficiently track the lowest boundary height.\",\n    \"constraints\": \"Avoid redundant checks and ensure all cells are processed exactly once.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count how many ways you can use `+` and `-` on numbers in `nums` to make them equal `target`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums` and an integer `target`, you need to calculate the number of different expressions that can be built using the numbers in `nums` by adding either `'+'` or `'-'` before each number, such that the expression evaluates to `target`.\",\n  \"objective\": \"Design an algorithm to count the number of valid expressions that evaluate to the given target efficiently. Ensure the solution handles both small and large values of `nums` and `target` within the constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that each number in `nums` can either contribute positively or negatively to the sum. The task is to find all possible combinations of such expressions that add up to the target.\",\n    \"Step 2 - Brute Force Approach\": \"Use a recursive approach to try all combinations of `+` and `-` for the elements in `nums`. However, this would have exponential complexity (`O(2^n)`) and may not be efficient for larger input sizes.\",\n    \"Step 3 - Optimized Approach with Dynamic Programming\": \"Reframe the problem into a subset sum problem. Define a DP state where `dp[i][sum]` represents the number of ways to achieve the sum using the first `i` numbers in `nums`. Transition states by considering both addition and subtraction for each number.\",\n    \"Step 4 - Implementation\": \"Implement the DP solution using a 1D array to optimize space. Initialize `dp[0]` to account for the base case where the sum is `0` with no numbers used.\",\n    \"Step 5 - Constraints and Validations\": \"Handle edge cases such as `nums` containing zeros, very large or small `target` values, and cases where the `target` is out of the range achievable by the sum of `nums`.\",\n    \"Final Check - Output\": \"Return the total number of valid expressions as an integer. Ensure that the solution runs efficiently within the constraints of the problem.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          1,\n          1,\n          1,\n          1\n        ],\n        \"target\": 3\n      },\n      \"output\": 5,\n      \"explanation\": \"There are 5 valid expressions that evaluate to 3: '+1-1+1+1+1', '+1+1-1+1+1', '+1+1+1-1+1', '+1+1+1+1-1', and '-1+1+1+1+1'.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1\n        ],\n        \"target\": 1\n      },\n      \"output\": 1,\n      \"explanation\": \"The only valid expression is '+1'.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          3,\n          1\n        ],\n        \"target\": 2\n      },\n      \"output\": 2,\n      \"explanation\": \"The valid expressions are '+2-3+1' and '-2+3+1'.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 20\",\n    \"nums_values_range\": \"0 <= nums[i] <= 1000\",\n    \"target_range\": \"-1000 <= target <= 1000\",\n    \"sum_range\": \"0 <= sum(nums[i]) <= 1000\",\n    \"edge_cases\": \"Handle cases where `nums` contains zeros, very large or small values for `target`, or when `target` is unachievable given the sum of `nums`.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"Can you implement the solution using memoization to reduce the recursive calls and improve efficiency?\",\n    \"question_2\": \"How would you modify the algorithm to account for duplicate numbers in `nums` if the array was not guaranteed to contain unique elements?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Copy a linked list with random pointers."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a linked list where each node contains a `random` pointer that can point to any node in the list or `null`, return a deep copy of the list. The deep copy should have entirely new nodes with the same values and structure as the original list.\",\n  \"objective\": \"Design an efficient algorithm to clone the linked list while preserving the random and next pointers.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task requires creating a deep copy of the list with identical structure and pointer relationships.\",\n    \"Step 2 - Maintain Mapping\": \"Use a hash map to store the mapping between original nodes and their corresponding clones for accurate pointer reconstruction.\",\n    \"Step 3 - Optimize Without Hash Map\": \"Alternatively, interleave cloned nodes with original nodes, then separate the two lists after reconstructing pointers.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as an empty list, a single node, or all random pointers being `null`.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(n) time with O(1) space (for the interleaving approach).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          [\n            7,\n            null\n          ],\n          [\n            13,\n            0\n          ],\n          [\n            11,\n            4\n          ],\n          [\n            10,\n            2\n          ],\n          [\n            1,\n            0\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          7,\n          null\n        ],\n        [\n          13,\n          0\n        ],\n        [\n          11,\n          4\n        ],\n        [\n          10,\n          2\n        ],\n        [\n          1,\n          0\n        ]\n      ],\n      \"explanation\": \"The deep copy has the same structure and random pointers as the original list.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          [\n            1,\n            1\n          ],\n          [\n            2,\n            1\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          1,\n          1\n        ],\n        [\n          2,\n          1\n        ]\n      ],\n      \"explanation\": \"The deep copy maintains the same structure with random pointers preserved.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          [\n            3,\n            null\n          ],\n          [\n            3,\n            0\n          ],\n          [\n            3,\n            null\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          3,\n          null\n        ],\n        [\n          3,\n          0\n        ],\n        [\n          3,\n          null\n        ]\n      ],\n      \"explanation\": \"The deep copy replicates the original list accurately.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= n <= 1000\",\n    \"node_values\": \"-10^4 <= Node.val <= 10^4\",\n    \"random_pointer\": \"Node.random is null or points to a valid node in the list.\"\n  },\n  \"follow_up\": \"Can you implement the deep copy in O(1) space using the interleaving method?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if the words are sorted based on an alien alphabet order."}, {"role": "assistant", "content": "{\n  \"description\": \"In an alien language, the alphabet order is different from the standard English alphabet. You are given a sequence of words written in this alien language, along with the order of the alphabet. Your task is to determine if the given words are sorted lexicographically according to the alien alphabet. Return true if the words are sorted in lexicographical order, and false otherwise.\",\n  \"objective\": \"Design an algorithm that checks if a given sequence of words is sorted lexicographically based on an alien alphabet order. Ensure that you account for the possibility of words having different lengths and that the lexicographical order is defined by the given order string.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The goal is to compare words in a list based on a custom order of letters. The order string represents the permutation of lowercase letters in the alien language, and you need to check if the words are ordered correctly in this language.\",\n    \"Step 2 - Input Parsing\": \"The input consists of two parts: a list of words and the order string representing the alien alphabet. Each word consists of lowercase English letters, and the order string specifies the custom order of letters.\",\n    \"Step 3 - Comparison Strategy\": \"Iterate through the list of words and compare each adjacent pair of words using the given order. If the first word is lexicographically smaller than the second word according to the alien alphabet, the words are sorted. If any pair is found to be out of order, return false.\",\n    \"Step 4 - Output\": \"Return true if all the words in the list are sorted according to the alien language's alphabet, and false otherwise. Ensure the solution handles edge cases like empty strings or very short words correctly.\",\n    \"Step 5 - Code Efficiency\": \"Focus on optimizing the solution for linear time complexity by checking the words in sequence, using the provided order string to compare characters efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"words\": [\n          \"hello\",\n          \"leetcode\"\n        ],\n        \"order\": \"hlabcdefgijkmnopqrstuvwxyz\"\n      },\n      \"output\": true,\n      \"explanation\": \"Since 'h' comes before 'l' in the given order, the sequence is sorted.\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"word\",\n          \"world\",\n          \"row\"\n        ],\n        \"order\": \"worldabcefghijkmnpqstuvxyz\"\n      },\n      \"output\": false,\n      \"explanation\": \"Since 'd' comes after 'l' in the given order, the sequence is unsorted.\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"apple\",\n          \"app\"\n        ],\n        \"order\": \"abcdefghijklmnopqrstuvwxyz\"\n      },\n      \"output\": false,\n      \"explanation\": \"The first three characters 'app' match, but 'apple' is lexicographically greater than 'app' because 'l' > '\\u2205' (blank character).\"\n    }\n  ],\n  \"constraints\": {\n    \"words_length\": \"1 <= words.length <= 100\",\n    \"word_length\": \"1 <= words[i].length <= 20\",\n    \"order_length\": \"order.length == 26\",\n    \"characters_range\": \"All characters in words[i] and order are lowercase English letters.\"\n  },\n  \"follow_up\": \"Can you come up with a more optimized solution that avoids comparing every adjacent pair of words and instead uses a more efficient method of comparing the order of letters?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the total travel distance for a group of friends on a grid."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `m x n` binary grid `grid` where each `1` represents a friend's house, find the minimal **total travel distance** to an optimal meeting point. The Manhattan distance between two points `(x1, y1)` and `(x2, y2)` is `|x2 - x1| + |y2 - y1|`. Return the sum of these distances for all houses to the meeting point.\",\n  \"objective\": \"Design an efficient algorithm to compute the minimal total travel distance by leveraging the properties of Manhattan distance.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the Manhattan distance: it is minimized when the meeting point is close to the median of the house positions along both x and y coordinates. This is due to the property of medians minimizing the sum of absolute differences.\",\n    \"Step 2 - Extract Positions\": \"Iterate through the grid to extract the x and y coordinates of all houses (cells with value `1`). Store these coordinates separately for processing.\",\n    \"Step 3 - Compute Medians\": \"Sort the x and y coordinates independently and find their medians. These medians determine the optimal meeting point.\",\n    \"Step 4 - Compute Total Distance\": \"Calculate the Manhattan distance from each house to the meeting point determined by the medians.\",\n    \"Step 5 - Optimization\": \"Avoid unnecessary computations by processing x and y coordinates separately and leveraging sorted order.\",\n    \"Step 6 - Edge Cases\": \"Handle cases like:\\n- Friends living along a straight line (either horizontally or vertically).\\n- Grids with clustered houses or houses at the grid's edges.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            0,\n            0,\n            0,\n            1\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            1,\n            0,\n            0\n          ]\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"The optimal meeting point is at (0,2). Total distance: 2 + 2 + 2 = 6.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"Two friends live adjacent to each other. Minimal distance is 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_size\": \"1 <= m, n <= 200\",\n    \"cell_values\": \"`grid[i][j]` is either 0 or 1.\",\n    \"minimum_friends\": \"There are at least two friends in the grid.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to avoid explicitly sorting the coordinates and achieve `O(m * n)` complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Rearrange the queue so that everyone is in the right position."}, {"role": "assistant", "content": "{\n  \"title\": \"Reconstruct Queue by Height\",\n  \"description\": \"Given an array of people `people`, where each `people[i] = [hi, ki]` represents a person with height `hi` and `ki` people taller or the same height in front, reconstruct and return the queue in the correct order.\",\n  \"input\": {\n    \"name\": \"people\",\n    \"type\": \"array of arrays\",\n    \"description\": \"Each sub-array contains two integers `[hi, ki]`, where `hi` is the height of the person and `ki` is the number of people taller or the same height in front of them.\",\n    \"constraints\": [\n      \"`1 <= people.length <= 2000`\",\n      \"`0 <= hi <= 10^6`\",\n      \"`0 <= ki < people.length`\"\n    ]\n  },\n  \"output\": {\n    \"type\": \"array of arrays\",\n    \"description\": \"The reconstructed queue, where `queue[j] = [hj, kj]` represents the attributes of the `jth` person in the queue.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"people\": [\n          [\n            7,\n            0\n          ],\n          [\n            4,\n            4\n          ],\n          [\n            7,\n            1\n          ],\n          [\n            5,\n            0\n          ],\n          [\n            6,\n            1\n          ],\n          [\n            5,\n            2\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          5,\n          0\n        ],\n        [\n          7,\n          0\n        ],\n        [\n          5,\n          2\n        ],\n        [\n          6,\n          1\n        ],\n        [\n          4,\n          4\n        ],\n        [\n          7,\n          1\n        ]\n      ],\n      \"explanation\": \"The queue is reconstructed such that each person satisfies the condition of having `ki` people taller or the same height in front.\"\n    },\n    {\n      \"input\": {\n        \"people\": [\n          [\n            6,\n            0\n          ],\n          [\n            5,\n            0\n          ],\n          [\n            4,\n            0\n          ],\n          [\n            3,\n            2\n          ],\n          [\n            2,\n            2\n          ],\n          [\n            1,\n            4\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          4,\n          0\n        ],\n        [\n          5,\n          0\n        ],\n        [\n          2,\n          2\n        ],\n        [\n          3,\n          2\n        ],\n        [\n          1,\n          4\n        ],\n        [\n          6,\n          0\n        ]\n      ],\n      \"explanation\": \"The queue is reconstructed based on the given height and `ki` conditions.\"\n    }\n  ],\n  \"hints\": [\n    \"Sort the array of people in descending order of height. For people with the same height, sort by ascending `ki`.\",\n    \"Iteratively insert each person at the index `ki` in the result list.\",\n    \"The insertion order ensures that taller people are placed first, preserving the conditions.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve a time complexity of `O(n^2)` or better for the reconstruction process.\",\n    \"constraints\": \"Use a sorting algorithm and efficient insertion techniques to minimize runtime.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the length of the last word in a string."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s` consisting of words and spaces, return the length of the **last word** in the string. A **word** is defined as a maximal substring consisting of non-space characters only.\",\n  \"objective\": \"Design an efficient algorithm to find and return the length of the last word in the input string.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task requires identifying the last word in the string and determining its length. Ignore trailing spaces if present.\",\n    \"Step 2 - Traversal from the End\": \"Iterate the string in reverse to locate the last word efficiently. Skip trailing spaces, then count the characters of the last word.\",\n    \"Step 3 - Constraints Compliance\": \"Ensure the algorithm handles constraints such as `1 <= s.length <= 10^4` and input containing only English letters and spaces.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider cases like strings with trailing spaces, single-word strings, and strings with multiple spaces between words.\",\n    \"Step 5 - Optimization\": \"Avoid splitting the string into an array to reduce memory overhead and ensure linear time complexity.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"Hello World\"\n      },\n      \"output\": 5,\n      \"explanation\": \"The last word is 'World' with length 5.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"   fly me   to   the moon   \"\n      },\n      \"output\": 4,\n      \"explanation\": \"The last word is 'moon' with length 4.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"luffy is still joyboy\"\n      },\n      \"output\": 6,\n      \"explanation\": \"The last word is 'joyboy' with length 6.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 10^4\",\n    \"string_content\": \"The string consists only of English letters and spaces.\",\n    \"validity\": \"The input is guaranteed to contain at least one word.\"\n  },\n  \"follow_up\": \"Can you modify the algorithm to handle real-time streams or large strings efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Simulate a Minesweeper game where a click reveals cells based on Minesweeper rules. Reveal a mine as 'X', numbers for adjacent mines, or blank areas recursively."}, {"role": "assistant", "content": "{\n  \"description\": \"Implement a Minesweeper game function that, given an `m x n` board and a `click` position, simulates revealing cells according to Minesweeper rules. Reveal a mine as `'X'`, reveal numbers for cells with adjacent mines, and reveal blank areas recursively if no adjacent mines are present.\",\n  \"objective\": \"Develop a recursive or iterative solution to reveal cells in Minesweeper based on the clicked cell\\u2019s contents, handling empty areas recursively and counting adjacent mines where necessary.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Recognize that Minesweeper requires different actions based on the clicked cell's content, revealing either the clicked mine, adjacent mine counts, or recursively revealing blank areas.\",\n    \"Step 2 - Handling Click Cases\": \"Check if the clicked cell is a mine ('M'); if so, mark it as 'X' and return the board. For an empty cell ('E'), calculate adjacent mines and reveal accordingly.\",\n    \"Step 3 - Counting Adjacent Mines\": \"Define a helper function to count the number of adjacent mines for a given cell by checking its eight surrounding cells. Use this count to decide whether to reveal a number or continue recursive expansion.\",\n    \"Step 4 - Recursive or Iterative Expansion\": \"If the clicked cell has no adjacent mines, initiate a BFS or DFS (iterative or recursive) to reveal adjacent empty cells. Mark cells with no adjacent mines as 'B' and continue expanding, stopping at cells with adjacent mines.\",\n    \"Step 5 - Complexity and Constraints\": \"Ensure the solution is efficient within the `1 <= m, n <= 50` constraints, with BFS or DFS revealing connected regions efficiently.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution handles the board size constraints and the variety of possible click scenarios, ensuring cells are revealed according to Minesweeper rules.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"board\": [\n          [\n            \"E\",\n            \"E\",\n            \"E\",\n            \"E\",\n            \"E\"\n          ],\n          [\n            \"E\",\n            \"E\",\n            \"M\",\n            \"E\",\n            \"E\"\n          ],\n          [\n            \"E\",\n            \"E\",\n            \"E\",\n            \"E\",\n            \"E\"\n          ],\n          [\n            \"E\",\n            \"E\",\n            \"E\",\n            \"E\",\n            \"E\"\n          ]\n        ],\n        \"click\": [\n          3,\n          0\n        ]\n      },\n      \"output\": [\n        [\n          \"B\",\n          \"1\",\n          \"E\",\n          \"1\",\n          \"B\"\n        ],\n        [\n          \"B\",\n          \"1\",\n          \"M\",\n          \"1\",\n          \"B\"\n        ],\n        [\n          \"B\",\n          \"1\",\n          \"1\",\n          \"1\",\n          \"B\"\n        ],\n        [\n          \"B\",\n          \"B\",\n          \"B\",\n          \"B\",\n          \"B\"\n        ]\n      ],\n      \"explanation\": \"Clicking on (3,0) reveals cells recursively, revealing adjacent mine counts where applicable.\"\n    },\n    {\n      \"input\": {\n        \"board\": [\n          [\n            \"B\",\n            \"1\",\n            \"E\",\n            \"1\",\n            \"B\"\n          ],\n          [\n            \"B\",\n            \"1\",\n            \"M\",\n            \"1\",\n            \"B\"\n          ],\n          [\n            \"B\",\n            \"1\",\n            \"1\",\n            \"1\",\n            \"B\"\n          ],\n          [\n            \"B\",\n            \"B\",\n            \"B\",\n            \"B\",\n            \"B\"\n          ]\n        ],\n        \"click\": [\n          1,\n          2\n        ]\n      },\n      \"output\": [\n        [\n          \"B\",\n          \"1\",\n          \"E\",\n          \"1\",\n          \"B\"\n        ],\n        [\n          \"B\",\n          \"1\",\n          \"X\",\n          \"1\",\n          \"B\"\n        ],\n        [\n          \"B\",\n          \"1\",\n          \"1\",\n          \"1\",\n          \"B\"\n        ],\n        [\n          \"B\",\n          \"B\",\n          \"B\",\n          \"B\",\n          \"B\"\n        ]\n      ],\n      \"explanation\": \"Clicking on a mine (1,2) reveals it as 'X' and ends the game.\"\n    }\n  ],\n  \"constraints\": {\n    \"board_size_range\": \"1 <= m, n <= 50\",\n    \"board_cell_values\": \"Each cell is 'M', 'E', 'B', a digit ('1'-'8'), or 'X'.\",\n    \"click_range\": \"0 <= clickr < m, 0 <= clickc < n\"\n  },\n  \"follow_up\": \"Could you optimize the recursive solution using an iterative approach, such as BFS, to avoid issues with deep recursion on large grids?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count the number of black lonely pixels in an `m x n` picture grid. A black lonely pixel at position `(r, c)` must meet two conditions: (1) row `r` and column `c` contain exactly `target` black pixels, and (2) all rows with a black pixel in column `c` are identical to row `r`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `m x n` picture grid containing black `'B'` and white `'W'` pixels, count the number of black lonely pixels. A black lonely pixel at position `(r, c)` must meet two conditions: (1) row `r` and column `c` contain exactly `target` black pixels, and (2) all rows with a black pixel in column `c` are identical to row `r`.\",\n  \"objective\": \"Use a hashmap and an array to efficiently track row signatures and column black pixel counts to identify and validate black lonely pixels based on the given conditions.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Identify that each black pixel in the grid has specific conditions to meet in terms of the row and column black pixel counts and row consistency across columns.\",\n    \"Step 2 - Build Row Signatures and Count Columns\": \"For each row with exactly `target` black pixels, build a signature string representing the row pattern and store it in a hashmap along with its occurrence count. Track the number of black pixels in each column in an array `colCount`.\",\n    \"Step 3 - Validate Potential Lonely Rows\": \"Check each row signature in the hashmap. If its count is equal to `target`, it may contain lonely pixels. For such a row, validate each column that has a black pixel to ensure the column also has exactly `target` black pixels (using `colCount`).\",\n    \"Step 4 - Count Valid Lonely Pixels\": \"For each column that meets the criteria, add `target` lonely pixels to the final result count since each row with that signature has black pixels meeting the conditions.\",\n    \"Step 5 - Complexity and Constraints\": \"Optimize to O(m * n) time complexity and O(m + n) space complexity, iterating through the grid only a few times and leveraging hashmap and array for efficient tracking.\",\n    \"Final Check - Constraints Verification\": \"Ensure the solution handles the grid constraints up to `200 x 200` and processes rows with similar patterns efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"picture\": [\n          [\n            \"W\",\n            \"B\",\n            \"W\",\n            \"B\",\n            \"B\",\n            \"W\"\n          ],\n          [\n            \"W\",\n            \"B\",\n            \"W\",\n            \"B\",\n            \"B\",\n            \"W\"\n          ],\n          [\n            \"W\",\n            \"B\",\n            \"W\",\n            \"B\",\n            \"B\",\n            \"W\"\n          ],\n          [\n            \"W\",\n            \"W\",\n            \"B\",\n            \"W\",\n            \"B\",\n            \"B\"\n          ]\n        ],\n        \"target\": 3\n      },\n      \"output\": 6,\n      \"explanation\": \"Rows with pattern 'WBWBBW' meet the criteria, and columns 1 and 3 both have exactly 3 'B' pixels.\"\n    },\n    {\n      \"input\": {\n        \"picture\": [\n          [\n            \"W\",\n            \"W\",\n            \"B\"\n          ],\n          [\n            \"W\",\n            \"W\",\n            \"B\"\n          ],\n          [\n            \"W\",\n            \"W\",\n            \"B\"\n          ]\n        ],\n        \"target\": 1\n      },\n      \"output\": 0,\n      \"explanation\": \"No row meets the criteria, so no black lonely pixels are found.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size_range\": \"1 <= m, n <= 200\",\n    \"cell_values\": \"Each cell is 'W' or 'B'.\",\n    \"target_range\": \"1 <= target <= min(m, n)\"\n  },\n  \"follow_up\": \"Could you extend this solution to handle dynamic updates to the grid and quickly recalculate the lonely black pixel count?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Split the binary search tree into two parts based on the target value."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given the root of a binary search tree (BST) and an integer target. Your task is to split the BST into two subtrees such that one subtree contains all nodes smaller than or equal to the target value, and the other subtree contains all nodes greater than the target value. The structure of the original tree should remain as much as possible. Return an array of the roots of the two subtrees.\",\n  \"objective\": \"Design an algorithm that splits the BST into two subtrees based on the target value, ensuring that the parent-child relationships within each subtree are preserved and the original tree structure remains intact.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The problem requires splitting a binary search tree into two subtrees. One subtree should contain all nodes smaller or equal to the target, while the other subtree should contain all nodes greater than the target.\",\n    \"Step 2 - Approach to BST Splitting\": \"Start by traversing the tree, maintaining the BST property. For each node, decide if it belongs to the left or right subtree based on whether its value is smaller or greater than the target. Ensure that the parent-child relationships are preserved in the new subtrees.\",\n    \"Step 3 - Efficient Traversal\": \"Since the tree is a BST, use an in-order traversal approach to identify where the target split occurs. Once the split is found, adjust the left and right pointers accordingly to create the two subtrees.\",\n    \"Step 4 - Output Format\": \"Return an array containing the roots of the two subtrees. If no nodes exist in one of the subtrees, return an empty array for that subtree.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Consider edge cases such as when the target is equal to the value of the root, or when the target does not exist in the tree. Also, handle the case where the tree consists of a single node.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution works efficiently with trees containing up to 50 nodes, and that node values and the target lie within the specified range of 0 to 1000.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          4,\n          2,\n          6,\n          1,\n          3,\n          5,\n          7\n        ],\n        \"target\": 2\n      },\n      \"output\": [\n        [\n          2,\n          1\n        ],\n        [\n          4,\n          3,\n          6,\n          null,\n          null,\n          5,\n          7\n        ]\n      ],\n      \"explanation\": \"After splitting the tree at target 2, the left subtree contains [2, 1] and the right subtree contains [4, 3, 6, null, null, 5, 7].\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1\n        ],\n        \"target\": 1\n      },\n      \"output\": [\n        [\n          1\n        ],\n        []\n      ],\n      \"explanation\": \"Since the target is equal to the root, the left subtree is [1] and the right subtree is empty.\"\n    }\n  ],\n  \"constraints\": {\n    \"nodes_range\": \"1 <= number of nodes <= 50\",\n    \"node_values_and_target_range\": \"0 <= Node.val, target <= 1000\"\n  },\n  \"follow_up\": \"Can you optimize the solution to minimize the number of nodes visited during the split operation?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Rotate a square matrix by 90 degrees clockwise."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `n x n` 2D matrix representing an image, rotate the image by **90 degrees clockwise**. The rotation must be performed **in-place**, meaning the input matrix must be modified directly without allocating additional space for another matrix.\",\n  \"objective\": \"Design an efficient algorithm to rotate the matrix in-place, adhering to the constraints and optimizing the solution for clarity and performance.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that a clockwise 90-degree rotation involves rearranging the rows and columns such that the element at position `matrix[i][j]` is moved to `matrix[j][n-i-1]`.\",\n    \"Step 2 - Transpose and Reverse Approach\": \"Transpose the matrix (swap `matrix[i][j]` with `matrix[j][i]` for all `i < j`) and then reverse each row to achieve the rotation.\",\n    \"Step 3 - Handle Edge Cases\": \"Consider edge cases such as matrices with size `1x1` (no change required) or negative numbers in the matrix.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution handles constraints such as `1 <= n <= 20` and works efficiently for larger matrix sizes.\",\n    \"Step 5 - Test for Correctness\": \"Verify the algorithm with both odd and even-sized matrices and edge cases to ensure correctness.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            1,\n            2,\n            3\n          ],\n          [\n            4,\n            5,\n            6\n          ],\n          [\n            7,\n            8,\n            9\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          7,\n          4,\n          1\n        ],\n        [\n          8,\n          5,\n          2\n        ],\n        [\n          9,\n          6,\n          3\n        ]\n      ],\n      \"explanation\": \"The matrix is rotated clockwise by 90 degrees in-place.\"\n    },\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            5,\n            1,\n            9,\n            11\n          ],\n          [\n            2,\n            4,\n            8,\n            10\n          ],\n          [\n            13,\n            3,\n            6,\n            7\n          ],\n          [\n            15,\n            14,\n            12,\n            16\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          15,\n          13,\n          2,\n          5\n        ],\n        [\n          14,\n          3,\n          4,\n          1\n        ],\n        [\n          12,\n          6,\n          8,\n          9\n        ],\n        [\n          16,\n          7,\n          10,\n          11\n        ]\n      ],\n      \"explanation\": \"The 4x4 matrix is rotated clockwise by 90 degrees in-place.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size\": \"1 <= n <= 20\",\n    \"element_range\": \"-1000 <= matrix[i][j] <= 1000\",\n    \"in_place\": \"The rotation must be performed in-place without allocating additional space.\"\n  },\n  \"follow_up\": \"Can you implement a similar algorithm for counterclockwise rotation or handle non-square matrices?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Make the smallest number by deleting some digits."}, {"role": "assistant", "content": "{\n  \"title\": \"Smallest Integer After Removing Digits\",\n  \"description\": \"Given a string `num` representing a non-negative integer and an integer `k`, remove `k` digits from `num` to form the smallest possible integer.\",\n  \"input\": {\n    \"num\": {\n      \"type\": \"string\",\n      \"description\": \"A string representing a non-negative integer.\",\n      \"constraints\": \"1 <= num.length <= 10^5\"\n    },\n    \"k\": {\n      \"type\": \"integer\",\n      \"description\": \"The number of digits to remove from `num`.\",\n      \"constraints\": \"1 <= k <= num.length\"\n    }\n  },\n  \"output\": {\n    \"type\": \"string\",\n    \"description\": \"The smallest possible integer after removing `k` digits from `num`, with no leading zeroes (except for the number '0').\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"num\": \"1432219\",\n        \"k\": 3\n      },\n      \"output\": \"1219\",\n      \"explanation\": \"By removing digits 4, 3, and 2, the result is 1219.\"\n    },\n    {\n      \"input\": {\n        \"num\": \"10200\",\n        \"k\": 1\n      },\n      \"output\": \"200\",\n      \"explanation\": \"Removing the leading 1 results in 200, with no leading zeroes.\"\n    },\n    {\n      \"input\": {\n        \"num\": \"10\",\n        \"k\": 2\n      },\n      \"output\": \"0\",\n      \"explanation\": \"Removing both digits leaves an empty result, which is interpreted as 0.\"\n    }\n  ],\n  \"hints\": [\n    \"Use a greedy approach to iteratively remove digits that make the number larger.\",\n    \"A stack-like structure can help in efficiently maintaining the smallest possible number.\",\n    \"Handle edge cases such as leading zeroes in the result.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Ensure the solution has a linear time complexity, O(n), using a stack or similar approach.\",\n    \"constraints\": \"Avoid directly sorting or permuting digits, as it is computationally expensive for large inputs.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Get the length of a wiggle sequence."}, {"role": "assistant", "content": "{\n  \"title\": \"Longest Wiggle Subsequence\",\n  \"description\": \"Find the length of the longest wiggle subsequence in an array. A wiggle sequence alternates strictly between positive and negative differences between consecutive numbers.\",\n  \"objective\": \"Identify the maximum length of a subsequence that alternates between positive and negative differences.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand the Pattern\": {\n      \"Definition\": \"A sequence alternates if differences between consecutive numbers change strictly between positive and negative.\",\n      \"Constraints\": \"Differences equal to zero do not count toward the wiggle pattern.\"\n    },\n    \"Step 2 - Dynamic State Tracking\": {\n      \"Define States\": \"`up[i]` represents the length of the longest wiggle subsequence ending at `i` with a positive difference, `down[i]` for a negative difference.\",\n      \"Transition\": {\n        \"When `nums[i] > nums[i-1]`\": \"Set `up[i] = down[i-1] + 1`.\",\n        \"When `nums[i] < nums[i-1]`\": \"Set `down[i] = up[i-1] + 1`.\"\n      }\n    },\n    \"Step 3 - Optimization\": {\n      \"Goal\": \"Use `O(1)` space by maintaining only the previous states (`up` and `down`).\",\n      \"Result\": \"Return `max(up, down)` as the final result.\"\n    }\n  },\n  \"input\": {\n    \"parameters\": [\n      {\n        \"name\": \"nums\",\n        \"type\": \"array of integers\",\n        \"description\": \"The sequence of numbers to evaluate.\",\n        \"constraints\": \"1 <= nums.length <= 1000, 0 <= nums[i] <= 1000\"\n      }\n    ]\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The length of the longest wiggle subsequence in the array.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          7,\n          4,\n          9,\n          2,\n          5\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"The entire sequence is a wiggle sequence with alternating differences (6, -3, 5, -7, 3).\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          17,\n          5,\n          10,\n          13,\n          15,\n          10,\n          5,\n          16,\n          8\n        ]\n      },\n      \"output\": 7,\n      \"explanation\": \"One valid wiggle subsequence is [1, 17, 10, 13, 10, 16, 8].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n          9\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The longest wiggle subsequence consists of only two elements as differences are monotonous.\"\n    }\n  ],\n  \"hints\": [\n    \"Focus on transitions between increasing and decreasing elements.\",\n    \"Avoid storing full DP arrays by tracking only the last states.\",\n    \"Handle edge cases where the array has only one or two elements.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(n) time complexity with O(1) space by iterating through the array and updating `up` and `down` states.\",\n    \"constraints\": \"Avoid building explicit subsequences or performing unnecessary iterations.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given `n` people and a list of dislikes, determine if it's possible to divide them into two groups where no one dislikes the others in the same group."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a group of `n` people (labeled from 1 to `n`) and an array `dislikes` where each element `dislikes[i] = [ai, bi]` indicates that person `ai` dislikes person `bi`. You need to determine if it is possible to divide these `n` people into two groups such that no two people who dislike each other end up in the same group.\",\n  \"objective\": \"Return `true` if it's possible to split the group into two groups, and `false` if it is not possible.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The problem can be interpreted as a graph problem where each person is a node, and a dislike between two people is an edge between two nodes. You need to determine if it's possible to color the graph using two colors such that no two connected nodes (people who dislike each other) share the same color.\",\n    \"Step 2 - Approach\": \"You can approach the problem using a graph traversal technique such as BFS or DFS. Start by coloring a person and attempt to color all connected people alternately. If any two connected people end up with the same color, return `false`.\",\n    \"Step 3 - BFS/DFS Traversal\": \"For each unvisited person, perform a BFS/DFS and try to assign them to a group (color). If a conflict is found (i.e., two connected people have the same group), return `false`.\",\n    \"Step 4 - Graph Representation\": \"Represent the dislikes as an undirected graph where each node is a person, and an edge between two nodes means the corresponding people dislike each other.\",\n    \"Final Check - Constraints Handling\": \"Ensure that the solution is efficient enough to handle the problem's constraints, with `n` up to 2000 and up to 10^4 dislike relationships.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 4,\n        \"dislikes\": [\n          [\n            1,\n            2\n          ],\n          [\n            1,\n            3\n          ],\n          [\n            2,\n            4\n          ]\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"It is possible to split the people into two groups such that no two people who dislike each other are in the same group. One possible solution is to have group 1 with [1, 4] and group 2 with [2, 3].\"\n    },\n    {\n      \"input\": {\n        \"n\": 3,\n        \"dislikes\": [\n          [\n            1,\n            2\n          ],\n          [\n            1,\n            3\n          ],\n          [\n            2,\n            3\n          ]\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"It is impossible to split the group into two groups because all three people dislike each other, requiring at least three groups.\"\n    }\n  ],\n  \"constraints\": {\n    \"n\": \"1 <= n <= 2000\",\n    \"dislikes\": \"0 <= dislikes.length <= 104\",\n    \"unique_pairs\": \"All pairs of dislikes are unique.\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm to handle the largest cases efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the largest subset where numbers are divisible by each other."}, {"role": "assistant", "content": "{\n  \"title\": \"Largest Divisible Subset\",\n  \"description\": \"Given a set of distinct positive integers `nums`, find the largest subset where every pair of elements satisfies the divisibility condition: `answer[i] % answer[j] == 0` or `answer[j] % answer[i] == 0`.\",\n  \"input\": {\n    \"name\": \"nums\",\n    \"type\": \"array of integers\",\n    \"description\": \"A list of distinct positive integers.\",\n    \"constraints\": \"1 <= nums.length <= 1000, 1 <= nums[i] <= 2 * 10^9\"\n  },\n  \"output\": {\n    \"type\": \"array of integers\",\n    \"description\": \"The largest subset where every pair satisfies the divisibility condition. If multiple solutions exist, return any of them.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": [\n        1,\n        2\n      ],\n      \"explanation\": \"[1, 3] is also a valid subset as both satisfy the divisibility condition.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          4,\n          8\n        ]\n      },\n      \"output\": [\n        1,\n        2,\n        4,\n        8\n      ],\n      \"explanation\": \"All numbers are divisible by each other in this subset.\"\n    }\n  ],\n  \"hints\": [\n    \"Sort the input array `nums` in ascending order to ensure divisors appear before their multiples.\",\n    \"Use dynamic programming to build the largest subset ending at each element.\",\n    \"Track the indices of elements in the subset to reconstruct the final solution.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(n^2) time complexity by iterating over the sorted array and using dynamic programming to find the largest subset.\",\n    \"constraints\": \"Avoid redundant checks by ensuring the array is sorted before processing.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum cost to guarantee winning the guessing game for a range of numbers."}, {"role": "assistant", "content": "{\n  \"title\": \"Guessing Game Minimum Cost to Guarantee a Win\",\n  \"description\": \"Design an algorithm to determine the minimum amount of money required to guarantee a win in the guessing game for a given range `[1, n]`.\",\n  \"objective\": \"Minimize the worst-case cost of guessing correctly regardless of the picked number.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand the Game\": {\n      \"Rules\": \"Every guess costs an amount equal to the guessed number. You are told if the correct number is higher or lower after each guess.\",\n      \"Goal\": \"Minimize the maximum cost across all possible scenarios.\"\n    },\n    \"Step 2 - Dynamic Programming Setup\": {\n      \"Define DP Table\": \"Let `dp[i][j]` represent the minimum cost to guarantee a win for the range `[i, j]`.\",\n      \"Base Cases\": {\n        \"`i >= j`\": \"Cost is 0, as there's no guessing needed in a range of size 0 or 1.\"\n      }\n    },\n    \"Step 3 - Transition Relation\": {\n      \"Guessing Cost\": \"If guessing `x` in range `[i, j]`, the cost is `x + max(dp[i][x-1], dp[x+1][j])`.\",\n      \"Recurrence\": \"Set `dp[i][j] = min(x + max(dp[i][x-1], dp[x+1][j]))` for all `x` in `[i, j]`.\"\n    },\n    \"Step 4 - Return Result\": {\n      \"Result\": \"The minimum cost to guarantee a win for range `[1, n]` is stored in `dp[1][n]`.\"\n    }\n  },\n  \"input\": {\n    \"parameters\": [\n      {\n        \"name\": \"n\",\n        \"type\": \"integer\",\n        \"description\": \"The upper limit of the range `[1, n]`.\",\n        \"constraints\": \"1 <= n <= 200\"\n      }\n    ]\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The minimum cost to guarantee a win in the guessing game.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 10\n      },\n      \"output\": 16,\n      \"explanation\": \"The worst-case minimum cost for guaranteeing a win in the range `[1, 10]` is $16.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1\n      },\n      \"output\": 0,\n      \"explanation\": \"There is only one number to guess, so no cost is incurred.\"\n    },\n    {\n      \"input\": {\n        \"n\": 2\n      },\n      \"output\": 1,\n      \"explanation\": \"The worst-case minimum cost for guessing the correct number in `[1, 2]` is $1.\"\n    }\n  ],\n  \"hints\": [\n    \"Use dynamic programming to break the problem into subproblems.\",\n    \"Consider the cost of a guess and ensure the solution works for the worst-case scenario.\",\n    \"Optimize transitions to minimize computational overhead.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve a time complexity of O(n^3) by iterating over ranges and guesses efficiently.\",\n    \"constraints\": \"Avoid brute force enumeration of all possible combinations of guesses.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find how many trailing zeroes are in the factorial of a number."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `n`, return the number of trailing zeroes in `n!`.\",\n  \"objective\": \"Design an efficient algorithm to calculate the number of trailing zeroes in the factorial of a number.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that trailing zeroes in a factorial result from factors of 10, which are created by pairs of 2 and 5 in the number's prime factorization.\",\n    \"Step 2 - Count Factors of 5\": \"Count the number of times 5 is a factor in the numbers from 1 to n, as factors of 2 are more frequent.\",\n    \"Step 3 - Handle Powers of 5\": \"Include higher powers of 5 (e.g., 25, 125) as they contribute additional factors of 5.\",\n    \"Step 4 - Optimize for Efficiency\": \"Iteratively divide `n` by 5 and sum the results to avoid directly calculating the factorial.\",\n    \"Step 5 - Handle Edge Cases\": \"Ensure the solution works for small values of `n` (e.g., 0, 1) and large values up to 10^4.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 3\n      },\n      \"output\": 0,\n      \"explanation\": \"3! = 6, which has no trailing zero.\"\n    },\n    {\n      \"input\": {\n        \"n\": 5\n      },\n      \"output\": 1,\n      \"explanation\": \"5! = 120, which has one trailing zero.\"\n    }\n  ],\n  \"constraints\": {\n    \"range\": \"0 <= n <= 10^4\"\n  },\n  \"follow_up\": \"Can you write a solution that works in O(log n) time complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the largest XOR result between two numbers in an array."}, {"role": "assistant", "content": "{\n  \"title\": \"Maximum XOR of Two Numbers in an Array\",\n  \"description\": \"Find the maximum XOR value of two elements in an integer array `nums`. The XOR operation between two integers results in a binary number where each bit represents the difference between corresponding bits of the input numbers.\",\n  \"objective\": \"Efficiently compute the maximum XOR result for any two distinct elements in the array.\",\n  \"input\": {\n    \"nums\": {\n      \"type\": \"array of integers\",\n      \"description\": \"The array containing integers.\",\n      \"constraints\": \"1 <= nums.length <= 2 * 10^5, 0 <= nums[i] <= 2^31 - 1.\"\n    }\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The maximum XOR value obtained by XORing two distinct elements in `nums`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          10,\n          5,\n          25,\n          2,\n          8\n        ]\n      },\n      \"output\": 28,\n      \"explanation\": \"The maximum XOR value is obtained by XORing 5 and 25, resulting in 28.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          14,\n          70,\n          53,\n          83,\n          49,\n          91,\n          36,\n          80,\n          92,\n          51,\n          66,\n          70\n        ]\n      },\n      \"output\": 127,\n      \"explanation\": \"The maximum XOR value is obtained by XORing 70 and 91, resulting in 127.\"\n    }\n  ],\n  \"hints\": [\n    \"Use a bitwise trie to store binary representations of the numbers, enabling efficient computation of XOR values.\",\n    \"For each number, try to maximize the XOR by choosing bits that differ from the current number.\",\n    \"Iterate through the numbers and maintain the maximum XOR encountered.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve an efficient time complexity of O(n * 32) using a bitwise trie.\",\n    \"constraints\": \"Avoid brute-force comparisons of all pairs, which would take O(n^2) time.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find results by grouping numbers and operators."}, {"role": "assistant", "content": "{\n  \"description\": \"Compute all possible results by grouping numbers and operators in a given expression.\",\n  \"objective\": \"Return all possible values by calculating different groupings of numbers and operators in the given expression.\",\n  \"steps\": [\n    \"If the expression is a single number, return it as the result.\",\n    \"Iterate through the expression, identifying operators.\",\n    \"For each operator, recursively calculate results for the left and right subexpressions.\",\n    \"Combine the results from the left and right subexpressions using the current operator.\",\n    \"Store all possible results and return them as a list.\"\n  ],\n  \"examples\": [\n    {\n      \"input\": {\n        \"expression\": \"2-1-1\"\n      },\n      \"output\": [\n        0,\n        2\n      ]\n    },\n    {\n      \"input\": {\n        \"expression\": \"2*3-4*5\"\n      },\n      \"output\": [\n        -34,\n        -14,\n        -10,\n        -10,\n        10\n      ]\n    }\n  ],\n  \"constraints\": \"Handle expressions of up to 20 characters efficiently.\",\n  \"follow_up\": \"Can you optimize the recursion using memoization to avoid redundant calculations? How would you handle cases with larger expressions exceeding 20 characters?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Convert a string into a zigzag pattern."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s` and an integer `numRows`, convert the string into a zigzag pattern based on the specified number of rows, and then return the resulting string by reading the rows line by line. A zigzag pattern arranges characters diagonally across rows before moving vertically downward.\",\n  \"objective\": \"Design an efficient algorithm to simulate the zigzag transformation and produce the result by reading the rows sequentially. Ensure that the implementation handles edge cases such as a single row or very short strings.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the input: the string `s` can consist of English letters, commas, and periods, and its length can range from 1 to 1000. The integer `numRows` determines how the zigzag pattern is created, ranging from 1 to 1000.\",\n    \"Step 2 - Initial Approach\": \"Simulate the zigzag pattern by appending characters to a list of rows as the string is traversed. Alternate between moving downward and upward diagonally to simulate the zigzag motion.\",\n    \"Step 3 - Edge Cases\": \"Handle special cases such as `numRows = 1` (which results in the string itself) or strings shorter than the number of rows.\",\n    \"Step 4 - Output Format\": \"Combine the rows into a single string and return it as the result.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"PAYPALISHIRING\",\n        \"numRows\": 3\n      },\n      \"output\": \"PAHNAPLSIIGYIR\",\n      \"explanation\": \"Characters are arranged in three rows and read line by line.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"PAYPALISHIRING\",\n        \"numRows\": 4\n      },\n      \"output\": \"PINALSIGYAHRPI\",\n      \"explanation\": \"Characters are arranged in four rows and read line by line.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"A\",\n        \"numRows\": 1\n      },\n      \"output\": \"A\",\n      \"explanation\": \"With one row, the output is the same as the input.\"\n    }\n  ],\n  \"constraints\": {\n    \"s_length\": \"1 <= s.length <= 1000\",\n    \"numRows_range\": \"1 <= numRows <= 1000\",\n    \"s_content\": \"The string `s` consists of English letters (both lower-case and upper-case), commas, and periods.\"\n  },\n  \"follow_up\": \"Can you implement this solution using constant space complexity, excluding the output string?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Traverse an n-ary tree in postorder."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of an n-ary tree, implement the postorder traversal of the tree nodes' values. Postorder traversal involves visiting all children nodes recursively before visiting the root.\",\n  \"objective\": \"Perform a postorder traversal of an n-ary tree using both recursive and iterative methods, ensuring the correct order of values in the output.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand Tree Structure\": \"Each node in the n-ary tree contains a value and a list of child nodes. The tree is serialized in level-order format, with 'null' separating each node's children.\",\n    \"Step 2 - Recursive Postorder Traversal\": \"Define a helper function that recursively visits all child nodes of a given node, adds their values to a result list, and finally adds the value of the current node.\",\n    \"Step 3 - Iterative Postorder Traversal\": \"Use a stack initialized with the root node. Traverse the tree in a modified preorder manner (root -> right-to-left children). Reverse the collected result at the end to simulate postorder traversal.\",\n    \"Step 4 - Reverse Result for Iterative Approach\": \"Since the iterative approach simulates a preorder-like traversal, reverse the result list at the end to achieve the correct postorder sequence.\",\n    \"Step 5 - Output Results\": \"Return the postorder traversal values as a list.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          null,\n          3,\n          2,\n          4,\n          null,\n          5,\n          6\n        ]\n      },\n      \"output\": [\n        5,\n        6,\n        3,\n        2,\n        4,\n        1\n      ],\n      \"explanation\": \"The traversal visits the children of node 3 (5, 6) first, then node 3 itself, followed by nodes 2 and 4, and finally the root node (1).\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          null,\n          2,\n          3,\n          4,\n          5,\n          null,\n          null,\n          6,\n          7,\n          null,\n          8,\n          null,\n          9,\n          10,\n          null,\n          null,\n          11,\n          null,\n          12,\n          null,\n          13,\n          null,\n          null,\n          14\n        ]\n      },\n      \"output\": [\n        2,\n        6,\n        14,\n        11,\n        7,\n        3,\n        12,\n        8,\n        4,\n        13,\n        9,\n        10,\n        5,\n        1\n      ],\n      \"explanation\": \"The traversal processes all children nodes first, moving left-to-right within each level, then visits their parent nodes recursively until the root.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"The number of nodes in the tree is in the range [0, 10^4].\",\n    \"node_value_range\": \"0 <= Node.val <= 10^4\",\n    \"tree_height\": \"The height of the n-ary tree is less than or equal to 1000.\"\n  },\n  \"follow_up\": \"Optimize the iterative method to minimize memory usage by avoiding result reversal or by maintaining a stack that mimics recursion more directly.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the flight path from the tickets list. Start at 'JFK' and use all tickets."}, {"role": "assistant", "content": "{\n  \"description\": \"Reconstruct an itinerary using a list of airline tickets `tickets` where `tickets[i] = [from, to]`. The itinerary must start at 'JFK' and include all tickets exactly once. If multiple itineraries are valid, return the one with the smallest lexicographical order.\",\n  \"objective\": \"Design an efficient algorithm to construct the itinerary ensuring all tickets are used exactly once and in lexicographical order where conflicts exist.\",\n  \"meta_prompt\": {\n    \"Step 1 - Graph Construction\": \"Build a directed graph where each airport is a node and each ticket represents a directed edge. Use a priority queue to store outgoing flights to ensure lexicographical order.\",\n    \"Step 2 - Depth-First Search (DFS)\": \"Use DFS to explore all possible itineraries starting from 'JFK'. Traverse each edge once and backtrack when needed to reconstruct the valid path.\",\n    \"Step 3 - Path Reconstruction\": \"Store the itinerary during backtracking to ensure that the final path respects the lexicographical order and uses all tickets.\",\n    \"Step 4 - Validation\": \"Ensure that all tickets are used exactly once and that the itinerary forms a valid Eulerian path.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"tickets\": [\n          [\n            \"MUC\",\n            \"LHR\"\n          ],\n          [\n            \"JFK\",\n            \"MUC\"\n          ],\n          [\n            \"SFO\",\n            \"SJC\"\n          ],\n          [\n            \"LHR\",\n            \"SFO\"\n          ]\n        ]\n      },\n      \"output\": [\n        \"JFK\",\n        \"MUC\",\n        \"LHR\",\n        \"SFO\",\n        \"SJC\"\n      ],\n      \"explanation\": \"The graph traversal prioritizes smaller lexicographical order and includes all tickets.\"\n    },\n    {\n      \"input\": {\n        \"tickets\": [\n          [\n            \"JFK\",\n            \"SFO\"\n          ],\n          [\n            \"JFK\",\n            \"ATL\"\n          ],\n          [\n            \"SFO\",\n            \"ATL\"\n          ],\n          [\n            \"ATL\",\n            \"JFK\"\n          ],\n          [\n            \"ATL\",\n            \"SFO\"\n          ]\n        ]\n      },\n      \"output\": [\n        \"JFK\",\n        \"ATL\",\n        \"JFK\",\n        \"SFO\",\n        \"ATL\",\n        \"SFO\"\n      ],\n      \"explanation\": \"The traversal respects lexicographical order when multiple valid paths exist.\"\n    }\n  ],\n  \"constraints\": {\n    \"ticket_count\": \"1 <= tickets.length <= 300\",\n    \"airport_code_length\": \"from.length == 3 and to.length == 3\",\n    \"valid_tickets\": \"All tickets form at least one valid itinerary.\"\n  },\n  \"follow_up\": \"How would you optimize the graph traversal for larger datasets while ensuring lexicographical order?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find how many courses you can take from a list of courses with durations and deadlines."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `courses` where each course is represented by `[duration, lastDay]`, determine the maximum number of courses that can be taken such that all courses are completed before their respective deadlines.\",\n  \"objective\": \"Efficiently schedule the maximum number of courses using a priority queue to maintain durations of selected courses.\",\n  \"meta_prompt\": {\n    \"Step 1 - Sort Courses by Deadline\": \"Sort the `courses` array by their `lastDay` values in ascending order.\",\n    \"Step 2 - Initialize Priority Queue\": \"Create a max-heap (priority queue) to store durations of selected courses and a `time` variable initialized to 0.\",\n    \"Step 3 - Iterate Over Courses\": \"For each course, check if it can be completed within its deadline. If yes, add its duration to the heap and update the `time` variable.\",\n    \"Step 4 - Replace Longest Duration if Necessary\": \"If a course cannot be directly added due to exceeding the deadline, check the heap for the longest duration. Replace it with the current course's duration if the current course's duration is shorter.\",\n    \"Step 5 - Return Result\": \"The size of the heap at the end represents the maximum number of courses that can be taken.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"courses\": [\n          [\n            100,\n            200\n          ],\n          [\n            200,\n            1300\n          ],\n          [\n            1000,\n            1250\n          ],\n          [\n            2000,\n            3200\n          ]\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"Courses [100, 200], [1000, 1250], and [200, 1300] can be taken without exceeding their deadlines.\"\n    },\n    {\n      \"input\": {\n        \"courses\": [\n          [\n            1,\n            2\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"Only one course is available, and it can be taken.\"\n    },\n    {\n      \"input\": {\n        \"courses\": [\n          [\n            3,\n            2\n          ],\n          [\n            4,\n            3\n          ]\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"Neither course can be taken as their durations exceed their deadlines.\"\n    }\n  ],\n  \"constraints\": {\n    \"num_courses\": \"1 <= courses.length <= 10^4\",\n    \"duration_range\": \"1 <= duration[i], lastDay[i] <= 10^4\"\n  },\n  \"follow_up\": \"Explore optimizations for handling larger datasets and the impact of different sorting strategies on runtime performance.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the smallest path to reach the last index of an array with the minimum cost."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the lexicographically smallest path to reach the last index of an array `coins` with the minimum cost, while respecting jump constraints and avoiding invalid indices.\",\n  \"objective\": \"Use dynamic programming with memoization to efficiently compute the minimum cost and reconstruct the path to index `n`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Memoization\": \"Create a memo array to store the minimum cost of reaching each index. Initialize with a high value for uncomputed indices.\",\n    \"Step 2 - Define Recursive Function\": \"Implement a recursive function that calculates the minimum cost to reach index `n` by considering all valid jumps from the current index within the `maxJump` range.\",\n    \"Step 3 - Compute Costs\": \"For each valid jump, compute the cost to reach the target index and add it to the current index's cost. Store the result in the memo array to avoid redundant calculations.\",\n    \"Step 4 - Track Path\": \"While calculating costs, maintain a path array to record the lexicographically smallest sequence of indices that leads to the minimum cost.\",\n    \"Step 5 - Return Result\": \"After computing the minimum cost and path to index `n`, return the path. If no valid path exists, return an empty array.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"coins\": [\n          1,\n          2,\n          4,\n          -1,\n          2\n        ],\n        \"maxJump\": 2\n      },\n      \"output\": [\n        1,\n        3,\n        5\n      ],\n      \"explanation\": \"Starting at index 1, jump to index 3, then index 5 for a total cost of 1 + 4 + 2 = 7. This is the lexicographically smallest valid path with minimum cost.\"\n    },\n    {\n      \"input\": {\n        \"coins\": [\n          1,\n          2,\n          4,\n          -1,\n          2\n        ],\n        \"maxJump\": 1\n      },\n      \"output\": [],\n      \"explanation\": \"It is impossible to reach index 5 with `maxJump = 1` due to the invalid index 4.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= coins.length <= 1000\",\n    \"coin_values\": \"-1 <= coins[i] <= 100\",\n    \"initial_condition\": \"coins[1] != -1\",\n    \"max_jump_range\": \"1 <= maxJump <= 100\"\n  },\n  \"follow_up\": \"Discuss the time complexity of the memoization-based approach and its feasibility for larger arrays with higher `maxJump` values.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Reverse the words in a string."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an input string `s`, reverse the order of the **words**. A word is defined as a sequence of non-space characters. The returned string should have words separated by a single space, with no leading or trailing spaces.\",\n  \"objective\": \"Design an algorithm to reverse the order of words in a string efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves reversing the order of words while ensuring there are no extra spaces.\",\n    \"Step 2 - Trim and Split\": \"Trim leading and trailing spaces, then split the string into words using whitespace as the delimiter.\",\n    \"Step 3 - Reverse Words\": \"Reverse the order of words in the list.\",\n    \"Step 4 - Concatenate\": \"Join the reversed words into a single string with a single space separating them.\",\n    \"Step 5 - Handle Edge Cases\": \"Handle cases such as empty strings, strings with multiple spaces, or strings with a single word.\",\n    \"Step 6 - Optimize\": \"If the string is mutable, implement the solution in-place with O(1) extra space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"the sky is blue\"\n      },\n      \"output\": \"blue is sky the\",\n      \"explanation\": \"The words are reversed in order with single spaces.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"   hello world   \"\n      },\n      \"output\": \"world hello\",\n      \"explanation\": \"Leading and trailing spaces are removed, and the words are reversed.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"a good   example\"\n      },\n      \"output\": \"example good a\",\n      \"explanation\": \"Multiple spaces are reduced to a single space, and the words are reversed.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 10^4\",\n    \"character_set\": \"s contains English letters, digits, and spaces.\"\n  },\n  \"follow_up\": \"If the string data type is mutable in your language, can you solve it in-place with O(1) extra space?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if you can measure water."}, {"role": "assistant", "content": "{\n  \"title\": \"Water Jug Problem\",\n  \"description\": \"Determine if it is possible to measure exactly `targetCapacity` liters using two jugs with given capacities and a set of allowed operations.\",\n  \"input\": [\n    {\n      \"name\": \"jug1Capacity\",\n      \"type\": \"integer\",\n      \"description\": \"Capacity of the first jug in liters.\",\n      \"constraints\": \"1 <= jug1Capacity <= 10^6\"\n    },\n    {\n      \"name\": \"jug2Capacity\",\n      \"type\": \"integer\",\n      \"description\": \"Capacity of the second jug in liters.\",\n      \"constraints\": \"1 <= jug2Capacity <= 10^6\"\n    },\n    {\n      \"name\": \"targetCapacity\",\n      \"type\": \"integer\",\n      \"description\": \"The desired amount of water to measure in liters.\",\n      \"constraints\": \"1 <= targetCapacity <= 10^6\"\n    }\n  ],\n  \"output\": {\n    \"type\": \"boolean\",\n    \"description\": \"`true` if it is possible to measure exactly `targetCapacity` liters, otherwise `false`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"jug1Capacity\": 3,\n        \"jug2Capacity\": 5,\n        \"targetCapacity\": 4\n      },\n      \"output\": true,\n      \"explanation\": \"Using operations, we can measure exactly 4 liters: fill the 5L jug, pour into the 3L jug, leaving 2L in the 5L jug. Then, empty the 3L jug and pour the remaining 2L from the 5L jug into the 3L jug. Finally, fill the 5L jug again and pour into the 3L jug to get exactly 4L.\"\n    },\n    {\n      \"input\": {\n        \"jug1Capacity\": 2,\n        \"jug2Capacity\": 6,\n        \"targetCapacity\": 5\n      },\n      \"output\": false,\n      \"explanation\": \"It is impossible to measure 5 liters using these jugs.\"\n    },\n    {\n      \"input\": {\n        \"jug1Capacity\": 1,\n        \"jug2Capacity\": 2,\n        \"targetCapacity\": 3\n      },\n      \"output\": true,\n      \"explanation\": \"We can measure exactly 3 liters by filling both jugs.\"\n    }\n  ],\n  \"hints\": [\n    \"Use the mathematical property: `targetCapacity` is measurable if it is a multiple of the GCD of `jug1Capacity` and `jug2Capacity`, and `targetCapacity` is less than or equal to the sum of the jug capacities.\",\n    \"Compute the GCD of `jug1Capacity` and `jug2Capacity` to determine the divisibility condition.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve an O(log(min(jug1Capacity, jug2Capacity))) solution using the Euclidean algorithm for GCD calculation.\",\n    \"constraints\": \"Avoid simulation-based approaches that attempt every possible combination of operations.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Remove duplicates in a sorted array so that each element appears at most twice. Modify the array in place."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums` sorted in non-decreasing order, remove duplicates in-place so that each unique element appears at most twice. Modify the input array such that the first `k` elements contain the desired result in the same relative order, and return `k`. The remaining elements beyond `k` are irrelevant.\",\n  \"objective\": \"Design an efficient algorithm to modify the array in-place with O(1) extra memory while ensuring that the solution adheres to the constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves retaining at most two occurrences of each unique element in a sorted array while maintaining the relative order. This can be done using a two-pointer approach.\",\n    \"Step 2 - Two-Pointer Technique\": \"Use a pointer `write` to track the position for overwriting elements and another pointer `read` to traverse the array. Write each unique element up to two times.\",\n    \"Step 3 - Key Condition\": \"For the current element at `read`, check if it can be added by comparing it to the element at `write - 2`. If it's different or the second occurrence, overwrite at `write`.\",\n    \"Step 4 - Return Result\": \"Return the value of `write`, which represents the length `k` of the modified array.\",\n    \"Step 5 - Constraints Compliance\": \"Ensure the algorithm runs efficiently with constraints `1 <= nums.length <= 3 * 10^4` and uses only O(1) extra memory.\",\n    \"Step 6 - Handle Edge Cases\": \"Consider cases such as arrays with all identical elements, arrays with no duplicates, or arrays with fewer than three elements.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          1,\n          1,\n          2,\n          2,\n          3\n        ]\n      },\n      \"output\": {\n        \"k\": 5,\n        \"nums\": [\n          1,\n          1,\n          2,\n          2,\n          3,\n          \"_\"\n        ]\n      },\n      \"explanation\": \"The first 5 elements are the desired result: [1, 1, 2, 2, 3].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          0,\n          1,\n          1,\n          1,\n          1,\n          2,\n          3,\n          3\n        ]\n      },\n      \"output\": {\n        \"k\": 7,\n        \"nums\": [\n          0,\n          0,\n          1,\n          1,\n          2,\n          3,\n          3,\n          \"_\",\n          \"_\"\n        ]\n      },\n      \"explanation\": \"The first 7 elements are the desired result: [0, 0, 1, 1, 2, 3, 3].\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 3 * 10^4\",\n    \"value_range\": \"-10^4 <= nums[i] <= 10^4\",\n    \"sorted_order\": \"The input array `nums` is sorted in non-decreasing order.\",\n    \"space_complexity\": \"The algorithm must use O(1) extra memory.\"\n  },\n  \"follow_up\": \"Can you generalize this algorithm to handle cases where each unique element can appear at most `x` times?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum number of rooms needed for a list of meetings."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of meeting time intervals `intervals`, determine the minimum number of conference rooms required to host all meetings without overlap. Each interval `[starti, endi]` represents a meeting with a start and end time.\",\n  \"objective\": \"Design an efficient algorithm to calculate the minimum number of meeting rooms needed, ensuring the solution handles large input sizes and overlapping intervals effectively.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that a meeting room is required whenever a new meeting starts before a previously started meeting ends. The problem boils down to finding the maximum number of overlapping intervals at any time.\",\n    \"Step 2 - Initial Approach\": \"Extract the start and end times of all intervals into two separate lists. Sort both lists independently.\",\n    \"Step 3 - Efficient Solution with Two Pointers\": \"Use a two-pointer technique to compare the start and end times. Increment the room count when a new meeting starts before the earliest ending meeting finishes. Move the pointer for ending times forward when a room is freed.\",\n    \"Step 4 - Optimize for Edge Cases\": \"Handle cases with intervals that touch but do not overlap, intervals with the same start and end times, and large numbers of intervals.\",\n    \"Step 5 - Final Output\": \"Return the maximum number of simultaneous meetings as the minimum number of rooms required.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"intervals\": [\n          [\n            0,\n            30\n          ],\n          [\n            5,\n            10\n          ],\n          [\n            15,\n            20\n          ]\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"Meetings [0, 30] and [5, 10] overlap, so two rooms are required.\"\n    },\n    {\n      \"input\": {\n        \"intervals\": [\n          [\n            7,\n            10\n          ],\n          [\n            2,\n            4\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"No meetings overlap, so only one room is needed.\"\n    },\n    {\n      \"input\": {\n        \"intervals\": [\n          [\n            1,\n            5\n          ],\n          [\n            2,\n            6\n          ],\n          [\n            4,\n            7\n          ],\n          [\n            5,\n            8\n          ]\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The maximum number of overlapping meetings is three.\"\n    }\n  ],\n  \"constraints\": {\n    \"intervals_length\": \"1 <= intervals.length <= 10^4\",\n    \"start_and_end_times\": \"0 <= starti < endi <= 10^6\",\n    \"time_complexity\": \"Ensure the solution runs in O(n log n) due to sorting.\"\n  },\n  \"follow_up\": \"Can you extend this solution to track which meetings occur in each room for scheduling purposes?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a number is an ugly number."}, {"role": "assistant", "content": "{\n  \"description\": \"An **ugly number** is a positive integer whose prime factors are limited to `2`, `3`, and `5`. Given an integer `n`, determine if `n` is an ugly number. Return `true` if `n` is an ugly number, otherwise return `false`.\",\n  \"objective\": \"Design an efficient algorithm to check if the given integer `n` is an ugly number by dividing it repeatedly by `2`, `3`, and `5` until the result is either `1` or a number with a prime factor other than `2`, `3`, or `5`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that an ugly number is divisible only by `2`, `3`, and `5`. If `n` is negative or `0`, it cannot be an ugly number.\",\n    \"Step 2 - Approach\": \"Iteratively divide `n` by `2`, `3`, and `5` while it is divisible by these numbers. After removing all these factors, check if the remaining value is `1`.\",\n    \"Step 3 - Handling Edge Cases\": \"Return `true` for `n = 1` as it has no prime factors. Return `false` for `n <= 0` or if the remaining value after factor removal is greater than `1`.\",\n    \"Step 4 - Optimization\": \"Minimize the number of operations by performing division only when `n` is divisible by `2`, `3`, or `5`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 6\n      },\n      \"output\": true,\n      \"explanation\": \"6 = 2 * 3, and its prime factors are limited to 2 and 3.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1\n      },\n      \"output\": true,\n      \"explanation\": \"1 has no prime factors, so it is considered an ugly number.\"\n    },\n    {\n      \"input\": {\n        \"n\": 14\n      },\n      \"output\": false,\n      \"explanation\": \"14 includes the prime factor 7, so it is not an ugly number.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"-2^31 <= n <= 2^31 - 1\",\n    \"ugly_number_definition\": \"A positive integer with prime factors limited to `2`, `3`, and `5` is an ugly number.\"\n  },\n  \"follow_up\": \"Can you extend this approach to generate the first `n` ugly numbers efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Make a function to serialize and deserialize an N-ary tree."}, {"role": "assistant", "content": "{\n  \"title\": \"Serialize and Deserialize an N-ary Tree\",\n  \"description\": \"Design an algorithm to serialize and deserialize an N-ary tree. Serialization is the process of converting a data structure into a format that can be stored or transmitted. Deserialization reconstructs the data structure back to its original form. The algorithm should encode an N-ary tree into a string format and decode it back to the original tree structure.\",\n  \"objective\": \"Implement functions `serialize(root: Node) -> str` and `deserialize(data: str) -> Node` that can encode and decode an N-ary tree.\",\n  \"input\": {\n    \"serialize\": {\n      \"name\": \"root\",\n      \"type\": \"Node\",\n      \"description\": \"The root of the N-ary tree to be serialized.\"\n    },\n    \"deserialize\": {\n      \"name\": \"data\",\n      \"type\": \"string\",\n      \"description\": \"The serialized string representation of the N-ary tree.\"\n    }\n  },\n  \"output\": {\n    \"serialize\": {\n      \"type\": \"string\",\n      \"description\": \"The serialized string representation of the N-ary tree.\"\n    },\n    \"deserialize\": {\n      \"type\": \"Node\",\n      \"description\": \"The root of the deserialized N-ary tree.\"\n    }\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"serialize\": {\n          \"root\": [\n            1,\n            null,\n            3,\n            2,\n            4,\n            null,\n            5,\n            6\n          ]\n        },\n        \"deserialize\": {\n          \"data\": \"[1,null,3,2,4,null,5,6]\"\n        }\n      },\n      \"output\": {\n        \"serialize\": \"[1,null,3,2,4,null,5,6]\",\n        \"deserialize\": [\n          1,\n          null,\n          3,\n          2,\n          4,\n          null,\n          5,\n          6\n        ]\n      },\n      \"explanation\": \"The tree is serialized into a level-order format and then reconstructed.\"\n    },\n    {\n      \"input\": {\n        \"serialize\": {\n          \"root\": []\n        },\n        \"deserialize\": {\n          \"data\": \"[]\"\n        }\n      },\n      \"output\": {\n        \"serialize\": \"[]\",\n        \"deserialize\": []\n      },\n      \"explanation\": \"An empty tree is serialized as an empty string and deserialized back to an empty tree.\"\n    }\n  ],\n  \"hints\": [\n    \"Consider using a level-order traversal for serialization and deserialization.\",\n    \"Use markers such as `null` to denote the end of children for a node.\",\n    \"Ensure the deserialization process can handle edge cases like empty trees or trees with a single node.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Minimize the size of the serialized string and ensure the deserialization process is efficient.\",\n    \"constraints\": \"Avoid using global or static variables to store states.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Delete a key from a tree."}, {"role": "assistant", "content": "{\n  \"title\": \"Delete Node from a BST\",\n  \"description\": \"Given the root of a binary search tree (BST) and a key, delete the node with the given key and return the root reference of the modified BST. The BST must remain valid after deletion.\",\n  \"input\": {\n    \"root\": {\n      \"type\": \"TreeNode\",\n      \"description\": \"The root node of the binary search tree.\",\n      \"constraints\": {\n        \"numberOfNodes\": \"[0, 10^4]\",\n        \"nodeValues\": \"Unique values in the range [-10^5, 10^5]\"\n      }\n    },\n    \"key\": {\n      \"type\": \"integer\",\n      \"description\": \"The value of the node to be deleted from the BST.\",\n      \"constraints\": \"In the range [-10^5, 10^5]\"\n    }\n  },\n  \"output\": {\n    \"type\": \"TreeNode\",\n    \"description\": \"The root node of the updated BST.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          5,\n          3,\n          6,\n          2,\n          4,\n          null,\n          7\n        ],\n        \"key\": 3\n      },\n      \"output\": [\n        5,\n        4,\n        6,\n        2,\n        null,\n        null,\n        7\n      ],\n      \"explanation\": \"The node with value 3 is removed. Its left child (2) and right child (4) are adjusted accordingly, maintaining BST properties.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          5,\n          3,\n          6,\n          2,\n          4,\n          null,\n          7\n        ],\n        \"key\": 0\n      },\n      \"output\": [\n        5,\n        3,\n        6,\n        2,\n        4,\n        null,\n        7\n      ],\n      \"explanation\": \"The key 0 is not found in the tree, so the BST remains unchanged.\"\n    },\n    {\n      \"input\": {\n        \"root\": [],\n        \"key\": 0\n      },\n      \"output\": [],\n      \"explanation\": \"The tree is empty, so there is no change.\"\n    }\n  ],\n  \"hints\": [\n    \"Handle the three cases for deleting a node: the node has no children, one child, or two children.\",\n    \"For a node with two children, replace the node with its in-order successor or predecessor.\",\n    \"Ensure the BST properties are preserved after deletion.\"\n  ],\n  \"constraints\": {\n    \"timeComplexity\": \"O(height of tree)\",\n    \"spaceComplexity\": \"O(1) for iterative solutions or O(height of tree) for recursive solutions\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum product of any three numbers in an array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums`, find three numbers whose product is maximum and return the maximum product.\",\n  \"objective\": \"Efficiently determine the maximum product of three numbers in the array by identifying the top three largest and the two smallest values during a single scan.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Extremes\": \"Set initial variables for the three largest numbers (`max1`, `max2`, `max3`) and two smallest numbers (`min1`, `min2`) to extreme values.\",\n    \"Step 2 - Scan Array\": \"Iterate through `nums`, updating `max1`, `max2`, `max3` for the largest values and `min1`, `min2` for the smallest values.\",\n    \"Step 3 - Compute Maximum Product\": \"Calculate the maximum product as the greater value between `max1 * max2 * max3` and `min1 * min2 * max1`.\",\n    \"Step 4 - Return Result\": \"Return the computed maximum product as the final result.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"The largest three numbers are 1, 2, and 3. Their product is 6.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          4\n        ]\n      },\n      \"output\": 24,\n      \"explanation\": \"The largest three numbers are 2, 3, and 4. Their product is 24.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          -1,\n          -2,\n          -3\n        ]\n      },\n      \"output\": -6,\n      \"explanation\": \"The three numbers are -1, -2, and -3. Their product is -6.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"3 <= nums.length <= 10^4\",\n    \"value_range\": \"-1000 <= nums[i] <= 1000\"\n  },\n  \"follow_up\": \"Discuss how the algorithm can handle edge cases like all negative numbers, mixed positive and negative numbers, or very large arrays.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given the root of a binary tree. Return the smallest subtree containing all the deepest nodes."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given the root of a binary tree. Your task is to find the smallest subtree that contains all the deepest nodes. A node is considered deepest if it has the maximum depth in the tree.\",\n  \"objective\": \"The goal is to return the smallest subtree that includes all the deepest nodes. This subtree must be rooted at a node that is the lowest common ancestor of all the deepest nodes.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The problem is asking to identify the smallest subtree rooted at the lowest common ancestor (LCA) of the deepest nodes in the binary tree. We need to find the depth of each node, identify the deepest nodes, and then determine the LCA of these nodes to return the smallest subtree.\",\n    \"Step 2 - Approach\": \"We can perform a Depth-First Search (DFS) to calculate the depth of each node and determine which nodes are the deepest. Then, we can recursively find the LCA of the deepest nodes, which will give us the smallest subtree.\",\n    \"Step 3 - Output Format\": \"Return the subtree rooted at the node that is the LCA of the deepest nodes. The result should be a tree structure starting from this node.\",\n    \"Step 4 - Code Efficiency and Edge Cases\": \"Consider edge cases like when the tree has only one node, or when there are multiple nodes with the same maximum depth. The solution should run in O(n) time, where n is the number of nodes in the tree, since we are performing DFS.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          5,\n          1,\n          6,\n          2,\n          0,\n          8,\n          null,\n          null,\n          7,\n          4\n        ]\n      },\n      \"output\": [\n        2,\n        7,\n        4\n      ],\n      \"explanation\": \"The deepest nodes in the tree are 7, 4, and 8. The smallest subtree containing these nodes is rooted at node 2.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1\n        ]\n      },\n      \"output\": [\n        1\n      ],\n      \"explanation\": \"Since the tree has only one node, that node is the deepest, and the smallest subtree is the root itself.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          0,\n          1,\n          3,\n          null,\n          2\n        ]\n      },\n      \"output\": [\n        2\n      ],\n      \"explanation\": \"The deepest node in the tree is 2. The subtree rooted at node 2 is the smallest subtree containing all the deepest nodes.\"\n    }\n  ],\n  \"constraints\": {\n    \"tree_size\": \"1 <= nodes <= 500\",\n    \"unique_values\": \"Each node value is unique.\",\n    \"node_depth_range\": \"Node values are between 0 and 500.\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm to find the LCA of the deepest nodes without computing depths for all nodes?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Group duplicate files based on their content."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a list of directory information containing file paths and their respective contents, identify and group all duplicate files based on identical content.\",\n  \"objective\": \"Find all duplicate files in the filesystem, grouping their paths by identical content, and return the results in any order.\",\n  \"meta_prompt\": {\n    \"Step 1 - Parse Input\": \"Split each string in the `paths` list into a directory path and its file entries.\",\n    \"Step 2 - Extract File Details\": \"Extract the file name and content from each file entry in the directory.\",\n    \"Step 3 - Populate HashMap\": \"Store file paths in a hashmap where the key is the file content and the value is a list of paths.\",\n    \"Step 4 - Identify Duplicates\": \"Filter the hashmap to collect lists of file paths with duplicate content.\",\n    \"Step 5 - Return Result\": \"Return all groups of duplicate file paths as the final output.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"paths\": [\n          \"root/a 1.txt(abcd) 2.txt(efgh)\",\n          \"root/c 3.txt(abcd)\",\n          \"root/c/d 4.txt(efgh)\",\n          \"root 4.txt(efgh)\"\n        ]\n      },\n      \"output\": [\n        [\n          \"root/a/1.txt\",\n          \"root/c/3.txt\"\n        ],\n        [\n          \"root/a/2.txt\",\n          \"root/c/d/4.txt\",\n          \"root/4.txt\"\n        ]\n      ],\n      \"explanation\": \"Files with the same content are grouped together based on their paths.\"\n    },\n    {\n      \"input\": {\n        \"paths\": [\n          \"root/a 1.txt(abcd) 2.txt(efgh)\",\n          \"root/c 3.txt(abcd)\",\n          \"root/c/d 4.txt(efgh)\"\n        ]\n      },\n      \"output\": [\n        [\n          \"root/a/1.txt\",\n          \"root/c/3.txt\"\n        ],\n        [\n          \"root/a/2.txt\",\n          \"root/c/d/4.txt\"\n        ]\n      ],\n      \"explanation\": \"Two groups of duplicate files are identified, one for `abcd` and one for `efgh`.\"\n    }\n  ],\n  \"constraints\": {\n    \"input_length\": \"1 <= paths.length <= 2 * 10^4\",\n    \"string_length\": \"1 <= paths[i].length <= 3000\",\n    \"total_length\": \"1 <= sum(paths[i].length) <= 5 * 10^5\"\n  },\n  \"follow_up\": {\n    \"large_file_system\": \"Discuss strategies for searching duplicate files in a real filesystem using DFS or BFS.\",\n    \"large_file_content\": \"Propose solutions for handling large file content, such as hashing content in chunks.\",\n    \"limited_memory\": \"Suggest techniques for reading files in fixed-sized chunks to optimize memory usage.\",\n    \"false_positives\": \"Explain methods to avoid false positives, such as combining hash checks with byte-by-byte content verification.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Convert a sorted array to a height-balanced BST."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums` sorted in ascending order, convert it to a height-balanced binary search tree (BST). A height-balanced BST is defined as a binary tree in which the depth of the two subtrees of every node never differs by more than one.\",\n  \"objective\": \"Design an algorithm to construct a height-balanced BST from a sorted array.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the middle element of the array will be the root of the tree, with left and right subtrees built recursively from the left and right halves of the array.\",\n    \"Step 2 - Recursive Construction\": \"Recursively pick the middle element as the root and split the array into left and right subarrays for subtree construction.\",\n    \"Step 3 - Base Case\": \"Terminate recursion when the subarray is empty.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as a single-element array and arrays with even lengths.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(n) time by avoiding unnecessary copying of arrays.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          -10,\n          -3,\n          0,\n          5,\n          9\n        ]\n      },\n      \"output\": {\n        \"root\": [\n          0,\n          -3,\n          9,\n          -10,\n          null,\n          5\n        ]\n      },\n      \"explanation\": \"The constructed BST is height-balanced, with root 0 and subtrees built from [-10, -3] and [5, 9].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          3\n        ]\n      },\n      \"output\": {\n        \"root\": [\n          3,\n          1\n        ]\n      },\n      \"explanation\": \"A height-balanced BST is built with root 3 and left child 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10^4\",\n    \"node_values\": \"-10^4 <= nums[i] <= 10^4\",\n    \"array_properties\": \"The array is sorted in strictly increasing order.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the course order from a list of prerequisites."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a number of courses and their prerequisites. Design an algorithm to determine a valid order in which to complete all courses or return an empty list if it is impossible.\",\n  \"objective\": \"Implement a function that uses topological sorting to find a valid course schedule or detect if a cycle makes completion impossible.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Understand that this is a graph problem where courses are nodes and prerequisites are directed edges.\",\n    \"Step 2 - Represent the Graph\": \"Build an adjacency list representation of the graph using the input prerequisites.\",\n    \"Step 3 - Topological Sorting\": \"Use Kahn\\u2019s algorithm or DFS to find a valid topological order.\",\n    \"Step 4 - Detect Cycles\": \"Ensure no cycles exist in the graph. If a cycle is detected, return an empty list.\",\n    \"Step 5 - Output\": \"Return any valid order of courses if possible.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"numCourses\": 4,\n        \"prerequisites\": [\n          [\n            1,\n            0\n          ],\n          [\n            2,\n            0\n          ],\n          [\n            3,\n            1\n          ],\n          [\n            3,\n            2\n          ]\n        ]\n      },\n      \"output\": [\n        0,\n        1,\n        2,\n        3\n      ],\n      \"explanation\": \"Both courses 1 and 2 depend on 0, and course 3 depends on both 1 and 2. Valid orders include [0, 1, 2, 3] or [0, 2, 1, 3].\"\n    },\n    {\n      \"input\": {\n        \"numCourses\": 2,\n        \"prerequisites\": [\n          [\n            1,\n            0\n          ]\n        ]\n      },\n      \"output\": [\n        0,\n        1\n      ],\n      \"explanation\": \"Course 1 depends on course 0, so the order is [0, 1].\"\n    },\n    {\n      \"input\": {\n        \"numCourses\": 2,\n        \"prerequisites\": [\n          [\n            1,\n            0\n          ],\n          [\n            0,\n            1\n          ]\n        ]\n      },\n      \"output\": [],\n      \"explanation\": \"A cycle exists between courses 0 and 1, making it impossible to complete all courses.\"\n    }\n  ],\n  \"constraints\": {\n    \"numCourses\": \"1 <= numCourses <= 2000\",\n    \"prerequisites\": \"0 <= prerequisites.length <= numCourses * (numCourses - 1)\",\n    \"valid_prerequisites\": \"0 <= ai, bi < numCourses, ai != bi, all pairs are unique\"\n  },\n  \"follow_up\": \"Could you optimize the solution to handle very large input sizes using efficient graph traversal techniques?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given two arrays of the same length, nums1 and nums2, find the minimum number of swaps needed to make both arrays strictly increasing."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given two integer arrays, nums1 and nums2, of the same length. In one operation, you can swap nums1[i] with nums2[i] for any index i. Your task is to return the minimum number of operations needed to make both nums1 and nums2 strictly increasing. A strictly increasing array is defined as one where each element is less than the next. You must find the minimum swaps required to achieve this condition for both arrays.\",\n  \"objective\": \"Design an efficient algorithm that calculates the minimum number of swap operations required to make both arrays nums1 and nums2 strictly increasing. Aim for a time complexity that can handle the largest input sizes within the problem's constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"You need to ensure that both arrays, nums1 and nums2, become strictly increasing after the minimum number of swaps. This means for each i, nums1[i] must be less than nums1[i+1] and nums2[i] must be less than nums2[i+1].\",\n    \"Step 2 - Possible Approaches\": \"Consider a dynamic programming approach where for each index, you track whether it's better to swap the elements or leave them as they are. This will allow you to compute the minimum number of operations needed.\",\n    \"Step 3 - Transition Function\": \"For each index i, calculate two possibilities: one where no swap is done (nums1[i] remains with nums1[i] and nums2[i] remains with nums2[i]), and one where a swap is done (nums1[i] is swapped with nums2[i] and vice versa). Determine the optimal number of operations at each step.\",\n    \"Step 4 - Base Case and Recursion\": \"Start with the first index, where no swaps are necessary. Then for each subsequent index, decide whether to swap or not, ensuring both arrays remain strictly increasing.\",\n    \"Step 5 - Final Solution\": \"Return the minimum number of swaps needed to make both arrays strictly increasing.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums1\": [\n          1,\n          3,\n          5,\n          4\n        ],\n        \"nums2\": [\n          1,\n          2,\n          3,\n          7\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"Swapping nums1[3] and nums2[3] makes nums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4], both strictly increasing.\"\n    },\n    {\n      \"input\": {\n        \"nums1\": [\n          0,\n          3,\n          5,\n          8,\n          9\n        ],\n        \"nums2\": [\n          2,\n          1,\n          4,\n          6,\n          9\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"One swap is needed to make both arrays strictly increasing.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"2 <= nums1.length <= 10^5\",\n    \"nums_values\": \"0 <= nums1[i], nums2[i] <= 2 * 10^5\",\n    \"nums_equivalence\": \"nums1.length == nums2.length\"\n  },\n  \"follow_up\": \"How can you optimize this solution to run in O(n) time complexity, considering the problem constraints?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the h-index of a researcher given their citation counts in a sorted array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a sorted array `citations` where `citations[i]` is the number of citations a researcher received for their `i-th` paper, calculate the researcher's h-index. The h-index is defined as the maximum value of `h` such that the researcher has at least `h` papers with `h` or more citations. The algorithm must run in `O(log n)` time.\",\n  \"objective\": \"Design an efficient algorithm using binary search to compute the h-index by leveraging the sorted nature of the citations array.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The sorted array allows for binary search to determine the h-index by checking the condition `citations[i] >= n - i` for each index.\",\n    \"Step 2 - Binary Search\": \"Use binary search to find the smallest index `i` where `citations[i] >= n - i`. This index corresponds to the h-index, which is `n - i`.\",\n    \"Step 3 - Optimization\": \"Avoid iterating through the entire array by maintaining bounds (`low` and `high`) and narrowing the search space based on the binary search condition.\",\n    \"Step 4 - Edge Cases\": \"Handle cases where no valid h-index exists (e.g., all citation counts are zero) and where all papers are highly cited (e.g., all values are larger than the number of papers).\",\n    \"Step 5 - Output\": \"Return the h-index as an integer.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"citations\": [\n          0,\n          1,\n          3,\n          5,\n          6\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The researcher has 3 papers with at least 3 citations each.\"\n    },\n    {\n      \"input\": {\n        \"citations\": [\n          1,\n          2,\n          100\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The researcher has 2 papers with at least 2 citations each.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"1 <= citations.length <= 10^5\",\n    \"citation_count\": \"0 <= citations[i] <= 1000\",\n    \"sorted_input\": \"The citations array is sorted in ascending order.\"\n  },\n  \"follow_up\": \"Can you modify the algorithm to handle arrays where the order is not sorted while maintaining an efficient runtime?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Return the maximum sum of a subarray in a circular array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums. A circular array means the end of the array connects to the beginning of the array, so the subarray can also wrap around the end of the array. Your solution should handle both cases: subarrays that do not wrap around and subarrays that do wrap around.\",\n  \"objective\": \"Find the maximum sum of a subarray in a circular integer array, which can either be a contiguous subarray that doesn't wrap around or a circular subarray that wraps around the end and connects to the beginning.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The problem requires you to calculate the maximum sum of a subarray in a circular integer array. The challenge is to account for subarrays that may wrap around the array. Consider both the maximum subarray that doesn't wrap around and the subarray that does.\",\n    \"Step 2 - Initial Approach\": \"Use Kadane\\u2019s algorithm to calculate the maximum subarray sum for the non-circular case. To handle the circular case, calculate the maximum subarray sum by taking the total sum of the array minus the minimum subarray sum (since wrapping around the array results in excluding the minimum part).\",\n    \"Step 3 - Efficient Algorithm\": \"Implement Kadane's algorithm for both the maximum subarray sum and the minimum subarray sum. Then compute the total sum of the array. The maximum sum is either the maximum subarray sum found by Kadane\\u2019s algorithm or the total sum minus the minimum subarray sum (if wrapping around gives a larger sum).\",\n    \"Step 4 - Edge Case Considerations\": \"If all the elements in the array are negative, the circular subarray will not be beneficial, and the answer should just be the maximum element. Handle this by checking if the total sum minus the minimum subarray sum is negative.\",\n    \"Step 5 - Constraints Verification\": \"The constraints ensure the array length is within a manageable size. Ensure the solution works efficiently for arrays up to length 30,000.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          -2,\n          3,\n          -2\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The maximum subarray is [3], which has a sum of 3.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          5,\n          -3,\n          5\n        ]\n      },\n      \"output\": 10,\n      \"explanation\": \"The maximum subarray is [5, 5], which has a sum of 10.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          -3,\n          -2,\n          -3\n        ]\n      },\n      \"output\": -2,\n      \"explanation\": \"The maximum subarray is [-2], which has a sum of -2.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= n <= 30,000\",\n    \"element_range\": \"-30,000 <= nums[i] <= 30,000\"\n  },\n  \"follow_up\": \"Can you optimize this solution to work in linear time and space?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Sort the array so that even numbers are at even indices and odd numbers are at odd indices."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an array of integers 'nums', where half of the integers are odd and the other half are even. Your task is to sort the array such that whenever 'nums[i]' is odd, the index 'i' is odd, and whenever 'nums[i]' is even, the index 'i' is even. The output can be any valid array that satisfies this condition.\",\n  \"objective\": \"Design an efficient algorithm to rearrange the elements in the array such that odd numbers are placed at odd indices and even numbers are placed at even indices. The solution should ideally run in O(n) time and use constant space.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The input array contains an equal number of odd and even integers, and we need to arrange them in such a way that odd numbers are placed at odd indices and even numbers at even indices. The order of odd and even numbers within their respective indices is not strictly defined.\",\n    \"Step 2 - Initial Approach\": \"Consider using two separate lists: one for odd numbers and one for even numbers. You could iterate through the input array, placing odd numbers at odd indices and even numbers at even indices, but this might require extra space and won't be in-place.\",\n    \"Step 3 - Efficient In-Place Solution\": \"To solve this in-place, use a two-pointer approach or swapping mechanism. One pointer can start from the beginning of the array looking for even numbers to place at even indices, and the other pointer can start from the end of the array looking for odd numbers to place at odd indices.\",\n    \"Step 4 - Output Format\": \"Return the modified array where odd and even numbers are placed at the correct indices. The solution can be in any valid order as long as the odd numbers are at odd indices and the even numbers are at even indices.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Write the code to run in O(n) time, where n is the length of the array, ensuring that the algorithm works efficiently with input sizes up to 2 * 10^4. Handle edge cases like small arrays of length 2 or arrays where odd and even numbers are already in the correct positions.\",\n    \"Final Check - Constraints Verification\": \"Ensure the solution adheres to the constraints of the problem: the array length is even, half of the integers are even, and the integers are in the range [0, 1000].\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          4,\n          2,\n          5,\n          7\n        ]\n      },\n      \"output\": [\n        4,\n        5,\n        2,\n        7\n      ],\n      \"explanation\": \"The odd numbers 5 and 7 are placed at odd indices (1 and 3), and the even numbers 4 and 2 are placed at even indices (0 and 2).\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          3\n        ]\n      },\n      \"output\": [\n        2,\n        3\n      ],\n      \"explanation\": \"The array already satisfies the condition as 2 (even) is at index 0 and 3 (odd) is at index 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"2 <= nums.length <= 2 * 10^4\",\n    \"nums_elements_range\": \"0 <= nums[i] <= 1000\",\n    \"half_even_odd\": \"Half of the integers in nums are even and the other half are odd.\"\n  },\n  \"follow_up\": \"Can you solve the problem in-place, without using additional space or sorting?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a list of words, return the length of the shortest reference string."}, {"role": "assistant", "content": "{\n  \"description\": \"We are given an array of words and need to find the shortest reference string that can encode these words based on specific rules. Each word must appear in the reference string such that the substring starting from certain indices of the string matches the words in the array.\",\n  \"objective\": \"Write a function to find the length of the shortest reference string for a valid encoding of the given array of words.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The reference string should contain the words in such a way that each word is separated by a '#' and every word is a substring of the reference string starting from the index given by `indices`.\",\n    \"Step 2 - Constraints\": \"The function must handle up to 2000 words and words with lengths up to 7 characters. The time complexity should be efficient to handle the upper limit of inputs.\",\n    \"Step 3 - Approach\": \"To minimize the length of the reference string, we need to avoid repeating substrings. The key observation is that we should encode words that share suffixes as efficiently as possible by overlapping the words.\",\n    \"Step 4 - Edge Case Handling\": \"Handle cases where there is only one word, and ensure that we account for shared suffixes between words when calculating the reference string length.\",\n    \"Step 5 - Optimization\": \"Using a set to track the words we've seen will allow us to efficiently check for suffix overlaps. This ensures that we only add the non-overlapping part of each word to the reference string.\",\n    \"Step 6 - Implementation Details\": \"We iterate over the words in reverse order, adding the non-overlapping suffix of each word to the reference string and tracking the total length.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"words\": [\n          \"time\",\n          \"me\",\n          \"bell\"\n        ]\n      },\n      \"output\": 10,\n      \"explanation\": \"A valid encoding is 'time#bell#'. The words 'time', 'me', and 'bell' overlap at their suffixes, leading to the shortest reference string.\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"t\"\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The shortest reference string is 't#' since there is only one word.\"\n    }\n  ],\n  \"constraints\": {\n    \"words_length_range\": \"1 <= words.length <= 2000\",\n    \"word_length_range\": \"1 <= words[i].length <= 7\",\n    \"words_contents\": \"Words consist of only lowercase letters.\"\n  },\n  \"follow_up\": \"How would you modify your approach if we allowed words with mixed uppercase and lowercase letters?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Make a Quad-Tree from a binary grid."}, {"role": "assistant", "content": "{\n  \"title\": \"Construct a Quad-Tree from a Binary Grid\",\n  \"description\": \"Given a `n * n` binary grid `grid` (containing only `0`s and `1`s), construct a Quad-Tree representation of the grid. A Quad-Tree is a hierarchical data structure that divides the grid into sub-grids recursively based on its content.\",\n  \"objective\": \"Implement a function that builds a Quad-Tree from the given `grid` and returns the root node.\",\n  \"input\": {\n    \"grid\": {\n      \"type\": \"2D array\",\n      \"description\": \"A square matrix of size `n * n` containing only `0`s and `1`s.\",\n      \"constraints\": [\n        \"`n == grid.length == grid[i].length`\",\n        \"`n` is a power of 2, where `n = 2^x` with `0 <= x <= 6`.\"\n      ]\n    }\n  },\n  \"output\": {\n    \"type\": \"Node\",\n    \"description\": \"The root of the Quad-Tree representing the grid.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            0,\n            1\n          ],\n          [\n            1,\n            0\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          0,\n          1\n        ],\n        [\n          1,\n          0\n        ],\n        [\n          1,\n          1\n        ],\n        [\n          1,\n          1\n        ],\n        [\n          1,\n          0\n        ]\n      ],\n      \"explanation\": \"The Quad-Tree divides the grid into four sub-grids. Each sub-grid is a leaf node, and their values correspond to the grid content.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1\n          ],\n          [\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1\n          ],\n          [\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          0,\n          1\n        ],\n        [\n          1,\n          1\n        ],\n        [\n          0,\n          1\n        ],\n        [\n          1,\n          1\n        ],\n        [\n          1,\n          0\n        ],\n        null,\n        null,\n        null,\n        null,\n        [\n          1,\n          0\n        ],\n        [\n          1,\n          0\n        ],\n        [\n          1,\n          1\n        ],\n        [\n          1,\n          1\n        ]\n      ],\n      \"explanation\": \"The grid is recursively divided into sub-grids until all sub-grids have uniform values. The resulting Quad-Tree is represented as a serialized list.\"\n    }\n  ],\n  \"hints\": [\n    \"Check if the current grid has all identical values to determine if it is a leaf node.\",\n    \"If not, divide the grid into four sub-grids and recurse for each child.\",\n    \"Assign `isLeaf` as `true` for leaf nodes and `false` otherwise.\",\n    \"Assign `val` as the value of the grid for leaf nodes.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Minimize recursion depth and efficiently divide the grid using indices.\",\n    \"constraints\": \"Avoid unnecessary copying of grid data during recursion.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count the number of beautiful arrangements for integers `1` through `n`. A permutation is beautiful if each position `i` satisfies `perm[i] % i == 0` or `i % perm[i] == 0`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `n`, find the number of **beautiful arrangements** that can be constructed with integers `1` through `n`. A permutation is considered beautiful if, for each position `i` (1-indexed), either `perm[i]` is divisible by `i` or `i` is divisible by `perm[i]`.\",\n  \"objective\": \"Implement a backtracking solution that generates all valid permutations meeting the beautiful arrangement criteria, efficiently pruning invalid configurations to reduce computational complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Identify that a beautiful arrangement requires each integer position `i` to meet specific divisibility conditions. This naturally lends itself to a permutation generation approach with constraints.\",\n    \"Step 2 - Backtracking with Pruning\": \"Use backtracking to generate permutations of numbers from `1` to `n`. Track used numbers to avoid duplicates and ensure each number `i` satisfies the divisibility conditions for its position `pos`.\",\n    \"Step 3 - Implementing Recursive Permutation Generation\": \"Define a recursive function `calculate` to place each number at position `pos` if it satisfies the beautiful arrangement conditions. Mark numbers as visited once used and unmark after backtracking.\",\n    \"Step 4 - Visited Array for Efficient Tracking\": \"Use a `visited` array to track numbers already used in the permutation. Only proceed with placements that meet divisibility requirements, allowing the algorithm to prune paths early.\",\n    \"Step 5 - Complexity and Constraints\": \"With `n` up to 15, the solution should efficiently explore valid permutations using backtracking and constraints checking, achieving O(n!) complexity where feasible by pruning invalid arrangements.\",\n    \"Final Check - Constraints Verification\": \"Ensure the solution is optimized for up to `n = 15` by verifying that recursive calls are limited by divisibility checks and efficient backtracking with the `visited` array.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 2\n      },\n      \"output\": 2,\n      \"explanation\": \"Two beautiful arrangements are `[1, 2]` and `[2, 1]`, both meeting divisibility conditions for each position.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1\n      },\n      \"output\": 1,\n      \"explanation\": \"With `n = 1`, only `[1]` is possible, which satisfies the divisibility condition.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 15\"\n  },\n  \"follow_up\": \"Can you optimize this solution further using dynamic programming or memoization to avoid redundant calculations in the recursive calls?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number of longest increasing subsequences in a given array of integers."}, {"role": "assistant", "content": "{\n  \"description\": \"Calculate the number of longest increasing subsequences in a given array of integers.\",\n  \"objective\": \"Use a top-down dynamic programming approach with memoization to efficiently compute the lengths and counts of increasing subsequences for each element.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize DP Arrays\": \"Create two arrays, `length` and `count`, initialized with zeros. `length[i]` will store the length of the longest increasing subsequence ending at index `i`, and `count[i]` will store the count of such subsequences.\",\n    \"Step 2 - Define Recursive Function\": \"Implement a function `calculateDP(i)` to compute `length[i]` and `count[i]`. If `length[i]` is already computed, return immediately.\",\n    \"Step 3 - Update DP Values\": \"For each element `nums[i]`, iterate over all previous elements `nums[j]` where `j < i` and `nums[j] < nums[i]`. Recursively calculate `length[j]` and `count[j]` if needed. Update `length[i]` and `count[i]` based on the subsequences ending at `j`.\",\n    \"Step 4 - Compute Results\": \"After computing all DP values, determine the maximum length of any subsequence and sum up the counts of subsequences with this length.\",\n    \"Step 5 - Return Result\": \"Return the total count of the longest increasing subsequences.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          3,\n          5,\n          4,\n          7\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          2,\n          2,\n          2,\n          2\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"The longest increasing subsequences have length 1, and there are 5 of them.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 2000\",\n    \"value_range\": \"-10^6 <= nums[i] <= 10^6\"\n  },\n  \"follow_up\": \"Discuss the time complexity of the top-down dynamic programming approach and compare it to a bottom-up approach for solving the same problem.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum number of steps required to cut all trees in a forest in order of their height."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine the minimum number of steps required to cut all trees in a forest in order of their height, or return -1 if it's impossible to cut all trees.\",\n  \"objective\": \"Use A* search to find the shortest path between consecutive trees and calculate the total distance.\",\n  \"meta_prompt\": {\n    \"Step 1 - Collect Tree Locations\": \"Identify all tree cells (values > 1) and store their coordinates along with their heights. Sort these trees by height.\",\n    \"Step 2 - Define A* Search\": \"Implement an A* search algorithm to find the shortest path between two points in the forest, considering impassable cells (value 0). Use the Manhattan distance as the heuristic.\",\n    \"Step 3 - Traverse Between Trees\": \"Starting from the origin (0, 0), use A* to find the shortest path to the next tree in sorted order. Accumulate the distances.\",\n    \"Step 4 - Check Accessibility\": \"If any tree is unreachable, return -1. Otherwise, continue until all trees are cut.\",\n    \"Step 5 - Return Result\": \"After cutting all trees, return the total accumulated distance as the result.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"forest\": [\n          [\n            1,\n            2,\n            3\n          ],\n          [\n            0,\n            0,\n            4\n          ],\n          [\n            7,\n            6,\n            5\n          ]\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"The trees are cut in the order of their heights: 2 -> 3 -> 4 -> 5 -> 6 -> 7, requiring 6 steps.\"\n    },\n    {\n      \"input\": {\n        \"forest\": [\n          [\n            1,\n            2,\n            3\n          ],\n          [\n            0,\n            0,\n            0\n          ],\n          [\n            7,\n            6,\n            5\n          ]\n        ]\n      },\n      \"output\": -1,\n      \"explanation\": \"The bottom row of trees is inaccessible due to the middle row being blocked.\"\n    },\n    {\n      \"input\": {\n        \"forest\": [\n          [\n            2,\n            3,\n            4\n          ],\n          [\n            0,\n            0,\n            5\n          ],\n          [\n            8,\n            7,\n            6\n          ]\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"The trees are cut in the order of their heights: 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8, requiring 6 steps.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size\": \"1 <= m, n <= 50\",\n    \"cell_values\": \"0 <= forest[i][j] <= 10^9\",\n    \"tree_property\": \"Heights of all trees are distinct.\"\n  },\n  \"follow_up\": \"Discuss the computational efficiency of A* search for this problem and its scalability with increasing forest size or blocked cells.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find all the ways to make valid IP addresses from a string of digits."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s` containing only digits, return all possible valid IP addresses that can be formed by inserting dots into `s`. A valid IP address has exactly four integers (0 to 255 inclusive) separated by single dots, with no leading zeros.\",\n  \"objective\": \"Design an efficient algorithm to generate all possible valid IP addresses by placing dots in the string while adhering to the constraints of IP address formation.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that an IP address consists of four valid segments (0 to 255 inclusive) separated by dots, and no segment can have leading zeros unless it is exactly '0'.\",\n    \"Step 2 - Explore Substring Splits\": \"Iterate over all possible ways to split the string `s` into exactly four parts.\",\n    \"Step 3 - Validate Each Segment\": \"Check if each segment of the split string satisfies the criteria for a valid IP segment.\",\n    \"Step 4 - Construct Valid IPs\": \"Combine the valid segments into an IP address format and store them in the result.\",\n    \"Step 5 - Optimize\": \"Avoid unnecessary splits by stopping early if a segment violates constraints. Use backtracking to explore valid splits efficiently.\",\n    \"Step 6 - Handle Edge Cases\": \"Handle edge cases such as strings that are too short or too long to form valid IPs.\"\n  },\n  \"examples\": [\n    {\n      \"input\": \"25525511135\",\n      \"output\": [\n        \"255.255.11.135\",\n        \"255.255.111.35\"\n      ],\n      \"explanation\": \"The string '25525511135' can be split into valid IPs as shown.\"\n    },\n    {\n      \"input\": \"0000\",\n      \"output\": [\n        \"0.0.0.0\"\n      ],\n      \"explanation\": \"The string '0000' results in the only valid IP '0.0.0.0'.\"\n    },\n    {\n      \"input\": \"101023\",\n      \"output\": [\n        \"1.0.10.23\",\n        \"1.0.102.3\",\n        \"10.1.0.23\",\n        \"10.10.2.3\",\n        \"101.0.2.3\"\n      ],\n      \"explanation\": \"Multiple valid splits lead to these IP addresses.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 20\",\n    \"input_characters\": \"s consists of digits only\",\n    \"segment_constraints\": \"Each segment must be in the range 0 to 255 and have no leading zeros.\"\n  },\n  \"follow_up\": \"Can you optimize the generation of valid IPs to minimize unnecessary computations?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Calculate how long Ashe is poisoned by Teemo."}, {"role": "assistant", "content": "{\n  \"description\": \"Teemo is attacking an enemy Ashe with poison attacks. Each attack at second `t` poisons Ashe for exactly `duration` seconds, represented as the inclusive interval `[t, t + duration - 1]`. If a new attack occurs before the current poison ends, the poison timer resets, extending the poison duration to `duration` seconds after the latest attack. Given an array `timeSeries` of attack times and an integer `duration`, compute the total number of seconds Ashe remains poisoned.\",\n  \"objective\": \"Design an efficient algorithm to calculate the total time Ashe is poisoned, ensuring overlapping poison intervals are counted correctly. The solution should run in linear time complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that consecutive attacks may lead to overlapping poison intervals. If an attack occurs during an active poison interval, the poison timer resets. Compute the total poisoned time by summing non-overlapping intervals.\",\n    \"Step 2 - Example Explanation\": \"Consider the example `timeSeries = [1, 4]`, `duration = 2`. The poison intervals are `[1, 2]` and `[4, 5]`, which do not overlap. The total poisoned time is 4. For `timeSeries = [1, 2]`, `duration = 2`, the poison intervals `[1, 2]` and `[2, 3]` overlap, resulting in a total poisoned time of 3.\",\n    \"Step 3 - Implementation Strategy\": \"Iterate through `timeSeries`. For each attack, check if it occurs during the active poison interval of the previous attack. If so, add the overlap-adjusted duration. Otherwise, add the full duration.\",\n    \"Step 4 - Edge Cases\": \"Handle cases where `timeSeries` contains a single attack or very large gaps between attacks. Consider scenarios where `duration` is zero, ensuring no poison effect.\",\n    \"Step 5 - Constraints Validation\": \"Ensure the algorithm operates efficiently for up to 10^4 attacks and large values of `duration` within 0 to 10^7.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"timeSeries\": [\n          1,\n          4\n        ],\n        \"duration\": 2\n      },\n      \"output\": 4,\n      \"explanation\": \"Intervals `[1, 2]` and `[4, 5]` do not overlap, contributing 4 poisoned seconds.\"\n    },\n    {\n      \"input\": {\n        \"timeSeries\": [\n          1,\n          2\n        ],\n        \"duration\": 2\n      },\n      \"output\": 3,\n      \"explanation\": \"Intervals `[1, 2]` and `[2, 3]` overlap, contributing 3 poisoned seconds.\"\n    },\n    {\n      \"input\": {\n        \"timeSeries\": [\n          1\n        ],\n        \"duration\": 5\n      },\n      \"output\": 5,\n      \"explanation\": \"A single attack poisons Ashe for the full duration of 5 seconds.\"\n    }\n  ],\n  \"constraints\": {\n    \"timeSeries_length\": \"1 <= timeSeries.length <= 10^4\",\n    \"timeSeries_values\": \"0 <= timeSeries[i] <= 10^7\",\n    \"duration_range\": \"0 <= duration <= 10^7\",\n    \"sorted_property\": \"`timeSeries` is guaranteed to be sorted in non-decreasing order.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"How would you modify the solution if `timeSeries` was unsorted? Could you optimize sorting and poison calculation?\",\n    \"question_2\": \"Can you extend the solution to handle multiple poison effects with different durations and compute their cumulative effects?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create an autocomplete system to suggest sentences based on input."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a search autocomplete system using a trie to efficiently manage and retrieve historical search queries based on user input.\",\n  \"objective\": \"Implement a trie-based autocomplete system to provide the top 3 historical queries matching the current input prefix. Handle special cases such as new queries and ensure results are sorted by frequency and lexicographical order.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Trie\": \"Create a TrieNode class with attributes for storing child nodes (as a hashmap) and a hashmap for sentences with their frequencies. Initialize the trie with a root node.\",\n    \"Step 2 - Populate Trie\": \"For each sentence in the given input, use a helper function to insert the sentence and its frequency into the trie by traversing character by character.\",\n    \"Step 3 - Process User Input\": \"For each input character, either navigate deeper into the trie or handle special cases like '#' to store and reset the current sentence.\",\n    \"Step 4 - Retrieve Matches\": \"At the current trie node, collect all matching sentences and sort them by frequency and lexicographical order. Return the top 3 matches.\",\n    \"Step 5 - Update for New Sentence\": \"If the input ends with '#', add the current sentence to the trie with updated frequency, and reset the system for a new query.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"operations\": [\n          \"AutocompleteSystem\",\n          \"input\",\n          \"input\",\n          \"input\",\n          \"input\"\n        ],\n        \"values\": [\n          [\n            [\n              \"i love you\",\n              \"island\",\n              \"ironman\",\n              \"i love leetcode\"\n            ],\n            [\n              5,\n              3,\n              2,\n              2\n            ]\n          ],\n          [\n            \"i\"\n          ],\n          [\n            \" \"\n          ],\n          [\n            \"a\"\n          ],\n          [\n            \"#\"\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        [\n          \"i love you\",\n          \"island\",\n          \"i love leetcode\"\n        ],\n        [\n          \"i love you\",\n          \"i love leetcode\"\n        ],\n        [],\n        []\n      ],\n      \"explanation\": \"The system retrieves matching sentences based on input prefix. On typing '#', the input sentence is added to history.\"\n    },\n    {\n      \"input\": {\n        \"operations\": [\n          \"AutocompleteSystem\",\n          \"input\",\n          \"input\",\n          \"input\",\n          \"input\"\n        ],\n        \"values\": [\n          [\n            [\n              \"hello\",\n              \"hi\",\n              \"hey\"\n            ],\n            [\n              3,\n              2,\n              1\n            ]\n          ],\n          [\n            \"h\"\n          ],\n          [\n            \"e\"\n          ],\n          [\n            \"y\"\n          ],\n          [\n            \"#\"\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        [\n          \"hello\",\n          \"hi\",\n          \"hey\"\n        ],\n        [\n          \"hey\"\n        ],\n        [],\n        []\n      ],\n      \"explanation\": \"The system matches the prefix 'h', and subsequent input refines the matches. A new sentence 'hey' is stored upon completion.\"\n    }\n  ],\n  \"constraints\": {\n    \"sentence_length\": \"1 <= sentences[i].length <= 100\",\n    \"query_limit\": \"At most 5000 calls will be made to input.\",\n    \"character_set\": \"Each character is a lowercase letter, a space, or '#'.\"\n  },\n  \"follow_up\": \"Discuss optimizations for large-scale sentence storage and retrieval. Analyze the time complexity for trie traversal and sorting.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Return the kth smallest number in a matrix."}, {"role": "assistant", "content": "{\n  \"title\": \"Kth Smallest Element in a Sorted Matrix\",\n  \"description\": \"Given an `n x n` matrix where each row and column is sorted in ascending order, return the `kth` smallest element in the matrix.\",\n  \"objective\": \"Efficiently determine the `kth` smallest element without explicitly sorting all elements, utilizing the matrix's sorted structure.\",\n  \"meta_prompt\": {\n    \"Step 1 - Input Analysis\": {\n      \"Matrix\": \"A 2D square matrix of size `n x n` with rows and columns sorted in ascending order.\",\n      \"K\": \"An integer representing the `kth` smallest element to retrieve.\"\n    },\n    \"Step 2 - Binary Search Approach\": {\n      \"Define Range\": \"Set the range of possible values as `[min(matrix), max(matrix)]`.\",\n      \"Midpoint Check\": \"For each midpoint, count elements in the matrix less than or equal to the midpoint using binary search in rows or column-wise traversal.\",\n      \"Adjust Range\": \"If the count is less than `k`, increase the lower bound; otherwise, decrease the upper bound.\"\n    },\n    \"Step 3 - Min-Heap Approach\": {\n      \"Initialize Heap\": \"Push the first element of each row (or column) into a min-heap.\",\n      \"Heap Extraction\": \"Extract the smallest element `k` times, inserting the next element from the same row or column until the `kth` extraction.\"\n    },\n    \"Step 4 - Output Result\": \"Return the value of the `kth` smallest element from either approach.\"\n  },\n  \"input\": {\n    \"parameters\": [\n      {\n        \"name\": \"matrix\",\n        \"type\": \"2D array\",\n        \"description\": \"An `n x n` sorted matrix.\",\n        \"constraints\": \"1 <= n <= 300, -10^9 <= matrix[i][j] <= 10^9, rows and columns are sorted in non-decreasing order.\"\n      },\n      {\n        \"name\": \"k\",\n        \"type\": \"integer\",\n        \"description\": \"The rank of the smallest element to find in sorted order.\",\n        \"constraints\": \"1 <= k <= n^2\"\n      }\n    ]\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The `kth` smallest element in the matrix.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            1,\n            5,\n            9\n          ],\n          [\n            10,\n            11,\n            13\n          ],\n          [\n            12,\n            13,\n            15\n          ]\n        ],\n        \"k\": 8\n      },\n      \"output\": 13,\n      \"explanation\": \"The elements in sorted order are [1, 5, 9, 10, 11, 12, 13, **13**, 15]. The 8th smallest element is 13.\"\n    },\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            -5\n          ]\n        ],\n        \"k\": 1\n      },\n      \"output\": -5,\n      \"explanation\": \"The only element in the matrix is -5.\"\n    }\n  ],\n  \"hints\": [\n    \"Utilize the sorted property of rows and columns to narrow down the range of possible values.\",\n    \"Binary search on values is more efficient than flattening and sorting the matrix.\",\n    \"A min-heap can efficiently track the smallest elements across rows or columns.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve `O(n log(max - min))` time complexity with binary search on values or `O(k log n)` with a min-heap.\",\n    \"constraints\": \"Avoid flattening the matrix to ensure memory complexity better than `O(n^2)`.\"\n  },\n  \"follow_up\": {\n    \"memory_optimization\": {\n      \"Goal\": \"Explore methods to reduce space complexity further, potentially achieving `O(1)` memory usage.\",\n      \"Resources\": \"Refer to research on solving matrix problems with constant space.\"\n    }\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Pick a random point inside one of the rectangles given in rects."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an array of non-overlapping rectangles represented as `rects`, where each rectangle is defined by its bottom-left corner `(ai, bi)` and top-right corner `(xi, yi)`. The goal is to design a class `Solution` that supports two operations: initializing the rectangles and randomly picking a point uniformly from the combined area of all rectangles.\",\n  \"objective\": \"Ensure that every point within the space covered by the rectangles is equally likely to be selected, considering the varying sizes of rectangles. Implement an efficient solution that precomputes the area weights for rectangles to enable uniform sampling.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Recognize that the rectangles have different sizes, and therefore, larger rectangles should proportionally contribute more points to the random sampling process.\",\n    \"Step 2 - Precompute Areas\": \"For each rectangle, calculate the total number of integer points it contains using `(xi - ai + 1) * (yi - bi + 1)`. Compute the cumulative weights to enable weighted sampling.\",\n    \"Step 3 - Sampling a Rectangle\": \"Use a random number generator to select a rectangle based on its weight (area). This can be efficiently done using binary search on the cumulative weights.\",\n    \"Step 4 - Sampling a Point\": \"Once a rectangle is selected, randomly generate a point within the bounds of the rectangle using uniform random numbers for the x and y coordinates.\",\n    \"Step 5 - Efficiency and Edge Cases\": \"Precompute area weights and cumulative sums to ensure efficient rectangle selection. Handle edge cases, such as rectangles with only one point or rectangles that are very large in size.\",\n    \"Step 6 - Complexity Analysis\": \"Precomputing areas is `O(n)`, rectangle selection via binary search is `O(log n)`, and sampling a point is `O(1)`. Ensure the overall approach handles up to 10^4 calls to `pick` efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"rects\": [\n          [\n            -2,\n            -2,\n            1,\n            1\n          ],\n          [\n            2,\n            2,\n            4,\n            6\n          ]\n        ]\n      },\n      \"output\": \"Random points such as [1, -2], [0, 0], or [3, 3], uniformly distributed.\"\n    },\n    {\n      \"input\": {\n        \"rects\": [\n          [\n            1,\n            1,\n            1,\n            1\n          ],\n          [\n            2,\n            2,\n            3,\n            3\n          ]\n        ]\n      },\n      \"output\": \"Random points such as [1, 1], [2, 2], or [3, 3], uniformly distributed.\"\n    },\n    {\n      \"input\": {\n        \"rects\": [\n          [\n            0,\n            0,\n            10,\n            10\n          ]\n        ]\n      },\n      \"output\": \"Random points such as [5, 5], [0, 10], or [10, 0], uniformly distributed.\"\n    }\n  ],\n  \"constraints\": {\n    \"rectangles_count\": \"1 <= rects.length <= 100\",\n    \"coordinates_range\": \"-10^9 <= ai, bi, xi, yi <= 10^9\",\n    \"non_overlap\": \"Rectangles do not overlap.\",\n    \"rectangle_size_limit\": \"xi - ai <= 2000, yi - bi <= 2000\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"How would you modify the solution if the rectangles were overlapping?\",\n    \"question_2\": \"Can you handle cases where the number of rectangles is much larger (e.g., 10^6 rectangles)?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Determine the minimum number of minutes for all fresh oranges to rot in a grid."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `m x n` grid where each cell can be `0` (empty), `1` (fresh orange), or `2` (rotten orange), return the minimum number of minutes that must elapse until no cell has a fresh orange. Any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten every minute. Return `-1` if it is impossible for all fresh oranges to become rotten.\",\n  \"objective\": \"Design an efficient algorithm to determine the minimum number of minutes required for all fresh oranges to rot in the given grid, or return `-1` if it is not possible.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the requirements: Each minute, fresh oranges adjacent to rotten ones become rotten. Track the propagation of rotting through the grid.\",\n    \"Step 2 - Initial Approach\": \"Consider using a Breadth-First Search (BFS) to simulate the process of rotting over time. Use a queue to manage the rotting oranges and track the elapsed time.\",\n    \"Step 3 - BFS Algorithm\": \"1. Initialize a queue with the positions of all initial rotten oranges and a counter for the minutes. 2. For each minute, process all oranges in the queue and rot the adjacent fresh oranges. 3. Track newly rotten oranges and add them to the queue for the next minute. 4. Repeat until no more fresh oranges can rot or the queue is empty.\",\n    \"Step 4 - Edge Case Handling\": \"Check for edge cases where there are no fresh oranges initially or isolated fresh oranges that cannot be reached by any rotten orange.\",\n    \"Step 5 - Output Format\": \"Return the number of minutes required, or `-1` if it is impossible to rot all fresh oranges.\",\n    \"Step 6 - Code Efficiency and Edge Cases\": \"Focus on achieving efficient traversal with time complexity of O(m * n), where `m` and `n` are the grid dimensions. Handle edge cases such as grids with all empty cells or isolated fresh oranges.\",\n    \"Final Check - Constraints Verification\": \"Verify the solution operates within the constraints: `1 <= m, n <= 10`, and `grid[i][j]` is `0`, `1`, or `2`. Ensure the algorithm is robust and handles various grid configurations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            2,\n            1,\n            1\n          ],\n          [\n            1,\n            1,\n            0\n          ],\n          [\n            0,\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"All fresh oranges become rotten in 4 minutes.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            2,\n            1,\n            1\n          ],\n          [\n            0,\n            1,\n            1\n          ],\n          [\n            1,\n            0,\n            1\n          ]\n        ]\n      },\n      \"output\": -1,\n      \"explanation\": \"Some fresh oranges cannot become rotten.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            0,\n            2\n          ]\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"There are no fresh oranges initially.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_size\": \"1 <= m, n <= 10\",\n    \"grid_values\": \"grid[i][j] is 0, 1, or 2\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle larger grids efficiently while maintaining the constraints and ensuring the correctness of the rotting process?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the overlap of two arrays. Include repeated numbers if they match in both arrays."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two integer arrays `nums1` and `nums2`, find their intersection such that each element in the result appears as many times as it shows in both arrays. Return the result in any order.\",\n  \"objective\": \"Design an algorithm to efficiently compute the intersection of two arrays, including duplicate values that appear in both arrays.\",\n  \"meta_prompt\": {\n    \"Step 1 - Frequency Count\": \"Use a frequency map to count occurrences of each element in `nums1`.\",\n    \"Step 2 - Find Intersection\": \"For each element in `nums2`, check if it exists in the frequency map and add it to the result as many times as it appears in both arrays.\",\n    \"Step 3 - Optimize for Large Inputs\": \"Consider sorted arrays for two-pointer optimization or streaming techniques for disk-stored arrays.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums1\": [\n          1,\n          2,\n          2,\n          1\n        ],\n        \"nums2\": [\n          2,\n          2\n        ]\n      },\n      \"output\": [\n        2,\n        2\n      ],\n      \"explanation\": \"Both arrays contain two instances of 2.\"\n    },\n    {\n      \"input\": {\n        \"nums1\": [\n          4,\n          9,\n          5\n        ],\n        \"nums2\": [\n          9,\n          4,\n          9,\n          8,\n          4\n        ]\n      },\n      \"output\": [\n        4,\n        9\n      ],\n      \"explanation\": \"Both arrays share one 4 and one 9.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_lengths\": \"1 <= nums1.length, nums2.length <= 1000\",\n    \"element_values\": \"0 <= nums1[i], nums2[i] <= 1000\",\n    \"output_format\": \"Result may appear in any order.\"\n  },\n  \"follow_up\": {\n    \"case_1\": \"If arrays are sorted, use a two-pointer approach to find intersections efficiently.\",\n    \"case_2\": \"If `nums1` is much smaller than `nums2`, iterate through `nums1` and use a frequency map for efficient lookups.\",\n    \"case_3\": \"If `nums2` is stored on disk, process it in chunks and maintain a frequency map for `nums1` in memory.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a binary array, split it into three equal parts. If you can, return the indices, otherwise return [-1,-1]."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an array `arr` consisting of only `0`s and `1`s. The task is to divide the array into three non-empty parts such that all three parts represent the same binary value. If such a division is possible, return any valid indices `[i, j]` such that:\",\n  \"objective\": \"Split the binary array into three non-empty parts, where each part represents the same binary value. The returned indices `i` and `j` should satisfy the condition that `arr[0]...arr[i]`, `arr[i+1]...arr[j-1]`, and `arr[j]...arr[arr.length-1]` all represent the same binary value.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Breakdown\": \"We need to find three subarrays that have identical binary values. The binary value of each part must match exactly, including leading zeros.\",\n    \"Step 2 - Key Observations\": \"Check if the total number of `1`s in the array is divisible by 3. If it's not, it's impossible to divide the array into three parts with the same binary value.\",\n    \"Step 3 - Approach\": \"First, count the number of `1`s in the array. If this number is divisible by 3, the next step is to find the three segments that represent the same value. We will iterate through the array to check where to split the array into three valid parts.\",\n    \"Step 4 - Edge Case Considerations\": \"Consider cases where all elements are `0` or all elements are `1`. The array must also have at least three elements for a valid split.\",\n    \"Step 5 - Output Format\": \"Return the indices `[i, j]` if a valid division is possible, otherwise return `[-1, -1]`.\",\n    \"Step 6 - Code Efficiency and Space Complexity\": \"Ensure the solution works efficiently for large arrays, up to the length limit of 30,000.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"arr\": [\n          1,\n          0,\n          1,\n          0,\n          1\n        ]\n      },\n      \"output\": [\n        0,\n        3\n      ],\n      \"explanation\": \"The array can be divided into [1], [0, 1], [0, 1], which all represent the binary value `1`.\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          1,\n          1,\n          0,\n          1,\n          1\n        ]\n      },\n      \"output\": [\n        -1,\n        -1\n      ],\n      \"explanation\": \"It is impossible to split the array into three parts with the same binary value.\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          1,\n          1,\n          0,\n          0,\n          1\n        ]\n      },\n      \"output\": [\n        0,\n        2\n      ],\n      \"explanation\": \"The array can be divided into [1, 1], [0], [0, 1], which all represent the binary value `3`.\"\n    }\n  ],\n  \"constraints\": {\n    \"arr_length\": \"3 <= arr.length <= 30,000\",\n    \"character_set\": \"Each element of `arr` is either `0` or `1`.\"\n  },\n  \"follow_up\": \"Can you optimize the space complexity of your solution?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Solve a Sudoku puzzle by filling the empty cells."}, {"role": "assistant", "content": "{\n  \"description\": \"Write a program to solve a Sudoku puzzle by filling the empty cells. The solution must satisfy the following rules: 1) Each of the digits `1-9` must occur exactly once in each row, 2) Each of the digits `1-9` must occur exactly once in each column, and 3) Each of the digits `1-9` must occur exactly once in each `3x3` sub-box. The `'.'` character indicates empty cells.\",\n  \"objective\": \"Design an efficient algorithm to solve a given Sudoku board using backtracking, ensuring the solution satisfies all rules of Sudoku.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task is to fill the board such that it satisfies all Sudoku rules. Only empty cells (`'.'`) need to be filled, and it is guaranteed that the input board has a unique solution.\",\n    \"Step 2 - Backtracking Approach\": \"Use a backtracking algorithm to try placing each digit `1-9` in an empty cell, checking if the placement is valid based on the current row, column, and sub-box. If valid, proceed to the next cell; otherwise, backtrack.\",\n    \"Step 3 - Validity Check\": \"Implement a helper function to check if a given digit can be placed in a specific cell based on the rules of Sudoku.\",\n    \"Step 4 - Recursive Exploration\": \"Recursively attempt to solve the board by placing digits in empty cells, undoing placements if they lead to invalid states.\",\n    \"Step 5 - Optimization\": \"Use constraints propagation and early pruning to reduce unnecessary computations, ensuring the algorithm runs efficiently for all valid inputs.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"board\": [\n          [\n            \"5\",\n            \"3\",\n            \".\",\n            \".\",\n            \"7\",\n            \".\",\n            \".\",\n            \".\",\n            \".\"\n          ],\n          [\n            \"6\",\n            \".\",\n            \".\",\n            \"1\",\n            \"9\",\n            \"5\",\n            \".\",\n            \".\",\n            \".\"\n          ],\n          [\n            \".\",\n            \"9\",\n            \"8\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \"6\",\n            \".\"\n          ],\n          [\n            \"8\",\n            \".\",\n            \".\",\n            \".\",\n            \"6\",\n            \".\",\n            \".\",\n            \".\",\n            \"3\"\n          ],\n          [\n            \"4\",\n            \".\",\n            \".\",\n            \"8\",\n            \".\",\n            \"3\",\n            \".\",\n            \".\",\n            \"1\"\n          ],\n          [\n            \"7\",\n            \".\",\n            \".\",\n            \".\",\n            \"2\",\n            \".\",\n            \".\",\n            \".\",\n            \"6\"\n          ],\n          [\n            \".\",\n            \"6\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \"2\",\n            \"8\",\n            \".\"\n          ],\n          [\n            \".\",\n            \".\",\n            \".\",\n            \"4\",\n            \"1\",\n            \"9\",\n            \".\",\n            \".\",\n            \"5\"\n          ],\n          [\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \"8\",\n            \".\",\n            \".\",\n            \"7\",\n            \"9\"\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          \"5\",\n          \"3\",\n          \"4\",\n          \"6\",\n          \"7\",\n          \"8\",\n          \"9\",\n          \"1\",\n          \"2\"\n        ],\n        [\n          \"6\",\n          \"7\",\n          \"2\",\n          \"1\",\n          \"9\",\n          \"5\",\n          \"3\",\n          \"4\",\n          \"8\"\n        ],\n        [\n          \"1\",\n          \"9\",\n          \"8\",\n          \"3\",\n          \"4\",\n          \"2\",\n          \"5\",\n          \"6\",\n          \"7\"\n        ],\n        [\n          \"8\",\n          \"5\",\n          \"9\",\n          \"7\",\n          \"6\",\n          \"1\",\n          \"4\",\n          \"2\",\n          \"3\"\n        ],\n        [\n          \"4\",\n          \"2\",\n          \"6\",\n          \"8\",\n          \"5\",\n          \"3\",\n          \"7\",\n          \"9\",\n          \"1\"\n        ],\n        [\n          \"7\",\n          \"1\",\n          \"3\",\n          \"9\",\n          \"2\",\n          \"4\",\n          \"8\",\n          \"5\",\n          \"6\"\n        ],\n        [\n          \"9\",\n          \"6\",\n          \"1\",\n          \"5\",\n          \"3\",\n          \"7\",\n          \"2\",\n          \"8\",\n          \"4\"\n        ],\n        [\n          \"2\",\n          \"8\",\n          \"7\",\n          \"4\",\n          \"1\",\n          \"9\",\n          \"6\",\n          \"3\",\n          \"5\"\n        ],\n        [\n          \"3\",\n          \"4\",\n          \"5\",\n          \"2\",\n          \"8\",\n          \"6\",\n          \"1\",\n          \"7\",\n          \"9\"\n        ]\n      ],\n      \"explanation\": \"The input board is completed according to Sudoku rules.\"\n    }\n  ],\n  \"constraints\": {\n    \"board_size\": \"The board is a 9x9 grid.\",\n    \"cell_values\": \"Each cell contains a digit `1-9` or `'.'`.\",\n    \"solution_uniqueness\": \"It is guaranteed that the input board has only one solution.\"\n  },\n  \"follow_up\": \"Can you implement optimizations such as constraint propagation or intelligent backtracking to solve more complex variations of Sudoku?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Match a string to a pattern using `.` and `*`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s` and a pattern `p`, implement regular expression matching that supports two special characters: `'.'` which matches any single character, and `'*'` which matches zero or more occurrences of the preceding element. The function should determine if the entire string `s` matches the pattern `p`.\",\n  \"objective\": \"Design an efficient algorithm to solve the regular expression matching problem using dynamic programming. Ensure the solution covers all edge cases and adheres to the constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the string `s` and pattern `p` are both composed of lowercase English letters, and `p` can include `'.'` and `'*'`. The goal is to determine if the entire string `s` matches the pattern `p`.\",\n    \"Step 2 - Initial Approach\": \"Consider recursively comparing each character in `s` and `p` while handling `'.'` and `'*'` appropriately. However, this naive approach can lead to exponential time complexity.\",\n    \"Step 3 - Optimal Solution with Dynamic Programming\": \"Use a 2D DP table where `dp[i][j]` represents whether the first `i` characters of `s` match the first `j` characters of `p`. Handle cases like `'*'` (zero or more of the preceding element) and `'.'` (any single character) systematically.\",\n    \"Step 4 - Edge Cases\": \"Handle cases such as an empty string, patterns with consecutive `'*'`, and strings that do not match due to character mismatches.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"aa\",\n        \"p\": \"a\"\n      },\n      \"output\": false,\n      \"explanation\": \"The pattern `a` does not match the entire string `aa`.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"aa\",\n        \"p\": \"a*\"\n      },\n      \"output\": true,\n      \"explanation\": \"`*` allows zero or more of the preceding element `a`, so it matches `aa`.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"ab\",\n        \"p\": \".*\"\n      },\n      \"output\": true,\n      \"explanation\": \"`.*` matches zero or more of any character, so it matches `ab`.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"aab\",\n        \"p\": \"c*a*b\"\n      },\n      \"output\": true,\n      \"explanation\": \"`c*` matches zero `c`s, and `a*b` matches `aab`.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"mississippi\",\n        \"p\": \"mis*is*p*.\"\n      },\n      \"output\": false,\n      \"explanation\": \"The pattern does not match the entire string.\"\n    }\n  ],\n  \"constraints\": {\n    \"s_length\": \"1 <= s.length <= 20\",\n    \"p_length\": \"1 <= p.length <= 20\",\n    \"s_content\": \"s consists only of lowercase English letters.\",\n    \"p_content\": \"p consists only of lowercase English letters, `'.'`, and `'*'`.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to reduce space complexity by using a 1D array instead of a 2D DP table?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the combined area of two rectangles."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the coordinates of two rectilinear rectangles, return the total area they cover.\",\n  \"objective\": \"Calculate the sum of both rectangles' areas minus the overlapping area if they overlap.\",\n  \"meta_prompt\": {\n    \"Step 1 - Compute Individual Areas\": \"Find the area of each rectangle using their coordinates.\",\n    \"Step 2 - Determine Overlapping Area\": \"Calculate the intersection's width and height if the rectangles overlap.\",\n    \"Step 3 - Combine Results\": \"Subtract the overlapping area from the sum of the two rectangles' areas.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"ax1\": -3,\n        \"ay1\": 0,\n        \"ax2\": 3,\n        \"ay2\": 4,\n        \"bx1\": 0,\n        \"by1\": -1,\n        \"bx2\": 9,\n        \"by2\": 2\n      },\n      \"output\": 45,\n      \"explanation\": \"The total area of the two rectangles, after accounting for overlap, is 45.\"\n    },\n    {\n      \"input\": {\n        \"ax1\": -2,\n        \"ay1\": -2,\n        \"ax2\": 2,\n        \"ay2\": 2,\n        \"bx1\": -2,\n        \"by1\": -2,\n        \"bx2\": 2,\n        \"by2\": 2\n      },\n      \"output\": 16,\n      \"explanation\": \"Both rectangles are identical, so their total area is just the area of one rectangle.\"\n    }\n  ],\n  \"constraints\": {\n    \"coordinate_range\": \"-10^4 <= ax1, ay1, ax2, ay2, bx1, by1, bx2, by2 <= 10^4\",\n    \"rectangle_property\": \"Rectangles are rectilinear with sides parallel to the axes.\"\n  },\n  \"follow_up\": \"How would you optimize your algorithm if given a large set of rectangles to calculate the total covered area?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Determine if four points make a square."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the coordinates of four points `p1`, `p2`, `p3`, and `p4` in 2D space, determine if these points form a square. A valid square has four equal sides and four right angles.\",\n  \"objective\": \"Check if the provided points form a square by validating that there are four equal sides and two equal diagonals, ensuring a 90-degree angle at each corner.\",\n  \"meta_prompt\": {\n    \"Step 1 - Calculate Distance Function\": \"Define a helper function `distance(pointA, pointB)` to calculate the squared Euclidean distance between two points to avoid floating-point errors.\",\n    \"Step 2 - Sort Points\": \"Sort the given points based on x-coordinates, and if there is a tie, use y-coordinates to achieve a predictable order. Let the sorted points be p0, p1, p2, and p3.\",\n    \"Step 3 - Validate Side and Diagonal Lengths\": \"Compute distances for the sides and diagonals to ensure four equal sides and two equal, longer diagonals.\",\n    \"Final Check - Constraints Verification\": \"Verify that none of the side lengths or diagonals are zero, confirming all points are distinct and the square has positive side lengths.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"p1\": [\n          0,\n          0\n        ],\n        \"p2\": [\n          1,\n          1\n        ],\n        \"p3\": [\n          1,\n          0\n        ],\n        \"p4\": [\n          0,\n          1\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The points form a square with equal sides and equal diagonals.\"\n    },\n    {\n      \"input\": {\n        \"p1\": [\n          0,\n          0\n        ],\n        \"p2\": [\n          1,\n          1\n        ],\n        \"p3\": [\n          1,\n          0\n        ],\n        \"p4\": [\n          0,\n          12\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The points do not form a square as they do not have equal sides and equal diagonals.\"\n    },\n    {\n      \"input\": {\n        \"p1\": [\n          1,\n          0\n        ],\n        \"p2\": [\n          -1,\n          0\n        ],\n        \"p3\": [\n          0,\n          1\n        ],\n        \"p4\": [\n          0,\n          -1\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The points form a square centered at the origin with side length \\u221a2.\"\n    }\n  ],\n  \"constraints\": {\n    \"coordinate_range\": \"-10^4 <= xi, yi <= 10^4\",\n    \"point_structure\": \"All points are provided as [x, y] pairs.\"\n  },\n  \"follow_up\": \"Explore generalizing the solution for three-dimensional points or validating shapes like rectangles.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Add an integer `k` to the array-form of `num`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the array-form of an integer `num` (where `num` is represented as an array of its digits in left-to-right order) and an integer `k`, return the array-form of the integer `num + k`. The array-form of an integer means each digit is an element in the array, and the sum should be represented in this form.\",\n  \"objective\": \"Design an algorithm to efficiently add an integer `k` to the array-form of `num` and return the resulting array-form representation of the sum.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the requirements: Convert the array-form of `num` to an integer, add `k` to this integer, and convert the result back to its array-form.\",\n    \"Step 2 - Initial Approach\": \"Consider a straightforward approach: Convert the array `num` to an integer, add `k`, and then convert the sum back to an array of digits. However, this may not be efficient for very large numbers.\",\n    \"Step 3 - Optimized Approach\": \"To handle large numbers efficiently, process the addition directly in array form. Start from the least significant digit (end of the array) and propagate the carry as needed. This avoids integer overflow and ensures we handle the digits directly.\",\n    \"Step 4 - Carry Handling\": \"Iterate through the array `num` from the last digit to the first, adding `k` and managing the carry. If there is a carry after processing all digits, handle it by prepending the remaining digits to the result.\",\n    \"Step 5 - Output Format\": \"Ensure the function returns the final array-form of the integer sum, handling edge cases like leading zeros or very large values of `k`.\",\n    \"Step 6 - Code Efficiency and Edge Cases\": \"Focus on achieving linear time complexity, O(max(n, log(k))), where `n` is the length of `num`. Handle edge cases where `num` has leading zeros or when `k` is significantly larger than `num`.\",\n    \"Final Check - Constraints Verification\": \"Verify the solution operates within the constraints: `1 <= num.length <= 10^4`, `0 <= num[i] <= 9`, `num` does not contain leading zeros except for the zero itself, and `1 <= k <= 10^4`. Ensure the algorithm is robust and handles large inputs efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"num\": [\n          1,\n          2,\n          0,\n          0\n        ],\n        \"k\": 34\n      },\n      \"output\": [\n        1,\n        2,\n        3,\n        4\n      ],\n      \"explanation\": \"1200 + 34 = 1234.\"\n    },\n    {\n      \"input\": {\n        \"num\": [\n          2,\n          7,\n          4\n        ],\n        \"k\": 181\n      },\n      \"output\": [\n        4,\n        5,\n        5\n      ],\n      \"explanation\": \"274 + 181 = 455.\"\n    },\n    {\n      \"input\": {\n        \"num\": [\n          2,\n          1,\n          5\n        ],\n        \"k\": 806\n      },\n      \"output\": [\n        1,\n        0,\n        2,\n        1\n      ],\n      \"explanation\": \"215 + 806 = 1021.\"\n    }\n  ],\n  \"constraints\": {\n    \"num_length\": \"1 <= num.length <= 10^4\",\n    \"num_range\": \"0 <= num[i] <= 9\",\n    \"leading_zeros\": \"num does not contain any leading zeros except for the zero itself\",\n    \"k_range\": \"1 <= k <= 10^4\"\n  },\n  \"follow_up\": \"Can you further optimize the algorithm to handle larger values of `num` and `k` efficiently, ensuring the solution scales well with input size and maintains correctness?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You need to implement the `RecentCounter` class which counts recent requests within a time range. Implement the methods `RecentCounter()` and `ping(t)`. The `ping(t)` method should return the number of requests in the last 3000 milliseconds."}, {"role": "assistant", "content": "{\n  \"description\": \"You are tasked with implementing a `RecentCounter` class which counts the number of recent requests within a given time frame. The class should have the following functionalities: 1. `RecentCounter()`: Initializes the counter with zero recent requests. 2. `int ping(int t)`: Adds a new request at time `t` (in milliseconds) and returns the number of requests that have occurred in the last 3000 milliseconds, inclusive of the new request. The function should return the count of requests in the range `[t - 3000, t]`.\",\n  \"objective\": \"Implement the `RecentCounter` class with the required methods and functionality. Ensure the class works efficiently within the constraints provided.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understanding the problem\": \"The problem asks you to design a counter for recent requests. The requests are tracked based on their time, and you need to find how many requests have occurred in the last 3000 milliseconds. The requests are guaranteed to be in strictly increasing order, so you don't need to handle duplicates or out-of-order requests.\",\n    \"Step 2 - Input format\": \"You are given a series of method calls, and each method has specific inputs. The `ping` method takes an integer `t`, which represents the time of a new request. The `RecentCounter` class is initialized with zero requests.\",\n    \"Step 3 - Approach\": \"You could use a queue to store the request times. For each ping, remove requests from the queue that are outside the time range `[t - 3000, t]`, and then add the new request. This approach allows you to efficiently calculate the number of requests within the time window.\",\n    \"Step 4 - Output format\": \"For each call to the `ping` method, return the number of requests within the last 3000 milliseconds.\",\n    \"Step 5 - Edge case considerations\": \"The minimum value for `t` is 1, and the time can go up to `10^9`. Be sure to handle the case when no requests are within the 3000 millisecond range.\",\n    \"Step 6 - Optimized approach\": \"Using a queue is a good choice for this problem because it allows efficient insertion and removal of elements while maintaining the order of requests.\"\n  },\n  \"examples\": [\n    {\n      \"input\": [\n        \"RecentCounter\",\n        \"ping\",\n        \"ping\",\n        \"ping\",\n        \"ping\"\n      ],\n      \"output\": [\n        null,\n        1,\n        2,\n        3,\n        3\n      ],\n      \"explanation\": \"In this example, we perform a series of `ping` method calls on the `RecentCounter` instance. After each call, the method returns the number of requests that happened in the last 3000 milliseconds.\"\n    }\n  ],\n  \"constraints\": {\n    \"time_range\": \"1 <= t <= 10^9\",\n    \"ping_calls\": \"At most 10^4 calls will be made to `ping`.\"\n  },\n  \"follow_up\": \"Can you think of a more efficient way to implement the `ping` method that avoids checking every request in the queue each time?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum number of balls to insert to clear the board. If not possible, return -1."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `board` representing a row of colored balls and a string `hand` representing balls you can insert, determine the **minimum number of balls** you must insert to clear the board. If it is not possible to clear the board, return `-1`. Clearing the board involves forming and removing groups of three or more consecutive balls of the same color, with additional groups cleared recursively.\",\n  \"objective\": \"Implement an efficient algorithm that explores possible ways of inserting balls from `hand` into `board` to minimize the number of inserted balls, using a depth-first search (DFS) approach with optimization techniques like memoization.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand the Problem\": \"Analyze how to clear all balls by inserting the least number of balls into the board. Ensure familiarity with the rules for forming and removing groups of three or more consecutive balls.\",\n    \"Step 2 - Define the Approach\": \"Use a DFS algorithm to explore all possible positions where balls can be inserted. Track the state of the board and the remaining balls in the hand. Optimize with memoization to avoid redundant computations.\",\n    \"Step 3 - Implement Ball Removal\": \"Create a helper function to simulate the removal of groups of three or more consecutive balls and recursively clear additional groups formed after an initial removal.\",\n    \"Step 4 - Use Pruning and Constraints\": \"Prune infeasible branches in the DFS when there are not enough balls left in the hand to form a group or when it becomes impossible to clear the board.\",\n    \"Step 5 - Edge Cases\": \"Handle cases such as a single ball on the board, insufficient balls in the hand, or when the board is initially empty.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"board\": \"WRRBBW\",\n        \"hand\": \"RB\"\n      },\n      \"output\": -1,\n      \"explanation\": \"Even with the best moves, the board cannot be cleared with the given hand.\"\n    },\n    {\n      \"input\": {\n        \"board\": \"WWRRBBWW\",\n        \"hand\": \"WRBRW\"\n      },\n      \"output\": 2,\n      \"explanation\": \"Insert 'R' and 'B' to clear the board in two moves.\"\n    },\n    {\n      \"input\": {\n        \"board\": \"G\",\n        \"hand\": \"GGGGG\"\n      },\n      \"output\": 2,\n      \"explanation\": \"Insert two 'G' balls to clear the board.\"\n    }\n  ],\n  \"constraints\": {\n    \"board_length\": \"1 <= board.length <= 16\",\n    \"hand_length\": \"1 <= hand.length <= 5\",\n    \"character_set\": \"board and hand consist of 'R', 'Y', 'B', 'G', and 'W'.\",\n    \"initial_condition\": \"The board will not have groups of three or more consecutive balls initially.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"How can memoization reduce redundant state computations in this problem?\",\n    \"question_2\": \"How would you adapt the solution if multiple boards were being solved in parallel?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum moves to get to a target number on a lock with wheels from 0-9, starting from 0000."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a 4-wheel lock, each wheel with digits from '0' to '9', your task is to determine the minimum number of moves required to reach a specified target combination starting from '0000'. Each move involves rotating one wheel by one slot, either forward or backward, and the lock wraps around (e.g., '9' can turn to '0' and vice versa). The lock may have 'deadends', specific wheel combinations that, if reached, will prevent further moves. You need to avoid these deadends to reach the target, returning -1 if the target cannot be reached.\",\n  \"objective\": \"Design an algorithm to find the shortest sequence of moves from '0000' to the target combination, avoiding deadend states efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Start by understanding that the lock is a 4-wheel mechanism with each wheel containing digits '0' to '9'. The initial state is '0000', and each move changes one wheel by one slot either forward or backward.\",\n    \"Step 2 - Breadth-First Search Approach\": \"Since we need the minimum moves, consider using Breadth-First Search (BFS), which explores each move level-by-level, ensuring the shortest path to the target.\",\n    \"Step 3 - Deadend Avoidance\": \"In each BFS step, check if the current lock state is in the 'deadends' list to avoid these paths. If the target state is reached, return the move count.\",\n    \"Step 4 - BFS Implementation\": \"Implement BFS, starting from '0000', exploring all possible moves by changing each wheel one slot forward or backward. For each state, track visited states to prevent re-processing and optimize efficiency.\",\n    \"Step 5 - Output and Edge Cases\": \"Return the number of moves if the target is reached. If BFS completes without finding the target, return -1. Consider edge cases like the target being '0000' or deadends that make reaching the target impossible.\",\n    \"Final Check - Constraints Verification\": \"Ensure the code handles the constraints, including up to 500 deadends and a 4-digit lock structure, while checking for efficiency to handle multiple possible states.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"deadends\": [\n          \"0201\",\n          \"0101\",\n          \"0102\",\n          \"1212\",\n          \"2002\"\n        ],\n        \"target\": \"0202\"\n      },\n      \"output\": 6,\n      \"explanation\": \"A sequence of valid moves such as '0000' -> '1000' -> '1100' -> '1200' -> '1201' -> '1202' -> '0202' reaches the target in 6 moves.\"\n    },\n    {\n      \"input\": {\n        \"deadends\": [\n          \"8888\"\n        ],\n        \"target\": \"0009\"\n      },\n      \"output\": 1,\n      \"explanation\": \"A single move by turning the last wheel in reverse reaches '0009' from '0000'.\"\n    },\n    {\n      \"input\": {\n        \"deadends\": [\n          \"8887\",\n          \"8889\",\n          \"8878\",\n          \"8898\",\n          \"8788\",\n          \"8988\",\n          \"7888\",\n          \"9888\"\n        ],\n        \"target\": \"8888\"\n      },\n      \"output\": -1,\n      \"explanation\": \"It is impossible to reach '8888' without passing through deadends.\"\n    }\n  ],\n  \"constraints\": {\n    \"deadends_length\": \"1 <= deadends.length <= 500\",\n    \"deadends_elements_length\": \"Each deadend element is 4 characters\",\n    \"target_length\": \"4 characters\",\n    \"target_in_deadends\": \"The target is not in the deadends list\"\n  },\n  \"follow_up\": \"How can you further optimize the BFS solution for a larger range of states, possibly beyond the given constraints, while ensuring minimal memory usage and efficient state exploration?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Determine if two nodes in a binary tree are cousins."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary tree with unique values and the values of two different nodes `x` and `y`, determine if the nodes corresponding to `x` and `y` in the tree are **cousins**. Two nodes are considered cousins if they have the same depth but different parents. The root node is at depth `0`, and children of each node at depth `k` are at depth `k + 1`.\",\n  \"objective\": \"Design an efficient algorithm to determine whether two nodes in a binary tree are cousins, meaning they share the same depth but have different parents.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the requirements: Identify if nodes `x` and `y` in a binary tree have the same depth but different parents.\",\n    \"Step 2 - Initial Approach\": \"Consider using a Breadth-First Search (BFS) or Depth-First Search (DFS) approach to traverse the tree and determine the depth and parent of each node.\",\n    \"Step 3 - BFS Algorithm\": \"Implement BFS to traverse the tree level by level. Track the depth and parent of each node. If both `x` and `y` are found at the same depth with different parents, return true.\",\n    \"Step 4 - BFS Steps\": \"1. Initialize a queue with the root node and its depth (0) and parent (null). 2. While the queue is not empty, dequeue a node and process its children. 3. Track the depth and parent of `x` and `y`. 4. If both are found at the same depth with different parents, return true; otherwise, continue until the queue is empty.\",\n    \"Step 5 - Output Format\": \"Ensure the function returns a boolean value indicating whether the nodes `x` and `y` are cousins.\",\n    \"Step 6 - Code Efficiency and Edge Cases\": \"Focus on achieving efficient traversal with time complexity of O(n), where `n` is the number of nodes. Handle edge cases such as minimal input size, nodes being direct siblings, or one node being the child of the other.\",\n    \"Final Check - Constraints Verification\": \"Verify the solution operates within the constraints: `2 <= number of nodes <= 100`, `1 <= Node.val <= 100`, each node has a unique value, `x != y`, and `x` and `y` exist in the tree. Ensure the algorithm is robust and handles large inputs efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3,\n          4\n        ],\n        \"x\": 4,\n        \"y\": 3\n      },\n      \"output\": false,\n      \"explanation\": \"Nodes 4 and 3 are not cousins as they are not at the same depth.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3,\n          null,\n          4,\n          null,\n          5\n        ],\n        \"x\": 5,\n        \"y\": 4\n      },\n      \"output\": true,\n      \"explanation\": \"Nodes 5 and 4 are cousins as they are at the same depth but have different parents.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3,\n          null,\n          4\n        ],\n        \"x\": 2,\n        \"y\": 3\n      },\n      \"output\": false,\n      \"explanation\": \"Nodes 2 and 3 are not cousins as they are not at the same depth.\"\n    }\n  ],\n  \"constraints\": {\n    \"nodes_range\": \"The number of nodes in the tree is in the range [2, 100]\",\n    \"node_values_range\": \"1 <= Node.val <= 100\",\n    \"unique_values\": \"Each node has a unique value\",\n    \"different_nodes\": \"x != y\",\n    \"nodes_existence\": \"x and y exist in the tree\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle even larger trees efficiently while maintaining the constraints and ensuring the correctness of the cousin relationship?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the third maximum in `nums` or the max if there\u2019s no third one."}, {"role": "assistant", "content": "{\n  \"title\": \"Find Third Distinct Maximum in Array\",\n  \"description\": \"Given an integer array `nums`, find the third distinct maximum number. If it does not exist, return the maximum number instead.\",\n  \"objective\": \"Efficiently identify the third distinct maximum while handling duplicates appropriately.\",\n  \"input\": {\n    \"name\": \"nums\",\n    \"type\": \"array of integers\",\n    \"description\": \"The array of integers to analyze.\",\n    \"constraints\": \"1 <= nums.length <= 10^4, -2^31 <= nums[i] <= 2^31 - 1\"\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The third distinct maximum or the maximum number if fewer than three distinct numbers exist.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          2,\n          1\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"Distinct maxima are 3, 2, and 1. The third is 1.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"Distinct maxima are 2 and 1. The third does not exist, so 2 is returned.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          2,\n          3,\n          1\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"Distinct maxima are 3, 2, and 1. The third is 1.\"\n    }\n  ],\n  \"hints\": [\n    \"Use a set or other data structure to handle distinct elements.\",\n    \"Iterate through the array and track up to three maximum values.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(n) time complexity using a single traversal of the array.\",\n    \"constraints\": \"Avoid nested loops or sorting to improve efficiency.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Partition a string into palindromic substrings."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s`, partition `s` such that every substring of the partition is a palindrome. Return all possible palindrome partitionings.\",\n  \"objective\": \"Design an algorithm to find all possible palindrome partitions of the given string.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task requires generating all partitions where every substring is a palindrome.\",\n    \"Step 2 - Backtracking\": \"Use backtracking to generate all valid partitions by checking each substring for palindromicity.\",\n    \"Step 3 - Optimize Palindrome Check\": \"Precompute whether substrings are palindromes using dynamic programming to avoid redundant checks.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as strings of length 1, and strings with no palindromic substrings beyond single characters.\",\n    \"Step 5 - Optimize\": \"Ensure the solution efficiently handles strings up to the maximum length of 16.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"aab\"\n      },\n      \"output\": [\n        [\n          \"a\",\n          \"a\",\n          \"b\"\n        ],\n        [\n          \"aa\",\n          \"b\"\n        ]\n      ],\n      \"explanation\": \"Two valid partitions are ['a', 'a', 'b'] and ['aa', 'b'].\"\n    },\n    {\n      \"input\": {\n        \"s\": \"a\"\n      },\n      \"output\": [\n        [\n          \"a\"\n        ]\n      ],\n      \"explanation\": \"A single-character string has only one partition.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 16\",\n    \"characters\": \"s consists only of lowercase English letters.\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm to reduce redundant palindrome checks?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Increment ranges of an array based on the input."}, {"role": "assistant", "content": "{\n  \"title\": \"Apply Range Updates to an Array\",\n  \"description\": \"You are given an array of zeros of length `length` and a series of update operations. Each operation increments elements within a specific range by a given value. Return the final array after applying all updates efficiently.\",\n  \"input\": {\n    \"parameters\": [\n      {\n        \"name\": \"length\",\n        \"type\": \"integer\",\n        \"description\": \"Length of the array to initialize with zeros.\",\n        \"constraints\": \"1 <= length <= 10^5\"\n      },\n      {\n        \"name\": \"updates\",\n        \"type\": \"array of arrays\",\n        \"description\": \"Each element `updates[i]` contains three integers `[startIdxi, endIdxi, inci]` representing the range to update and the increment value.\",\n        \"constraints\": \"0 <= updates.length <= 10^4, 0 <= startIdxi <= endIdxi < length, -1000 <= inci <= 1000\"\n      }\n    ]\n  },\n  \"output\": {\n    \"type\": \"array of integers\",\n    \"description\": \"The array after applying all range updates.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"length\": 5,\n        \"updates\": [\n          [\n            1,\n            3,\n            2\n          ],\n          [\n            2,\n            4,\n            3\n          ],\n          [\n            0,\n            2,\n            -2\n          ]\n        ]\n      },\n      \"output\": [\n        -2,\n        0,\n        3,\n        5,\n        3\n      ],\n      \"explanation\": \"After applying updates sequentially: \\n1. Add 2 to indices [1, 3]: [0, 2, 2, 2, 0]\\n2. Add 3 to indices [2, 4]: [0, 2, 5, 5, 3]\\n3. Subtract 2 from indices [0, 2]: [-2, 0, 3, 5, 3]\"\n    },\n    {\n      \"input\": {\n        \"length\": 10,\n        \"updates\": [\n          [\n            2,\n            4,\n            6\n          ],\n          [\n            5,\n            6,\n            8\n          ],\n          [\n            1,\n            9,\n            -4\n          ]\n        ]\n      },\n      \"output\": [\n        0,\n        -4,\n        2,\n        2,\n        2,\n        4,\n        4,\n        -4,\n        -4,\n        -4\n      ],\n      \"explanation\": \"The updates are applied in order with efficient prefix summation logic.\"\n    }\n  ],\n  \"hints\": [\n    \"Use a difference array to efficiently apply range updates in O(1) time for each update.\",\n    \"Calculate the prefix sum of the difference array to get the final result.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(length + updates.length) time complexity using the difference array method.\",\n    \"constraints\": \"Avoid direct iteration for each update, which would result in O(length * updates.length) complexity.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Remove some intervals to make them not overlap. Return how many you removed."}, {"role": "assistant", "content": "{\n  \"title\": \"Minimum Intervals to Remove for Non-Overlapping Intervals\",\n  \"description\": \"Given an array of intervals `intervals` where each interval is represented as `[start, end]`, return the minimum number of intervals that need to be removed to make the rest of the intervals non-overlapping.\",\n  \"input\": {\n    \"name\": \"intervals\",\n    \"type\": \"array\",\n    \"description\": \"An array of intervals where each interval is defined as `[start, end]`.\",\n    \"constraints\": \"1 <= intervals.length <= 10^5, intervals[i].length == 2, -5 * 10^4 <= start < end <= 5 * 10^4\"\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The minimum number of intervals to remove to make the remaining intervals non-overlapping.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"intervals\": [\n          [\n            1,\n            2\n          ],\n          [\n            2,\n            3\n          ],\n          [\n            3,\n            4\n          ],\n          [\n            1,\n            3\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"Remove [1, 3] to make the intervals [[1, 2], [2, 3], [3, 4]] non-overlapping.\"\n    },\n    {\n      \"input\": {\n        \"intervals\": [\n          [\n            1,\n            2\n          ],\n          [\n            1,\n            2\n          ],\n          [\n            1,\n            2\n          ]\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"Remove two of the [1, 2] intervals to keep one.\"\n    },\n    {\n      \"input\": {\n        \"intervals\": [\n          [\n            1,\n            2\n          ],\n          [\n            2,\n            3\n          ]\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"The intervals [[1, 2], [2, 3]] are already non-overlapping.\"\n    }\n  ],\n  \"hints\": [\n    \"Sort the intervals by their end times.\",\n    \"Use a greedy approach to keep the interval with the earliest end time that does not overlap with previously selected intervals.\",\n    \"Count intervals that overlap and remove them.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve a time complexity of O(n log n) by sorting the intervals and iterating through them once.\",\n    \"constraints\": \"Avoid nested loops to prevent O(n^2) complexity.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Implement a stack that supports retrieving the minimum element."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a stack that supports `push`, `pop`, `top`, and retrieving the minimum element in constant time.\",\n  \"objective\": \"Implement an efficient stack data structure with O(1) time complexity for each operation.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves implementing a stack with additional functionality to retrieve the minimum element in O(1) time.\",\n    \"Step 2 - Maintain Min Tracking\": \"Use an auxiliary stack or an efficient mechanism to track the minimum element at each state of the stack.\",\n    \"Step 3 - Implement Operations\": \"Implement `push`, `pop`, `top`, and `getMin` such that all operations maintain the time complexity requirement.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as pushing negative values, duplicate values, or performing operations on an empty stack.\",\n    \"Step 5 - Optimize\": \"Ensure that auxiliary space is minimized.\"\n  },\n  \"examples\": [\n    {\n      \"input\": [\n        [\n          \"MinStack\",\n          \"push\",\n          \"push\",\n          \"push\",\n          \"getMin\",\n          \"pop\",\n          \"top\",\n          \"getMin\"\n        ],\n        [\n          [],\n          [\n            -2\n          ],\n          [\n            0\n          ],\n          [\n            -3\n          ],\n          [],\n          [],\n          [],\n          []\n        ]\n      ],\n      \"output\": [\n        null,\n        null,\n        null,\n        null,\n        -3,\n        null,\n        0,\n        -2\n      ],\n      \"explanation\": \"The stack maintains its minimum value even after operations like pop and push.\"\n    }\n  ],\n  \"constraints\": {\n    \"value_range\": \"-2^31 <= val <= 2^31 - 1\",\n    \"operation_count\": \"At most 30,000 calls to `push`, `pop`, `top`, and `getMin`.\"\n  },\n  \"follow_up\": \"Can you minimize the auxiliary space usage while maintaining O(1) time complexity for each operation?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find all shortest transformation sequences from one word to another using a word list."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two words, `beginWord` and `endWord`, and a dictionary `wordList`, return all shortest transformation sequences from `beginWord` to `endWord`. Each transformation changes one letter at a time, and all intermediate words must exist in `wordList`.\",\n  \"objective\": \"Design an algorithm to find all shortest transformation sequences from `beginWord` to `endWord` using the dictionary.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves finding the shortest paths in an unweighted graph where words are connected if they differ by one letter.\",\n    \"Step 2 - Breadth-First Search\": \"Use BFS to explore the word graph and identify the shortest paths to the `endWord`.\",\n    \"Step 3 - Backtracking\": \"Use backtracking to reconstruct all shortest transformation sequences from the BFS traversal.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as when `endWord` is not in the `wordList` or when no valid transformation sequence exists.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs efficiently by avoiding redundant computations and pruning unnecessary paths.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"beginWord\": \"hit\",\n        \"endWord\": \"cog\",\n        \"wordList\": [\n          \"hot\",\n          \"dot\",\n          \"dog\",\n          \"lot\",\n          \"log\",\n          \"cog\"\n        ]\n      },\n      \"output\": [\n        [\n          \"hit\",\n          \"hot\",\n          \"dot\",\n          \"dog\",\n          \"cog\"\n        ],\n        [\n          \"hit\",\n          \"hot\",\n          \"lot\",\n          \"log\",\n          \"cog\"\n        ]\n      ],\n      \"explanation\": \"There are two shortest paths from 'hit' to 'cog'.\"\n    },\n    {\n      \"input\": {\n        \"beginWord\": \"hit\",\n        \"endWord\": \"cog\",\n        \"wordList\": [\n          \"hot\",\n          \"dot\",\n          \"dog\",\n          \"lot\",\n          \"log\"\n        ]\n      },\n      \"output\": [],\n      \"explanation\": \"'cog' is not in the word list, so no transformation is possible.\"\n    }\n  ],\n  \"constraints\": {\n    \"word_length\": \"1 <= beginWord.length <= 5\",\n    \"word_list_size\": \"1 <= wordList.length <= 500\",\n    \"characters\": \"All words consist of lowercase English letters.\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm to handle very large dictionaries or multiple queries efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a student can get an award based on their attendance record."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an attendance record as a string `s`, determine if a student is eligible for an award. The student is eligible if they have been absent fewer than 2 days and have not been late for 3 or more consecutive days.\",\n  \"objective\": \"Use regular expressions to check if the attendance string meets the award criteria, where fewer than 2 absences (`'A'`) and no 3 consecutive late days (`'LLL'`) are present.\",\n  \"meta_prompt\": {\n    \"Step 1 - Define Regex for Multiple Absences\": \"Define a regex pattern to detect two or more occurrences of `'A'` in the string. This can be represented as `.*A.*A.*`, which finds any two `'A'` characters with any characters (or none) in between.\",\n    \"Step 2 - Define Regex for Consecutive Lates\": \"Define a regex pattern to detect three consecutive `'L'` characters, represented as `.*LLL.*`.\",\n    \"Step 3 - Combine Patterns\": \"Combine the patterns for multiple absences and consecutive lates using the `|` (OR) operator. The combined pattern `.*(A.*A|LLL).*` checks if either of these conditions is met.\",\n    \"Step 4 - Apply Regex and Return Result\": \"Use the combined regex pattern to match against the string. If the string matches, it means the student does not meet the award criteria, so return `false`. If the string does not match, return `true` as the student is eligible.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution handles input lengths up to 1000 characters and validates input only containing 'A', 'L', or 'P' characters.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"PPALLP\"\n      },\n      \"output\": true,\n      \"explanation\": \"The student has fewer than 2 absences and no instances of 3 consecutive late days.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"PPALLL\"\n      },\n      \"output\": false,\n      \"explanation\": \"The student has 3 consecutive late days ('LLL'), making them ineligible for the award.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 1000\",\n    \"character_set\": \"s consists only of 'A', 'L', or 'P'.\"\n  },\n  \"follow_up\": \"Consider alternative approaches that avoid regex to handle potentially larger inputs or optimize runtime performance.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given a string `s` and an array of strings `words`. Return the number of strings in `words` that are subsequences of `s`."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a string `s` and an array of strings `words`. Your task is to determine how many of the strings in `words` are subsequences of the string `s`. A subsequence is a string derived from `s` by deleting some characters without changing the relative order of the remaining characters.\",\n  \"objective\": \"Return the number of words in `words` that are subsequences of the string `s`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The task requires checking if each word in `words` is a subsequence of the string `s`. A subsequence of a string is formed by deleting some characters from the string, but the order of the remaining characters is preserved.\",\n    \"Step 2 - Approach\": \"To solve the problem efficiently, one could use two pointers: one pointer iterates over the string `s`, and the other pointer iterates over the word in `words`. If all characters of the word can be matched sequentially in `s`, then the word is a subsequence of `s`.\",\n    \"Step 3 - Plan\": \"1. Initialize a counter to keep track of how many words are subsequences of `s`. 2. For each word, use two pointers to check if the word is a subsequence of `s`. 3. If the word is a subsequence, increment the counter. 4. Return the final count of subsequences.\",\n    \"Step 4 - Edge Cases\": \"Handle cases where no words are subsequences, all words are subsequences, or the word lengths vary widely. Consider the length of `s` up to the upper limit, which may require efficient traversal of `s`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"abcde\",\n        \"words\": [\n          \"a\",\n          \"bb\",\n          \"acd\",\n          \"ace\"\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The subsequences of `s` are 'a', 'acd', and 'ace'. 'bb' is not a subsequence.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"dsahjpjauf\",\n        \"words\": [\n          \"ahjpjau\",\n          \"ja\",\n          \"ahbwzgqnuk\",\n          \"tnmlanowax\"\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"'ahjpjau' and 'ja' are subsequences of `s`, while the other two words are not.\"\n    }\n  ],\n  \"constraints\": {\n    \"s_length\": \"1 <= s.length <= 50000\",\n    \"words_length\": \"1 <= words.length <= 5000\",\n    \"word_length\": \"1 <= words[i].length <= 50\",\n    \"characters\": \"s and words[i] consist of only lowercase English letters.\"\n  },\n  \"follow_up\": \"What would the solution look like if we were to account for case-sensitive strings, or if we had to allow for more complex subsequence matching conditions?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a list of people and times, find out who is leading at a given time."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given two integer arrays `persons` and `times`, where each vote in the election corresponds to an entry in `persons` (the person receiving the vote) and `times` (the time the vote was cast). Your task is to implement a class `TopVotedCandidate` that allows querying the person leading the election at any given time `t`. The rules for determining the leader are as follows: votes cast at time `t` count, and in the case of a tie, the most recent vote determines the leader.\",\n  \"objective\": \"Design a `TopVotedCandidate` class that efficiently answers the leader at any given query time `t`. The class should be initialized with the arrays `persons` and `times`, and implement a `q(t)` method that returns the person leading at time `t` based on the rules provided.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Understand that for each vote in `persons` and `times`, we need to determine the most recent leader at a given query time. This involves determining the person with the most votes at time `t` or resolving ties by the most recent vote.\",\n    \"Step 2 - Data Structure Choice\": \"Consider a strategy to keep track of vote counts over time and efficiently retrieve the current leader for any query. A list to store the leader at each time would be useful.\",\n    \"Step 3 - Efficient Querying with Preprocessing\": \"Preprocess the votes and store the leader at each time `t`. For each query `q(t)`, determine the leader by comparing the most recent votes up until that time.\",\n    \"Step 4 - Implementing the Class\": \"The `TopVotedCandidate` class should have an initialization method to store votes and times, and a `q(t)` method that performs efficient querying based on the preprocessed data.\",\n    \"Step 5 - Handling Edge Cases\": \"Ensure that the code handles edge cases such as times being at the boundaries (e.g., `t = 0` or `t = 10^9`), and make sure the data structures allow for efficient querying even with the upper limits of the input size.\",\n    \"Final Check - Constraints Verification\": \"Verify that the algorithm works efficiently under the given constraints (with up to `5000` votes, times up to `10^9`, and at most `104` queries).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"persons\": [\n          0,\n          1,\n          1,\n          0,\n          0,\n          1,\n          0\n        ],\n        \"times\": [\n          0,\n          5,\n          10,\n          15,\n          20,\n          25,\n          30\n        ]\n      },\n      \"output\": [\n        null,\n        0,\n        1,\n        1,\n        0,\n        0,\n        1\n      ],\n      \"explanation\": \"At time 3, person 0 is leading. At time 12, person 1 is leading. At time 25, person 1 is leading, and at time 15, person 0 is leading due to the most recent vote in case of a tie.\"\n    }\n  ],\n  \"constraints\": {\n    \"persons_length\": \"1 <= persons.length <= 5000\",\n    \"times_length\": \"times.length == persons.length\",\n    \"persons_range\": \"0 <= persons[i] < persons.length\",\n    \"times_range\": \"0 <= times[i] <= 10^9\",\n    \"times_sorted\": \"times is sorted in strictly increasing order\",\n    \"q_calls\": \"At most 10^4 calls will be made to q(t).\"\n  },\n  \"follow_up\": \"Can you optimize the solution to answer each query in O(log n) or better?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Make a calculator to solve math expressions."}, {"role": "assistant", "content": "{\n  \"description\": \"Implement a calculator to evaluate a mathematical expression string.\",\n  \"objective\": \"Parse and compute the result of the input string, considering operator precedence and parentheses.\",\n  \"meta_prompt\": {\n    \"Step 1 - Tokenize Input\": \"Split the input string into numbers, operators, and parentheses.\",\n    \"Step 2 - Evaluate Parentheses\": \"Use a stack to handle expressions within parentheses.\",\n    \"Step 3 - Handle Operators\": \"Maintain operator precedence for addition and subtraction.\",\n    \"Step 4 - Return Result\": \"Ensure the final computed value is returned.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"1 + 1\"\n      },\n      \"output\": 2,\n      \"explanation\": \"The expression evaluates to 2.\"\n    },\n    {\n      \"input\": {\n        \"s\": \" 2-1 + 2 \"\n      },\n      \"output\": 3,\n      \"explanation\": \"The expression evaluates to 3.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"(1+(4+5+2)-3)+(6+8)\"\n      },\n      \"output\": 23,\n      \"explanation\": \"The expression evaluates to 23.\"\n    }\n  ],\n  \"constraints\": {\n    \"input_length\": \"1 <= s.length <= 3 * 10^5\",\n    \"valid_characters\": \"s consists of digits, '+', '-', '(', ')', and spaces.\",\n    \"result_range\": \"Every number and result will fit in a signed 32-bit integer.\"\n  },\n  \"follow_up\": \"Could you handle expressions with additional operators like '*', '/' or implement variable assignments?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if the rows and columns of a string array match."}, {"role": "assistant", "content": "{\n  \"title\": \"Validate Word Square\",\n  \"description\": \"Determine if an array of strings forms a valid word square. A word square is valid if for each row `k`, the string formed by the row matches the string formed by the column `k`.\",\n  \"objective\": \"Efficiently check whether the input `words` satisfies the word square property.\",\n  \"input\": {\n    \"words\": {\n      \"type\": \"array of strings\",\n      \"description\": \"Each element is a row of the word square, where the row length may vary.\",\n      \"constraints\": \"1 <= words.length <= 500, 1 <= words[i].length <= 500, words[i] consists only of lowercase English letters.\"\n    }\n  },\n  \"output\": {\n    \"type\": \"boolean\",\n    \"description\": \"`true` if the input forms a valid word square, otherwise `false`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"words\": [\n          \"abcd\",\n          \"bnrt\",\n          \"crmy\",\n          \"dtye\"\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The row and column for each index are identical, forming a valid word square.\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"abcd\",\n          \"bnrt\",\n          \"crm\",\n          \"dt\"\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The row and column for each index match, despite varying row lengths.\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"ball\",\n          \"area\",\n          \"read\",\n          \"lady\"\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The third row 'read' does not match the third column 'lead'.\"\n    }\n  ],\n  \"hints\": [\n    \"Iterate through each row and compare it with the corresponding column.\",\n    \"Ensure row lengths and column lengths match for the given `words`.\",\n    \"Stop immediately if any mismatch is found.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve a time complexity of O(n * m), where n is the number of rows and m is the maximum row length.\",\n    \"constraints\": \"Avoid creating new data structures to store columns for comparison; use indices directly.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a matrix of integers, return the minimum sum of any falling path through the matrix."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `n x n` array of integers `matrix`, the task is to return the **minimum sum** of any **falling path** through the matrix. A falling path starts at any element in the first row and proceeds to the next row, selecting the element that is either directly below or diagonally left or right. Specifically, for any element at position `(row, col)`, the next element is chosen from `(row + 1, col - 1)`, `(row + 1, col)`, or `(row + 1, col + 1)`.\",\n  \"objective\": \"The goal is to find the minimum sum of any valid falling path through the matrix, starting from any element in the first row.\",\n  \"meta_prompt\": {\n    \"Step 1 - Input Understanding\": \"You are given a square matrix of integers with dimensions `n x n`, where each element represents a weight or cost. The falling path starts at any element in the first row and proceeds to the next row based on the allowed moves.\",\n    \"Step 2 - Falling Path Definition\": \"A falling path can move from the current element to the next row's element either directly below or diagonally to the left or right.\",\n    \"Step 3 - Approach\": \"You can solve this problem using dynamic programming (DP) by iterating over the rows of the matrix. For each element, compute the minimum sum of the falling path that ends at that element by considering the previous row's values that could have reached it.\",\n    \"Step 4 - Output Format\": \"Return the minimum sum of a falling path in the matrix. The sum should be the minimum possible value considering all valid paths.\",\n    \"Step 5 - Edge Case Considerations\": \"Consider edge cases such as matrices with negative values or matrices of size `1x1`.\",\n    \"Step 6 - Code Efficiency\": \"The solution should be efficient with respect to time complexity, ideally O(n^2), where `n` is the size of the matrix.\"\n  },\n  \"examples\": [\n    {\n      \"input\": [\n        [\n          2,\n          1,\n          3\n        ],\n        [\n          6,\n          5,\n          4\n        ],\n        [\n          7,\n          8,\n          9\n        ]\n      ],\n      \"output\": 13,\n      \"explanation\": \"The minimum falling path sum is 13, which corresponds to the path starting at 1 (row 0), 4 (row 1), and 8 (row 2).\"\n    },\n    {\n      \"input\": [\n        [\n          -19,\n          57\n        ],\n        [\n          -40,\n          -5\n        ]\n      ],\n      \"output\": -59,\n      \"explanation\": \"The minimum falling path sum is -59, corresponding to the path starting at -19 (row 0) and -40 (row 1).\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size\": \"1 <= n <= 100\",\n    \"matrix_values\": \"-100 <= matrix[i][j] <= 100\"\n  },\n  \"follow_up\": \"Can you optimize the solution to use only constant space?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given an array of points in the X-Y plane. Return the minimum area of a rectangle formed from these points."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an array of points in the X-Y plane, where each point is represented as [xi, yi]. Your task is to find the minimum area of a rectangle that can be formed using any of these points, with the sides of the rectangle parallel to the X and Y axes.\",\n  \"objective\": \"Return the minimum area of the rectangle formed by any four points. If no rectangle can be formed, return 0.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understanding the Problem\": \"A rectangle can be formed by selecting two distinct x-coordinates and two distinct y-coordinates. These four points should correspond to the four corners of the rectangle. The rectangle's sides must be parallel to the axes, meaning the x-coordinates and y-coordinates of the selected points should align horizontally and vertically.\",\n    \"Step 2 - Plan\": \"To solve this, we need to check all possible pairs of points that could form the diagonally opposite corners of a rectangle. If these two points are diagonally opposite, the other two points needed to form the rectangle must share the same x or y coordinates, respectively. We can check for the existence of these other two points to confirm if a rectangle can be formed.\",\n    \"Step 3 - Optimization\": \"Instead of checking every combination of four points (which would be inefficient), we can use a set for fast look-up of points. This helps reduce the number of comparisons and makes the solution more efficient. We also need to keep track of the minimum area encountered.\",\n    \"Step 4 - Constraints Consideration\": \"The number of points is at most 500, so a brute-force solution that checks pairs of points should be feasible. However, we aim for an efficient solution by utilizing sets for fast lookups, ensuring that the solution can handle the largest inputs efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"points\": [\n          [\n            1,\n            1\n          ],\n          [\n            1,\n            3\n          ],\n          [\n            3,\n            1\n          ],\n          [\n            3,\n            3\n          ],\n          [\n            2,\n            2\n          ]\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"The four points that form the rectangle are [1,1], [1,3], [3,1], and [3,3]. The area of the rectangle is (3-1)*(3-1) = 4.\"\n    },\n    {\n      \"input\": {\n        \"points\": [\n          [\n            1,\n            1\n          ],\n          [\n            1,\n            3\n          ],\n          [\n            3,\n            1\n          ],\n          [\n            3,\n            3\n          ],\n          [\n            4,\n            1\n          ],\n          [\n            4,\n            3\n          ]\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The four points that form the rectangle are [1,1], [1,3], [3,1], and [3,3]. The area of the rectangle is (3-1)*(3-1) = 2.\"\n    }\n  ],\n  \"constraints\": {\n    \"point_count_range\": \"1 <= points.length <= 500\",\n    \"coordinate_range\": \"0 <= xi, yi <= 40,000\",\n    \"unique_points\": \"All given points are unique.\"\n  },\n  \"follow_up\": \"How can you optimize the solution if the number of points is much larger than the current constraints? Can you reduce the time complexity further using advanced data structures or techniques?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a frog can jump on stones to reach the last one."}, {"role": "assistant", "content": "{\n  \"title\": \"Frog Jump Across Stones\",\n  \"description\": \"Determine if a frog can cross a river by jumping on stones, given specific rules for jump distances.\",\n  \"input\": {\n    \"stones\": {\n      \"type\": \"array of integers\",\n      \"description\": \"A sorted array of integers representing the positions of stones in ascending order.\",\n      \"constraints\": \"2 <= stones.length <= 2000, 0 <= stones[i] <= 2^31 - 1, stones[0] == 0\"\n    }\n  },\n  \"output\": {\n    \"type\": \"boolean\",\n    \"description\": \"`true` if the frog can cross the river by landing on the last stone, `false` otherwise.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"stones\": [\n          0,\n          1,\n          3,\n          5,\n          6,\n          8,\n          12,\n          17\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The frog can jump to the last stone as follows: 1 \\u2192 2 \\u2192 2 \\u2192 3 \\u2192 4 \\u2192 5 units.\"\n    },\n    {\n      \"input\": {\n        \"stones\": [\n          0,\n          1,\n          2,\n          3,\n          4,\n          8,\n          9,\n          11\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The gap between the 5th and 6th stones is too large, so the frog cannot cross.\"\n    }\n  ],\n  \"hints\": [\n    \"Use dynamic programming with a map to track possible jump sizes for each stone.\",\n    \"Consider the first jump size to be 1 unit.\",\n    \"A valid jump from stone `i` to stone `j` exists if `stones[j] - stones[i]` is `k-1`, `k`, or `k+1`, where `k` was the last jump size.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Use a dynamic programming approach with a hash map to achieve `O(n^2)` complexity.\",\n    \"constraints\": \"Avoid brute-force checking of all possible jump sequences, as it can lead to exponential complexity.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the largest sum of any rectangle in a matrix that is less than `k`."}, {"role": "assistant", "content": "{\n  \"title\": \"Max Rectangle Sum No Larger Than k\",\n  \"description\": \"Find the maximum sum of any rectangle in a given `m x n` matrix such that its sum does not exceed a given integer `k`.\",\n  \"input\": [\n    {\n      \"name\": \"matrix\",\n      \"type\": \"2D array\",\n      \"description\": \"An `m x n` matrix of integers.\",\n      \"constraints\": \"1 <= m, n <= 100, -100 <= matrix[i][j] <= 100\"\n    },\n    {\n      \"name\": \"k\",\n      \"type\": \"integer\",\n      \"description\": \"The upper limit for the sum of the rectangle.\",\n      \"constraints\": \"-10^5 <= k <= 10^5\"\n    }\n  ],\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The maximum sum of any rectangle in the matrix such that it does not exceed `k`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            1,\n            0,\n            1\n          ],\n          [\n            0,\n            -2,\n            3\n          ]\n        ],\n        \"k\": 2\n      },\n      \"output\": 2,\n      \"explanation\": \"The rectangle [[0, 1], [-2, 3]] has a sum of 2, which is the largest possible sum no larger than 2.\"\n    },\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            2,\n            2,\n            -1\n          ]\n        ],\n        \"k\": 3\n      },\n      \"output\": 3,\n      \"explanation\": \"The rectangle [[2, 2]] has a sum of 3, which meets the condition.\"\n    }\n  ],\n  \"hints\": [\n    \"Use a prefix sum to compute the sum of submatrices efficiently.\",\n    \"For a fixed pair of rows, reduce the problem to finding the maximum subarray sum no larger than `k`.\",\n    \"To find the maximum subarray sum no larger than `k`, use a sorted data structure to maintain prefix sums and perform efficient queries.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve a time complexity of `O(min(m, n)^2 * max(m, n) * log(max(m, n)))` by reducing the dimensionality of the problem.\",\n    \"constraints\": \"Avoid brute-force enumeration of all submatrices, which would lead to a time complexity of `O(m^2 * n^2)`.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Deserialize a nested list string."}, {"role": "assistant", "content": "{\n  \"title\": \"Deserialize Nested List\",\n  \"description\": \"Parse a serialized string representing a nested list and return the deserialized NestedInteger object. Each element can be an integer or another nested list.\",\n  \"objective\": \"Implement a parser to convert a nested list's serialized string into a structured NestedInteger object.\",\n  \"input\": {\n    \"name\": \"s\",\n    \"type\": \"string\",\n    \"description\": \"Serialized representation of a nested list.\",\n    \"constraints\": [\n      \"1 <= s.length <= 5 * 10^4\",\n      \"s consists of digits, square brackets '[]', negative sign '-', and commas ','\",\n      \"s is a valid serialization of a NestedInteger.\"\n    ]\n  },\n  \"output\": {\n    \"type\": \"NestedInteger\",\n    \"description\": \"The deserialized NestedInteger object representing the parsed nested structure.\"\n  },\n  \"examples\": [\n    {\n      \"input\": \"s = '324'\",\n      \"output\": \"324\",\n      \"explanation\": \"The input string represents a single integer, so the output is a NestedInteger containing the value 324.\"\n    },\n    {\n      \"input\": \"s = '[123,[456,[789]]]'\",\n      \"output\": \"[123,[456,[789]]]\",\n      \"explanation\": \"The input string represents a nested structure. It deserializes into a NestedInteger containing two elements: an integer 123 and a nested list.\"\n    }\n  ],\n  \"hints\": [\n    \"Use a stack to track the current NestedInteger being built.\",\n    \"Parse integers directly when outside of brackets.\",\n    \"On encountering '[', start a new NestedInteger and push it to the stack.\",\n    \"On encountering ']', finalize the current NestedInteger and attach it to its parent.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Ensure the solution works in O(n) time complexity, where n is the length of the input string.\",\n    \"constraints\": \"Avoid excessive memory usage by reusing objects where possible.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the longest subarray of `1`s when one `0` can be flipped."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a binary array `nums`, find the maximum number of consecutive `1`s in the array if you are allowed to flip at most one `0` into a `1`. The task is to determine the maximum length of such a subarray.\",\n  \"objective\": \"Design an efficient algorithm that uses a sliding window or two-pointer technique to compute the maximum number of consecutive `1`s with at most one `0` flipped, ensuring a time complexity of `O(n)`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the input, which is a binary array `nums`, and the task, which is to maximize the number of consecutive `1`s by flipping at most one `0`. Ensure clarity on constraints and edge cases.\",\n    \"Step 2 - Approach\": \"Use a sliding window or two-pointer approach. Keep track of the number of `0`s in the current window, and adjust the window size dynamically to ensure at most one `0` is flipped.\",\n    \"Step 3 - Implementation\": \"Iterate over the array, expanding the window while counting `0`s. If the number of `0`s exceeds 1, shrink the window from the left until only one `0` remains. Maintain a variable to track the maximum window size encountered.\",\n    \"Step 4 - Edge Cases\": \"Handle cases where there are no `0`s in the array, where the array consists of all `1`s or all `0`s, or where the array has only one element.\",\n    \"Step 5 - Constraints\": \"Ensure the solution is efficient for large arrays with up to `10^5` elements, and uses `O(1)` additional space.\",\n    \"Final Check - Follow-up Consideration\": \"Think about how to adapt the solution for an infinite stream of input, where the array cannot be stored in memory, and consider maintaining a rolling window of relevant indices.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          0,\n          1,\n          1,\n          0\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"Flipping the first or second `0` results in a maximum of 4 consecutive `1`s.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          0,\n          1,\n          1,\n          0,\n          1\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"Flipping either of the `0`s results in a maximum of 4 consecutive `1`s.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          1,\n          1,\n          1\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"There are no `0`s to flip, so the result is the length of the array.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The array consists of a single `0`, which can be flipped to form one `1`.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10^5\",\n    \"element_range\": \"nums[i] \\u2208 {0, 1}\",\n    \"flip_limit\": \"At most one `0` can be flipped to `1`.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"How would you adapt the solution for an infinite stream of numbers?\",\n    \"question_2\": \"What optimizations can be applied if multiple flips were allowed instead of one?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Remove comments from a C++ program."}, {"role": "assistant", "content": "{\n  \"description\": \"Parse and remove comments from a given C++ program represented as an array of strings.\",\n  \"objective\": \"Implement a parser to handle line and block comments, retaining only the uncommented code in the same format.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Initialize variables to manage state: `in_block` to track whether inside a block comment, `new_line` to build uncommented lines, and `result` to store the final uncommented code.\",\n    \"Step 2\": \"Iterate through each line in the `source` array.\",\n    \"Step 3\": \"For each line, process character by character while respecting the current `in_block` state.\",\n    \"Step 4\": \"Handle block comments: If `/*` is encountered and not inside a block, set `in_block` to `true` and skip the characters `/*`. If `*/` is encountered while inside a block, set `in_block` to `false` and skip the characters `*/`.\",\n    \"Step 5\": \"Handle line comments: If `//` is encountered and not inside a block, stop processing the rest of the line.\",\n    \"Step 6\": \"Record uncommented characters into `new_line` if not inside a block comment.\",\n    \"Step 7\": \"At the end of the line, add `new_line` to `result` if it contains any uncommented content.\",\n    \"Step 8\": \"Return `result` after processing all lines.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"source\": [\n          \"/*Test program*/\",\n          \"int main()\",\n          \"{\",\n          \"  // variable declaration\",\n          \"  int a, b, c;\",\n          \"  /* This is a test\",\n          \"     multiline\",\n          \"     comment for\",\n          \"     testing */\",\n          \"  a = b + c;\",\n          \"}\"\n        ]\n      },\n      \"output\": [\n        \"int main()\",\n        \"{\",\n        \"  int a, b, c;\",\n        \"  a = b + c;\",\n        \"}\"\n      ],\n      \"explanation\": \"Block comments and line comments are removed while preserving code structure.\"\n    },\n    {\n      \"input\": {\n        \"source\": [\n          \"a/*comment\",\n          \"line\",\n          \"more_comment*/b\"\n        ]\n      },\n      \"output\": [\n        \"ab\"\n      ],\n      \"explanation\": \"The block comment spans multiple lines and is removed, leaving 'ab'.\"\n    }\n  ],\n  \"constraints\": {\n    \"source_length\": \"1 <= source.length <= 100\",\n    \"line_length\": \"0 <= source[i].length <= 80\",\n    \"content\": \"source[i] consists of printable ASCII characters\",\n    \"validity\": \"Every open block comment is eventually closed\"\n  },\n  \"follow_up\": \"Consider how this approach can be extended to support other programming languages with similar comment formats or edge cases like nested comments.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the intersection of two interval lists."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two lists of closed intervals, `firstList` and `secondList`, where `firstList[i] = [starti, endi]` and `secondList[j] = [startj, endj]`, return the intersection of these two interval lists. Each list of intervals is pairwise disjoint and in sorted order. A closed interval `[a, b]` (with `a <= b`) denotes the set of real numbers `x` with `a <= x <= b`. The intersection of two closed intervals is a set of real numbers that can be represented as a closed interval.\",\n  \"objective\": \"Design an efficient algorithm to find the intersection of two lists of closed intervals. The intervals are disjoint within each list and sorted in ascending order.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the requirements: Identify the intersection of closed intervals from two sorted lists of pairwise disjoint intervals.\",\n    \"Step 2 - Initial Approach\": \"Consider using a two-pointer technique: Iterate through both lists simultaneously, comparing intervals and finding intersections.\",\n    \"Step 3 - Two-Pointer Algorithm\": \"Initialize two pointers for each list. Compare the intervals pointed to by the pointers. If the intervals intersect, add the intersection to the result list. Move the pointer that points to the interval with the smaller endpoint to the next interval.\",\n    \"Step 4 - Output Format\": \"Ensure the function returns the list of intersecting intervals. Handle edge cases where one or both lists are empty.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Focus on achieving linear time complexity, O(n + m), where `n` is the length of `firstList` and `m` is the length of `secondList`. Handle edge cases where intervals do not overlap.\",\n    \"Final Check - Constraints Verification\": \"Verify the solution operates within the constraints: `0 <= firstList.length, secondList.length <= 1000` and `firstList.length + secondList.length >= 1`. Ensure the algorithm handles large inputs efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"firstList\": [\n          [\n            0,\n            2\n          ],\n          [\n            5,\n            10\n          ],\n          [\n            13,\n            23\n          ],\n          [\n            24,\n            25\n          ]\n        ],\n        \"secondList\": [\n          [\n            1,\n            5\n          ],\n          [\n            8,\n            12\n          ],\n          [\n            15,\n            24\n          ],\n          [\n            25,\n            26\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          1,\n          2\n        ],\n        [\n          5,\n          5\n        ],\n        [\n          8,\n          10\n        ],\n        [\n          15,\n          23\n        ],\n        [\n          24,\n          24\n        ],\n        [\n          25,\n          25\n        ]\n      ],\n      \"explanation\": \"The intersecting intervals are [1, 2], [5, 5], [8, 10], [15, 23], [24, 24], and [25, 25].\"\n    },\n    {\n      \"input\": {\n        \"firstList\": [\n          [\n            1,\n            3\n          ],\n          [\n            5,\n            9\n          ]\n        ],\n        \"secondList\": []\n      },\n      \"output\": [],\n      \"explanation\": \"There are no intersecting intervals since the second list is empty.\"\n    }\n  ],\n  \"constraints\": {\n    \"firstList_length\": \"0 <= firstList.length <= 1000\",\n    \"secondList_length\": \"0 <= secondList.length <= 1000\",\n    \"total_length\": \"firstList.length + secondList.length >= 1\",\n    \"interval_range\": \"0 <= starti < endi <= 10^9\"\n  },\n  \"follow_up\": \"Can you optimize the solution further to handle even larger interval lists efficiently while maintaining the constraints and ensuring the correctness of the intersections?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Implement an LRU cache that supports `get` and `put` operations."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a data structure that implements the constraints of a Least Recently Used (LRU) cache. The cache should support `get` and `put` operations in O(1) average time complexity.\",\n  \"objective\": \"Implement an efficient LRU cache using data structures like a hash map and a doubly linked list.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves implementing a cache that maintains the least recently used order of keys.\",\n    \"Step 2 - Data Structure Choice\": \"Use a hash map for O(1) lookups and a doubly linked list to maintain the order of keys.\",\n    \"Step 3 - Implement `get`\": \"Retrieve the value of a key and move it to the most recently used position.\",\n    \"Step 4 - Implement `put`\": \"Insert or update a key-value pair, evicting the least recently used key if the cache exceeds capacity.\",\n    \"Step 5 - Handle Edge Cases\": \"Handle cases such as `get` operations on missing keys, small cache capacities, and large numbers of operations.\",\n    \"Step 6 - Optimize\": \"Ensure the implementation achieves O(1) average time complexity for both `get` and `put` operations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": [\n        [\n          \"LRUCache\",\n          \"put\",\n          \"put\",\n          \"get\",\n          \"put\",\n          \"get\",\n          \"put\",\n          \"get\",\n          \"get\",\n          \"get\"\n        ],\n        [\n          [\n            2\n          ],\n          [\n            1,\n            1\n          ],\n          [\n            2,\n            2\n          ],\n          [\n            1\n          ],\n          [\n            3,\n            3\n          ],\n          [\n            2\n          ],\n          [\n            4,\n            4\n          ],\n          [\n            1\n          ],\n          [\n            3\n          ],\n          [\n            4\n          ]\n        ]\n      ],\n      \"output\": [\n        null,\n        null,\n        null,\n        1,\n        null,\n        -1,\n        null,\n        -1,\n        3,\n        4\n      ],\n      \"explanation\": \"Operations on the cache result in the specified outputs based on LRU behavior.\"\n    }\n  ],\n  \"constraints\": {\n    \"capacity_range\": \"1 <= capacity <= 3000\",\n    \"key_and_value_range\": \"0 <= key <= 10^4, 0 <= value <= 10^5\",\n    \"operation_count\": \"At most 2 * 10^5 calls to `get` and `put`.\"\n  },\n  \"follow_up\": \"Can you explain why a hash map and doubly linked list are optimal for this problem?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the length of the longest uncommon subsequence in an array of strings. If no such subsequence exists, return `-1`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of strings `strs`, find the length of the longest uncommon subsequence among them. An uncommon subsequence is defined as a sequence that is a subsequence of one string but not the others. If no such subsequence exists, return `-1`.\",\n  \"objective\": \"Design a solution that identifies the longest string among `strs` that is not a subsequence of any other string in the array. Return the length of this string, or `-1` if no such uncommon subsequence exists.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Recognize that we are tasked with finding the longest uncommon subsequence, which must be a subsequence of only one string in `strs` and not others. Since adding characters to a candidate only makes it harder to match, candidates can be chosen from `strs` itself.\",\n    \"Step 2 - Sorting and Candidate Selection\": \"Sort `strs` by string length in descending order. Start with the longest string, and for each string `X`, check if it is an uncommon subsequence by verifying it is not a subsequence of any other string `Y` in `strs`.\",\n    \"Step 3 - Checking Subsequences Efficiently\": \"For each string `X`, use a helper function to check if `X` is a subsequence of any other string `Y` (by checking character order within `Y`). Skip strings `Y` with lengths less than `X`, as they cannot contain `X` as a subsequence.\",\n    \"Step 4 - Returning the Longest Uncommon Subsequence Length\": \"Return the length of the first uncommon subsequence found. If no such string is found after iterating through all candidates, return `-1`.\",\n    \"Step 5 - Complexity and Constraints\": \"The solution should handle up to 50 strings of length 10 efficiently by leveraging sorting and subsequence checking, achieving O(n^2) complexity.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution works within the constraints where `2 <= strs.length <= 50` and `1 <= strs[i].length <= 10`, covering cases with repeated strings and various subsequence lengths.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"strs\": [\n          \"aba\",\n          \"cdc\",\n          \"eae\"\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The longest uncommon subsequences are 'aba', 'cdc', and 'eae', each with length 3.\"\n    },\n    {\n      \"input\": {\n        \"strs\": [\n          \"aaa\",\n          \"aaa\",\n          \"aa\"\n        ]\n      },\n      \"output\": -1,\n      \"explanation\": \"No uncommon subsequence exists as each string is a subsequence of the others.\"\n    }\n  ],\n  \"constraints\": {\n    \"strs_length_range\": \"2 <= strs.length <= 50\",\n    \"string_length_range\": \"1 <= strs[i].length <= 10\",\n    \"character_type\": \"strs[i] consists only of lowercase English letters.\"\n  },\n  \"follow_up\": \"Could you implement this solution to handle much larger strings or larger arrays efficiently by optimizing the subsequence checking process?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Write a class to find the sum of a rectangle in a 2D matrix and update the matrix."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a 2D integer matrix `matrix`, implement a class `NumMatrix` that efficiently handles two types of operations: 1) Update the value of a specific cell, and 2) Calculate the sum of elements in a sub-matrix defined by its upper-left and lower-right corners.\",\n  \"objective\": \"Design an efficient data structure to handle updates and range sum queries for 2D matrices, ensuring optimal performance for large matrices and frequent operations.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialization\": \"Initialize the `NumMatrix` class with the provided 2D array. Precompute or structure the data to allow efficient queries and updates.\",\n    \"Step 2 - Update Operation\": \"Implement the `update(row, col, val)` method to update the value of `matrix[row][col]` while keeping precomputed data consistent.\",\n    \"Step 3 - Range Sum Query\": \"Implement the `sumRegion(row1, col1, row2, col2)` method to calculate the sum of all elements in the sub-matrix defined by `(row1, col1)` as the top-left and `(row2, col2)` as the bottom-right corner.\",\n    \"Step 4 - Optimization\": \"Use advanced data structures like Binary Indexed Tree (2D BIT) or Segment Tree to achieve efficient operations. Aim for `O(log m * log n)` complexity for updates and queries.\",\n    \"Step 5 - Edge Cases\": \"Handle edge cases such as single-row or single-column matrices, large or small sub-matrix queries, and updates at the boundaries of the matrix.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"operations\": [\n          \"NumMatrix\",\n          \"sumRegion\",\n          \"update\",\n          \"sumRegion\"\n        ],\n        \"parameters\": [\n          [\n            [\n              [\n                3,\n                0,\n                1,\n                4,\n                2\n              ],\n              [\n                5,\n                6,\n                3,\n                2,\n                1\n              ],\n              [\n                1,\n                2,\n                0,\n                1,\n                5\n              ],\n              [\n                4,\n                1,\n                0,\n                1,\n                7\n              ],\n              [\n                1,\n                0,\n                3,\n                0,\n                5\n              ]\n            ]\n          ],\n          [\n            2,\n            1,\n            4,\n            3\n          ],\n          [\n            3,\n            2,\n            2\n          ],\n          [\n            2,\n            1,\n            4,\n            3\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        8,\n        null,\n        10\n      ],\n      \"explanation\": \"Initially, the sub-matrix sum is 8. After updating cell (3, 2) to 2, the sub-matrix sum becomes 10.\"\n    },\n    {\n      \"input\": {\n        \"operations\": [\n          \"NumMatrix\",\n          \"update\",\n          \"sumRegion\"\n        ],\n        \"parameters\": [\n          [\n            [\n              [\n                1,\n                2\n              ],\n              [\n                3,\n                4\n              ]\n            ]\n          ],\n          [\n            1,\n            1,\n            10\n          ],\n          [\n            0,\n            0,\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        null,\n        16\n      ],\n      \"explanation\": \"The matrix changes to [[1, 2], [3, 10]]. The sum of the full matrix is 16.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size\": \"1 <= m, n <= 200\",\n    \"value_range\": \"-1000 <= matrix[i][j], val <= 1000\",\n    \"query_limit\": \"At most 5000 calls will be made to `sumRegion` and `update`.\"\n  },\n  \"follow_up\": \"Optimize the solution to achieve `O(log m * log n)` time complexity for both updates and queries using 2D Fenwick Tree or Segment Tree. Explore handling sparse matrices efficiently.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum distance for a squirrel to collect nuts and take them to the tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a `height x width` garden grid with a squirrel, tree, and multiple nuts positioned on the grid, find the minimal total distance the squirrel needs to collect each nut one by one, returning them to the tree.\",\n  \"objective\": \"Calculate the minimum moves needed for the squirrel to collect all nuts and place them under the tree by determining which nut should be collected first to minimize overall travel distance.\",\n  \"meta_prompt\": {\n    \"Step 1 - Calculate Distance\": \"Define a helper function to calculate the distance between two points (e.g., squirrel, nut, tree) as the Manhattan distance: `abs(x1 - x2) + abs(y1 - y2)`.\",\n    \"Step 2 - Calculate Total Travel for Nuts\": \"Calculate the total to-and-fro distance for each nut from the tree as `2 * distance(tree, nut)`. This is the baseline distance assuming each nut is collected and returned to the tree.\",\n    \"Step 3 - Determine Savings with First Nut\": \"For each nut, calculate the savings if it\\u2019s collected first by computing `distance(squirrel, nut) - distance(tree, nut)`. Track the nut that maximizes this savings since this nut minimizes the initial distance needed for the squirrel\\u2019s first trip.\",\n    \"Step 4 - Adjust Total Travel\": \"Subtract the maximum savings from the total to-and-fro distance sum to account for the optimal starting nut, thus yielding the minimum possible distance.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution meets the constraints with `1 <= height, width <= 100` and `1 <= nuts.length <= 5000`, and confirm that the result is accurate for any valid squirrel and nut positions within the grid bounds.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"height\": 5,\n        \"width\": 7,\n        \"tree\": [\n          2,\n          2\n        ],\n        \"squirrel\": [\n          4,\n          4\n        ],\n        \"nuts\": [\n          [\n            3,\n            0\n          ],\n          [\n            2,\n            5\n          ]\n        ]\n      },\n      \"output\": 12,\n      \"explanation\": \"The squirrel collects the nut at `[2, 5]` first to minimize the initial travel, resulting in an optimal total distance of 12.\"\n    },\n    {\n      \"input\": {\n        \"height\": 1,\n        \"width\": 3,\n        \"tree\": [\n          0,\n          1\n        ],\n        \"squirrel\": [\n          0,\n          0\n        ],\n        \"nuts\": [\n          [\n            0,\n            2\n          ]\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"With only one nut, the squirrel collects it directly for a minimal distance of 3.\"\n    }\n  ],\n  \"constraints\": {\n    \"height_width_range\": \"1 <= height, width <= 100\",\n    \"nut_count_range\": \"1 <= nuts.length <= 5000\",\n    \"grid_bounds\": \"0 <= treer, squirrelr, nutir <= height and 0 <= treec, squirrelc, nutic <= width\"\n  },\n  \"follow_up\": \"Explore optimizations for larger grids or more nut points by using spatial hashing or precomputing distances for common patterns. Additionally, consider an extension where the squirrel can carry multiple nuts at once to further minimize travel.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a string containing '(', ')', and '*' is valid, considering '*' as a possible placeholder for '(', ')', or an empty string."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if a string containing '(', ')', and '*' is valid by considering '*' as either '(', ')', or an empty string.\",\n  \"objective\": \"Use a two-pointer greedy approach to simultaneously validate the balance of parentheses from both ends of the string.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Variables\": \"Create two counters, `openCount` and `closeCount`, to track the balance of open and close parentheses while traversing from the left and right respectively.\",\n    \"Step 2 - Traverse the String\": \"Iterate through the string from both ends using a single loop. Increment or decrement the counters based on the current character and its role.\",\n    \"Step 3 - Handle Open and Close Parentheses\": \"Increment `openCount` when encountering '(' or '*', decrement for ')'. Similarly, increment `closeCount` for ')' or '*', decrement for '('.\",\n    \"Step 4 - Check for Validity\": \"If either counter becomes negative during traversal, return `false` immediately as it indicates an imbalance.\",\n    \"Step 5 - Return Result\": \"After completing the traversal, if no imbalance is found, return `true` to indicate the string is valid.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"()\"\n      },\n      \"output\": true,\n      \"explanation\": \"The string is a valid sequence of balanced parentheses.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"(*)\"\n      },\n      \"output\": true,\n      \"explanation\": \"The asterisk can be treated as an empty string, making the string valid.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"(*))\"\n      },\n      \"output\": true,\n      \"explanation\": \"The asterisk can be treated as '(' to balance the parentheses.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 100\",\n    \"valid_characters\": \"s[i] is '(', ')' or '*'\"\n  },\n  \"follow_up\": \"Discuss how the two-pointer greedy approach ensures constant space complexity and its advantages over stack-based solutions for this problem.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Convert a sorted linked list to a height-balanced BST."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `head` of a singly linked list where elements are sorted in ascending order, convert it into a height-balanced binary search tree (BST). A height-balanced BST is defined as a binary tree where the depth of the two subtrees of every node never differs by more than one.\",\n  \"objective\": \"Design an algorithm to construct a height-balanced BST from a sorted singly linked list.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the middle element of the linked list will be the root of the BST, with left and right subtrees constructed from the left and right halves of the list.\",\n    \"Step 2 - Find Middle Element\": \"Use two pointers (slow and fast) to find the middle of the linked list efficiently.\",\n    \"Step 3 - Recursive Construction\": \"Recursively assign the middle element as the root and construct the left and right subtrees using the left and right halves of the list.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as an empty list, a single-node list, or highly unbalanced input lists.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(n) time by using in-order traversal construction with a global pointer for the linked list.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          -10,\n          -3,\n          0,\n          5,\n          9\n        ]\n      },\n      \"output\": {\n        \"root\": [\n          0,\n          -3,\n          9,\n          -10,\n          null,\n          5\n        ]\n      },\n      \"explanation\": \"The BST is height-balanced with root 0, left subtree [-10, -3], and right subtree [5, 9].\"\n    },\n    {\n      \"input\": {\n        \"head\": []\n      },\n      \"output\": {\n        \"root\": []\n      },\n      \"explanation\": \"An empty list results in an empty tree.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 2 * 10^4\",\n    \"node_values\": \"-10^5 <= Node.val <= 10^5\",\n    \"list_properties\": \"The input list is sorted in strictly ascending order.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the length of the longest substring with two distinct characters."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s`, find the length of the longest substring that contains at most two distinct characters.\",\n  \"objective\": \"Design an efficient algorithm to find the longest substring with at most two distinct characters.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves identifying a substring containing at most two distinct characters and returning its length.\",\n    \"Step 2 - Sliding Window Technique\": \"Use a sliding window approach to maintain the current substring, expanding and shrinking the window as needed.\",\n    \"Step 3 - Use a Frequency Map\": \"Track the frequency of characters in the window to determine when there are more than two distinct characters.\",\n    \"Step 4 - Optimize\": \"Ensure the algorithm runs in O(n) time by using efficient updates to the frequency map.\",\n    \"Step 5 - Handle Edge Cases\": \"Handle cases such as an empty string, strings with fewer than two distinct characters, or very long strings.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"eceba\"\n      },\n      \"output\": 3,\n      \"explanation\": \"The substring 'ece' is the longest substring with at most two distinct characters.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"ccaabbb\"\n      },\n      \"output\": 5,\n      \"explanation\": \"The substring 'aabbb' is the longest substring with at most two distinct characters.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 10^5\",\n    \"character_set\": \"s consists of English letters.\"\n  },\n  \"follow_up\": \"Can you optimize your algorithm for memory usage, especially for strings with limited distinct characters?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number of unique paths a robot can take to go from the top-left to the bottom-right corner of a grid."}, {"role": "assistant", "content": "{\n  \"description\": \"A robot is located at the top-left corner of an `m x n` grid and can only move right or down. Determine the number of unique paths the robot can take to reach the bottom-right corner of the grid.\",\n  \"objective\": \"Design an efficient algorithm to compute the number of unique paths for a robot, considering constraints and optimizing for both time and space complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves counting the number of unique sequences of moves (right and down) to navigate from the top-left to the bottom-right corner. The order of moves matters.\",\n    \"Step 2 - Combinatorics Approach\": \"Realize that the problem can be solved using combinations: the robot must make `(m-1)` down moves and `(n-1)` right moves in any order, so the total paths are `(m+n-2)! / ((m-1)! * (n-1)!)`.\",\n    \"Step 3 - Dynamic Programming Approach\": \"Alternatively, use dynamic programming to calculate the number of paths to each cell by summing the paths from the cell above and the cell to the left (`dp[i][j] = dp[i-1][j] + dp[i][j-1]`).\",\n    \"Step 4 - Space Optimization\": \"Optimize the DP solution to use a single row (or column) for memory efficiency when calculating the paths iteratively.\",\n    \"Step 5 - Handle Constraints\": \"Ensure the solution handles large grid sizes (up to 100x100) efficiently and fits within the range `1 <= m, n <= 100`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"m\": 3,\n        \"n\": 7\n      },\n      \"output\": 28,\n      \"explanation\": \"The robot has 28 unique paths to reach the bottom-right corner of a 3x7 grid.\"\n    },\n    {\n      \"input\": {\n        \"m\": 3,\n        \"n\": 2\n      },\n      \"output\": 3,\n      \"explanation\": \"The robot has 3 unique paths to reach the bottom-right corner of a 3x2 grid.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_size\": \"1 <= m, n <= 100\",\n    \"result_range\": \"The result will be less than or equal to 2 * 10^9.\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm further to handle scenarios where the robot has obstacles in the grid?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Swap every two nodes in a linked list."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a linked list, swap every two adjacent nodes and return the head of the modified linked list. The problem must be solved without modifying the values in the list's nodes, meaning only the nodes themselves may be rearranged.\",\n  \"objective\": \"Design an efficient algorithm to swap adjacent nodes in a linked list, ensuring no node values are altered and edge cases are handled appropriately.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves rearranging the nodes of a linked list in pairs. The solution must not modify node values but should rearrange pointers.\",\n    \"Step 2 - Iterative Approach\": \"Traverse the list with a pointer, swapping the next two nodes at each step. Use a dummy node to simplify pointer adjustments.\",\n    \"Step 3 - Recursive Approach\": \"Use recursion to handle swapping of two nodes at a time, with the recursive function solving the smaller problem for the rest of the list.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider scenarios such as an empty list, a single-node list, and lists with an odd number of nodes.\",\n    \"Step 5 - Constraints Compliance\": \"Ensure the solution adheres to the constraints, such as `0 <= Node.val <= 100` and the number of nodes in the range `[0, 100]`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2,\n          3,\n          4\n        ]\n      },\n      \"output\": [\n        2,\n        1,\n        4,\n        3\n      ],\n      \"explanation\": \"The pairs (1,2) and (3,4) are swapped to give the resulting list.\"\n    },\n    {\n      \"input\": {\n        \"head\": []\n      },\n      \"output\": [],\n      \"explanation\": \"The list is empty, so the output is also an empty list.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          1\n        ]\n      },\n      \"output\": [\n        1\n      ],\n      \"explanation\": \"The list has only one node, so no swapping is performed.\"\n    }\n  ],\n  \"constraints\": {\n    \"list_length\": \"0 <= number of nodes <= 100\",\n    \"node_values\": \"0 <= Node.val <= 100\"\n  },\n  \"follow_up\": \"Can you solve this problem using a purely recursive approach? How does the iterative solution compare to the recursive one in terms of time and space complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the tilt of a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of a binary tree, calculate the total sum of the tilt for all nodes. The tilt of a node is the absolute difference between the sums of its left and right subtrees.\",\n  \"objective\": \"Implement a solution using a Post-Order DFS traversal to calculate both the tilt of each node and the subtree sums in a single traversal, optimizing for time complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Define Recursive Function for DFS Traversal\": \"Define a function `calculateTilt(node)` that returns the sum of values for the subtree rooted at `node` while calculating and adding the tilt for each node to a global variable `totalTilt`.\",\n    \"Step 2 - Calculate Subtree Sums\": \"In `calculateTilt(node)`, recursively call `calculateTilt` on both `node.left` and `node.right` to obtain the sums of the left and right subtrees respectively. Sum these values along with `node.val` to get the total subtree sum for the current node.\",\n    \"Step 3 - Calculate and Accumulate Tilt\": \"Use the sums obtained from the left and right subtrees to compute the tilt for `node` as `abs(left_sum - right_sum)`. Add this tilt to `totalTilt`.\",\n    \"Step 4 - Return Subtree Sum\": \"Return the subtree sum of `node`, which includes `node.val`, `left_sum`, and `right_sum`, to be used in the tilt calculation of the parent node.\",\n    \"Final Check - Constraints Verification\": \"Ensure the solution efficiently handles the tree size limit (`10^4` nodes) by using a single traversal and adheres to the constraints on node values (`-1000 <= Node.val <= 1000`).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The tilt for each node is calculated as follows: node 2 (0), node 3 (0), and node 1 (|2-3|=1). Summing these tilts gives 1.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          4,\n          2,\n          9,\n          3,\n          5,\n          null,\n          7\n        ]\n      },\n      \"output\": 15,\n      \"explanation\": \"Each node's tilt values are: node 3 (0), node 5 (0), node 7 (0), node 2 (|3-5|=2), node 9 (|0-7|=7), node 4 (|10-16|=6). Summing these tilts gives 15.\"\n    }\n  ],\n  \"constraints\": {\n    \"tree_size\": \"The number of nodes is in the range `[0, 10^4]`.\",\n    \"node_value_range\": \"`-1000 <= Node.val <= 1000`.\"\n  },\n  \"follow_up\": \"Consider further optimizing memory by using iterative DFS with an explicit stack, especially for deep trees near the maximum constraint.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a robot returns to its starting position after following a sequence of moves."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if a robot following a sequence of moves returns to its starting position (0, 0) on a 2D plane.\",\n  \"objective\": \"Simulate the robot's movement based on the input moves and check if its final position is the origin.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Position\": \"Start with the robot's initial position at (x, y) = (0, 0).\",\n    \"Step 2 - Process Moves\": \"Iterate through each character in the moves string. Update the position based on the move: 'U' decrements y, 'D' increments y, 'L' decrements x, and 'R' increments x.\",\n    \"Step 3 - Check Final Position\": \"After processing all moves, check if the final position (x, y) is (0, 0). Return true if it is, otherwise return false.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"moves\": \"UD\"\n      },\n      \"output\": true,\n      \"explanation\": \"The robot moves up once and down once, returning to the origin.\"\n    },\n    {\n      \"input\": {\n        \"moves\": \"LL\"\n      },\n      \"output\": false,\n      \"explanation\": \"The robot moves left twice, ending two moves to the left of the origin.\"\n    }\n  ],\n  \"constraints\": {\n    \"moves_length\": \"1 <= moves.length <= 2 * 10^4\",\n    \"valid_moves\": \"moves only contains 'U', 'D', 'L', 'R'.\"\n  },\n  \"follow_up\": \"Discuss the time complexity of the simulation approach and whether optimizations are possible for larger move sequences.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You need to figure out which bucket is poisonous. You can use pigs to test, and they die if they drink poison. How many pigs do you need?"}, {"role": "assistant", "content": "{\n  \"description\": \"Given a set of `buckets` containing liquid, where exactly one is poisonous, determine the **minimum number of pigs** needed to identify the poisonous bucket within a total testing time of `minutesToTest`. Each pig has a `minutesToDie` period after consuming a poisonous bucket, and you can test multiple times within the allotted time. Pigs can consume from multiple buckets at once. Use the test outcomes to efficiently narrow down the poisonous bucket.\",\n  \"objective\": \"Design an efficient strategy to use the minimum number of pigs to identify the poisonous bucket within the given constraints. Use combinatorial reasoning to exploit multiple test rounds and binary encoding.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the problem revolves around maximizing the information gained per pig per round. Each pig can represent multiple buckets based on whether it survives or dies, and multiple rounds allow further narrowing of possibilities.\",\n    \"Step 2 - Calculate Maximum States\": \"The number of states a pig can represent is determined by `rounds + 1`, where `rounds = floor(minutesToTest / minutesToDie)` and the extra state accounts for survival in all rounds.\",\n    \"Step 3 - Derive Formula\": \"The total buckets a given number of pigs can uniquely identify is `(states_per_pig)^number_of_pigs`. Reverse this to calculate the minimum pigs needed: `pigs = ceil(log(buckets) / log(states_per_pig))`.\",\n    \"Step 4 - Implementation Strategy\": \"1. Compute the number of states a single pig can represent using the given times. 2. Use the logarithmic formula to calculate the minimum pigs required to identify the poisonous bucket. 3. Ensure edge cases (e.g., `buckets = 1`) are handled correctly.\",\n    \"Step 5 - Complexity and Validation\": \"Ensure that the solution scales efficiently for up to 1000 buckets and multiple rounds. Validate the implementation with edge cases such as minimal or maximal `buckets` and testing times.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"buckets\": 4,\n        \"minutesToDie\": 15,\n        \"minutesToTest\": 15\n      },\n      \"output\": 2,\n      \"explanation\": \"With only one round available (`minutesToTest / minutesToDie = 1`), two pigs are needed to uniquely identify the poisonous bucket using binary outcomes (e.g., death or survival).\"\n    },\n    {\n      \"input\": {\n        \"buckets\": 4,\n        \"minutesToDie\": 15,\n        \"minutesToTest\": 30\n      },\n      \"output\": 2,\n      \"explanation\": \"With two rounds (`minutesToTest / minutesToDie = 2`), two pigs can identify the bucket. Each pig can represent three states: 0 (survive both rounds), 1 (die in the first round), and 2 (die in the second round).\"\n    },\n    {\n      \"input\": {\n        \"buckets\": 1,\n        \"minutesToDie\": 10,\n        \"minutesToTest\": 100\n      },\n      \"output\": 0,\n      \"explanation\": \"Since there is only one bucket, no pigs are needed.\"\n    }\n  ],\n  \"constraints\": {\n    \"buckets_range\": \"1 <= buckets <= 1000\",\n    \"minutes_range\": \"1 <= minutesToDie <= minutesToTest <= 100\",\n    \"pigs_usage\": \"Pigs can only be used to test once per round and cannot share information between rounds.\"\n  },\n  \"follow_up\": \"Extend the solution to handle scenarios where the number of pigs is fixed, and the goal is to minimize the total testing time.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Convert an integer to its base 7 representation as a string."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `num`, your task is to return a string representing its value in base 7.\",\n  \"objective\": \"Design an algorithm that converts an integer to its base 7 equivalent and outputs it as a string, ensuring that both positive and negative numbers are handled correctly.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Analyze the integer `num`, which can range from `-10^7` to `10^7`. The goal is to convert this integer to its base 7 representation in string format.\",\n    \"Step 2 - Handling Edge Cases\": \"If `num` is 0, the base 7 representation is simply '0'. For positive numbers, compute the base 7 representation directly. For negative numbers, take the absolute value, convert to base 7, and add a negative sign.\",\n    \"Step 3 - Base Conversion Logic\": \"Using a loop, repeatedly divide the number by 7, appending the remainder for each step. Collect the remainders in reverse order to form the base 7 number.\",\n    \"Step 4 - Output Format\": \"Return the result as a string, handling negative numbers by prepending a '-' if necessary.\",\n    \"Step 5 - Efficiency Consideration\": \"The algorithm should be efficient and concise, leveraging simple arithmetic operations to achieve the base conversion with minimal space usage.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution works within the constraint `-10^7 <= num <= 10^7`, accounting for possible large positive and negative values.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"num\": 100\n      },\n      \"output\": \"202\",\n      \"explanation\": \"The integer 100 in base 7 is '202'.\"\n    },\n    {\n      \"input\": {\n        \"num\": -7\n      },\n      \"output\": \"-10\",\n      \"explanation\": \"The integer -7 in base 7 is '-10'.\"\n    }\n  ],\n  \"constraints\": {\n    \"num_range\": \"-10^7 <= num <= 10^7\"\n  },\n  \"follow_up\": \"Could you implement the solution without using any built-in base conversion functions, instead relying solely on arithmetic operations for conversion?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number of islands in a grid. '1' is land, '0' is water."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `m x n` binary grid where '1' represents land and '0' represents water, count the number of distinct islands.\",\n  \"objective\": \"Use BFS or DFS to find connected components of land cells in the grid.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Each '1' represents a part of an island. Use graph traversal to find and mark all connected cells.\",\n    \"Step 2 - DFS/BFS Implementation\": \"Traverse the grid. When a '1' is encountered, start a BFS/DFS to mark all cells in the current island.\",\n    \"Step 3 - Modify the Grid\": \"Mark visited cells as '0' to avoid revisiting.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider grids with all water, all land, or no cells.\",\n    \"Step 5 - Optimize\": \"Ensure `O(m * n)` time complexity and avoid redundant checks.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            \"1\",\n            \"1\",\n            \"1\",\n            \"1\",\n            \"0\"\n          ],\n          [\n            \"1\",\n            \"1\",\n            \"0\",\n            \"1\",\n            \"0\"\n          ],\n          [\n            \"1\",\n            \"1\",\n            \"0\",\n            \"0\",\n            \"0\"\n          ],\n          [\n            \"0\",\n            \"0\",\n            \"0\",\n            \"0\",\n            \"0\"\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The grid contains one connected component of land.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            \"1\",\n            \"1\",\n            \"0\",\n            \"0\",\n            \"0\"\n          ],\n          [\n            \"1\",\n            \"1\",\n            \"0\",\n            \"0\",\n            \"0\"\n          ],\n          [\n            \"0\",\n            \"0\",\n            \"1\",\n            \"0\",\n            \"0\"\n          ],\n          [\n            \"0\",\n            \"0\",\n            \"0\",\n            \"1\",\n            \"1\"\n          ]\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The grid contains three islands.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_size\": \"1 <= m, n <= 300\",\n    \"cell_values\": \"'0' or '1'\"\n  },\n  \"follow_up\": \"Can you optimize memory usage by avoiding additional structures like visited arrays?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given an array of integers, count how many distinct ORs can be formed from all subarrays."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `arr`, return the number of distinct bitwise ORs of all non-empty subarrays of `arr`. The bitwise OR of a subarray is the result of applying the bitwise OR operation to each integer in the subarray. A subarray is defined as a contiguous non-empty sequence of elements from the array.\",\n  \"objective\": \"Determine how many distinct results can be obtained by performing a bitwise OR on all possible non-empty subarrays of the given integer array.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The task involves finding the number of distinct results that can be produced by the bitwise OR operation on all non-empty subarrays of the given array. A subarray is a contiguous segment of the array, and the bitwise OR of a subarray is computed by OR-ing all the elements within that subarray.\",\n    \"Step 2 - Key Concepts\": \"Bitwise OR is a binary operation where corresponding bits of two operands are compared. The result has a 1 at a bit position if at least one of the operands has a 1 at that position. This operation should be applied over all subarrays to calculate the distinct results.\",\n    \"Step 3 - Approach\": \"For each possible subarray of `arr`, compute the bitwise OR and store the results. Use a set to keep track of unique OR results. The result will be the size of the set after processing all subarrays.\",\n    \"Step 4 - Optimized Approach\": \"To efficiently compute the distinct bitwise ORs, instead of recalculating the OR for each subarray from scratch, maintain a running OR for subarrays that end at each index. Update the set of OR results iteratively for each element in the array, ensuring to only store distinct OR results for each subarray.\",\n    \"Step 5 - Output Format\": \"The final output should be the number of distinct bitwise OR values from all the non-empty subarrays of the array.\",\n    \"Step 6 - Code Efficiency and Edge Cases\": \"The solution needs to handle large arrays (up to 50,000 elements) efficiently. We should avoid a brute-force approach that checks all possible subarrays as this would lead to performance issues. Using a set to track unique OR results helps achieve this efficiently.\",\n    \"Step 7 - Constraints Verification\": \"Ensure the solution works within the constraints, particularly handling up to 50,000 elements and ensuring bitwise OR computations are fast for numbers up to 1 billion.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"arr\": [\n          0\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"There is only one possible subarray: [0]. The bitwise OR of this subarray is 0, and there is only one distinct result.\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          1,\n          1,\n          2\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The possible subarrays are: [1], [1], [2], [1, 1], [1, 2], [1, 1, 2]. These give the results 1, 1, 2, 1, 3, 3, with three distinct values: 1, 2, and 3.\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          1,\n          2,\n          4\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"The possible distinct bitwise ORs are: 1, 2, 3, 4, 6, and 7, giving a total of 6 distinct results.\"\n    }\n  ],\n  \"constraints\": {\n    \"arr_length\": \"1 <= arr.length <= 50,000\",\n    \"arr_values_range\": \"0 <= arr[i] <= 1,000,000,000\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the smallest subarray with the same degree as the array."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the smallest possible length of a contiguous subarray in `nums` that has the same degree as `nums`.\",\n  \"objective\": \"Use indexing and frequency analysis to identify elements with the maximum frequency and calculate the shortest subarray for each of these elements.\",\n  \"meta_prompt\": {\n    \"Step 1 - Compute Element Indices\": \"Use dictionaries to store the first occurrence (`left`) and last occurrence (`right`) of each element in the array.\",\n    \"Step 2 - Compute Frequencies\": \"Use a dictionary to count the frequency of each element in the array (`count`).\",\n    \"Step 3 - Identify Degree and Candidates\": \"Determine the degree of the array as the maximum frequency. Identify all elements that match this degree.\",\n    \"Step 4 - Calculate Subarray Lengths\": \"For each candidate element, compute the subarray length using `right[element] - left[element] + 1`.\",\n    \"Step 5 - Return the Minimum Length\": \"Find the minimum subarray length among the candidates and return it as the result.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          2,\n          3,\n          1\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The elements 1 and 2 both have the degree of 2. The shortest subarray with degree 2 is [2, 2].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          2,\n          3,\n          1,\n          4,\n          2\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"The degree is 3, due to the element 2. The shortest subarray with degree 3 is [2, 2, 3, 1, 4, 2].\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 50,000\",\n    \"element_value\": \"0 <= nums[i] <= 49,999\"\n  },\n  \"follow_up\": \"Analyze the O(n) time complexity of this approach, which requires a single pass to compute indices and frequencies, followed by a pass to calculate subarray lengths.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "List all possible times with some LEDs on."}, {"role": "assistant", "content": "{\n  \"title\": \"Binary Watch Possible Times\",\n  \"description\": \"Generate all possible valid times that can be represented on a binary watch with the given number of LEDs turned on.\",\n  \"objective\": \"Efficiently compute all valid times by iterating through hour and minute combinations, ensuring the LED constraints are met.\",\n  \"input\": {\n    \"name\": \"turnedOn\",\n    \"type\": \"integer\",\n    \"description\": \"Number of LEDs currently turned on.\",\n    \"constraints\": \"0 <= turnedOn <= 10\"\n  },\n  \"output\": {\n    \"type\": \"list of strings\",\n    \"description\": \"All possible valid times in 'H:MM' format.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"turnedOn\": 1\n      },\n      \"output\": [\n        \"0:01\",\n        \"0:02\",\n        \"0:04\",\n        \"0:08\",\n        \"0:16\",\n        \"0:32\",\n        \"1:00\",\n        \"2:00\",\n        \"4:00\",\n        \"8:00\"\n      ],\n      \"explanation\": \"Each time corresponds to a valid binary representation with 1 LED turned on.\"\n    },\n    {\n      \"input\": {\n        \"turnedOn\": 9\n      },\n      \"output\": [],\n      \"explanation\": \"It is not possible to turn on 9 LEDs as the watch only has 10 LEDs.\"\n    }\n  ],\n  \"hints\": [\n    \"Iterate through all possible hour (0-11) and minute (0-59) combinations.\",\n    \"Use the binary representation of the hour and minute to count the number of LEDs turned on.\",\n    \"Filter combinations where the total LEDs turned on equals the input value.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Ensure efficient iteration through possible times while avoiding unnecessary calculations.\",\n    \"constraints\": \"Avoid generating invalid times or iterating beyond possible hour and minute ranges.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number of words in the shortest transformation sequence from one word to another."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two words, `beginWord` and `endWord`, and a dictionary `wordList`, return the number of words in the shortest transformation sequence from `beginWord` to `endWord`. A transformation sequence is a sequence of words such that each word differs from the previous one by only one letter, and all intermediate words exist in `wordList`. If no valid transformation exists, return `0`.\",\n  \"objective\": \"Design an algorithm to compute the length of the shortest transformation sequence efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the problem involves finding the shortest path in an unweighted graph where words are connected if they differ by one letter.\",\n    \"Step 2 - Breadth-First Search\": \"Use BFS to explore the word graph starting from `beginWord`, keeping track of the path length.\",\n    \"Step 3 - Prune Invalid Paths\": \"Terminate paths early if the target word cannot be reached.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases where `endWord` is not in `wordList`, or `wordList` is empty.\",\n    \"Step 5 - Optimize\": \"Use a hash set for quick lookup of words and remove visited words from `wordList` to avoid revisiting.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"beginWord\": \"hit\",\n        \"endWord\": \"cog\",\n        \"wordList\": [\n          \"hot\",\n          \"dot\",\n          \"dog\",\n          \"lot\",\n          \"log\",\n          \"cog\"\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"One shortest transformation sequence is 'hit' -> 'hot' -> 'dot' -> 'dog' -> 'cog', which is 5 words long.\"\n    },\n    {\n      \"input\": {\n        \"beginWord\": \"hit\",\n        \"endWord\": \"cog\",\n        \"wordList\": [\n          \"hot\",\n          \"dot\",\n          \"dog\",\n          \"lot\",\n          \"log\"\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"'cog' is not in the word list, so no valid transformation exists.\"\n    }\n  ],\n  \"constraints\": {\n    \"word_length\": \"1 <= beginWord.length <= 10\",\n    \"word_list_size\": \"1 <= wordList.length <= 5000\",\n    \"characters\": \"All words consist of lowercase English letters.\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm to handle very large dictionaries using bidirectional BFS?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create a phone directory that manages slots and returns available numbers."}, {"role": "assistant", "content": "{\n  \"title\": \"Design a Phone Directory\",\n  \"description\": \"Implement a phone directory to manage a fixed number of slots for storing phone numbers, with operations to assign, check, and release slots.\",\n  \"objective\": \"Efficiently manage the assignment and availability of phone numbers within a limited pool of `maxNumbers` slots.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialization\": {\n      \"maxNumbers\": \"Define the total number of available slots as `maxNumbers`.\",\n      \"Data Structures\": \"Use a set or queue to track available numbers, and maintain a boolean array to check slot status.\"\n    },\n    \"Step 2 - Assigning a Number\": {\n      \"Operation\": \"`get()` retrieves the first available number and removes it from the pool.\",\n      \"Edge Case\": \"If no numbers are available, return `-1`.\"\n    },\n    \"Step 3 - Checking a Slot\": {\n      \"Operation\": \"`check(number)` verifies whether a slot is available using the status array or set lookup.\",\n      \"Constraints\": \"Ensure the slot is within the valid range [0, maxNumbers-1].\"\n    },\n    \"Step 4 - Releasing a Slot\": {\n      \"Operation\": \"`release(number)` adds the slot back to the pool if it is not already available.\",\n      \"Validation\": \"Ensure the released number is valid and not already in the pool.\"\n    }\n  },\n  \"input\": {\n    \"parameters\": [\n      {\n        \"name\": \"maxNumbers\",\n        \"type\": \"integer\",\n        \"description\": \"The total number of phone slots in the directory.\",\n        \"constraints\": \"1 <= maxNumbers <= 10^4\"\n      },\n      {\n        \"name\": \"operations\",\n        \"type\": \"array\",\n        \"description\": \"A list of operations (`get`, `check`, `release`) to perform on the directory.\"\n      },\n      {\n        \"name\": \"arguments\",\n        \"type\": \"array\",\n        \"description\": \"The arguments for each operation, corresponding to its type.\"\n      }\n    ]\n  },\n  \"output\": {\n    \"type\": \"array\",\n    \"description\": \"The result of each operation in the same order, with `null` for void operations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"operations\": [\n          \"PhoneDirectory\",\n          \"get\",\n          \"get\",\n          \"check\",\n          \"get\",\n          \"check\",\n          \"release\",\n          \"check\"\n        ],\n        \"arguments\": [\n          [\n            3\n          ],\n          [],\n          [],\n          [\n            2\n          ],\n          [],\n          [\n            2\n          ],\n          [\n            2\n          ],\n          [\n            2\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        0,\n        1,\n        true,\n        2,\n        false,\n        null,\n        true\n      ],\n      \"explanation\": [\n        \"Initialize directory with 3 slots.\",\n        \"`get()` retrieves slot 0, marking it unavailable.\",\n        \"`get()` retrieves slot 1.\",\n        \"`check(2)` confirms slot 2 is available.\",\n        \"`get()` retrieves slot 2, leaving no available slots.\",\n        \"`check(2)` confirms slot 2 is now unavailable.\",\n        \"`release(2)` makes slot 2 available again.\",\n        \"`check(2)` confirms slot 2 is available.\"\n      ]\n    }\n  ],\n  \"hints\": [\n    \"Use a queue or set to manage the pool of available slots efficiently.\",\n    \"Optimize `get()` and `release()` to run in constant time for large `maxNumbers`.\",\n    \"Validate inputs to ensure operations are applied only to valid slots.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve `O(1)` complexity for `get`, `check`, and `release` operations.\",\n    \"constraints\": \"Avoid unnecessary data duplication or iteration over large ranges.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the cells where water flows to both oceans."}, {"role": "assistant", "content": "{\n  \"title\": \"Pacific Atlantic Water Flow\",\n  \"description\": \"Given an `m x n` matrix representing the height of an island, determine the cells from which water can flow to both the Pacific and Atlantic Oceans.\",\n  \"objective\": \"Identify cells where rainwater can flow to both the Pacific and Atlantic oceans based on the given height constraints.\",\n  \"input\": {\n    \"name\": \"heights\",\n    \"type\": \"2D array\",\n    \"description\": \"Matrix of integers where heights[r][c] represents the height of the cell at coordinate (r, c).\",\n    \"constraints\": \"1 <= m, n <= 200; 0 <= heights[r][c] <= 10^5\"\n  },\n  \"output\": {\n    \"type\": \"2D array\",\n    \"description\": \"A list of coordinates where rainwater can flow to both oceans.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"heights\": [\n          [\n            1,\n            2,\n            2,\n            3,\n            5\n          ],\n          [\n            3,\n            2,\n            3,\n            4,\n            4\n          ],\n          [\n            2,\n            4,\n            5,\n            3,\n            1\n          ],\n          [\n            6,\n            7,\n            1,\n            4,\n            5\n          ],\n          [\n            5,\n            1,\n            1,\n            2,\n            4\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          0,\n          4\n        ],\n        [\n          1,\n          3\n        ],\n        [\n          1,\n          4\n        ],\n        [\n          2,\n          2\n        ],\n        [\n          3,\n          0\n        ],\n        [\n          3,\n          1\n        ],\n        [\n          4,\n          0\n        ]\n      ],\n      \"explanation\": \"Cells listed in the output can flow to both Pacific and Atlantic Oceans based on the given height constraints.\"\n    },\n    {\n      \"input\": {\n        \"heights\": [\n          [\n            1\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          0,\n          0\n        ]\n      ],\n      \"explanation\": \"The only cell (0,0) flows to both oceans.\"\n    }\n  ],\n  \"hints\": [\n    \"Water can flow to the Pacific Ocean from the left and top edges.\",\n    \"Water can flow to the Atlantic Ocean from the right and bottom edges.\",\n    \"Simulate the flow using Depth-First Search (DFS) or Breadth-First Search (BFS).\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Use two separate searches (DFS or BFS) starting from cells adjacent to each ocean and find their intersection.\",\n    \"constraints\": \"Avoid redundant computations to ensure time complexity is O(m * n).\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Make a palindrome from a string by adding letters at the start."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s`, determine the shortest palindrome that can be formed by adding characters to the front of `s`.\",\n  \"objective\": \"Design an efficient algorithm to compute the shortest palindrome by finding the longest palindromic prefix of `s`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand Palindrome Prefix\": \"Identify the longest palindromic prefix of `s` to minimize characters added.\",\n    \"Step 2 - Use String Matching\": \"Utilize KMP or a similar algorithm to compute the overlap between `s` and its reversed string.\",\n    \"Step 3 - Construct Result\": \"Add the required characters to the beginning of `s` to complete the palindrome.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider cases where `s` is already a palindrome or when `s` is empty.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"aacecaaa\"\n      },\n      \"output\": \"aaacecaaa\",\n      \"explanation\": \"Adding 'a' to the front of 'aacecaaa' forms the shortest palindrome.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"abcd\"\n      },\n      \"output\": \"dcbabcd\",\n      \"explanation\": \"Adding 'dcb' to the front of 'abcd' forms the shortest palindrome.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"\"\n      },\n      \"output\": \"\",\n      \"explanation\": \"An empty string is already a palindrome.\"\n    }\n  ],\n  \"constraints\": {\n    \"length_range\": \"0 <= s.length <= 5 * 10^4\",\n    \"characters\": \"s consists of only lowercase English letters.\"\n  },\n  \"follow_up\": \"How can you further optimize the computation for extremely large strings?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Make a short abbreviation of `target` that isn't in `dictionary`."}, {"role": "assistant", "content": "{\n  \"title\": \"Shortest Non-Conflicting Abbreviation\",\n  \"description\": \"Given a string `target` and a `dictionary` of strings, return the shortest valid abbreviation of `target` that is not an abbreviation of any word in `dictionary`. A valid abbreviation replaces non-adjacent substrings with their lengths.\",\n  \"input\": [\n    {\n      \"name\": \"target\",\n      \"type\": \"string\",\n      \"description\": \"The string to abbreviate.\",\n      \"constraints\": \"1 <= target.length <= 21\"\n    },\n    {\n      \"name\": \"dictionary\",\n      \"type\": \"array of strings\",\n      \"description\": \"A collection of words that the abbreviation of `target` must not conflict with.\",\n      \"constraints\": \"0 <= dictionary.length <= 1000, 1 <= dictionary[i].length <= 100\"\n    }\n  ],\n  \"output\": {\n    \"type\": \"string\",\n    \"description\": \"The shortest valid abbreviation of `target` that is not an abbreviation of any word in `dictionary`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"target\": \"apple\",\n        \"dictionary\": [\n          \"blade\"\n        ]\n      },\n      \"output\": \"a4\",\n      \"explanation\": \"The shortest abbreviation of 'apple' is '5', but it conflicts with 'blade'. 'a4' is the shortest valid abbreviation that does not conflict.\"\n    },\n    {\n      \"input\": {\n        \"target\": \"apple\",\n        \"dictionary\": [\n          \"blade\",\n          \"plain\",\n          \"amber\"\n        ]\n      },\n      \"output\": \"1p3\",\n      \"explanation\": \"'5', 'a4', and '4e' all conflict with words in the dictionary. '1p3' is a valid abbreviation that does not conflict.\"\n    }\n  ],\n  \"hints\": [\n    \"Generate all possible abbreviations of `target` and check each for conflicts.\",\n    \"Sort abbreviations by their lengths to ensure the shortest is returned.\",\n    \"Use bit manipulation to efficiently generate abbreviations.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Use bit manipulation to efficiently generate and test abbreviations, avoiding exhaustive enumeration.\",\n    \"constraints\": \"Avoid generating unnecessary abbreviations once a conflict-free result is found.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find products of all elements except the one at the index."}, {"role": "assistant", "content": "{\n  \"description\": \"Calculate the product of all elements in an array except the element at the current index.\",\n  \"objective\": \"Return an array where each element is the product of all elements in the input array except itself.\",\n  \"steps\": [\n    \"Initialize an array to store prefix products, and another for suffix products.\",\n    \"Iterate through the array to calculate prefix products up to each index.\",\n    \"Iterate from the end of the array to calculate suffix products.\",\n    \"Multiply the prefix and suffix products for each index to get the result.\",\n    \"Return the resulting array.\"\n  ],\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          4\n        ]\n      },\n      \"output\": [\n        24,\n        12,\n        8,\n        6\n      ]\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          -1,\n          1,\n          0,\n          -3,\n          3\n        ]\n      },\n      \"output\": [\n        0,\n        0,\n        9,\n        0,\n        0\n      ]\n    }\n  ],\n  \"constraints\": \"Solve the problem in O(n) time without using division. Minimize additional space usage.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Write a function to traverse an N-ary tree and get the nodes level by level."}, {"role": "assistant", "content": "{\n  \"title\": \"N-ary Tree Level Order Traversal\",\n  \"description\": \"Given the root of an N-ary tree, return its level order traversal. Each level of the tree should be represented as a list of node values, and the output should be a list of these lists.\",\n  \"objective\": \"Implement a function `levelOrder(root: Node) -> List[List[int]]` that performs level order traversal of the N-ary tree.\",\n  \"input\": {\n    \"name\": \"root\",\n    \"type\": \"Node\",\n    \"description\": \"The root node of the N-ary tree to be traversed.\",\n    \"constraints\": [\n      \"The height of the N-ary tree is less than or equal to 1000.\",\n      \"The total number of nodes is in the range [0, 10^4].\"\n    ]\n  },\n  \"output\": {\n    \"type\": \"List[List[int]]\",\n    \"description\": \"A list of lists, where each sublist contains the values of the nodes at a specific level in the tree.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          null,\n          3,\n          2,\n          4,\n          null,\n          5,\n          6\n        ]\n      },\n      \"output\": [\n        [\n          1\n        ],\n        [\n          3,\n          2,\n          4\n        ],\n        [\n          5,\n          6\n        ]\n      ],\n      \"explanation\": \"The root node (1) is at level 0, its children (3, 2, 4) are at level 1, and their children (5, 6) are at level 2.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          null,\n          2,\n          3,\n          4,\n          5,\n          null,\n          null,\n          6,\n          7,\n          null,\n          8,\n          null,\n          9,\n          10,\n          null,\n          null,\n          11,\n          null,\n          12,\n          null,\n          13,\n          null,\n          null,\n          14\n        ]\n      },\n      \"output\": [\n        [\n          1\n        ],\n        [\n          2,\n          3,\n          4,\n          5\n        ],\n        [\n          6,\n          7,\n          8,\n          9,\n          10\n        ],\n        [\n          11,\n          12,\n          13\n        ],\n        [\n          14\n        ]\n      ],\n      \"explanation\": \"Nodes are traversed level by level, grouping node values by depth in the tree.\"\n    },\n    {\n      \"input\": {\n        \"root\": []\n      },\n      \"output\": [],\n      \"explanation\": \"An empty tree has no levels, so the output is an empty list.\"\n    }\n  ],\n  \"hints\": [\n    \"Use a queue to perform a breadth-first traversal of the tree.\",\n    \"Process each level of the tree separately, grouping the values of nodes at the same depth.\",\n    \"Handle edge cases like an empty tree or a single-node tree.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve an O(n) traversal time, where n is the number of nodes in the tree.\",\n    \"constraints\": \"Use O(n) additional space for storing the traversal results and queue.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Pick a random node from a linked list."}, {"role": "assistant", "content": "{\n  \"title\": \"Random Node Selection from Singly Linked List\",\n  \"description\": \"Implement a solution to randomly select a node's value from a singly linked list such that each node has an equal probability of being selected.\",\n  \"objective\": \"Use a reservoir sampling technique for efficient and uniform random selection.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Solution\": {\n      \"Store Head\": \"Store the head of the linked list for traversal during the `getRandom` calls.\"\n    },\n    \"Step 2 - Implement getRandom\": {\n      \"Reservoir Sampling\": {\n        \"Explanation\": \"Traverse the linked list and select the current node's value with decreasing probability as the list is traversed.\",\n        \"Algorithm\": \"For each node, select it with probability `1/i` (where `i` is the index of the node in the list).\"\n      }\n    }\n  },\n  \"input\": {\n    \"methods\": [\n      \"Solution\",\n      \"getRandom\"\n    ],\n    \"arguments\": [\n      [\n        \"ListNode head\"\n      ],\n      []\n    ]\n  },\n  \"output\": {\n    \"type\": \"array\",\n    \"description\": \"Array of outputs where `null` is for initialization and integers for `getRandom` calls.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"methods\": [\n          \"Solution\",\n          \"getRandom\",\n          \"getRandom\",\n          \"getRandom\"\n        ],\n        \"arguments\": [\n          [\n            [\n              1,\n              2,\n              3\n            ]\n          ],\n          [],\n          [],\n          []\n        ]\n      },\n      \"output\": [\n        null,\n        1,\n        2,\n        3\n      ],\n      \"explanation\": [\n        \"Initialize the solution with a linked list of values `[1, 2, 3]`.\",\n        \"Each call to `getRandom` should return either `1`, `2`, or `3` with equal probability.\"\n      ]\n    }\n  ],\n  \"hints\": [\n    \"To handle unknown or large list sizes, traverse the list once during each `getRandom` call.\",\n    \"Use a random number generator to determine the probability of selecting the current node.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Ensure `getRandom` works in `O(n)` time complexity where `n` is the number of nodes in the linked list.\",\n    \"constraints\": \"Avoid storing the entire linked list in additional space.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given an array of numbers. Find the largest group of numbers that are connected by having a common factor greater than 1."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an array of unique positive integers `nums`. These integers are the nodes in a graph. An undirected edge exists between two nodes if they share a common factor greater than 1. Your task is to find the size of the largest connected component in the graph.\",\n  \"objective\": \"Write a function that takes an array of unique positive integers as input and returns the size of the largest connected component in the graph formed by these numbers, where an edge exists between two numbers if they have a common factor greater than 1.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"You need to represent a graph where each number is a node, and there is an edge between two nodes if they share a common factor greater than 1. The goal is to find the size of the largest connected component of this graph.\",\n    \"Step 2 - Approach\": \"The problem can be modeled as a graph traversal problem. The nodes are integers, and the edges are based on shared factors. You will need to check for common factors greater than 1 between pairs of numbers and group the connected numbers into components.\",\n    \"Step 3 - Graph Representation\": \"The nodes are the elements of `nums`, and the edges are created based on the shared divisors of the numbers. You can use a union-find (disjoint-set) data structure to group the numbers into connected components efficiently.\",\n    \"Step 4 - Efficient Factorization\": \"To identify shared factors, you can use the fact that every number can be factored into primes. Efficient prime factorization or a sieve approach might be helpful for grouping numbers by common factors.\",\n    \"Step 5 - Union-Find Approach\": \"Use the union-find data structure to keep track of which numbers are connected based on their shared factors. The union operation will group two numbers that share a factor, and the find operation will help in determining the root of each component.\",\n    \"Step 6 - Base Case\": \"If the `nums` array has only one number, the largest connected component size is 1 since there are no edges to form a component.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          4,\n          6,\n          15,\n          35\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"The numbers 4, 6, 15, and 35 form a single connected component since they share common factors. The largest component size is 4.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          20,\n          50,\n          9,\n          63\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The numbers 20 and 50 form one connected component, and 9 and 63 form another. The largest component size is 2.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          3,\n          6,\n          7,\n          4,\n          12,\n          21,\n          39\n        ]\n      },\n      \"output\": 8,\n      \"explanation\": \"All the numbers form a single connected component, as they share common factors. The largest component size is 8.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length_range\": \"[1, 2 * 10^4]\",\n    \"nums_values_range\": \"[1, 10^5]\",\n    \"unique_values\": \"All numbers in the `nums` array are unique.\"\n  },\n  \"follow_up\": \"Can you optimize your solution to handle the upper limit of the input size?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the largest value in each row of a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of a binary tree, return an array where each element is the largest value in each row (0-indexed) of the tree.\",\n  \"objective\": \"Design an efficient algorithm that traverses the binary tree and finds the maximum value for each row using depth-first search (DFS) and tracks the depth of each node to identify rows.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the goal is to determine the maximum value in each row (depth level) of the binary tree. The depth of each node correlates with its row in the result array.\",\n    \"Step 2 - Using DFS with Depth Tracking\": \"Traverse the tree using DFS while keeping track of each node's depth. Pass an additional `depth` parameter in the recursive DFS function to represent the current row in the result array.\",\n    \"Step 3 - Updating Result Array\": \"Initialize an empty list `ans` to store the maximum values per row. During DFS, check if `ans[depth]` exists. If not, add the node's value as the maximum for that depth. Otherwise, update `ans[depth]` if the current node\\u2019s value is greater than the stored maximum.\",\n    \"Step 4 - Handling New Depth Levels\": \"When a node's depth exceeds the length of `ans`, add its value to `ans` as the new maximum for that depth level. This ensures each level is only updated when necessary.\",\n    \"Step 5 - Complexity and Constraints\": \"The solution should handle up to `10^4` nodes efficiently in O(n) time complexity, where each node is visited once, and handle values in the range `-2^31` to `2^31 - 1`.\",\n    \"Final Check - Constraints Verification\": \"Ensure the solution meets constraints with nodes in the range `[0, 10^4]` and values within `-2^31` to `2^31 - 1` by handling each row and value within the binary tree's structure.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          3,\n          2,\n          5,\n          3,\n          null,\n          9\n        ]\n      },\n      \"output\": [\n        1,\n        3,\n        9\n      ],\n      \"explanation\": \"The largest values per row are [1, 3, 9] for levels 0, 1, and 2 respectively.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": [\n        1,\n        3\n      ],\n      \"explanation\": \"The largest values per row are [1, 3] for levels 0 and 1 respectively.\"\n    }\n  ],\n  \"constraints\": {\n    \"tree_node_range\": \"0 <= number of nodes <= 10^4\",\n    \"node_value_range\": \"-2^31 <= Node.val <= 2^31 - 1\"\n  },\n  \"follow_up\": \"Could you implement this solution using a breadth-first search (BFS) approach to handle each row more explicitly?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find how many connected parts are in a graph."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a graph with `n` nodes and a list of edges, determine the number of connected components in the graph. Each connected component is a subgraph where every pair of nodes is connected, either directly or indirectly, and is not connected to any other nodes outside the component.\",\n  \"objective\": \"Design an efficient algorithm to compute the number of connected components in the graph using techniques such as Depth-First Search (DFS), Breadth-First Search (BFS), or Union-Find (Disjoint Set).\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that connected components represent clusters of nodes that are connected within themselves but disconnected from other nodes.\",\n    \"Step 2 - Graph Representation\": \"Store the graph using an adjacency list for efficient traversal.\",\n    \"Step 3 - Traversal/Union Operations\": \"Use either DFS/BFS to explore all nodes in a component or apply the Union-Find algorithm to track connected components.\",\n    \"Step 4 - Count Components\": \"Iterate through all nodes. For each unvisited node (in DFS/BFS) or disjoint set root (in Union-Find), increment the connected components count.\",\n    \"Step 5 - Optimization\": \"Ensure the solution is efficient for large `n` and `edges` by maintaining a time complexity of `O(n + edges.length)` for graph traversal.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 5,\n        \"edges\": [\n          [\n            0,\n            1\n          ],\n          [\n            1,\n            2\n          ],\n          [\n            3,\n            4\n          ]\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"There are two connected components: [0, 1, 2] and [3, 4].\"\n    },\n    {\n      \"input\": {\n        \"n\": 5,\n        \"edges\": [\n          [\n            0,\n            1\n          ],\n          [\n            1,\n            2\n          ],\n          [\n            2,\n            3\n          ],\n          [\n            3,\n            4\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"All nodes are connected in a single component.\"\n    },\n    {\n      \"input\": {\n        \"n\": 3,\n        \"edges\": []\n      },\n      \"output\": 3,\n      \"explanation\": \"Each node is its own component since there are no edges.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"1 <= n <= 2000\",\n    \"edge_count\": \"1 <= edges.length <= 5000\",\n    \"edge_structure\": \"Each edge connects two distinct nodes, and there are no repeated edges.\"\n  },\n  \"follow_up\": \"Can you optimize the solution for dense graphs where the number of edges is close to the maximum possible?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Generate all valid combinations of parentheses for a given number."}, {"role": "assistant", "content": "{\n  \"description\": \"Given `n` pairs of parentheses, write a function to generate all combinations of well-formed parentheses. Each combination must have exactly `n` pairs, and the parentheses must be balanced and well-formed.\",\n  \"objective\": \"Design an efficient algorithm to generate all valid combinations of well-formed parentheses, ensuring that all conditions are satisfied and the solution is optimized for large input sizes.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that well-formed parentheses require that every opening parenthesis has a corresponding closing parenthesis and that the order is correct. For `n` pairs, there are constraints on when and where parentheses can be placed.\",\n    \"Step 2 - Recursive Approach with Backtracking\": \"Use a recursive approach to build combinations incrementally. Keep track of the number of open and close parentheses used to ensure they do not exceed `n` and that the sequence remains valid.\",\n    \"Step 3 - Base and Recursive Cases\": \"The base case is reached when the combination contains `2n` characters (all parentheses are used). The recursive case involves adding either an open or close parenthesis, depending on the current state.\",\n    \"Step 4 - Optimization\": \"Avoid generating invalid combinations by ensuring that the number of closing parentheses never exceeds the number of opening parentheses at any point in the sequence.\",\n    \"Step 5 - Constraints Compliance\": \"Ensure the solution adheres to constraints, such as `1 <= n <= 8`, and handles edge cases like `n = 1` efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 3\n      },\n      \"output\": [\n        \"((()))\",\n        \"(()())\",\n        \"(())()\",\n        \"()(())\",\n        \"()()()\"\n      ],\n      \"explanation\": \"All combinations have exactly 3 pairs of well-formed parentheses.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1\n      },\n      \"output\": [\n        \"()\"\n      ],\n      \"explanation\": \"With 1 pair of parentheses, the only valid combination is '()'.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_value\": \"1 <= n <= 8\",\n    \"time_complexity\": \"Aim for an efficient solution by pruning invalid combinations early using backtracking.\"\n  },\n  \"follow_up\": \"Can you implement the algorithm iteratively instead of recursively? Can you determine how many valid combinations exist for a given `n` without generating all combinations?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Make a stack using two queues."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a last-in-first-out (LIFO) stack using two queues.\",\n  \"objective\": \"Implement all stack functions (`push`, `pop`, `top`, `empty`) using only standard queue operations such as `push to back`, `pop from front`, `peek`, and `is empty`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Use Two Queues\": \"Decide how to simulate stack behavior by managing two queues.\",\n    \"Step 2 - Push Operation\": \"Ensure the newest element is always on top.\",\n    \"Step 3 - Pop and Top Operations\": \"Adjust queue contents such that LIFO order is maintained.\",\n    \"Step 4 - Optimize for Empty\": \"Efficiently determine if the stack is empty.\"\n  },\n  \"examples\": [\n    {\n      \"input\": [\n        \"MyStack\",\n        \"push\",\n        \"push\",\n        \"top\",\n        \"pop\",\n        \"empty\"\n      ],\n      \"arguments\": [\n        [],\n        [\n          1\n        ],\n        [\n          2\n        ],\n        [],\n        [],\n        []\n      ],\n      \"output\": [\n        null,\n        null,\n        null,\n        2,\n        2,\n        false\n      ],\n      \"explanation\": \"The stack operations simulate a LIFO structure using two queues.\"\n    }\n  ],\n  \"constraints\": {\n    \"operation_limit\": \"At most 100 calls to `push`, `pop`, `top`, and `empty`.\",\n    \"value_range\": \"1 <= x <= 9\",\n    \"validity\": \"All calls to `pop` and `top` are valid.\"\n  },\n  \"follow_up\": \"Can you optimize your implementation to use only one queue?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "List all strobogrammatic numbers for a given length."}, {"role": "assistant", "content": "{\n  \"description\": \"Generate all strobogrammatic numbers of a specified length.\",\n  \"objective\": \"Return a list of all strobogrammatic numbers of length `n` in any order.\",\n  \"steps\": [\n    \"Define the strobogrammatic digit pairs ('6', '9'), ('9', '6'), ('0', '0'), ('1', '1'), and ('8', '8').\",\n    \"Use recursion or iterative methods to generate numbers by building valid pairs at both ends of the string.\",\n    \"Exclude numbers that start with '0' unless the number's length is 1.\"\n  ],\n  \"examples\": [\n    {\n      \"input\": 2,\n      \"output\": [\n        \"11\",\n        \"69\",\n        \"88\",\n        \"96\"\n      ]\n    },\n    {\n      \"input\": 1,\n      \"output\": [\n        \"0\",\n        \"1\",\n        \"8\"\n      ]\n    }\n  ],\n  \"constraints\": [\n    \"The value of `n` is between 1 and 14.\",\n    \"Numbers must be valid strobogrammatic numbers.\"\n  ],\n  \"follow_up\": \"How can you handle cases where the range is very large or `n` is close to its upper limit?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given `n` jobs and `m` workers, each job has a difficulty and a profit. Each worker can complete a job if their ability is greater than or equal to the job's difficulty. Return the maximum total profit we can get by assigning workers to jobs."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given `n` jobs and `m` workers, and for each job, you know its difficulty and associated profit. For each worker, their ability to complete a job is limited by their individual skill level. Specifically, a worker can only complete a job if their ability is at least as high as the job's difficulty. Each worker can only take one job, but a job can be completed by multiple workers. Your task is to assign workers to jobs in such a way that maximizes the total profit. If a worker cannot complete any job, their profit will be zero. The goal is to return the maximum total profit we can achieve after assigning workers to jobs.\",\n  \"objective\": \"Write a function that returns the maximum profit possible from assigning workers to jobs.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We have `n` jobs and `m` workers, and each job has a difficulty and a profit associated with it. A worker can only work on jobs where the difficulty is less than or equal to the worker's ability. Multiple workers can work on the same job, but each worker can only perform one job.\",\n    \"Step 2 - Problem Constraints\": \"To maximize profit, assign workers to the jobs with the highest profit they can complete, considering each worker's ability. Make sure to handle cases where no workers can perform a job.\",\n    \"Step 3 - Optimization Strategy\": \"Given that each worker has a limit to the jobs they can complete, sorting the job difficulties and worker abilities can help efficiently match the workers to the most profitable jobs they can handle.\",\n    \"Step 4 - Output\": \"Return the total maximum profit, where each worker contributes to the profit of the job they are assigned.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"difficulty\": [\n          2,\n          4,\n          6,\n          8,\n          10\n        ],\n        \"profit\": [\n          10,\n          20,\n          30,\n          40,\n          50\n        ],\n        \"worker\": [\n          4,\n          5,\n          6,\n          7\n        ]\n      },\n      \"output\": 100,\n      \"explanation\": \"Workers are assigned jobs of difficulty [4, 4, 6, 6] and they get profits [20, 20, 30, 30], resulting in a total profit of 100.\"\n    },\n    {\n      \"input\": {\n        \"difficulty\": [\n          85,\n          47,\n          57\n        ],\n        \"profit\": [\n          24,\n          66,\n          99\n        ],\n        \"worker\": [\n          40,\n          25,\n          25\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"None of the workers can complete any of the jobs, so the total profit is 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"n\": \"The length of `difficulty` and `profit` is between 1 and 10,000.\",\n    \"m\": \"The length of `worker` is between 1 and 10,000.\",\n    \"difficulty\": \"Each element of `difficulty`, `profit`, and `worker` is between 1 and 100,000.\"\n  },\n  \"follow_up\": \"Can you improve the solution's efficiency by considering binary search or dynamic programming to optimize the assignment process?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the most frequent value(s) in a binary search tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of a binary search tree (BST) that may contain duplicate values, your task is to find all the mode(s), i.e., the most frequently occurring element(s) in the tree. If there is more than one mode, you can return them in any order.\",\n  \"objective\": \"Design an efficient algorithm that traverses the BST and identifies the mode(s) by counting the frequency of each element. Aim for a solution that operates without additional space beyond the input structure, if possible.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Analyze the BST structure where each node has a value, with a left child containing values less than or equal to the node's value, and a right child containing values greater than or equal to the node's value. Identify the goal as counting occurrences of each node's value.\",\n    \"Step 2 - Initial Approach\": \"Consider an in-order traversal of the tree, which will yield nodes in sorted order for a BST. This sorted order allows for counting consecutive occurrences of each value efficiently.\",\n    \"Step 3 - Counting Frequencies\": \"Use variables to track the current count of each node's value, as well as the maximum count found so far. Update the list of modes whenever the current count surpasses the previous maximum count.\",\n    \"Step 4 - Output Format\": \"Return a list containing the mode(s) of the BST in any order. Ensure the function can handle a BST with a single node or one with multiple modes.\",\n    \"Step 5 - Edge Case Handling\": \"Handle edge cases, such as when the tree has only one unique element, or when multiple values occur with the same frequency. Ensure that the function handles both large positive and negative values within the constraints.\",\n    \"Final Check - Constraints Verification\": \"Verify the solution can handle trees with up to `10^4` nodes and node values in the range `-10^5` to `10^5`, working within the constraint of not using extra space, aside from recursion.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          null,\n          2,\n          2\n        ]\n      },\n      \"output\": [\n        2\n      ],\n      \"explanation\": \"The value '2' appears most frequently, so it is the only mode in this BST.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          0\n        ]\n      },\n      \"output\": [\n        0\n      ],\n      \"explanation\": \"With only one node, the value '0' is the most frequent by default, so it is the mode.\"\n    }\n  ],\n  \"constraints\": {\n    \"nodes_range\": \"1 <= number of nodes <= 10^4\",\n    \"node_value_range\": \"-10^5 <= Node.val <= 10^5\"\n  },\n  \"follow_up\": \"Could you devise a solution that finds the modes without additional space beyond the implicit recursion stack, making it more memory efficient?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Store logs with timestamps and retrieve them based on a range."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a log storage and retrieval system where timestamps are processed and stored for efficient querying. The system supports storing logs with unique IDs and timestamps and retrieving logs within a specified range and granularity.\",\n  \"objective\": \"Efficiently store and retrieve logs based on timestamp ranges and precision levels, using timestamp conversion for streamlined comparisons.\",\n  \"meta_prompt\": {\n    \"Step 1 - Convert Timestamp to Seconds\": \"For storage, split the timestamp and convert it into seconds since a base year (e.g., 2000) for unique representation.\",\n    \"Step 2 - Store Log\": \"Store the converted timestamp and its associated ID in a list for efficient retrieval.\",\n    \"Step 3 - Handle Granularity in Retrieval\": \"When retrieving logs, adjust the start and end timestamps based on the granularity by zeroing out less significant components.\",\n    \"Step 4 - Filter Logs in Range\": \"Iterate through stored logs and retrieve IDs where the adjusted timestamps lie within the specified range.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"commands\": [\n          \"LogSystem\",\n          \"put\",\n          \"put\",\n          \"put\",\n          \"retrieve\"\n        ],\n        \"arguments\": [\n          [],\n          [\n            1,\n            \"2017:01:01:23:59:59\"\n          ],\n          [\n            2,\n            \"2017:01:01:22:59:59\"\n          ],\n          [\n            3,\n            \"2016:01:01:00:00:00\"\n          ],\n          [\n            \"2016:01:01:01:01:01\",\n            \"2017:01:01:23:00:00\",\n            \"Year\"\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        null,\n        null,\n        null,\n        [\n          3,\n          2,\n          1\n        ]\n      ],\n      \"explanation\": \"Log entries are stored with converted timestamps, and the retrieval returns logs in the specified range at 'Year' granularity.\"\n    },\n    {\n      \"input\": {\n        \"commands\": [\n          \"LogSystem\",\n          \"put\",\n          \"retrieve\"\n        ],\n        \"arguments\": [\n          [],\n          [\n            1,\n            \"2017:01:01:23:59:59\"\n          ],\n          [\n            \"2017:01:01:23:59:58\",\n            \"2017:01:01:23:59:59\",\n            \"Second\"\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        [\n          1\n        ]\n      ],\n      \"explanation\": \"Only logs with timestamps within the precise range at 'Second' granularity are returned.\"\n    }\n  ],\n  \"constraints\": {\n    \"timestamp_format\": \"YYYY:MM:DD:HH:MM:SS\",\n    \"id_range\": \"1 <= id <= 500\",\n    \"year_range\": \"2000 <= Year <= 2017\",\n    \"granularity_options\": [\n      \"Year\",\n      \"Month\",\n      \"Day\",\n      \"Hour\",\n      \"Minute\",\n      \"Second\"\n    ]\n  },\n  \"follow_up\": \"Consider optimizing storage by using a binary search tree for faster retrievals, and discuss space-time trade-offs for higher efficiency with large-scale logs.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Compress the array of characters."}, {"role": "assistant", "content": "{\n  \"title\": \"String Compression In-Place\",\n  \"description\": \"Given an array of characters `chars`, compress it in-place by modifying the input array according to the following rules:\\n\\n1. For each group of **consecutive repeating characters**, compress the group as follows:\\n   - If the group's length is 1, retain the character in the array.\\n   - Otherwise, replace the group with the character followed by its length as characters (e.g., '12' for 12).\\n\\n2. Use only constant extra space.\\n3. Return the new length of the compressed array.\",\n  \"input\": {\n    \"chars\": {\n      \"type\": \"array\",\n      \"description\": \"An array of characters to be compressed in place.\",\n      \"constraints\": {\n        \"length\": \"[1, 2000]\",\n        \"element_type\": \"char (lowercase/uppercase letter, digit, or symbol)\"\n      }\n    }\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The length of the compressed array.\",\n    \"details\": \"The input array `chars` is modified in-place to store the compressed form, with the first returned length elements representing the compressed string.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"chars\": [\n          \"a\",\n          \"a\",\n          \"b\",\n          \"b\",\n          \"c\",\n          \"c\",\n          \"c\"\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"Compressed to ['a', '2', 'b', '2', 'c', '3']. Length is 6.\"\n    },\n    {\n      \"input\": {\n        \"chars\": [\n          \"a\"\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"No compression needed. Output remains ['a'].\"\n    },\n    {\n      \"input\": {\n        \"chars\": [\n          \"a\",\n          \"b\",\n          \"b\",\n          \"b\",\n          \"b\",\n          \"b\",\n          \"b\",\n          \"b\",\n          \"b\",\n          \"b\",\n          \"b\",\n          \"b\",\n          \"b\"\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"Compressed to ['a', 'b', '1', '2']. Length is 4.\"\n    }\n  ],\n  \"hints\": [\n    \"Use a pointer to track the write position in `chars` as you traverse it.\",\n    \"Handle groups by calculating their length and writing the character and length digits into the array.\",\n    \"Iterate over the input using a single pass to achieve O(n) time complexity.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(n) time complexity and O(1) space complexity.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find a Fibonacci-like sequence from a string of digits."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a string of digits num, and your task is to split this string into a Fibonacci-like sequence. A Fibonacci-like sequence is a list of integers where each integer is formed by consecutive digits from the string, and for any two consecutive elements f[i] and f[i+1], their sum equals the next element f[i+2]. The sequence must not have any extra leading zeroes, except for the number 0 itself. Return any Fibonacci-like sequence that can be formed, or return an empty list if no valid sequence can be made.\",\n  \"objective\": \"Design an algorithm that attempts to split the string into a valid Fibonacci-like sequence. The algorithm should ensure that each number in the sequence is a valid integer (i.e., no leading zeros unless the number is 0), and the sequence must satisfy the Fibonacci condition f[i] + f[i+1] == f[i+2] for all valid i. If no valid sequence is found, return an empty list.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The problem requires splitting a string of digits into a valid Fibonacci-like sequence. The sequence must follow the Fibonacci rule: each number must be the sum of the two preceding numbers.\",\n    \"Step 2 - Strategy Exploration\": \"Consider splitting the string into possible pairs of numbers and checking if they can form a Fibonacci-like sequence by verifying the sum rule. The sequence must contain at least 3 numbers.\",\n    \"Step 3 - Fibonacci Condition Checking\": \"For each possible valid split, check if the Fibonacci condition holds: f[i] + f[i+1] == f[i+2] for all valid indices. Skip splits that result in numbers with leading zeros unless the number is 0.\",\n    \"Step 4 - Output Format\": \"The output should be a list of integers representing the Fibonacci-like sequence, or an empty list if no such sequence can be formed.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure the solution works efficiently for strings of varying lengths (up to 200 digits) and handles edge cases such as leading zeros and impossible sequences.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"num\": \"1101111\"\n      },\n      \"output\": [\n        11,\n        0,\n        11,\n        11\n      ],\n      \"explanation\": \"The string can be split into the sequence [11, 0, 11, 11], which satisfies the Fibonacci-like condition.\"\n    },\n    {\n      \"input\": {\n        \"num\": \"112358130\"\n      },\n      \"output\": [],\n      \"explanation\": \"It is impossible to form a valid Fibonacci-like sequence from this string, so the output is an empty list.\"\n    },\n    {\n      \"input\": {\n        \"num\": \"0123\"\n      },\n      \"output\": [],\n      \"explanation\": \"The sequence is invalid due to leading zeros in the numbers 01, 2, and 3. Therefore, the output is an empty list.\"\n    }\n  ],\n  \"constraints\": {\n    \"num_length\": \"1 <= num.length <= 200\",\n    \"num_elements_range\": \"num contains only digits.\"\n  },\n  \"follow_up\": \"Can you come up with a more efficient approach to solve this problem, potentially reducing the time complexity of generating all possible sequences?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Evaluate a ternary expression. Returns the result."}, {"role": "assistant", "content": "{\n  \"title\": \"Evaluate Nested Ternary Expressions\",\n  \"description\": \"Given a string `expression` representing arbitrarily nested ternary expressions, evaluate the expression and return the result. Each expression contains digits, `?`, `:`, `T` (True), and `F` (False). The expressions are grouped right-to-left, and the result will always evaluate to a single digit, `T`, or `F`.\",\n  \"input\": {\n    \"expression\": {\n      \"type\": \"string\",\n      \"description\": \"A valid nested ternary expression.\",\n      \"constraints\": {\n        \"length\": \"[5, 10000]\",\n        \"content\": \"expression consists of digits, 'T', 'F', '?', and ':'. All numbers are single-digit.\"\n      }\n    }\n  },\n  \"output\": {\n    \"type\": \"string\",\n    \"description\": \"The evaluated result of the nested ternary expression. It can be a digit, 'T', or 'F'.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"expression\": \"T?2:3\"\n      },\n      \"output\": \"2\",\n      \"explanation\": \"If true, the result is 2; otherwise, it is 3.\"\n    },\n    {\n      \"input\": {\n        \"expression\": \"F?1:T?4:5\"\n      },\n      \"output\": \"4\",\n      \"explanation\": \"Grouped right-to-left: (F ? 1 : (T ? 4 : 5)) \\u2192 (F ? 1 : 4) \\u2192 4.\"\n    },\n    {\n      \"input\": {\n        \"expression\": \"T?T?F:5:3\"\n      },\n      \"output\": \"F\",\n      \"explanation\": \"Grouped right-to-left: (T ? (T ? F : 5) : 3) \\u2192 (T ? F : 3) \\u2192 F.\"\n    }\n  ],\n  \"hints\": [\n    \"The ternary operator groups from right-to-left.\",\n    \"Use a stack to evaluate the nested expressions in reverse.\",\n    \"Iterate the string backwards, pushing results into the stack until the entire expression is processed.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Ensure the solution processes the input in O(n) time complexity by iterating backwards with a stack.\",\n    \"constraints\": \"Use O(n) additional space for the stack to handle nested expressions.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Fill a grid with distances to the nearest gate."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a grid `rooms` where each cell represents either a wall, a gate, or an empty room. Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, leave the cell as `INF`. Walls and gates should remain unchanged.\",\n  \"objective\": \"Design an efficient algorithm to calculate the minimum distance for each empty room to the nearest gate, optimizing for large grids with dimensions up to `250 x 250`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the grid representation:\\n- `-1` for walls (no update needed).\\n- `0` for gates (sources of BFS).\\n- `INF` for empty rooms to be updated with the shortest distance to a gate.\",\n    \"Step 2 - Multi-Source BFS\": \"Use a breadth-first search (BFS) starting from all gates (`0`) simultaneously:\\n- Add all gates to the BFS queue initially.\\n- For each gate, propagate distances to adjacent cells until all reachable cells are updated.\",\n    \"Step 3 - Update Grid\": \"Modify the grid `rooms` in-place during the BFS to store distances. Ensure the propagation stops when encountering walls (`-1`) or cells with smaller distances.\",\n    \"Step 4 - Edge Cases\": \"Handle cases such as:\\n- A grid with no gates.\\n- A grid with only walls.\\n- Very large grids (`250 x 250`) with multiple gates.\",\n    \"Step 5 - Output\": \"Return the modified grid with updated distances for all empty rooms.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"rooms\": [\n          [\n            2147483647,\n            -1,\n            0,\n            2147483647\n          ],\n          [\n            2147483647,\n            2147483647,\n            2147483647,\n            -1\n          ],\n          [\n            2147483647,\n            -1,\n            2147483647,\n            -1\n          ],\n          [\n            0,\n            -1,\n            2147483647,\n            2147483647\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          3,\n          -1,\n          0,\n          1\n        ],\n        [\n          2,\n          2,\n          1,\n          -1\n        ],\n        [\n          1,\n          -1,\n          2,\n          -1\n        ],\n        [\n          0,\n          -1,\n          3,\n          4\n        ]\n      ],\n      \"explanation\": \"Distances are calculated from the nearest gate using BFS.\"\n    },\n    {\n      \"input\": {\n        \"rooms\": [\n          [\n            -1\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          -1\n        ]\n      ],\n      \"explanation\": \"The grid contains only walls, so no updates are needed.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_size\": \"1 <= m, n <= 250\",\n    \"cell_values\": \"rooms[i][j] is either -1, 0, or 2147483647\",\n    \"distance_limit\": \"Distances do not exceed 2147483647 (INF).\"\n  },\n  \"follow_up\": \"Can you further optimize the BFS implementation to reduce memory usage when working with very large grids?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the longest common prefix among strings in an array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of strings `strs`, write a function to find the longest common prefix among all strings in the array. If no common prefix exists, return an empty string `\\\"\\\"`.\",\n  \"objective\": \"Design an efficient algorithm to determine the longest common prefix by comparing the strings in the array. Optimize the solution to handle cases where the array contains many strings or strings with varying lengths.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that a common prefix is the starting sequence of characters that all strings in the array share. The task requires comparing characters across the strings to find the longest such sequence.\",\n    \"Step 2 - Initial Approach\": \"Iteratively compare characters at the same position across all strings. Stop as soon as a mismatch is found or the end of the shortest string is reached.\",\n    \"Step 3 - Edge Cases\": \"Handle edge cases like an array with a single string (the prefix is the string itself), strings with no common prefix, and arrays with empty strings.\",\n    \"Step 4 - Output\": \"Return the longest common prefix as a string or an empty string if no common prefix exists.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"strs\": [\n          \"flower\",\n          \"flow\",\n          \"flight\"\n        ]\n      },\n      \"output\": \"fl\",\n      \"explanation\": \"The longest common prefix among the strings is `\\\"fl\\\"`.\"\n    },\n    {\n      \"input\": {\n        \"strs\": [\n          \"dog\",\n          \"racecar\",\n          \"car\"\n        ]\n      },\n      \"output\": \"\",\n      \"explanation\": \"There is no common prefix among the strings, so the result is an empty string.\"\n    },\n    {\n      \"input\": {\n        \"strs\": [\n          \"interstellar\",\n          \"interstate\",\n          \"internet\"\n        ]\n      },\n      \"output\": \"inte\",\n      \"explanation\": \"The longest common prefix is `\\\"inte\\\"`.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= strs.length <= 200\",\n    \"string_length\": \"0 <= strs[i].length <= 200\",\n    \"characters\": \"All strings consist of lowercase English letters only.\"\n  },\n  \"follow_up\": \"Can you improve the solution to use divide and conquer or binary search to minimize the number of character comparisons?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum time difference in minutes between any two time points in a list, considering the circular nature of the clock."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a list of time points in 'HH:MM' format, find the minimum time difference in minutes between any two time points, accounting for the circular nature of the clock (e.g., the difference between '23:59' and '00:00' is 1 minute).\",\n  \"objective\": \"Implement an efficient solution that leverages bucket sort for linear-time sorting based on the known range of possible minute values within a 24-hour period (0-1439).\",\n  \"meta_prompt\": {\n    \"Step 1 - Parse Time Points\": \"For each time point in 'HH:MM' format, convert it to the total number of minutes since midnight (i.e., '23:59' becomes 1439, '00:00' becomes 0) and store these minute values in an array.\",\n    \"Step 2 - Bucket Sort using Array\": \"Initialize a boolean array `minutes` of size 1440 (for all possible minute values in 24 hours). For each parsed minute value, mark its corresponding index in the array as true. If any minute value is duplicated, return 0 immediately since two identical times mean the minimum possible difference is 0.\",\n    \"Step 3 - Find Minimum Difference\": \"Iterate through the `minutes` array, recording the minute indices where the value is true (indicating the presence of a time). Track the minimum difference between consecutive 'true' entries, while keeping track of the first and last minute entries. Calculate the circular difference between the first and last entries as well.\",\n    \"Step 4 - Return Result\": \"The final answer is the minimum value between the smallest difference of consecutive entries and the circular difference (from the last entry in the day back to the first entry).\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution handles the edge case where only two time points exist and adheres to constraints where `2 <= timePoints.length <= 2 * 10^4` and each `timePoints[i]` is in 'HH:MM' format. Confirm that the output is between 0 and 720 minutes, as required.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"timePoints\": [\n          \"23:59\",\n          \"00:00\"\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The minimum difference is 1 minute between '23:59' and '00:00'.\"\n    },\n    {\n      \"input\": {\n        \"timePoints\": [\n          \"00:00\",\n          \"23:59\",\n          \"00:00\"\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"Since '00:00' appears twice, the minimum difference is 0 minutes.\"\n    }\n  ],\n  \"constraints\": {\n    \"time_points_length\": \"2 <= timePoints.length <= 2 * 10^4\",\n    \"time_points_format\": \"Each time point is in 'HH:MM' format.\"\n  },\n  \"follow_up\": \"Explore optimizing space by using fewer variables or adapting the approach for cases where input ranges might exceed 24 hours or include seconds (e.g., 'HH:MM:SS').\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Make a class to keep string counts and return the string with the most or least counts."}, {"role": "assistant", "content": "{\n  \"title\": \"Design Data Structure for Minimum and Maximum Key Counts\",\n  \"description\": \"Design and implement a data structure that maintains a collection of strings with their respective counts and supports retrieving the string with the maximum and minimum counts in constant time.\",\n  \"methods\": [\n    {\n      \"name\": \"AllOne\",\n      \"description\": \"Initializes the data structure.\"\n    },\n    {\n      \"name\": \"inc\",\n      \"description\": \"Increments the count of the string `key` by 1. If the string does not exist, initializes it with a count of 1.\",\n      \"parameters\": [\n        {\n          \"name\": \"key\",\n          \"type\": \"String\",\n          \"description\": \"The string to increment the count for.\"\n        }\n      ],\n      \"output\": {\n        \"type\": \"null\",\n        \"description\": \"This method does not return anything.\"\n      }\n    },\n    {\n      \"name\": \"dec\",\n      \"description\": \"Decrements the count of the string `key` by 1. Removes the string from the data structure if its count reaches 0. It is guaranteed that the string exists in the data structure.\",\n      \"parameters\": [\n        {\n          \"name\": \"key\",\n          \"type\": \"String\",\n          \"description\": \"The string to decrement the count for.\"\n        }\n      ],\n      \"output\": {\n        \"type\": \"null\",\n        \"description\": \"This method does not return anything.\"\n      }\n    },\n    {\n      \"name\": \"getMaxKey\",\n      \"description\": \"Returns one of the strings with the maximum count. If no strings exist, returns an empty string.\",\n      \"parameters\": [],\n      \"output\": {\n        \"type\": \"String\",\n        \"description\": \"The string with the maximum count or an empty string if no strings exist.\"\n      }\n    },\n    {\n      \"name\": \"getMinKey\",\n      \"description\": \"Returns one of the strings with the minimum count. If no strings exist, returns an empty string.\",\n      \"parameters\": [],\n      \"output\": {\n        \"type\": \"String\",\n        \"description\": \"The string with the minimum count or an empty string if no strings exist.\"\n      }\n    }\n  ],\n  \"constraints\": [\n    \"`1 <= key.length <= 10`.\",\n    \"`key` consists of lowercase English letters.\",\n    \"Each `dec` call is guaranteed to have `key` existing in the data structure.\",\n    \"At most `5 * 10^4` calls will be made to the methods.\"\n  ],\n  \"examples\": [\n    {\n      \"input\": [\n        [\n          \"AllOne\",\n          \"inc\",\n          \"inc\",\n          \"getMaxKey\",\n          \"getMinKey\",\n          \"inc\",\n          \"getMaxKey\",\n          \"getMinKey\"\n        ],\n        [\n          [],\n          [\n            \"hello\"\n          ],\n          [\n            \"hello\"\n          ],\n          [],\n          [],\n          [\n            \"leet\"\n          ],\n          [],\n          []\n        ]\n      ],\n      \"output\": [\n        null,\n        null,\n        null,\n        \"hello\",\n        \"hello\",\n        null,\n        \"hello\",\n        \"leet\"\n      ],\n      \"explanation\": [\n        \"1. Initialize the data structure.\",\n        \"2. Increment 'hello', count becomes 1.\",\n        \"3. Increment 'hello', count becomes 2.\",\n        \"4. 'hello' has the maximum count, return 'hello'.\",\n        \"5. 'hello' has the minimum count, return 'hello'.\",\n        \"6. Increment 'leet', count becomes 1.\",\n        \"7. 'hello' still has the maximum count, return 'hello'.\",\n        \"8. 'leet' now has the minimum count, return 'leet'.\"\n      ]\n    }\n  ],\n  \"hints\": [\n    \"Use a combination of a hashmap for storing counts and a double-linked list for maintaining order of keys.\",\n    \"Ensure efficient updates to maintain constant time complexity for all operations.\",\n    \"Use an additional hashmap to track the nodes of keys in the linked list.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(1) average time complexity for all methods.\",\n    \"constraints\": \"Use space proportional to the number of keys.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find how many times the second string repeated `n2` times can fit into the first string repeated `n1` times."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given two strings `s1` and `s2`, along with integers `n1` and `n2`, representing repeated concatenations of the strings as `str1 = [s1, n1]` and `str2 = [s2, n2]`. Your task is to find the maximum integer `m` such that the concatenated string `str = [str2, m]` can be obtained from `str1` by removing some characters from `str1` without reordering the remaining characters.\",\n  \"objective\": \"Design an efficient algorithm to calculate the maximum value of `m`, ensuring that the solution scales well with large values of `n1` and `n2`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the relationship between `s1` and `s2` by checking how many times `s2` can be fully obtained from one instance of `s1`. Use this ratio to extrapolate for `n1` and `n2`.\",\n    \"Step 2 - Identify Subsequence Relationship\": \"Identify if and how often `s2` can be formed as a subsequence from `s1` by iterating over characters in `s1` while matching them with characters in `s2`.\",\n    \"Step 3 - Calculate Repeated Occurrences\": \"Determine how many complete repetitions of `s2` can fit into one `s1`, then scale this by the repetitions of `s1` and divide by `n2`.\",\n    \"Step 4 - Efficiency Considerations\": \"Optimize the search for subsequences using modular arithmetic or by identifying repeating patterns in `s1` and `s2` to avoid redundant calculations.\",\n    \"Step 5 - Handle Edge Cases\": \"Ensure the solution accounts for cases where `s1` cannot generate `s2` at all or where `n1` or `n2` are minimal (e.g., `n1 = 1` or `n2 = 1`).\",\n    \"Final Output\": \"Return the integer value of `m`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s1\": \"acb\",\n        \"n1\": 4,\n        \"s2\": \"ab\",\n        \"n2\": 2\n      },\n      \"output\": 2,\n      \"explanation\": \"One instance of `s1` can generate one `s2`. Repeating `s1` four times allows two full `s2` repetitions with n2 = 2.\"\n    },\n    {\n      \"input\": {\n        \"s1\": \"acb\",\n        \"n1\": 1,\n        \"s2\": \"acb\",\n        \"n2\": 1\n      },\n      \"output\": 1,\n      \"explanation\": \"One instance of `s1` exactly matches `s2`, so the maximum value of `m` is 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s1.length, s2.length <= 100\",\n    \"repetition_range\": \"1 <= n1, n2 <= 10^6\",\n    \"characters\": \"Both `s1` and `s2` consist of lowercase English letters only.\"\n  },\n  \"follow_up\": \"Can you further optimize your approach to identify patterns in repeated substrings of `s1` and `s2`, reducing computational overhead when `n1` and `n2` are large?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Build a binary tree from inorder and postorder arrays."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two integer arrays `inorder` and `postorder`, construct and return the binary tree they represent. The `inorder` array provides the left-root-right traversal of the tree, and the `postorder` array provides the left-right-root traversal.\",\n  \"objective\": \"Design an efficient algorithm to construct a binary tree from its inorder and postorder traversal arrays.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the last element in the postorder array is the root of the tree. Use the inorder array to divide the tree into left and right subtrees.\",\n    \"Step 2 - Recursive Construction\": \"Recursively identify the root node and split the inorder array into left and right subtrees. Adjust the postorder array to match the subtrees.\",\n    \"Step 3 - Index Mapping\": \"Use a hashmap to store the indices of elements in the inorder array for efficient subtree division.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider cases such as a single-node tree, highly unbalanced trees, or an empty tree.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(n) time by avoiding redundant traversal of arrays.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"inorder\": [\n          9,\n          3,\n          15,\n          20,\n          7\n        ],\n        \"postorder\": [\n          9,\n          15,\n          7,\n          20,\n          3\n        ]\n      },\n      \"output\": {\n        \"root\": [\n          3,\n          9,\n          20,\n          null,\n          null,\n          15,\n          7\n        ]\n      },\n      \"explanation\": \"The constructed tree has root 3, left subtree [9], and right subtree [20, 15, 7].\"\n    },\n    {\n      \"input\": {\n        \"inorder\": [\n          -1\n        ],\n        \"postorder\": [\n          -1\n        ]\n      },\n      \"output\": {\n        \"root\": [\n          -1\n        ]\n      },\n      \"explanation\": \"A single-node tree is constructed with root -1.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= inorder.length, postorder.length <= 3000\",\n    \"node_values\": \"-3000 <= inorder[i], postorder[i] <= 3000\",\n    \"properties\": \"All values in the arrays are unique, and the arrays represent the same tree.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Remove all duplicate nodes from a sorted linked list so each value appears only once."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `head` of a sorted linked list, remove all duplicate nodes such that each element appears only once. Return the modified linked list, which remains sorted.\",\n  \"objective\": \"Design an algorithm to traverse the sorted linked list and remove duplicate nodes, ensuring that each value appears only once while maintaining the list's sorted order.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves removing consecutive duplicate nodes from a sorted linked list. Since the list is sorted, duplicates will always appear consecutively.\",\n    \"Step 2 - Traverse the List\": \"Iterate through the linked list using a single pointer `current`. Compare the value of the current node with the next node and remove the next node if it contains a duplicate value.\",\n    \"Step 3 - Adjust Pointers\": \"If a duplicate is found, update the `next` pointer of the current node to skip the duplicate node. Otherwise, move to the next node.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution handles constraints such as a maximum of 300 nodes and values between -100 and 100 efficiently.\",\n    \"Step 5 - Return the Result\": \"Return the updated head of the linked list after removing duplicates.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          1,\n          2\n        ]\n      },\n      \"output\": [\n        1,\n        2\n      ],\n      \"explanation\": \"The duplicate value 1 is removed, leaving the unique values 1 and 2.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          1,\n          2,\n          3,\n          3\n        ]\n      },\n      \"output\": [\n        1,\n        2,\n        3\n      ],\n      \"explanation\": \"The duplicate values 1 and 3 are removed, leaving the unique values 1, 2, and 3.\"\n    },\n    {\n      \"input\": {\n        \"head\": []\n      },\n      \"output\": [],\n      \"explanation\": \"The input list is empty, so the output is also an empty list.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 300\",\n    \"value_range\": \"-100 <= Node.val <= 100\",\n    \"sorted_order\": \"The linked list is sorted in ascending order.\"\n  },\n  \"follow_up\": \"Can you modify the algorithm to handle unsorted linked lists without sorting them first?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the longest substring in a string that doesn't repeat."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s`, find the length of the longest substring that does not contain any repeating characters. A substring is a contiguous sequence of characters within the string. Your task is to design an efficient algorithm to determine the length of this longest substring.\",\n  \"objective\": \"Develop a solution using optimal techniques such as the sliding window approach to ensure efficiency for larger input sizes. The solution should run in linear time complexity, `O(n)`, and handle diverse edge cases effectively.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the input: the string `s` may include English letters, digits, symbols, and spaces. The goal is to identify the maximum length of a substring where no characters repeat.\",\n    \"Step 2 - Initial Approach\": \"Consider a brute force method by iterating through all substrings and checking for duplicates. However, this would result in `O(n^3)` complexity and is impractical for large inputs.\",\n    \"Step 3 - Optimal Solution with Sliding Window\": \"Use a two-pointer technique to maintain a sliding window over the input string. Use a hash map or set to track characters in the current window. Expand the window by moving one pointer and contract it by moving the other pointer when a duplicate character is found.\",\n    \"Step 4 - Output Format\": \"Return the length of the longest substring as an integer. Ensure the function handles edge cases such as empty strings, strings with all unique characters, or strings with identical characters.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Focus on achieving `O(n)` complexity by processing each character only once. Handle special cases like strings with spaces, symbols, or all unique characters.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"abcabcbb\"\n      },\n      \"output\": 3,\n      \"explanation\": \"The answer is \\\"abc\\\", which has a length of 3.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"bbbbb\"\n      },\n      \"output\": 1,\n      \"explanation\": \"The answer is \\\"b\\\", which has a length of 1.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"pwwkew\"\n      },\n      \"output\": 3,\n      \"explanation\": \"The answer is \\\"wke\\\", which has a length of 3. Note that \\\"pwke\\\" is not a valid substring.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"\"\n      },\n      \"output\": 0,\n      \"explanation\": \"The input string is empty, so the result is 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"s_length\": \"0 <= s.length <= 50,000\",\n    \"s_content\": \"s may include English letters, digits, symbols, and spaces.\"\n  },\n  \"follow_up\": \"Can you further optimize the solution to use minimal additional space while maintaining `O(n)` runtime?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Return numbers 1 to n in lexicographical order."}, {"role": "assistant", "content": "{\n  \"title\": \"Lexicographical Order of Numbers\",\n  \"description\": \"Generate all numbers in the range [1, n] sorted in lexicographical order.\",\n  \"objective\": \"Implement an efficient algorithm that generates the numbers in lexicographical order using O(n) time and O(1) extra space.\",\n  \"input\": {\n    \"name\": \"n\",\n    \"type\": \"integer\",\n    \"description\": \"The upper bound of the range of numbers to be sorted lexicographically.\",\n    \"constraints\": [\n      \"1 <= n <= 5 * 10^4\"\n    ]\n  },\n  \"output\": {\n    \"type\": \"array\",\n    \"description\": \"An array of numbers sorted in lexicographical order.\"\n  },\n  \"examples\": [\n    {\n      \"input\": \"n = 13\",\n      \"output\": \"[1,10,11,12,13,2,3,4,5,6,7,8,9]\",\n      \"explanation\": \"The numbers are ordered lexicographically: '1', '10', '11', ..., '9'.\"\n    },\n    {\n      \"input\": \"n = 2\",\n      \"output\": \"[1,2]\",\n      \"explanation\": \"Only two numbers exist in the range, and they are already lexicographically sorted.\"\n    }\n  ],\n  \"hints\": [\n    \"Traverse the numbers using a depth-first search (DFS) approach.\",\n    \"For each number x, consider the next number as x * 10 (if it does not exceed n) before incrementing.\",\n    \"Handle transitions properly when moving between different prefixes, such as 1 -> 2 or 9 -> 10.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Ensure the solution runs in O(n) time and uses O(1) extra space.\",\n    \"constraints\": \"Avoid sorting the numbers directly to minimize time and space complexity.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Calculate the probability that a knight remains on an `n x n` chessboard after making exactly `k` moves starting from a given position."}, {"role": "assistant", "content": "{\n  \"description\": \"Calculate the probability that a knight remains on an `n x n` chessboard after making exactly `k` moves starting from a given position `(row, column)`.\",\n  \"objective\": \"Use bottom-up dynamic programming with space optimization to calculate the probability of the knight remaining on the chessboard after `k` moves.\",\n  \"meta_prompt\": {\n    \"Step 1 - Define Directions\": \"List all possible knight moves as a set of direction pairs for vertical and horizontal displacements.\",\n    \"Step 2 - Initialize DP Tables\": \"Create two 2D arrays `prev_dp` and `curr_dp` of size `n x n` to store probabilities for the current and previous move. Initialize `prev_dp[row][column]` to 1 as the starting position.\",\n    \"Step 3 - Perform K Iterations\": \"Iterate through `k` moves to calculate probabilities for each square on the board using values from the previous move.\",\n    \"Step 4 - Update Current DP Table\": \"For each cell `(i, j)` on the board, calculate the probability using all valid knight moves from the previous move and store it in `curr_dp[i][j]`.\",\n    \"Step 5 - Swap DP Tables\": \"After processing each move, swap `prev_dp` and `curr_dp` to reuse memory for the next iteration.\",\n    \"Step 6 - Sum Probabilities\": \"After completing all moves, calculate the total probability by summing all values in `prev_dp`.\",\n    \"Step 7 - Return Result\": \"Return the total probability as the result.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 3,\n        \"k\": 2,\n        \"row\": 0,\n        \"column\": 0\n      },\n      \"output\": 0.0625,\n      \"explanation\": \"Starting at (0, 0), the knight can move to (1, 2) or (2, 1). From these positions, only certain moves keep it on the board. The total probability is 0.0625.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1,\n        \"k\": 0,\n        \"row\": 0,\n        \"column\": 0\n      },\n      \"output\": 1.0,\n      \"explanation\": \"Since no moves are made, the knight remains on the board with probability 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"board_size\": \"1 <= n <= 25\",\n    \"moves\": \"0 <= k <= 100\",\n    \"position\": \"0 <= row, column < n\"\n  },\n  \"follow_up\": \"Analyze the time complexity O(k\\u22c5n^2) and space complexity O(n^2) of this optimized approach and discuss potential improvements for larger chessboards or higher values of `k`.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum length of a contiguous subarray with an equal number of `0`s and `1`s in a binary array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a binary array `nums`, find the maximum length of a contiguous subarray with an equal number of `0`s and `1`s.\",\n  \"objective\": \"Implement an efficient solution that tracks counts of `0`s and `1`s using a hash map to determine the longest subarray where counts are balanced.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The problem requires finding the longest contiguous subarray where the number of `0`s equals the number of `1`s. Use cumulative counting of `0`s and `1`s to track balance.\",\n    \"Step 2 - Using Count and HashMap\": \"Define a count that increments by 1 for each `1` and decrements by 1 for each `0`. The balance between `0`s and `1`s is achieved whenever the same count is encountered again, signifying an equal number of `0`s and `1`s between those indices.\",\n    \"Step 3 - HashMap Storage\": \"Use a hash map to store the first occurrence of each count as `(count: index)`. If the count is encountered again, compute the subarray length by taking the difference between the current index and the stored index for this count, updating the maximum length.\",\n    \"Step 4 - Initializing Base Case\": \"Initialize the map with `{0: -1}` to handle cases where the balance is achieved starting from the beginning of the array.\",\n    \"Step 5 - Complexity and Constraints\": \"The solution should operate in O(n) time, leveraging the hash map for constant-time lookups, and should handle up to `10^5` elements efficiently.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution handles constraints `1 <= nums.length <= 10^5` correctly, especially for large inputs with alternating patterns of `0`s and `1`s.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          1\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"[0, 1] is the longest contiguous subarray with an equal number of `0`s and `1`s.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          1,\n          0\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The longest subarrays with equal `0`s and `1`s are either `[0, 1]` or `[1, 0]`.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length_range\": \"1 <= nums.length <= 10^5\",\n    \"element_value\": \"nums[i] is either 0 or 1\"\n  },\n  \"follow_up\": \"Could you extend this approach to handle multiple types of balances, such as arrays with more than two unique values?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the longest line of 1s in a matrix in any direction."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `m x n` binary matrix `mat`, find the length of the longest line of consecutive ones in any direction (horizontal, vertical, diagonal, or anti-diagonal).\",\n  \"objective\": \"Implement a solution that uses a dynamic programming approach with optimized space to track consecutive ones in each direction efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize DP Arrays\": \"Create a 2D array `dp` where each entry `dp[i][j]` is a list of four integers representing the longest consecutive line ending at `mat[i][j]` in four directions: horizontal, vertical, diagonal, and anti-diagonal. Each `dp[i][j]` should initially contain zeroes.\",\n    \"Step 2 - Update DP Arrays per Position\": \"Traverse each cell in `mat`. For each `mat[i][j]` that is 1, update the values in `dp[i][j]` based on previous cells: (1) `horizontal` as `dp[i][j-1][0] + 1` if j > 0, (2) `vertical` as `dp[i-1][j][1] + 1` if i > 0, (3) `diagonal` as `dp[i-1][j-1][2] + 1` if both i > 0 and j > 0, and (4) `anti-diagonal` as `dp[i-1][j+1][3] + 1` if both i > 0 and j < n - 1.\",\n    \"Step 3 - Track Maximum Line Length\": \"During each update, check if the new values in `dp[i][j]` exceed the current maximum. If any do, update `maxLength` accordingly.\",\n    \"Final Check - Constraints Verification\": \"Ensure the solution is efficient given constraints where `m * n` can reach up to 10^4, avoiding excessive memory usage and ensuring each cell computation takes constant time.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"mat\": [\n          [\n            0,\n            1,\n            1,\n            0\n          ],\n          [\n            0,\n            1,\n            1,\n            0\n          ],\n          [\n            0,\n            0,\n            0,\n            1\n          ]\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The longest line is a diagonal line of three ones.\"\n    },\n    {\n      \"input\": {\n        \"mat\": [\n          [\n            1,\n            1,\n            1,\n            1\n          ],\n          [\n            0,\n            1,\n            1,\n            0\n          ],\n          [\n            0,\n            0,\n            0,\n            1\n          ]\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"The longest line is a horizontal line of four ones.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size\": \"1 <= m, n <= 10^4\",\n    \"matrix_elements\": \"Each `mat[i][j]` is either 0 or 1.\"\n  },\n  \"follow_up\": \"Consider further optimizing space by maintaining only the necessary previous row values instead of a full 2D `dp` matrix.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the smallest missing positive integer in an array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an unsorted integer array `nums`, return the smallest missing positive integer. The solution must run in `O(n)` time complexity and use constant extra space.\",\n  \"objective\": \"Design an efficient algorithm to find the smallest missing positive integer in `nums`, adhering to the constraints of `O(n)` runtime and constant space usage.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task requires identifying the smallest missing positive integer starting from 1. Negative numbers and values greater than the length of the array can be ignored.\",\n    \"Step 2 - Use Index Mapping\": \"Rearrange elements in the array such that each positive integer `i` is placed at index `i - 1` if possible. This ensures that the array partially acts as a hash map.\",\n    \"Step 3 - Identify the Missing Integer\": \"After rearrangement, iterate through the array to find the first index `i` where `nums[i] != i + 1`. The smallest missing positive integer is `i + 1`.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases where all positive integers from `1` to `n` are present, or the array contains only negative numbers or zeros.\",\n    \"Step 5 - Constraints Compliance\": \"Ensure the solution works within the constraints of `1 <= nums.length <= 10^5` and `-2^31 <= nums[i] <= 2^31 - 1`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          0\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The numbers 1 and 2 are present, so the smallest missing positive integer is 3.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          4,\n          -1,\n          1\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The numbers 1 and 3 are present, so the smallest missing positive integer is 2.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          7,\n          8,\n          9,\n          11,\n          12\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The array does not contain any of the smallest positive integers starting from 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10^5\",\n    \"element_range\": \"-2^31 <= nums[i] <= 2^31 - 1\",\n    \"time_and_space\": \"The solution must run in O(n) time and use constant extra space.\"\n  },\n  \"follow_up\": \"Can you modify your solution to efficiently handle additional requirements, such as returning all missing positive integers up to a given maximum value?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find elements appearing more than \u230an/3\u230b times."}, {"role": "assistant", "content": "{\n  \"description\": \"Find all elements in an array that appear more than \\u230an/3\\u230b times.\",\n  \"objective\": \"Identify elements whose frequency is greater than \\u230an/3\\u230b using an efficient algorithm.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Counters\": \"Use a voting mechanism to identify potential candidates.\",\n    \"Step 2 - Verify Candidates\": \"Count occurrences of potential candidates to confirm if they satisfy the condition.\",\n    \"Step 3 - Output Result\": \"Return a list of elements appearing more than \\u230an/3\\u230b times.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          2,\n          3\n        ]\n      },\n      \"output\": [\n        3\n      ],\n      \"explanation\": \"Element 3 appears more than \\u230a3/3\\u230b = 1 time.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1\n        ]\n      },\n      \"output\": [\n        1\n      ],\n      \"explanation\": \"Element 1 appears more than \\u230a1/3\\u230b = 0 times.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2\n        ]\n      },\n      \"output\": [\n        1,\n        2\n      ],\n      \"explanation\": \"Both elements appear more than \\u230a2/3\\u230b = 0 times.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"1 <= nums.length <= 5 * 10^4\",\n    \"value_range\": \"-10^9 <= nums[i] <= 10^9\",\n    \"output_format\": \"Elements may appear in any order.\"\n  },\n  \"follow_up\": \"Can you solve this in O(n) time complexity using O(1) space?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the longest mountain subarray in an array of integers `arr`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `arr`, you are tasked with finding the length of the longest subarray that forms a mountain. A mountain array is defined by the following properties: it must contain at least three elements, with a peak at some index `i` (where `0 < i < arr.length - 1`), such that the elements increase to `i` and then decrease after `i`. If no mountain array exists, return `0`.\",\n  \"objective\": \"Design an efficient algorithm to find the length of the longest mountain subarray. The solution should ideally be able to solve this problem in a single pass over the array and use O(1) extra space.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Start by understanding the structure of a mountain array. The subarray must first strictly increase and then strictly decrease. Identify the peak element in the array, which serves as the highest point in the mountain.\",\n    \"Step 2 - Initial Approach\": \"You can iterate over the array and for each element, check if it can be the peak of a mountain by verifying that the elements to its left are strictly increasing and the elements to its right are strictly decreasing.\",\n    \"Step 3 - Optimized Solution\": \"Instead of checking all potential peaks in multiple passes, consider using a single pass to identify potential peaks and then expand outward to check for increasing and decreasing sequences. This approach ensures you scan the array only once, achieving O(n) time complexity.\",\n    \"Step 4 - Output Format\": \"Return the length of the longest mountain subarray, or `0` if no such subarray exists.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure the solution works in O(n) time and uses O(1) space. Handle edge cases where the array has fewer than three elements or no valid mountain subarrays.\",\n    \"Final Check - Constraints Verification\": \"The solution must work within the given constraints: 1 <= arr.length <= 10^4 and 0 <= arr[i] <= 10^4.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"arr\": [\n          2,\n          1,\n          4,\n          7,\n          3,\n          2,\n          5\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"The largest mountain is [1, 4, 7, 3, 2] with length 5.\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          2,\n          2,\n          2\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"There is no valid mountain array in this case.\"\n    }\n  ],\n  \"constraints\": {\n    \"arr_length\": \"1 <= arr.length <= 10^4\",\n    \"arr_elements_range\": \"0 <= arr[i] <= 10^4\"\n  },\n  \"follow_up\": \"Can you solve it using only one pass and O(1) space?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given an array of logs. The logs are space-delimited strings of words. Sort the logs with letter-logs first and digit-logs later. The letter-logs should be sorted by the content, and the digit-logs should stay in the same order."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an array of `logs`. Each log is a space-delimited string of words, where the first word is the identifier. There are two types of logs: Letter-logs and Digit-logs. Your task is to reorder these logs based on the following conditions:\\n\\n1. The Letter-logs should come before the Digit-logs.\\n2. The Letter-logs should be sorted lexicographically by their content (i.e., the part of the log after the identifier). If the contents are the same, then sort by their identifiers.\\n3. The Digit-logs should maintain their relative ordering in the list.\\n\\nReturn the final order of the logs after applying the above conditions.\",\n  \"objective\": \"Reorder the logs so that all Letter-logs come before the Digit-logs, with proper sorting of the Letter-logs and maintaining the relative order of the Digit-logs.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understanding Log Types\": \"A log can either be a Letter-log, where the content consists of lowercase English letters, or a Digit-log, where the content consists of digits. Identifiers precede the content in both types of logs.\",\n    \"Step 2 - Sorting Criteria\": \"Letter-logs should be sorted lexicographically based on their content, and in case of ties, by their identifier. The Digit-logs should retain their original order in the array.\",\n    \"Step 3 - Plan\": \"Separate the Letter-logs and Digit-logs, sort the Letter-logs as per the defined criteria, and then concatenate the sorted Letter-logs with the Digit-logs to get the final order.\",\n    \"Step 4 - Constraints Consideration\": \"The number of logs can be up to 100, so sorting and separating them should be efficient enough to handle this size. The string length of each log is at most 100 characters, so sorting the logs based on content and identifier should be manageable.\"\n  },\n  \"examples\": [\n    {\n      \"input\": [\n        \"dig1 8 1 5 1\",\n        \"let1 art can\",\n        \"dig2 3 6\",\n        \"let2 own kit dig\",\n        \"let3 art zero\"\n      ],\n      \"output\": [\n        \"let1 art can\",\n        \"let3 art zero\",\n        \"let2 own kit dig\",\n        \"dig1 8 1 5 1\",\n        \"dig2 3 6\"\n      ],\n      \"explanation\": \"The Letter-logs ('let1', 'let2', 'let3') are sorted lexicographically by their content. The Digit-logs ('dig1', 'dig2') maintain their relative order.\"\n    },\n    {\n      \"input\": [\n        \"a1 9 2 3 1\",\n        \"g1 act car\",\n        \"zo4 4 7\",\n        \"ab1 off key dog\",\n        \"a8 act zoo\"\n      ],\n      \"output\": [\n        \"g1 act car\",\n        \"a8 act zoo\",\n        \"ab1 off key dog\",\n        \"a1 9 2 3 1\",\n        \"zo4 4 7\"\n      ],\n      \"explanation\": \"The Letter-logs ('g1', 'a8', 'ab1') are sorted lexicographically. The Digit-logs ('a1', 'zo4') maintain their relative order.\"\n    }\n  ],\n  \"constraints\": {\n    \"logs_length_range\": \"1 <= logs.length <= 100\",\n    \"log_length_range\": \"3 <= logs[i].length <= 100\",\n    \"identifier_and_content\": \"Each log contains an identifier and at least one word after the identifier. The tokens are separated by a single space.\"\n  },\n  \"follow_up\": \"Can you optimize the sorting of the logs, especially when handling a larger number of logs? Consider the time complexity of sorting and its impact on performance for edge cases.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a string forms an additive sequence."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `num` consisting of only digits, determine whether it can form a valid additive sequence. An additive sequence is defined as a sequence of numbers where each number (starting from the third) is the sum of the two preceding numbers. The sequence must contain at least three numbers, and no number in the sequence can have leading zeros unless it is '0' itself.\",\n  \"objective\": \"Design an efficient algorithm to verify if a string represents a valid additive sequence, ensuring that large numbers and leading zeros are handled correctly.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that an additive sequence must satisfy:\\n1. Each number in the sequence (except the first two) equals the sum of the two preceding numbers.\\n2. Numbers cannot have leading zeros unless they are exactly '0'.\\n3. The sequence must contain at least three numbers.\",\n    \"Step 2 - Candidate Splits\": \"Iterate over all possible ways to split the string into the first two numbers. For each split:\\n1. Ensure that both numbers do not have leading zeros.\\n2. Check if the remaining part of the string can form a valid additive sequence starting with these two numbers.\",\n    \"Step 3 - Sequence Validation\": \"Use a loop to verify that the sum of the first two numbers matches the next number in the sequence. Continue this process for the remaining digits.\",\n    \"Step 4 - Early Termination\": \"If at any point the sequence is invalid, stop further checks and try the next candidate split.\",\n    \"Step 5 - Output Format\": \"Return `true` if at least one valid sequence is found, otherwise return `false`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": \"112358\",\n      \"output\": true,\n      \"explanation\": \"The sequence 1, 1, 2, 3, 5, 8 satisfies the additive property: 1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8.\"\n    },\n    {\n      \"input\": \"199100199\",\n      \"output\": true,\n      \"explanation\": \"The sequence 1, 99, 100, 199 satisfies the additive property: 1 + 99 = 100, 99 + 100 = 199.\"\n    },\n    {\n      \"input\": \"1023\",\n      \"output\": false,\n      \"explanation\": \"The sequence 1, 0, 23 is invalid due to the leading zero in '0'.\"\n    },\n    {\n      \"input\": \"0235813\",\n      \"output\": false,\n      \"explanation\": \"The sequence cannot start with a leading zero in '02'.\"\n    }\n  ],\n  \"constraints\": {\n    \"length_constraint\": \"1 <= num.length <= 35\",\n    \"input_characters\": \"The input string consists only of digits.\",\n    \"leading_zeros\": \"Numbers cannot have leading zeros unless the number is exactly '0'.\"\n  },\n  \"follow_up\": \"Discuss how to handle cases where the numbers in the sequence are very large and may cause integer overflow. Consider simulating large integer operations using strings or a language-specific big integer library.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a grid and a list of hits, return the number of fallen bricks after each hit."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a binary grid where each 1 represents a brick and each 0 represents an empty space. You also have a sequence of brick erasures, and after each erasure, certain bricks may fall if they are no longer stable. A brick is stable if it is connected to the top of the grid or if at least one of its adjacent bricks is stable. You need to return an array where each element represents the number of bricks that fall after a specific erasure is applied. A brick falls immediately once it becomes unstable due to an erasure.\",\n  \"objective\": \"Design an efficient solution to simulate the erasure process, determine which bricks fall, and return the count of fallen bricks after each erasure. Optimize for performance considering the constraints, particularly the large number of erasures.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The grid represents a set of bricks arranged in a 2D array, where each brick is either stable or unstable. If a brick is removed, the removal may cause other bricks to become unstable and fall. The goal is to simulate this process and return the number of bricks that fall after each erasure.\",\n    \"Step 2 - Key Concepts\": \"To determine which bricks fall, we need to identify stable bricks before and after each erasure. A brick is stable if it's connected to the top of the grid or has at least one adjacent stable brick. We need to use efficient graph traversal techniques to simulate the erasure process.\",\n    \"Step 3 - Approach\": \"Use Depth-First Search (DFS) or Breadth-First Search (BFS) to traverse and identify stable bricks. Mark bricks as stable or unstable before and after each erasure, and count how many bricks fall after each operation.\",\n    \"Step 4 - Solution Strategy\": \"1. First, simulate all erasures and mark the unstable bricks. 2. Then, for each erasure, check if it affects the stability of neighboring bricks. 3. Use DFS/BFS to find and count all unstable bricks that fall as a result of the erasure. 4. Return the count of fallen bricks for each erasure.\",\n    \"Step 5 - Optimizations\": \"The grid size can be large, and there can be up to 40,000 erasures. A brute force approach for each erasure would be too slow, so a more optimized approach that works in amortized time is necessary.\",\n    \"Step 6 - Final Solution\": \"The solution should have a time complexity of O(m * n + hits.length) where m is the number of rows and n is the number of columns in the grid, and hits.length is the number of erasures.\",\n    \"Step 7 - Edge Case Handling\": \"Consider cases where no bricks fall after an erasure, or where the erasure is on an already empty space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            0,\n            0,\n            0\n          ],\n          [\n            1,\n            1,\n            1,\n            0\n          ]\n        ],\n        \"hits\": [\n          [\n            1,\n            0\n          ]\n        ]\n      },\n      \"output\": [\n        2\n      ],\n      \"explanation\": \"After erasing the brick at (1, 0), two bricks fall because they are no longer stable.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            0,\n            0,\n            0\n          ],\n          [\n            1,\n            1,\n            0,\n            0\n          ]\n        ],\n        \"hits\": [\n          [\n            1,\n            1\n          ],\n          [\n            1,\n            0\n          ]\n        ]\n      },\n      \"output\": [\n        0,\n        0\n      ],\n      \"explanation\": \"After erasing the bricks at (1, 1) and (1, 0), no bricks fall because all remaining bricks are stable.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_dimensions\": \"1 <= m, n <= 200\",\n    \"grid_values\": \"grid[i][j] is either 0 or 1\",\n    \"hits_length\": \"1 <= hits.length <= 4 * 10^4\",\n    \"hits_coordinates\": \"0 <= xi <= m - 1, 0 <= yi <= n - 1\",\n    \"hits_uniqueness\": \"All (xi, yi) are unique\"\n  },\n  \"follow_up\": \"How can you optimize the solution further if the grid size is increased beyond the current constraint?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given an integer `n`, find the smallest prime palindrome greater than or equal to `n`."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an integer `n`. Your task is to find the smallest **prime palindrome** that is greater than or equal to `n`. A prime palindrome is a number that is both a prime and a palindrome.\",\n  \"objective\": \"The goal is to return the smallest number that meets the conditions of being both a prime number and a palindrome, starting from `n`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The task is to find a number that satisfies two properties: it is prime (divisible only by 1 and itself), and it is a palindrome (it reads the same forwards and backwards). The output must be the smallest such number greater than or equal to `n`.\",\n    \"Step 2 - Approach\": \"To solve this problem, we can first check if a number is a palindrome by comparing it with its reverse. Then, we check if the number is prime by testing divisibility. We start from `n` and iterate upwards until we find a number that meets both criteria.\",\n    \"Step 3 - Output Format\": \"Return the smallest prime palindrome number greater than or equal to `n`.\",\n    \"Step 4 - Code Efficiency and Edge Cases\": \"This problem asks for a solution in the range [2, 2 * 10^8]. A brute force approach that checks each number individually might not be efficient enough. We need to consider optimized methods to check for prime numbers and palindrome properties. Given the constraints, the solution should work for large values of `n`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 6\n      },\n      \"output\": 7,\n      \"explanation\": \"The smallest prime palindrome greater than or equal to 6 is 7, which is both a prime and a palindrome.\"\n    },\n    {\n      \"input\": {\n        \"n\": 8\n      },\n      \"output\": 11,\n      \"explanation\": \"The smallest prime palindrome greater than or equal to 8 is 11, which is both a prime and a palindrome.\"\n    },\n    {\n      \"input\": {\n        \"n\": 13\n      },\n      \"output\": 101,\n      \"explanation\": \"The smallest prime palindrome greater than or equal to 13 is 101, which is both a prime and a palindrome.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 10^8\",\n    \"valid_numbers\": \"The answer will always exist within the range [2, 2 * 10^8].\"\n  },\n  \"follow_up\": \"How can you optimize the solution for very large values of `n`?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the first unique character in a string."}, {"role": "assistant", "content": "{\n  \"title\": \"Find First Non-Repeating Character\",\n  \"description\": \"Identify the first character in a string `s` that does not repeat and return its index.\",\n  \"objective\": \"Efficiently find the index of the first non-repeating character using optimized data structures.\",\n  \"input\": {\n    \"name\": \"s\",\n    \"type\": \"string\",\n    \"description\": \"A string consisting of only lowercase English letters.\",\n    \"constraints\": [\n      \"1 <= s.length <= 10^5\",\n      \"s contains only lowercase English letters.\"\n    ]\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The index of the first non-repeating character, or -1 if no such character exists.\"\n  },\n  \"examples\": [\n    {\n      \"input\": \"s = 'leetcode'\",\n      \"output\": \"0\",\n      \"explanation\": \"'l' is the first character that does not repeat, and its index is 0.\"\n    },\n    {\n      \"input\": \"s = 'loveleetcode'\",\n      \"output\": \"2\",\n      \"explanation\": \"'v' is the first character that does not repeat, and its index is 2.\"\n    },\n    {\n      \"input\": \"s = 'aabb'\",\n      \"output\": \"-1\",\n      \"explanation\": \"No non-repeating character exists in the string.\"\n    }\n  ],\n  \"hints\": [\n    \"Use a hash map or an array to count the frequency of each character in the string.\",\n    \"Iterate over the string a second time to find the first character with a frequency of 1.\",\n    \"Optimize to ensure O(n) time complexity.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(n) time complexity with O(1) space (using a fixed-size array for character counts).\",\n    \"constraints\": \"Avoid unnecessary iterations or space usage for scalability.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Insert a new value into a binary search tree and return the updated tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Insert a new value into a binary search tree (BST) while maintaining its properties and return the root of the modified BST.\",\n  \"objective\": \"Use recursion to find the correct position in the BST for the new value and insert it while preserving the BST structure.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Check if the current `root` is `null`. If it is, create a new node with the given `val` and return it as the new subtree.\",\n    \"Step 2\": \"If `val < root.val`, recursively call the insertion function on the left subtree (`root.left`) and assign the result back to `root.left`.\",\n    \"Step 3\": \"If `val > root.val`, recursively call the insertion function on the right subtree (`root.right`) and assign the result back to `root.right`.\",\n    \"Step 4\": \"Return the `root` after completing the insertion.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          4,\n          2,\n          7,\n          1,\n          3\n        ],\n        \"val\": 5\n      },\n      \"output\": [\n        4,\n        2,\n        7,\n        1,\n        3,\n        5\n      ],\n      \"explanation\": \"The value 5 is inserted into the right subtree of node 4 and becomes the left child of node 7.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          40,\n          20,\n          60,\n          10,\n          30,\n          50,\n          70\n        ],\n        \"val\": 25\n      },\n      \"output\": [\n        40,\n        20,\n        60,\n        10,\n        30,\n        50,\n        70,\n        null,\n        null,\n        25\n      ],\n      \"explanation\": \"The value 25 is inserted into the right subtree of node 20 and becomes the left child of node 30.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          4,\n          2,\n          7,\n          1,\n          3\n        ],\n        \"val\": 5\n      },\n      \"output\": [\n        4,\n        2,\n        7,\n        1,\n        3,\n        5\n      ],\n      \"explanation\": \"The value 5 is inserted as a left child of 7 in the BST.\"\n    }\n  ],\n  \"constraints\": {\n    \"tree_size\": \"0 <= number of nodes <= 10^4\",\n    \"node_value_range\": \"-10^8 <= Node.val <= 10^8\",\n    \"new_value_range\": \"-10^8 <= val <= 10^8\",\n    \"value_uniqueness\": \"All `Node.val` are unique, and the `val` to insert does not exist in the original BST.\"\n  },\n  \"follow_up\": \"Analyze the time complexity of the recursive approach and discuss how it can be optimized for highly unbalanced BSTs.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a string is a palindrome after removing special characters."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s`, determine if it is a palindrome after converting all uppercase letters to lowercase and removing all non-alphanumeric characters. A palindrome reads the same forward and backward.\",\n  \"objective\": \"Design an efficient algorithm to check if a given string is a valid palindrome.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves preprocessing the string to remove non-alphanumeric characters and convert all characters to lowercase.\",\n    \"Step 2 - Two-Pointer Approach\": \"Use two pointers to compare characters from the beginning and end of the string, moving inward.\",\n    \"Step 3 - Handle Edge Cases\": \"Handle cases such as an empty string or a string with only special characters.\",\n    \"Step 4 - Optimize\": \"Ensure the algorithm runs in O(n) time with O(1) extra space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"A man, a plan, a canal: Panama\"\n      },\n      \"output\": true,\n      \"explanation\": \"After preprocessing, the string becomes 'amanaplanacanalpanama', which is a palindrome.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"race a car\"\n      },\n      \"output\": false,\n      \"explanation\": \"After preprocessing, the string becomes 'raceacar', which is not a palindrome.\"\n    },\n    {\n      \"input\": {\n        \"s\": \" \"\n      },\n      \"output\": true,\n      \"explanation\": \"An empty string reads the same forward and backward.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 2 * 10^5\",\n    \"characters\": \"s consists only of printable ASCII characters.\"\n  },\n  \"follow_up\": \"Can you achieve O(1) space complexity while checking for palindrome validity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Design a method to calculate stock price span."}, {"role": "assistant", "content": "{\n  \"description\": \"You are tasked with designing a class `StockSpanner` that calculates the span of a stock's price. The span for a given day is the maximum number of consecutive days (starting from that day and going backward) for which the stock price was less than or equal to the price of that day.\",\n  \"objective\": \"Design the `StockSpanner` class with a `next(price)` method that returns the span of the stock price for the current day. The class should handle multiple calls to `next(price)` and efficiently calculate the span of the price based on the given logic.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Each time you receive a new stock price, you need to calculate the span, which is how many consecutive days, including the current day, the stock price was less than or equal to the given price.\",\n    \"Step 2 - Design Considerations\": \"The `next(price)` method should return the span of the stock for the current day based on previously entered prices. You need to efficiently calculate the span without recalculating it for each day individually. This suggests using a stack-based approach to store previous prices and their respective spans.\",\n    \"Step 3 - Efficient Solution\": \"Use a stack to track the indices of the stock prices in decreasing order. For each new price, compare it with the stack's top and pop the stack if the price is greater than or equal to the price at the top. Calculate the span using the difference between the current index and the index of the previous price from the stack.\",\n    \"Step 4 - Code Efficiency and Edge Cases\": \"The stack-based solution allows you to calculate the span in O(1) for each price while ensuring that the overall time complexity for multiple calls to `next(price)` is O(n), where n is the number of calls. This solution efficiently handles cases where the stock price is much higher or lower than previous prices.\",\n    \"Step 5 - Handling Large Inputs\": \"Ensure that your solution can efficiently handle the maximum constraints, including up to 10,000 calls to `next(price)`, and stock prices up to 10^5.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the class handles all constraints and edge cases, such as consecutive increasing or decreasing prices, and can process up to 10,000 calls within the time limits.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"calls\": [\n          \"StockSpanner\",\n          \"next\",\n          \"next\",\n          \"next\",\n          \"next\",\n          \"next\",\n          \"next\",\n          \"next\"\n        ],\n        \"arguments\": [\n          [],\n          [\n            100\n          ],\n          [\n            80\n          ],\n          [\n            60\n          ],\n          [\n            70\n          ],\n          [\n            60\n          ],\n          [\n            75\n          ],\n          [\n            85\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        1,\n        1,\n        1,\n        2,\n        1,\n        4,\n        6\n      ],\n      \"explanation\": \"For each call to `next(price)`, the span is calculated based on the stock prices seen so far. The span increases when the current price is greater than or equal to previous prices.\"\n    }\n  ],\n  \"constraints\": {\n    \"price_range\": \"1 <= price <= 10^5\",\n    \"max_calls\": \"At most 10^4 calls to `next(price)`\"\n  },\n  \"follow_up\": \"Can you optimize the solution further to handle even larger inputs or additional features?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Determine the number of possible statuses for `n` bulbs after a given number of button presses."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine the number of different possible statuses of `n` bulbs after performing exactly `presses` button presses using the given rules.\",\n  \"objective\": \"Simplify the problem by reducing `n` to `min(n, 3)` due to the repeating pattern of bulb toggling and use casework to compute the possible states based on the number of presses.\",\n  \"meta_prompt\": {\n    \"Step 1 - Reduce Problem Size\": \"Set `n = min(n, 3)` since the bulb toggling pattern repeats every 6 bulbs, and the first 3 bulbs determine the rest.\",\n    \"Step 2 - Analyze Transitions\": \"Denote the state of the bulbs as a tuple `(a, b, c)` representing the first three bulbs. The transitions correspond to XOR operations applied by the buttons.\",\n    \"Step 3 - Handle Edge Cases\": \"For `presses = 0`, return 1 since all bulbs remain `on`. For other values of `presses`, calculate possible states based on the transitions and constraints.\",\n    \"Step 4 - Case Analysis by Press Count\": \"Manually calculate the possible states for `presses = 1`, `presses = 2`, and `presses >= 3` to determine the maximum states achievable.\",\n    \"Step 5 - Return Result\": \"Return the number of possible states based on the analysis for `n` and `presses`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 1,\n        \"presses\": 1\n      },\n      \"output\": 2,\n      \"explanation\": \"The statuses are `[off]` and `[on]`.\"\n    },\n    {\n      \"input\": {\n        \"n\": 2,\n        \"presses\": 1\n      },\n      \"output\": 3,\n      \"explanation\": \"The statuses are `[off, off]`, `[on, off]`, and `[off, on]`.\"\n    },\n    {\n      \"input\": {\n        \"n\": 3,\n        \"presses\": 1\n      },\n      \"output\": 4,\n      \"explanation\": \"The statuses are `[off, off, off]`, `[off, on, off]`, `[on, off, on]`, and `[off, on, on]`.\"\n    }\n  ],\n  \"constraints\": {\n    \"bulb_count\": \"1 <= n <= 1000\",\n    \"presses_range\": \"0 <= presses <= 1000\"\n  },\n  \"follow_up\": \"Discuss how the reduction of `n` and case analysis make this problem scalable despite large constraints for `n` and `presses`.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count the number of ways to decode a digit string into letters using a given mapping."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s` containing only digits, calculate the total number of ways it can be decoded into letters using the mapping: 'A' -> '1', 'B' -> '2', ..., 'Z' -> '26'.\",\n  \"objective\": \"Design an efficient algorithm to calculate the number of valid decoding ways using dynamic programming.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the problem requires identifying all valid groupings of digits into 1- or 2-digit numbers and mapping them to letters. Leading zeros and invalid two-digit combinations (like '06') must be handled appropriately.\",\n    \"Step 2 - Recursive Approach with Memoization\": \"Use recursion with memoization to calculate the number of ways to decode a substring. At each step, decide whether to decode one digit or two digits, ensuring the numbers are valid.\",\n    \"Step 3 - Iterative Dynamic Programming\": \"Alternatively, use an iterative dynamic programming approach. Define `dp[i]` as the number of ways to decode the first `i` characters of the string. Update `dp[i]` based on the validity of single- and two-digit decodings.\",\n    \"Step 4 - Handle Edge Cases\": \"Account for cases like strings with leading zeros, strings of length 1, or strings that only contain valid single-digit mappings.\",\n    \"Step 5 - Constraints Compliance\": \"Ensure the solution handles constraints like string lengths up to 100 efficiently and avoids redundant calculations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"12\"\n      },\n      \"output\": 2,\n      \"explanation\": \"'12' can be decoded as 'AB' (1 2) or 'L' (12).\"\n    },\n    {\n      \"input\": {\n        \"s\": \"226\"\n      },\n      \"output\": 3,\n      \"explanation\": \"'226' can be decoded as 'BZ' (2 26), 'VF' (22 6), or 'BBF' (2 2 6).\"\n    },\n    {\n      \"input\": {\n        \"s\": \"06\"\n      },\n      \"output\": 0,\n      \"explanation\": \"The string '06' cannot be decoded because '06' is not a valid mapping.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 100\",\n    \"valid_characters\": \"The string contains only digits ('0'-'9').\",\n    \"output_range\": \"The number of decoding ways fits in a 32-bit integer.\"\n  },\n  \"follow_up\": \"How would you optimize the algorithm further to use O(1) space while maintaining O(n) time complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a preorder array represents a valid BST."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of unique integers `preorder`, determine if it represents the preorder traversal sequence of a binary search tree (BST). Return `true` if the sequence is valid, otherwise return `false`.\",\n  \"objective\": \"Design an efficient algorithm to validate the preorder traversal sequence of a BST. Aim to achieve linear time complexity and constant space complexity if possible.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the properties of a BST preorder traversal: nodes are visited in the order of root, left subtree, and right subtree. All values in the left subtree must be less than the root, and all values in the right subtree must be greater.\",\n    \"Step 2 - Initial Approach\": \"Simulate the preorder traversal by iterating through the array. Use a stack to keep track of nodes that are yet to find their right child.\",\n    \"Step 3 - Optimize for Constant Space\": \"Instead of using a stack, maintain a variable to track the smallest allowable value for the current subtree. Iterate through the array while checking constraints.\",\n    \"Step 4 - Edge Cases\": \"Handle cases such as a single element (always valid), an empty array (valid), and sequences with invalid left or right subtrees.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"preorder\": [\n          5,\n          2,\n          1,\n          3,\n          6\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The sequence represents a valid BST with root 5, left subtree [2, 1, 3], and right subtree [6].\"\n    },\n    {\n      \"input\": {\n        \"preorder\": [\n          5,\n          2,\n          6,\n          1,\n          3\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The value 6 appears in the left subtree of 5, violating the BST property.\"\n    },\n    {\n      \"input\": {\n        \"preorder\": [\n          10,\n          5,\n          1,\n          7,\n          40,\n          50\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The sequence represents a valid BST with root 10, left subtree [5, 1, 7], and right subtree [40, 50].\"\n    }\n  ],\n  \"constraints\": {\n    \"preorder_length\": \"1 <= preorder.length <= 10^4\",\n    \"preorder_values\": \"1 <= preorder[i] <= 10^4\",\n    \"unique_values\": \"All elements in `preorder` are unique.\"\n  },\n  \"follow_up\": \"Can you implement this solution with `O(n)` time complexity and `O(1)` space complexity using a single pass through the array?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Increment a number represented as an array by one."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a **large integer** represented as an integer array `digits`, where each `digits[i]` represents a digit in the integer, increment the large integer by one and return the resulting array of digits.\",\n  \"objective\": \"Design an efficient algorithm to increment the integer represented by the array while handling potential carryovers.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves simulating the addition of 1 to a large integer stored as an array. The addition may propagate a carry to the left.\",\n    \"Step 2 - Iterate from Least Significant Digit\": \"Traverse the array from right to left. Add 1 to the least significant digit and handle any carry. Stop when no carry is left or the traversal is complete.\",\n    \"Step 3 - Handle Edge Cases\": \"If there is a carry left after processing all digits (e.g., all digits are 9), prepend `1` to the array.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution handles constraints such as `1 <= digits.length <= 100` efficiently.\",\n    \"Step 5 - Optimize for Clarity\": \"Avoid unnecessary data structure conversions like turning the array into an integer and back to minimize memory usage.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"digits\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": [\n        1,\n        2,\n        4\n      ],\n      \"explanation\": \"The array represents 123. Incrementing by 1 gives 124.\"\n    },\n    {\n      \"input\": {\n        \"digits\": [\n          4,\n          3,\n          2,\n          1\n        ]\n      },\n      \"output\": [\n        4,\n        3,\n        2,\n        2\n      ],\n      \"explanation\": \"The array represents 4321. Incrementing by 1 gives 4322.\"\n    },\n    {\n      \"input\": {\n        \"digits\": [\n          9\n        ]\n      },\n      \"output\": [\n        1,\n        0\n      ],\n      \"explanation\": \"The array represents 9. Incrementing by 1 gives 10.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= digits.length <= 100\",\n    \"digit_range\": \"0 <= digits[i] <= 9\",\n    \"leading_zeros\": \"The array does not contain leading zeros.\"\n  },\n  \"follow_up\": \"Can you modify the algorithm to handle subtraction or arbitrary integer additions represented in a similar way?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given two arrays of numbers, return a mapping."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given two integer arrays `nums1` and `nums2`, where `nums2` is an anagram of `nums1`. Both arrays may contain duplicates. The task is to return an index mapping array `mapping`, where `mapping[i] = j` means that the `i`-th element in `nums1` appears in `nums2` at index `j`. If there are multiple valid mappings, return any of them.\",\n  \"objective\": \"Return an index mapping array that represents the mapping of elements from `nums1` to `nums2`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The task involves mapping each element in `nums1` to its corresponding index in `nums2`. Since `nums2` is an anagram of `nums1`, each element from `nums1` will appear exactly once in `nums2`, though the order may differ.\",\n    \"Step 2 - Constraints\": \"The arrays `nums1` and `nums2` are of the same length, and both contain integers within the specified range. There are no edge cases where an element in `nums1` is missing in `nums2` because `nums2` is an anagram of `nums1`.\",\n    \"Step 3 - Strategy\": \"To solve this problem, iterate through `nums1` and find the index of each element in `nums2`. Once found, store the index in the result array.\",\n    \"Step 4 - Efficient Solution Approach\": \"Use a dictionary to store the indices of elements in `nums2`, and then iterate through `nums1` to build the mapping array.\",\n    \"Step 5 - Edge Cases\": \"Handle cases where the arrays are small or contain duplicate elements. Ensure the solution works for arrays of different sizes within the given constraints.\",\n    \"Step 6 - Output Explanation\": \"The output should be an array of indices where each element in `nums1` is mapped to the corresponding index in `nums2`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums1\": [\n          12,\n          28,\n          46,\n          32,\n          50\n        ],\n        \"nums2\": [\n          50,\n          12,\n          32,\n          46,\n          28\n        ]\n      },\n      \"output\": [\n        1,\n        4,\n        3,\n        2,\n        0\n      ],\n      \"explanation\": \"For each element in `nums1`, find its index in `nums2`. The resulting mapping array is [1, 4, 3, 2, 0].\"\n    },\n    {\n      \"input\": {\n        \"nums1\": [\n          84,\n          46\n        ],\n        \"nums2\": [\n          84,\n          46\n        ]\n      },\n      \"output\": [\n        0,\n        1\n      ],\n      \"explanation\": \"In this case, `nums1` and `nums2` are already in the same order, so the output is [0, 1].\"\n    }\n  ],\n  \"constraints\": {\n    \"nums1_length\": \"1 <= nums1.length <= 100\",\n    \"nums2_length\": \"nums2.length == nums1.length\",\n    \"element_range\": \"0 <= nums1[i], nums2[i] <= 10^5\",\n    \"anagram_condition\": \"nums2 is an anagram of nums1.\"\n  },\n  \"follow_up\": \"If `nums2` is very large and performance is an issue, how would you optimize the solution?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given two integer arrays `preorder` and `postorder`. Reconstruct the binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given two integer arrays, `preorder` and `postorder`, which represent the preorder and postorder traversals of a binary tree with distinct values. Your task is to reconstruct the binary tree from these two arrays and return the root of the reconstructed binary tree. If there are multiple valid binary trees, any of them is acceptable.\",\n  \"objective\": \"Design an efficient solution to reconstruct the binary tree based on the given preorder and postorder traversal arrays.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The given arrays `preorder` and `postorder` represent two specific traversal orders of the same binary tree. In preorder traversal, the root is visited first, followed by the left subtree and then the right subtree. In postorder traversal, the left subtree is visited first, followed by the right subtree and then the root.\",\n    \"Step 2 - Recursive Approach\": \"Since the preorder traversal gives the root node first, and the postorder traversal gives the root node last, you can use these properties to recursively build the tree by identifying the root, splitting the arrays for the left and right subtrees, and constructing them in turn.\",\n    \"Step 3 - Efficient Construction\": \"To construct the tree, use the preorder array to identify the root of the current subtree and use the postorder array to determine the boundaries of the left and right subtrees.\",\n    \"Step 4 - Output Format\": \"Return the root node of the binary tree in the form of an array representation. The tree can be returned as a list of node values in level-order or preorder format, depending on the output requirements.\",\n    \"Step 5 - Constraints Consideration\": \"The tree size is relatively small (up to 30 nodes), so a recursive solution should be feasible. However, ensure that your solution is optimized for the given constraints to handle edge cases.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution works for edge cases, such as when the tree has only one node, and ensure that the constraints are respected. Ensure the tree is properly reconstructed using both `preorder` and `postorder` traversals.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"preorder\": [\n          1,\n          2,\n          4,\n          5,\n          3,\n          6,\n          7\n        ],\n        \"postorder\": [\n          4,\n          5,\n          2,\n          6,\n          7,\n          3,\n          1\n        ]\n      },\n      \"output\": [\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7\n      ],\n      \"explanation\": \"The binary tree is reconstructed as follows: the root is 1 (from preorder), and the left and right subtrees are recursively constructed from the respective arrays.\"\n    },\n    {\n      \"input\": {\n        \"preorder\": [\n          1\n        ],\n        \"postorder\": [\n          1\n        ]\n      },\n      \"output\": [\n        1\n      ],\n      \"explanation\": \"For a tree with a single node, both preorder and postorder arrays contain only the root node.\"\n    }\n  ],\n  \"constraints\": {\n    \"preorder_length\": \"1 <= preorder.length <= 30\",\n    \"preorder_values\": \"1 <= preorder[i] <= preorder.length\",\n    \"unique_values\": \"All values in both preorder and postorder are distinct\",\n    \"postorder_length\": \"postorder.length == preorder.length\",\n    \"postorder_values\": \"1 <= postorder[i] <= postorder.length\"\n  },\n  \"follow_up\": \"Can you implement a solution that avoids excessive recursion and efficiently handles the given constraints?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Move coins in a binary tree so each node has one coin."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given the `root` of a binary tree with `n` nodes, where each node has `node.val` coins. The total number of coins across all nodes is exactly `n`. In one move, you can choose two adjacent nodes and move one coin from one node to another (from parent to child or child to parent). Your goal is to return the minimum number of moves required to make every node have exactly one coin.\",\n  \"objective\": \"Design an algorithm that computes the minimum number of moves required to distribute the coins such that each node in the binary tree has exactly one coin.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We need to distribute coins in a binary tree such that each node ends up with exactly one coin. The total number of coins is fixed at `n`, and each node can start with a varying number of coins. The task is to calculate the minimum number of moves required to achieve the goal.\",\n    \"Step 2 - Approach\": \"One approach is to traverse the tree recursively and calculate the number of coins that need to be moved from each node. At each node, calculate the 'excess' or 'deficit' of coins, and move them to adjacent nodes, counting the moves as you go.\",\n    \"Step 3 - Recursive Strategy\": \"A depth-first search (DFS) can be used to traverse the tree from the leaves towards the root. At each node, compute the balance of coins: if the node has more than one coin, the surplus will be passed to its parent or children. If the node has fewer coins than needed, it will receive coins from its neighbors.\",\n    \"Step 4 - Output Format\": \"Return the total number of moves required to balance the coins across all nodes. Each move consists of transferring one coin between adjacent nodes.\",\n    \"Step 5 - Edge Cases\": \"Handle cases such as a single-node tree where no moves are required. Also, ensure that the solution works with trees of varying structures, from balanced trees to skewed ones.\",\n    \"Final Check - Constraints Verification\": \"The solution should run in O(n) time, where `n` is the number of nodes in the tree, to ensure efficiency even for the maximum input size of 100 nodes.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          0,\n          0\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"Starting with the root, one coin is moved to the left child, and one coin is moved to the right child, resulting in a total of 2 moves.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          0,\n          3,\n          0\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"In this case, we first move two coins from the left child to the root (2 moves), then move one coin from the root to the right child (1 move), for a total of 3 moves.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_nodes\": \"1 <= n <= 100\",\n    \"node_values\": \"0 <= Node.val <= n\",\n    \"total_coins\": \"The sum of all Node.val is exactly n\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm to ensure that each node is only visited once, achieving a time complexity of O(n)?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find all possible states of a string after flipping two `+` to `--`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `currentState` containing only `+` and `-`, simulate a single valid move in the Flip Game. A valid move involves flipping two consecutive `++` to `--`. Return all possible resulting states after one valid move, or return an empty list `[]` if no valid moves exist.\",\n  \"objective\": \"Design an efficient algorithm to iterate through the string, identify all valid moves, and generate all possible resulting states.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the rules for a valid move:\\n- Two consecutive `+` must be present to perform a flip.\\n- Flipping results in the two `+` becoming `--`.\",\n    \"Step 2 - Iteration Through the String\": \"Iterate through the `currentState` string, checking for occurrences of `++`.\\n- For each occurrence, generate a new string with the `++` flipped to `--`.\",\n    \"Step 3 - Result Compilation\": \"Collect all resulting states in a list. If no `++` is found, return an empty list.\",\n    \"Step 4 - Efficiency\": \"Ensure the solution runs in linear time, `O(n)`, by iterating through the string once and performing operations proportional to the number of valid moves.\",\n    \"Step 5 - Edge Cases\": \"Handle edge cases such as:\\n- Strings with no `++`.\\n- Strings of length 1 (e.g., `+` or `-`).\\n- Strings where all characters are `+` or `-`.\",\n    \"Step 6 - Output\": \"Return a list of all valid resulting states or an empty list if no valid moves exist.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"currentState\": \"++++\"\n      },\n      \"output\": [\n        \"--++\",\n        \"+--+\",\n        \"++--\"\n      ],\n      \"explanation\": \"Three valid moves can flip `++++` to `--++`, `+--+`, or `++--`.\"\n    },\n    {\n      \"input\": {\n        \"currentState\": \"+\"\n      },\n      \"output\": [],\n      \"explanation\": \"No valid moves exist in a single-character string.\"\n    },\n    {\n      \"input\": {\n        \"currentState\": \"++--\"\n      },\n      \"output\": [\n        \"----\"\n      ],\n      \"explanation\": \"One valid move flips `++` to `--`, resulting in `----`.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= currentState.length <= 500\",\n    \"characters\": \"`currentState` contains only `+` and `-`.\"\n  },\n  \"follow_up\": \"How would you extend this solution to generate all possible game states after any number of moves?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given a grid of 0's and 1's. Return the minimum number of moves to transform it into a chessboard."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an `n x n` binary grid `board`, where each element is either 0 or 1. The task is to transform the grid into a chessboard by swapping rows or columns. A chessboard board is defined as one where no two adjacent cells horizontally or vertically have the same value. The goal is to find the minimum number of swaps required to transform the grid into a valid chessboard, or return `-1` if it is impossible.\",\n  \"objective\": \"Return the minimum number of moves required to transform the grid into a chessboard. If the transformation is impossible, return `-1`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"A valid chessboard consists of alternating 0's and 1's both row-wise and column-wise. The allowed operations involve swapping any two rows or columns, and we need to find the fewest number of such operations to transform the given board into a chessboard. We must determine if the transformation is possible.\",\n    \"Step 2 - Observations\": \"For a grid to be transformed into a chessboard, there must be two valid row patterns: one starting with 0 and the other starting with 1. Similarly, there must be two valid column patterns. If the number of rows or columns that differ from these two patterns is not even, then the transformation is impossible.\",\n    \"Step 3 - Strategy\": \"First, check if the board can potentially be a valid chessboard by verifying that there are exactly two types of row and column patterns. Then, determine how many swaps are required by calculating how far the current grid differs from the desired row and column patterns.\",\n    \"Step 4 - Approach\": \"Check if the grid has only two unique row and column patterns. If there are more than two distinct row or column patterns, return `-1`. If valid patterns exist, count how many rows and columns need to be swapped to align with the two valid patterns.\",\n    \"Step 5 - Constraints Consideration\": \"The grid size can be as large as 30x30, so a brute force solution that compares row and column patterns and calculates swaps should perform efficiently for this input size.\",\n    \"Step 6 - Optimizing\": \"Efficient pattern matching can be done using counters for the two possible row and column types. By comparing the grid's rows and columns to these patterns, we can determine the minimum number of swaps required.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"board\": [\n          [\n            0,\n            1,\n            1,\n            0\n          ],\n          [\n            0,\n            1,\n            1,\n            0\n          ],\n          [\n            1,\n            0,\n            0,\n            1\n          ],\n          [\n            1,\n            0,\n            0,\n            1\n          ]\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"By swapping the first and second columns, and then swapping the second and third rows, we can form a valid chessboard.\"\n    },\n    {\n      \"input\": {\n        \"board\": [\n          [\n            0,\n            1\n          ],\n          [\n            1,\n            0\n          ]\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"The grid is already a valid chessboard, so no moves are needed.\"\n    },\n    {\n      \"input\": {\n        \"board\": [\n          [\n            1,\n            0\n          ],\n          [\n            1,\n            0\n          ]\n        ]\n      },\n      \"output\": -1,\n      \"explanation\": \"It is impossible to transform this grid into a valid chessboard by swapping rows or columns.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"2 <= n <= 30\",\n    \"element_range\": \"board[i][j] is either 0 or 1\"\n  },\n  \"follow_up\": \"What additional optimizations can be made if the board size increases beyond 30?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number of subarrays with a sum divisible by a given number k in the list."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array nums and an integer k, your task is to return the number of non-empty subarrays whose sum is divisible by k. A subarray is a contiguous part of the array, and your solution should count all valid subarrays where the sum of the elements is divisible by k.\",\n  \"objective\": \"Design an efficient algorithm to count the number of subarrays with a sum divisible by k. Ensure that the solution can handle larger inputs efficiently and avoids unnecessary computations.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Start by understanding the structure of the input: nums is an array with integer elements, and k is a single integer. The goal is to identify subarrays whose sum is divisible by k.\",\n    \"Step 2 - Initial Approach\": \"A brute force approach would be to check all possible subarrays and calculate their sums, but this would have O(n^2) time complexity, which may not be efficient for large arrays. Consider using a more optimized approach involving prefix sums and hashing.\",\n    \"Step 3 - Optimized Solution with Prefix Sums\": \"As you iterate through the array, maintain a running sum of the elements. Use a hash map to store the frequency of remainders when the sum is divided by k. This will allow you to quickly determine if there exists a subarray with a sum divisible by k.\",\n    \"Step 4 - Output Format\": \"Return the number of subarrays that meet the condition. The result should be an integer, representing the count of subarrays where the sum is divisible by k.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Focus on achieving O(n) time complexity by leveraging prefix sums and hash maps. Ensure that the solution handles edge cases, such as when nums contains negative numbers, and when the array is of minimal length.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution operates within the constraints: 1 <= nums.length <= 30,000 and -10^4 <= nums[i] <= 10^4, 2 <= k <= 10^4, and the algorithm runs efficiently for large arrays.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          4,\n          5,\n          0,\n          -2,\n          -3,\n          1\n        ],\n        \"k\": 5\n      },\n      \"output\": 7,\n      \"explanation\": \"There are 7 subarrays with a sum divisible by k = 5: [4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          5\n        ],\n        \"k\": 9\n      },\n      \"output\": 0,\n      \"explanation\": \"There are no subarrays with a sum divisible by 9 in this case.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 30,000\",\n    \"nums_elements_range\": \"-10^4 <= nums[i] <= 10^4\",\n    \"k_range\": \"2 <= k <= 10^4\"\n  },\n  \"follow_up\": \"Can you improve your solution to handle larger inputs, ensuring it operates in O(n) time complexity by utilizing prefix sums and hash maps?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a linked list is a palindrome."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if a singly linked list is a palindrome.\",\n  \"objective\": \"Return `true` if the linked list reads the same forward and backward, otherwise return `false`.\",\n  \"steps\": [\n    \"Traverse the linked list to calculate its length.\",\n    \"Split the list into two halves.\",\n    \"Reverse the second half of the list.\",\n    \"Compare the values in both halves to check for palindrome properties.\",\n    \"Return `true` if all values match, otherwise `false`.\"\n  ],\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2,\n          2,\n          1\n        ]\n      },\n      \"output\": true\n    },\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2\n        ]\n      },\n      \"output\": false\n    },\n    {\n      \"input\": {\n        \"head\": [\n          1\n        ]\n      },\n      \"output\": true\n    }\n  ],\n  \"constraints\": \"Optimize to O(n) time and O(1) space by reversing only part of the list.\",\n  \"follow_up\": \"How would you handle lists with extremely large sizes where memory usage is critical?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Rearrange the letters in a string `s` such that no two same letters are closer than `k`. If it's impossible, return an empty string."}, {"role": "assistant", "content": "{\n  \"title\": \"Rearrange String with Minimum Distance\",\n  \"description\": \"Rearrange a string such that the same characters are at least `k` distance apart. Return the rearranged string or an empty string if not possible.\",\n  \"objective\": \"Use efficient algorithms to rearrange characters in the string, satisfying the distance constraint between identical characters.\",\n  \"meta_prompt\": {\n    \"Step 1 - Analyze Input\": \"Parse the string `s` and integer `k` to validate constraints and determine character frequencies.\",\n    \"Step 2 - Manage Character Frequencies\": \"Use a priority queue (max heap) to prioritize characters with higher frequencies.\",\n    \"Step 3 - Arrange Characters\": \"Iteratively place characters in the result, ensuring a gap of at least `k` between identical characters. Use a queue to store temporarily unavailable characters.\",\n    \"Step 4 - Handle Impossibility\": \"If at any point the constraints cannot be met, return an empty string.\"\n  },\n  \"input\": {\n    \"name\": \"s\",\n    \"type\": \"string\",\n    \"description\": \"The input string consisting of only lowercase English letters.\",\n    \"constraints\": \"1 <= s.length <= 300000\"\n  },\n  \"parameters\": {\n    \"name\": \"k\",\n    \"type\": \"integer\",\n    \"description\": \"The minimum distance between the same characters.\",\n    \"constraints\": \"0 <= k <= s.length\"\n  },\n  \"output\": {\n    \"type\": \"string\",\n    \"description\": \"The rearranged string where the same characters are at least distance `k` apart, or an empty string if not possible.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"aabbcc\",\n        \"k\": 3\n      },\n      \"output\": \"abcabc\",\n      \"explanation\": \"The same characters are at least 3 positions apart in the rearranged string.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"aaabc\",\n        \"k\": 3\n      },\n      \"output\": \"\",\n      \"explanation\": \"It is impossible to rearrange the string to meet the required distance.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"aaadbbcc\",\n        \"k\": 2\n      },\n      \"output\": \"abacabcd\",\n      \"explanation\": \"The same characters are at least 2 positions apart.\"\n    }\n  ],\n  \"hints\": [\n    \"Use a priority queue (heap) to track the characters with the highest frequency.\",\n    \"Greedily arrange the most frequent character first, ensuring a gap of at least `k` between occurrences of the same character.\",\n    \"Store temporarily unavailable characters in a queue until they can be used again.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve a time complexity of `O(n log k)` by utilizing a heap to manage character frequencies and a queue for enforcing the distance constraint.\",\n    \"constraints\": \"Avoid creating unnecessary copies of the string or excessive iterations through the input.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum difference between values in the tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.\",\n  \"objective\": \"Find the minimum difference between the values of any two different nodes in the Binary Search Tree (BST).\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The problem asks to find the smallest difference between the values of two nodes in a Binary Search Tree (BST). Since the tree is a BST, the values of nodes are ordered. The key observation is that the minimum difference will often be between two consecutive nodes in an in-order traversal of the tree, as the values will be in increasing order.\",\n    \"Step 2 - Observations\": \"In an in-order traversal of a BST, the nodes are visited in ascending order. Therefore, the minimum difference will likely be between adjacent nodes in the traversal. This reduces the problem to performing an in-order traversal and computing the differences between adjacent values.\",\n    \"Step 3 - Strategy\": \"Perform an in-order traversal of the BST, and at each step, compute the difference between the current node and the previous node. Track the minimum difference found during the traversal.\",\n    \"Step 4 - Approach\": \"Perform a recursive or iterative in-order traversal. As you traverse, compare each node's value to the previously visited node's value and keep track of the minimum difference.\",\n    \"Step 5 - Constraints Consideration\": \"The number of nodes is between 2 and 100, which suggests an O(n) time complexity solution is feasible. Since we are only interested in differences between adjacent values in the in-order traversal, we don't need to compare every pair of nodes directly, making the approach efficient.\",\n    \"Step 6 - Optimizing\": \"An optimized solution involves performing the in-order traversal once, which ensures that we only process each node once. We can keep track of the minimum difference as we go without needing extra space for additional data structures.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          4,\n          2,\n          6,\n          1,\n          3\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"An in-order traversal of the tree gives the values [1, 2, 3, 4, 6]. The minimum difference between any two nodes is 1.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          0,\n          48,\n          null,\n          null,\n          12,\n          49\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"An in-order traversal of the tree gives the values [0, 1, 12, 48, 49]. The minimum difference between any two nodes is 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"2 <= n <= 100\",\n    \"node_value_range\": \"0 <= Node.val <= 10^5\"\n  },\n  \"follow_up\": \"What happens if the tree is unbalanced or highly skewed? How does that impact the time complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the roots of the tree that have the smallest height."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a tree with `n` nodes labeled from `0` to `n-1` and `n-1` undirected edges, your task is to find all the root labels of Minimum Height Trees (MHTs). A tree is a connected acyclic graph, and the height of a rooted tree is defined as the number of edges on the longest path from the root to any leaf node.\",\n  \"objective\": \"Design an efficient algorithm to identify all root nodes that result in Minimum Height Trees (MHTs). The solution should work for large inputs with up to 20,000 nodes.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task is to find root nodes such that the tree's height is minimized. A node that minimizes the maximum distance to all other nodes is the best candidate for an MHT root.\",\n    \"Step 2 - Graph Representation\": \"Represent the tree using an adjacency list for efficient traversal. Since the tree is guaranteed to have `n-1` edges, we can directly construct the graph.\",\n    \"Step 3 - Core Algorithm\": \"Use a topological approach: Start by identifying all leaf nodes (nodes with degree 1). Iteratively remove these leaves while updating the degrees of their neighbors. Continue this process until 1 or 2 nodes remain, as they represent the MHT roots.\",\n    \"Step 4 - Complexity Optimization\": \"Ensure the algorithm works in `O(n)` time by processing nodes layer by layer, leveraging the small degree property of tree nodes.\",\n    \"Step 5 - Output Format\": \"Return the labels of the remaining nodes as they represent the roots of MHTs.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 4,\n        \"edges\": [\n          [\n            1,\n            0\n          ],\n          [\n            1,\n            2\n          ],\n          [\n            1,\n            3\n          ]\n        ]\n      },\n      \"output\": [\n        1\n      ],\n      \"explanation\": \"The tree rooted at node 1 has a height of 1, which is the minimum possible height.\"\n    },\n    {\n      \"input\": {\n        \"n\": 6,\n        \"edges\": [\n          [\n            3,\n            0\n          ],\n          [\n            3,\n            1\n          ],\n          [\n            3,\n            2\n          ],\n          [\n            3,\n            4\n          ],\n          [\n            5,\n            4\n          ]\n        ]\n      },\n      \"output\": [\n        3,\n        4\n      ],\n      \"explanation\": \"Both nodes 3 and 4 result in a tree of height 2, which is the minimum height for this graph.\"\n    }\n  ],\n  \"constraints\": {\n    \"nodes\": \"1 <= n <= 2 * 10^4\",\n    \"edges\": \"edges.length == n - 1\",\n    \"graph_properties\": \"The graph is a valid tree with no repeated edges.\"\n  },\n  \"follow_up\": \"Can you extend your algorithm to handle cases where the graph is not guaranteed to be a tree? How would you detect cycles or disconnected components efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the repeated number in an array of integers."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `nums` of length `n + 1` where all integers are in the range `[1, n]` and exactly one integer is repeated, find and return the repeated number. The solution must not modify the input array, use only constant extra space, and aim for linear runtime complexity.\",\n  \"objective\": \"Design an algorithm to identify the single duplicate number in the array without modifying the input, using techniques such as the Floyd's Tortoise and Hare algorithm.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the problem constraints:\\n- The input contains integers in the range `[1, n]` with one duplicate.\\n- The array size is `n + 1`, so there must be a duplicate due to the pigeonhole principle.\",\n    \"Step 2 - Floyd's Cycle Detection\": \"Model the array as a linked list where `nums[i]` points to the next index. Use Floyd's Tortoise and Hare algorithm to detect the cycle caused by the duplicate value:\\n- Use two pointers (`slow` and `fast`) to traverse the array at different speeds to find an intersection.\\n- Use another traversal to find the start of the cycle, which corresponds to the duplicate number.\",\n    \"Step 3 - Time and Space Complexity\": \"Ensure the solution runs in `O(n)` time and uses `O(1)` extra space.\",\n    \"Step 4 - Edge Cases\": \"Handle scenarios where the duplicate is the smallest number (`1`) or the largest number (`n`).\",\n    \"Step 5 - Output\": \"Return the duplicate number as an integer.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          3,\n          4,\n          2,\n          2\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The duplicate number is 2.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          1,\n          3,\n          4,\n          2\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The duplicate number is 3.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"1 <= n <= 10^5\",\n    \"value_range\": \"1 <= nums[i] <= n\",\n    \"unique_duplicate\": \"Exactly one integer is repeated two or more times.\"\n  },\n  \"follow_up\": [\n    \"How can you mathematically prove that at least one duplicate must exist using the pigeonhole principle?\",\n    \"What are the trade-offs between using Floyd's algorithm versus binary search for this problem?\"\n  ]\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Implement a class with a function `pickIndex()` that selects an index in `[0, w.length - 1]` randomly, with the probability proportional to its weight in `w`."}, {"role": "assistant", "content": "{\n  \"description\": \"Implement a class `Solution` with a function `pickIndex()` that picks an index in the range `[0, w.length - 1]` randomly, where the probability of selecting an index `i` is proportional to its weight `w[i]` relative to the sum of all weights in `w`.\",\n  \"objective\": \"Use prefix sums and binary search to efficiently implement `pickIndex()` for weighted random selection, achieving optimal performance for repeated index picking.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the goal is to select an index with a probability weighted by the elements in `w`. Prefix sums enable efficient cumulative probability calculation for each index.\",\n    \"Step 2 - Prefix Sum Array Construction\": \"Construct a prefix sum array `prefixSums` where `prefixSums[i]` represents the sum of weights up to index `i`. The last element in `prefixSums` gives the total weight, representing the entire probability space.\",\n    \"Step 3 - Random Number Mapping\": \"Generate a random integer in the range `[1, prefixSums[-1]]`, which corresponds to a random point in the cumulative probability distribution. This random point is then mapped to an index in `w` using binary search.\",\n    \"Step 4 - Binary Search for Efficient Lookup\": \"Perform a binary search on `prefixSums` to locate the first position where the cumulative sum meets or exceeds the random point, returning this index as the selected index.\",\n    \"Step 5 - Complexity and Constraints\": \"The solution requires O(n) time for prefix sum construction during initialization and O(log n) for each `pickIndex()` call using binary search. Ensure the solution meets constraints for large inputs up to `10^4` elements.\",\n    \"Final Check - Constraints Verification\": \"Confirm that the solution handles up to `w.length = 10^4` and `w[i]` values up to `10^5`, allowing for repeated `pickIndex()` calls efficiently with correct weighted probabilities.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"w\": [\n          1,\n          3\n        ]\n      },\n      \"output\": [\n        1,\n        1,\n        1,\n        1,\n        0\n      ],\n      \"explanation\": \"With `w = [1, 3]`, index `1` has a probability of `3/4` and index `0` has a probability of `1/4`, resulting in repeated selections of index `1`.\"\n    },\n    {\n      \"input\": {\n        \"w\": [\n          1\n        ]\n      },\n      \"output\": [\n        0\n      ],\n      \"explanation\": \"With only one weight, the only possible output is `0`.\"\n    }\n  ],\n  \"constraints\": {\n    \"weights_length_range\": \"1 <= w.length <= 10^4\",\n    \"weight_value_range\": \"1 <= w[i] <= 10^5\",\n    \"function_calls\": \"pickIndex will be called up to 10^4 times\"\n  },\n  \"follow_up\": \"Could you adapt this solution to handle a dynamic weight array `w` where values can change over time while maintaining efficient `pickIndex()` performance?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the in-order successor of a node in a BST."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary search tree (BST) and a node `p`, return the in-order successor of `p` in the BST. The in-order successor of a node `p` is defined as the node with the smallest key greater than `p.val`. If no such node exists, return `null`.\",\n  \"objective\": \"Design an efficient algorithm to find the in-order successor in a BST, leveraging the properties of the BST for optimal traversal.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that in a BST, the in-order successor of a node `p` is either:\\n- The leftmost node in `p`'s right subtree (if it exists), or\\n- The lowest ancestor of `p` whose left child contains `p` (if the right subtree does not exist).\",\n    \"Step 2 - Recursive Traversal\": \"If `p` has a right child, find the leftmost node in the right subtree. Otherwise, traverse up the tree to find the nearest ancestor whose value is greater than `p.val`.\",\n    \"Step 3 - Iterative Traversal\": \"Use an iterative approach to traverse the tree, maintaining a variable to store the potential successor as you traverse.\",\n    \"Step 4 - Edge Cases\": \"Handle cases where `p` has no in-order successor (e.g., `p` is the largest node in the tree).\",\n    \"Step 5 - Output\": \"Return the successor node or `null` if no successor exists.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          2,\n          1,\n          3\n        ],\n        \"p\": 1\n      },\n      \"output\": 2,\n      \"explanation\": \"The in-order successor of node 1 is node 2.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          5,\n          3,\n          6,\n          2,\n          4,\n          null,\n          null,\n          1\n        ],\n        \"p\": 6\n      },\n      \"output\": null,\n      \"explanation\": \"Node 6 has no in-order successor in the tree.\"\n    }\n  ],\n  \"constraints\": {\n    \"tree_size\": \"1 <= Number of nodes <= 10^4\",\n    \"node_value_range\": \"-10^5 <= Node.val <= 10^5\",\n    \"unique_values\": \"All nodes have unique values.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to use `O(h)` time and `O(1)` space, where `h` is the height of the tree?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Write a function to convert a string to an integer."}, {"role": "assistant", "content": "{\n  \"description\": \"Implement the `myAtoi(string s)` function that converts a string into a 32-bit signed integer, following specific rules for parsing. The function should handle leading whitespace, optional signs, and numeric characters while stopping at any invalid or non-numeric characters. If the resulting integer is outside the 32-bit range `[-2^31, 2^31 - 1]`, the value should be clamped to the nearest boundary.\",\n  \"objective\": \"Design an efficient algorithm to parse the input string `s` into a 32-bit signed integer while adhering to the specified rules and handling edge cases like overflow and invalid inputs.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the input string `s` may include a combination of whitespace, signs, numeric digits, and other characters. The goal is to extract and convert valid numeric digits into a signed 32-bit integer while ignoring invalid parts of the string.\",\n    \"Step 2 - Initial Approach\": \"Process the string character by character. Skip leading whitespace, determine the sign from the first non-whitespace character, and then read numeric digits until a non-digit character or the end of the string is reached.\",\n    \"Step 3 - Handling Overflow\": \"While parsing digits, check if the resulting number exceeds the 32-bit signed integer range. If it does, clamp the value to the nearest boundary (`-2^31` or `2^31 - 1`).\",\n    \"Step 4 - Edge Cases\": \"Handle edge cases such as empty strings, strings with only whitespace, strings without numeric characters, and numbers close to or exceeding the 32-bit limits.\",\n    \"Step 5 - Final Output\": \"Return the resulting integer after clamping it within the range `[-2^31, 2^31 - 1]`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"42\"\n      },\n      \"output\": 42,\n      \"explanation\": \"The string is parsed as the integer 42.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"   -42\"\n      },\n      \"output\": -42,\n      \"explanation\": \"Leading whitespace is ignored, and the negative sign is applied.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"4193 with words\"\n      },\n      \"output\": 4193,\n      \"explanation\": \"Numeric characters are parsed until a non-digit character is encountered.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"words and 987\"\n      },\n      \"output\": 0,\n      \"explanation\": \"The string starts with non-numeric characters, so the result is 0.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"-91283472332\"\n      },\n      \"output\": -2147483648,\n      \"explanation\": \"The parsed value exceeds the 32-bit range and is clamped to -2^31.\"\n    }\n  ],\n  \"constraints\": {\n    \"s_length\": \"0 <= s.length <= 200\",\n    \"s_content\": \"The string consists of English letters, digits, spaces, and the characters `+`, `-`, and `.`.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to minimize unnecessary string traversals and reduce memory usage?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a binary tree and a target node, return the nodes that are a distance k from the target."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of a binary tree, a target node, and an integer k, return an array of values of all nodes that are a distance k from the target node.\",\n  \"objective\": \"Find and return the values of all nodes that are exactly k steps away from the target node in the binary tree.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We need to find all nodes in a binary tree that are a given distance k from a target node. We can perform a breadth-first search (BFS) or depth-first search (DFS) to traverse the tree from the target node and find all nodes at the desired distance.\",\n    \"Step 2 - Approach\": \"First, locate the target node in the tree. Then, using DFS or BFS, explore nodes at increasing distances from the target node until reaching the desired distance k. Ensure that all valid nodes are added to the result array.\",\n    \"Step 3 - Output Format\": \"Return an array of values of all nodes that are exactly k steps away from the target node. The order of the result does not matter.\",\n    \"Step 4 - Code Efficiency and Edge Cases\": \"Consider edge cases where k is 0, where the tree is very small (single node), or where no nodes are at distance k from the target. Also, optimize the solution for trees with up to 500 nodes.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          5,\n          1,\n          6,\n          2,\n          0,\n          8,\n          null,\n          null,\n          7,\n          4\n        ],\n        \"target\": 5,\n        \"k\": 2\n      },\n      \"output\": [\n        7,\n        4,\n        1\n      ],\n      \"explanation\": \"The nodes at a distance 2 from the target node (value 5) are 7, 4, and 1.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1\n        ],\n        \"target\": 1,\n        \"k\": 3\n      },\n      \"output\": [],\n      \"explanation\": \"There are no nodes at distance 3 from the target node in a tree with only one node.\"\n    }\n  ],\n  \"constraints\": {\n    \"tree_size\": \"1 <= number of nodes <= 500\",\n    \"node_value_range\": \"0 <= Node.val <= 500\",\n    \"target_value\": \"target is the value of one of the nodes in the tree\",\n    \"k_range\": \"0 <= k <= 1000\"\n  },\n  \"follow_up\": \"Can you implement the solution with a time complexity of O(n)?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Convert a number to hexadecimal."}, {"role": "assistant", "content": "{\n  \"title\": \"Convert Integer to Hexadecimal\",\n  \"description\": \"Write a function to convert a given integer into its hexadecimal representation using two's complement for negative numbers.\",\n  \"input\": {\n    \"name\": \"num\",\n    \"type\": \"integer\",\n    \"description\": \"The integer to be converted.\",\n    \"constraints\": \"-2^31 <= num <= 2^31 - 1\"\n  },\n  \"output\": {\n    \"type\": \"string\",\n    \"description\": \"The hexadecimal representation of the integer, using lowercase characters and no leading zeros (except for the case where the value is zero).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"num\": 26\n      },\n      \"output\": \"1a\",\n      \"explanation\": \"26 in hexadecimal is '1a'.\"\n    },\n    {\n      \"input\": {\n        \"num\": -1\n      },\n      \"output\": \"ffffffff\",\n      \"explanation\": \"In two's complement representation, -1 is represented as 'ffffffff' in 32-bit hexadecimal.\"\n    },\n    {\n      \"input\": {\n        \"num\": 0\n      },\n      \"output\": \"0\",\n      \"explanation\": \"Zero is represented as '0'.\"\n    }\n  ],\n  \"hints\": [\n    \"Handle negative numbers using two's complement.\",\n    \"Use bitwise operations to extract each hexadecimal digit.\",\n    \"Iterate until all relevant bits are converted, ensuring no leading zeros (except for the case where the value is zero).\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Ensure the solution is implemented using bitwise operations and handles the 32-bit integer constraints efficiently.\",\n    \"constraints\": \"Avoid using built-in conversion functions for hexadecimal representation.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create an Excel class to handle cell values and formulas."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a class `Excel` to represent a simplified spreadsheet with integer cell values. Implement the ability to set values, retrieve them, and define sum formulas that dynamically update based on cell dependencies.\",\n  \"objective\": \"Efficiently manage spreadsheet operations, maintaining dependencies and recalculating values for dependent cells using topological sorting.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Excel\": \"Create a 2D array to represent the spreadsheet with dimensions based on the given height and width.\",\n    \"Step 2 - Set Cell Value\": \"Set the value of a specific cell and remove any existing formula. Recalculate all dependent cells using topological sorting.\",\n    \"Step 3 - Get Cell Value\": \"Retrieve the value of a specific cell from the internal structure.\",\n    \"Step 4 - Define Sum Formula\": \"Set a cell to the sum of specified cells or ranges. Parse the input, add dependencies, and recalculate dependent cells using topological sorting.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"operations\": [\n          \"Excel\",\n          \"set\",\n          \"sum\",\n          \"set\",\n          \"get\"\n        ],\n        \"arguments\": [\n          [\n            3,\n            \"C\"\n          ],\n          [\n            1,\n            \"A\",\n            2\n          ],\n          [\n            3,\n            \"C\",\n            [\n              \"A1\",\n              \"A1:B2\"\n            ]\n          ],\n          [\n            2,\n            \"B\",\n            2\n          ],\n          [\n            3,\n            \"C\"\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        null,\n        4,\n        null,\n        6\n      ],\n      \"explanation\": \"An Excel object is created. Values and sums are set for cells, and changes dynamically update dependent cells.\"\n    },\n    {\n      \"input\": {\n        \"operations\": [\n          \"Excel\",\n          \"set\",\n          \"sum\",\n          \"get\"\n        ],\n        \"arguments\": [\n          [\n            2,\n            \"B\"\n          ],\n          [\n            1,\n            \"A\",\n            5\n          ],\n          [\n            2,\n            \"B\",\n            [\n              \"A1\"\n            ]\n          ],\n          [\n            2,\n            \"B\"\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        null,\n        5,\n        5\n      ],\n      \"explanation\": \"The sum formula correctly updates with the value from the referenced cell.\"\n    }\n  ],\n  \"constraints\": {\n    \"dimensions\": \"1 <= height <= 26, 'A' <= width <= 'Z'\",\n    \"values\": \"-100 <= value <= 100\",\n    \"dependencies\": \"Circular references are not allowed.\"\n  },\n  \"follow_up\": \"Explore scalability to handle larger spreadsheets and more complex dependency chains. Consider optimizations for frequently updated cells.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the largest island in a binary matrix."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the maximum area of an island in a binary matrix where an island is a group of 1's connected 4-directionally.\",\n  \"objective\": \"Use an iterative depth-first search (DFS) approach to calculate the area of each island and return the maximum area.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Variables\": \"Create a variable `max_area` to track the largest island area and a stack to support the iterative DFS.\",\n    \"Step 2 - Traverse the Grid\": \"Iterate through each cell in the grid. For every cell with value `1` that hasn't been visited, treat it as a new island.\",\n    \"Step 3 - Perform DFS\": \"For each unvisited land cell, initialize `current_area` to 0 and push the cell coordinates to the stack.\",\n    \"Step 4 - Explore the Island\": \"While the stack is not empty, pop a cell, mark it as visited by setting its value to `0`, increment `current_area`, and push all unvisited land neighbors onto the stack.\",\n    \"Step 5 - Update Maximum Area\": \"After completing the DFS for an island, compare `current_area` with `max_area` and update `max_area` if necessary.\",\n    \"Step 6 - Return Result\": \"After traversing the entire grid, return `max_area` as the result.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            0,\n            0,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            1,\n            1,\n            0,\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            1,\n            0,\n            0,\n            1,\n            1,\n            0,\n            0,\n            1,\n            0,\n            1,\n            0,\n            0\n          ],\n          [\n            0,\n            1,\n            0,\n            0,\n            1,\n            1,\n            0,\n            0,\n            1,\n            1,\n            1,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0\n          ]\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"The largest island has an area of 6, formed by a 4-directionally connected group of 1's.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n          ]\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"There are no islands in the grid.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size\": \"1 <= m, n <= 50\",\n    \"cell_values\": \"`grid[i][j]` is either 0 or 1\",\n    \"connectivity\": \"Islands are connected 4-directionally\"\n  },\n  \"follow_up\": \"Discuss the time complexity O(m\\u22c5n) for traversing the grid and space complexity O(m\\u22c5n) for the stack during DFS, and explore potential optimizations using union-find for this problem.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Two players pick numbers from a set, and whoever gets the total to a target first wins. Figure out if the first player can always win."}, {"role": "assistant", "content": "{\n  \"description\": \"In the `100 game` variation, players take turns choosing integers from a set of numbers ranging from `1` to `maxChoosableInteger` without replacement. The goal is to determine whether the first player can guarantee a win, assuming both players play optimally. A player wins if the sum of their chosen numbers reaches or exceeds `desiredTotal`.\",\n  \"objective\": \"Design an algorithm that checks if the first player can force a win in this game by exploring all possible optimal moves and accounting for the constraints on number selection.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the mechanics of the game: players alternate choosing numbers, and each number can only be picked once. The winner is the player whose chosen numbers first reach or exceed `desiredTotal`.\",\n    \"Step 2 - Key Insight\": \"The problem can be solved using a backtracking approach combined with memoization to efficiently explore all game states. Use a bitmask or set to track available numbers and cache results to avoid redundant computations.\",\n    \"Step 3 - Base Cases\": \"If `desiredTotal <= 0`, the first player automatically wins. If the sum of all available numbers is less than `desiredTotal`, the first player loses as no sequence can reach the target.\",\n    \"Step 4 - Recursive Strategy\": \"For each available number, simulate the first player picking it and recursively determine if the second player is forced to lose in subsequent turns. If there exists a number such that the second player cannot win no matter how they play, the first player can guarantee a win.\",\n    \"Step 5 - Memoization\": \"Store the outcomes of subproblems (current available numbers and remaining total) to optimize performance by avoiding recalculations.\",\n    \"Step 6 - Output\": \"Return `true` if the first player can guarantee a win, otherwise return `false`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"maxChoosableInteger\": 10,\n        \"desiredTotal\": 11\n      },\n      \"output\": false,\n      \"explanation\": \"No matter what number the first player chooses, the second player can always force a win.\"\n    },\n    {\n      \"input\": {\n        \"maxChoosableInteger\": 10,\n        \"desiredTotal\": 0\n      },\n      \"output\": true,\n      \"explanation\": \"Since the desired total is 0, the first player wins by default.\"\n    },\n    {\n      \"input\": {\n        \"maxChoosableInteger\": 10,\n        \"desiredTotal\": 1\n      },\n      \"output\": true,\n      \"explanation\": \"The first player can choose 1 to immediately reach the desired total and win.\"\n    }\n  ],\n  \"constraints\": {\n    \"maxChoosableInteger\": \"1 <= maxChoosableInteger <= 20\",\n    \"desiredTotal\": \"0 <= desiredTotal <= 300\",\n    \"optimal_play\": \"Players are assumed to play optimally to maximize their chances of winning.\"\n  },\n  \"follow_up\": \"Can you extend this solution to handle larger ranges for `maxChoosableInteger` and `desiredTotal` by optimizing memory usage or computational efficiency?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the median of each sliding window of size `k` as it moves across an array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums` and an integer `k`, calculate the median of each sliding window of size `k` as it moves from the leftmost part of the array to the rightmost. The median for a window of size `k` is defined as the middle value if `k` is odd or the average of the two middle values if `k` is even. The result should be returned as an array of medians for all possible sliding window positions.\",\n  \"objective\": \"Design an efficient algorithm to compute medians for each sliding window of size `k` in the array, ensuring runtime performance is optimal for large arrays.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand Median Calculation\": \"Understand that the median is the middle value in a sorted list if the size is odd, or the average of the two middle values if the size is even. Medians must be calculated for each sliding window of size `k`.\",\n    \"Step 2 - Sliding Window Handling\": \"As the window slides by one element, efficiently update the sorted structure of the window elements. Avoid sorting the window from scratch for each step.\",\n    \"Step 3 - Efficient Data Structure\": \"Use a balanced binary search tree, heaps (max-heap and min-heap), or similar data structures to maintain the sorted order of the current window. This enables efficient insertion, deletion, and median computation.\",\n    \"Step 4 - Output Format\": \"Return an array where each element represents the median of the corresponding sliding window. Ensure results are rounded to five decimal places for precision.\",\n    \"Step 5 - Edge Cases and Constraints\": \"Handle edge cases such as when `k = 1` (each element is the median) or when array values include large positive or negative integers. Optimize for large values of `nums.length` up to `10^5`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          3,\n          -1,\n          -3,\n          5,\n          3,\n          6,\n          7\n        ],\n        \"k\": 3\n      },\n      \"output\": [\n        1.0,\n        -1.0,\n        -1.0,\n        3.0,\n        5.0,\n        6.0\n      ],\n      \"explanation\": \"The medians are calculated for each window of size 3 as the window slides across the array.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          4,\n          2,\n          3,\n          1,\n          4,\n          2\n        ],\n        \"k\": 3\n      },\n      \"output\": [\n        2.0,\n        3.0,\n        3.0,\n        3.0,\n        2.0,\n        3.0,\n        2.0\n      ],\n      \"explanation\": \"The medians are derived from the middle value or average of two middle values of the sorted window for each position.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 10^5\",\n    \"element_range\": \"-2^31 <= nums[i] <= 2^31 - 1\",\n    \"window_size\": \"1 <= k <= nums.length\",\n    \"precision\": \"Medians must be accurate to within 10^-5 of the actual value.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"How would you optimize the algorithm if `k` is very large compared to `nums.length`?\",\n    \"question_2\": \"Can you implement the solution using a single heap for the sliding window?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if two strings are isomorphic."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if two strings `s` and `t` are isomorphic, meaning the characters in `s` can be replaced to get `t`.\",\n  \"objective\": \"Design an efficient algorithm to map characters from `s` to `t` and ensure the mapping is one-to-one and onto.\",\n  \"meta_prompt\": {\n    \"Step 1 - Mapping Characters\": \"Create two hash maps or arrays to track the mapping from `s` to `t` and `t` to `s`.\",\n    \"Step 2 - Validation\": \"Iterate through both strings simultaneously and validate that the mapping holds for all characters.\",\n    \"Step 3 - Handle Edge Cases\": \"Consider cases where `s` and `t` are of different lengths, or contain repeated or unique characters.\",\n    \"Step 4 - Efficiency\": \"Ensure the algorithm works in `O(n)` time by processing each character once.\",\n    \"Step 5 - Space Complexity\": \"Use constant space for the mapping arrays (fixed size for ASCII characters).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"egg\",\n        \"t\": \"add\"\n      },\n      \"output\": true,\n      \"explanation\": \"Mapping: 'e' -> 'a', 'g' -> 'd'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"foo\",\n        \"t\": \"bar\"\n      },\n      \"output\": false,\n      \"explanation\": \"No valid mapping exists for 'o' -> 'a' and 'o' -> 'r'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"paper\",\n        \"t\": \"title\"\n      },\n      \"output\": true,\n      \"explanation\": \"Mapping: 'p' -> 't', 'a' -> 'i', 'e' -> 'l', 'r' -> 'e'.\"\n    }\n  ],\n  \"constraints\": {\n    \"lengths\": \"1 <= s.length, t.length <= 5 * 10^4\",\n    \"characters\": \"s and t consist of any valid ASCII characters.\"\n  },\n  \"follow_up\": \"Can you optimize for memory usage while ensuring a linear runtime?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Transpose the content of a text file."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a text file `file.txt`, where each row has the same number of columns separated by a space, transpose its content such that rows become columns and columns become rows.\",\n  \"objective\": \"Write a program to transpose the contents of a text file.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that transposing involves swapping rows with columns.\",\n    \"Step 2 - Input Format\": \"Read each row and split it into words. Ensure all rows have equal lengths.\",\n    \"Step 3 - Implementation\": \"Use an array of arrays or lists to store the transposed result. Write the transposed data back as rows.\",\n    \"Step 4 - Edge Cases\": \"Handle empty files, single rows, and single columns.\",\n    \"Step 5 - Validate Output\": \"Ensure output format matches the required transposed structure with words separated by spaces.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"file_content\": \"name age\\nalice 21\\nryan 30\"\n      },\n      \"output\": \"name alice ryan\\nage 21 30\",\n      \"explanation\": \"The rows and columns of the input file are transposed.\"\n    },\n    {\n      \"input\": {\n        \"file_content\": \"a b c\\nd e f\\ng h i\"\n      },\n      \"output\": \"a d g\\nb e h\\nc f i\",\n      \"explanation\": \"Each column in the input becomes a row in the output.\"\n    }\n  ],\n  \"constraints\": {\n    \"file_rows\": \"1 <= rows <= 100\",\n    \"file_columns\": \"1 <= columns <= 100\",\n    \"content_format\": \"Each row contains space-separated words.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum number of turns a printer needs to print a string where it can only print sequences of the same character."}, {"role": "assistant", "content": "{\n  \"description\": \"Calculate the minimum number of turns a strange printer needs to print a string, where the printer can only print sequences of the same character at a time.\",\n  \"objective\": \"Use dynamic programming to compute the minimum turns required for each substring of the input string `s` after removing consecutive duplicate characters.\",\n  \"meta_prompt\": {\n    \"Step 1 - Preprocess String\": \"Remove consecutive duplicate characters from the input string `s` using the `removeDuplicates` method.\",\n    \"Step 2 - Initialize DP Table\": \"Create a 2D DP table `minTurns` where `minTurns[i][j]` represents the minimum turns needed to print the substring `s[i:j+1]`. Initialize base cases: `minTurns[i][i] = 1` for all single-character substrings.\",\n    \"Step 3 - Compute Substring Results\": \"Iterate over increasing lengths of substrings. For each substring `s[start:end]`, calculate the minimum turns required by trying all possible splits. If `s[start + split] == s[end]`, reduce the turns by 1 to account for overlapping characters.\",\n    \"Step 4 - Update DP Table\": \"For each split, update `minTurns[start][end]` to the minimum value of its current value and the computed turns for that split.\",\n    \"Step 5 - Return Result\": \"After processing all substrings, return `minTurns[0][n-1]` as the minimum turns required to print the entire string.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"aaabbb\"\n      },\n      \"output\": 2,\n      \"explanation\": \"The printer can print 'aaa' in one turn and 'bbb' in another.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"aba\"\n      },\n      \"output\": 2,\n      \"explanation\": \"The printer prints 'aaa' first and then prints 'b' to cover the second position.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 100\",\n    \"string_characters\": \"s consists of lowercase English letters.\"\n  },\n  \"follow_up\": \"Analyze the time complexity of this dynamic programming approach and discuss its scalability for larger input strings.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Convert a range of IP addresses to CIDR blocks."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a starting IP address and a required number of IPs to cover, generate the shortest list of CIDR blocks that exactly cover the specified range of IPs without covering any IPs outside this range. Each CIDR block in the result should represent a contiguous range of IP addresses. If multiple answers are possible, any valid solution is acceptable.\",\n  \"objective\": \"Create an efficient algorithm to convert a given range of IP addresses into the minimum number of CIDR blocks, adhering to constraints and maintaining an accurate coverage of the specified IP range.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that an IP address is a 32-bit integer displayed in dotted decimal notation, and that CIDR blocks specify IP ranges with a base IP and a prefix length. The goal is to split the range `[ip, ip + n - 1]` into the fewest possible CIDR blocks.\",\n    \"Step 2 - Binary Representation\": \"Convert the starting IP address into binary form and consider each IP as an incremented integer. By analyzing the bit structure, determine where you can split the range into valid CIDR blocks that fit entirely within `[ip, ip + n - 1]`.\",\n    \"Step 3 - Greedy Selection\": \"Use a greedy approach: at each step, select the largest CIDR block starting from the current IP that remains within the range. Adjust the prefix length based on how many IPs remain and how many bits match between `ip` and the target IPs in the range.\",\n    \"Step 4 - Loop Until All IPs are Covered\": \"Iterate until the entire range `[ip, ip + n - 1]` is covered by CIDR blocks. Update the current IP and reduce the remaining count `n` after each block is added.\",\n    \"Step 5 - Convert Output Format\": \"Return the list of CIDR blocks in the standard notation `[base IP/prefix length]` for each block, ensuring correct and minimal coverage.\",\n    \"Final Check - Constraints Verification\": \"Verify that all blocks only cover IPs within the specified range and check for compliance with constraints: `1 <= n <= 1000` and that `ip` is a valid IPv4 address.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"ip\": \"255.0.0.7\",\n        \"n\": 10\n      },\n      \"output\": [\n        \"255.0.0.7/32\",\n        \"255.0.0.8/29\",\n        \"255.0.0.16/32\"\n      ],\n      \"explanation\": \"The IP addresses from 255.0.0.7 to 255.0.0.16 are covered by three CIDR blocks without exceeding the target range.\"\n    },\n    {\n      \"input\": {\n        \"ip\": \"117.145.102.62\",\n        \"n\": 8\n      },\n      \"output\": [\n        \"117.145.102.62/31\",\n        \"117.145.102.64/30\",\n        \"117.145.102.68/31\"\n      ],\n      \"explanation\": \"These CIDR blocks cover the specified 8 IPs with the minimum number of blocks.\"\n    }\n  ],\n  \"constraints\": {\n    \"ip_format\": \"IP is a valid IPv4 address in dotted decimal format\",\n    \"n_range\": \"1 <= n <= 1000\",\n    \"range_coverage\": \"Only the specified range `[ip, ip + n - 1]` should be covered, with no extra IPs included.\"\n  },\n  \"follow_up\": \"How would you approach this if the CIDR blocks had additional constraints on minimum or maximum allowable prefix lengths?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Alice and Bob take turns erasing a number from the chalkboard. The player who causes the XOR of all numbers to become 0 loses. Alice starts the game, and we need to determine if Alice wins the game given an array of numbers."}, {"role": "assistant", "content": "{\n  \"description\": \"In this problem, Alice and Bob take turns erasing one number from a chalkboard. The game ends when the XOR of all remaining elements is 0, and the player who causes this to happen loses. Alice starts the game, and both players play optimally. We are asked to determine whether Alice wins the game given an initial set of numbers on the chalkboard.\",\n  \"objective\": \"Determine if Alice wins the game, assuming both players play optimally. The game is decided based on the XOR of the numbers on the chalkboard, and a player loses if their move causes the XOR to become 0.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Given an array `nums` representing numbers written on a chalkboard, Alice and Bob take turns removing one number from the array. If after any player's move, the XOR of all remaining elements becomes 0, that player loses. Alice goes first, and we need to determine if she wins, assuming both play optimally.\",\n    \"Step 2 - Key Concepts\": \"The game revolves around the bitwise XOR operation. A player loses if the XOR of all the numbers on the chalkboard becomes 0 after their move. This is a combinatorial game theory problem where the XOR operation plays a crucial role in determining the winner.\",\n    \"Step 3 - Approach\": \"To determine if Alice wins, we need to first calculate the XOR of all elements in the array. Then, we need to check whether Alice, on her turn, can avoid making the XOR of all elements 0 by removing an element. The goal is to ensure that Alice always has a winning strategy based on the current state of the XOR.\",\n    \"Step 4 - Solution Strategy\": \"First, calculate the XOR of all elements in the array. If the XOR is initially 0, Alice wins immediately. Otherwise, determine whether Alice can make a move that forces Bob into a losing position, i.e., make the XOR 0 on Bob's turn.\",\n    \"Step 5 - Optimizations\": \"The problem involves checking the XOR of the entire array and evaluating whether Alice can force a losing position on Bob, which is a relatively simple check. This ensures the algorithm is efficient even for larger arrays.\",\n    \"Step 6 - Final Solution\": \"The solution involves calculating the XOR of the array and using game theory to evaluate whether Alice can always win by making the optimal move at each turn.\",\n    \"Step 7 - Edge Case Handling\": \"Handle edge cases where the array contains only one element, or where the XOR of the entire array is already 0 at the start. Both of these situations should be considered in the game\\u2019s decision-making.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          1,\n          2\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"Alice starts with XOR = 1 XOR 1 XOR 2 = 2. No matter which number Alice removes, the remaining XOR won't be 0, and Bob can always make the final move and force Alice to lose.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          1\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"Alice starts with XOR = 0 XOR 1 = 1. Since the XOR is non-zero, Alice can erase 1, leaving 0, which will make Bob lose.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"Alice starts with XOR = 1 XOR 2 XOR 3 = 0. Since the XOR is initially 0, Alice wins immediately.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 1000\",\n    \"nums_values\": \"0 <= nums[i] < 216\"\n  },\n  \"follow_up\": \"What if instead of XOR, we had a different operation to determine the game state? How would that change the game dynamics?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "A car travels to a destination and may stop at gas stations along the way. Find the minimum number of refueling stops or return -1 if it's impossible to reach the destination."}, {"role": "assistant", "content": "{\n  \"description\": \"A car is traveling to a destination `target` miles east of its starting position. Along the way, there are gas stations represented by an array of `stations`, where each entry is an array of position and fuel available. The car starts with a certain amount of fuel and uses one liter of gas per mile. The task is to find the minimum number of refueling stops needed to reach the target or determine if it's impossible to reach the destination.\",\n  \"objective\": \"Find the minimum number of refueling stops required for the car to reach the target, or return -1 if it is impossible to reach the destination.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The car starts with `startFuel` liters of fuel and must drive `target` miles. Gas stations are available along the route, each with a specified position and the amount of fuel it provides.\",\n    \"Step 2 - Approach\": \"To solve this, we can use a greedy approach, always trying to take the most fuel-efficient route. The idea is to prioritize refueling at stations that maximize the fuel available when we need it most. We can use a priority queue to always refuel at the most beneficial stations when needed.\",\n    \"Step 3 - Output Format\": \"Return the minimum number of refueling stops required to reach the target, or -1 if it is not possible.\",\n    \"Step 4 - Code Efficiency and Edge Cases\": \"The solution should handle cases where no stations are available and ensure the result is computed efficiently for up to 500 stations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"target\": 1,\n        \"startFuel\": 1,\n        \"stations\": []\n      },\n      \"output\": 0,\n      \"explanation\": \"The car can reach the target without needing to refuel.\"\n    },\n    {\n      \"input\": {\n        \"target\": 100,\n        \"startFuel\": 1,\n        \"stations\": [\n          [\n            10,\n            100\n          ]\n        ]\n      },\n      \"output\": -1,\n      \"explanation\": \"The car cannot reach the target or even the first station with the given fuel.\"\n    },\n    {\n      \"input\": {\n        \"target\": 100,\n        \"startFuel\": 10,\n        \"stations\": [\n          [\n            10,\n            60\n          ],\n          [\n            20,\n            30\n          ],\n          [\n            30,\n            30\n          ],\n          [\n            60,\n            40\n          ]\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The car will stop for refueling at two stations to reach the target.\"\n    }\n  ],\n  \"constraints\": {\n    \"target\": \"1 <= target <= 10^9\",\n    \"startFuel\": \"1 <= startFuel <= 10^9\",\n    \"stations_length\": \"0 <= stations.length <= 500\",\n    \"stations_position\": \"1 <= position_i < position_(i+1) < target\",\n    \"stations_fuel\": \"1 <= fuel_i < 10^9\"\n  },\n  \"follow_up\": \"Can this problem be optimized for cases where the car has an extremely large initial fuel reserve or very few stations along the way?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "For a binary matrix `mat`, calculate the minimum distance to the nearest `0` for each cell. Return the updated matrix with these distances."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `m x n` binary matrix `mat` where `1` represents cells and `0` represents target cells, return the minimum distance to the nearest `0` for each cell in the matrix. The distance between two adjacent cells is `1`.\",\n  \"objective\": \"Implement an efficient dynamic programming solution that calculates the shortest distance to the nearest `0` for each cell using a two-pass approach.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize DP Matrix\": \"Create a matrix `dp` of the same dimensions as `mat`, initially filled with a large number (e.g., infinity) except for cells that already contain `0` in `mat`. Set these cells in `dp` to `0` as their distance to the nearest `0` is zero.\",\n    \"Step 2 - Forward Pass\": \"Iterate through `dp` starting from the top-left corner and moving right and down. For each cell `(row, col)` that is not `0`, calculate its minimum distance from cells moving down and right by updating `dp[row][col] = min(dp[row][col], 1 + min(dp[row - 1][col], dp[row][col - 1]))`, ensuring each neighbor is within bounds.\",\n    \"Step 3 - Backward Pass\": \"Perform a second pass starting from the bottom-right corner, moving left and up. For each cell `(row, col)` that is not `0`, update `dp[row][col]` by checking the minimum distance from cells moving left and up with `dp[row][col] = min(dp[row][col], 1 + min(dp[row + 1][col], dp[row][col + 1]))`, ensuring neighbors are in bounds.\",\n    \"Step 4 - Return Result\": \"After completing both passes, `dp` will contain the minimum distances for each cell. Return `dp` as the final result, ensuring that each cell has the minimum distance to the nearest `0` in the matrix.\",\n    \"Final Check - Constraints Verification\": \"Confirm that the solution handles edge cases efficiently within the constraints `1 <= m, n <= 10^4` and `1 <= m * n <= 10^4`, ensuring cells are accurately updated in two passes without exceeding memory limits.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"mat\": [\n          [\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            1,\n            0\n          ],\n          [\n            0,\n            0,\n            0\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          0,\n          0,\n          0\n        ],\n        [\n          0,\n          1,\n          0\n        ],\n        [\n          0,\n          0,\n          0\n        ]\n      ],\n      \"explanation\": \"Each cell's minimum distance to the nearest `0` is directly calculated, yielding a matrix of distances that matches the input as cells are already close to `0`s.\"\n    },\n    {\n      \"input\": {\n        \"mat\": [\n          [\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            1,\n            0\n          ],\n          [\n            1,\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          0,\n          0,\n          0\n        ],\n        [\n          0,\n          1,\n          0\n        ],\n        [\n          1,\n          2,\n          1\n        ]\n      ],\n      \"explanation\": \"The second row has a `1` one cell away from `0`s and the last row has distances incrementing with greater distance from any `0`.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size\": \"1 <= m, n <= 10^4\",\n    \"matrix_elements\": \"Each element in `mat` is either `0` or `1`.\"\n  },\n  \"follow_up\": \"Explore alternate approaches such as using a multi-source BFS for further optimization, especially for handling sparse matrices with fewer `0`s.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum number of 'A's that can be printed with n key presses using special keyboard operations."}, {"role": "assistant", "content": "{\n  \"description\": \"Calculate the maximum number of 'A' characters that can be printed on the screen using a special keyboard with given operations and at most n key presses.\",\n  \"objective\": \"Maximize the number of 'A's printed by simulating the keypresses and using a dynamic programming approach to compute the optimal sequence.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize DP Array\": \"Create an array dp of length n+1, where dp[i] represents the maximum number of 'A's that can be printed with i key presses. Initialize dp[i] = i for all i, representing printing 'A' repeatedly.\",\n    \"Step 2 - Iterate Over Presses\": \"For each number of presses i from 1 to n-3, consider the sequence of keypresses Ctrl-A, Ctrl-C, followed by up to four Ctrl-V presses. Update dp[j] for all j from i+3 to min(n, i+6) using the formula dp[j] = max(dp[j], (j-i-1) * dp[i]).\",\n    \"Step 3 - Return the Result\": \"After filling the dp array, return dp[n] as the maximum number of 'A's that can be printed with at most n presses.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 3\n      },\n      \"output\": 3,\n      \"explanation\": \"The optimal sequence of key presses is [A, A, A], yielding 3 'A's.\"\n    },\n    {\n      \"input\": {\n        \"n\": 7\n      },\n      \"output\": 9,\n      \"explanation\": \"The optimal sequence is [A, A, A, Ctrl-A, Ctrl-C, Ctrl-V, Ctrl-V], yielding 9 'A's.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 50\"\n  },\n  \"follow_up\": \"Analyze the time complexity of the dynamic programming solution and discuss its scalability for larger values of n.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the smallest range that includes at least one number from each list."}, {"role": "assistant", "content": "{\n  \"description\": \"Given `k` lists of sorted integers, find the smallest range that includes at least one number from each list. The range `[a, b]` is preferred over `[c, d]` if `b - a < d - c` or `a < c` when the lengths are equal.\",\n  \"objective\": \"Identify the smallest range covering at least one number from each of the `k` sorted lists using a priority queue for efficiency.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Priority Queue\": \"Insert the first element of each list into a min-heap along with its list and element indices. Track the maximum value across these initial elements.\",\n    \"Step 2 - Update Smallest Range\": \"While the priority queue contains elements from all lists, extract the smallest element and calculate the range. If this range is smaller than the current range, update the range start and end.\",\n    \"Step 3 - Advance Pointer\": \"If the extracted element's list contains more elements, push the next element into the heap and update the maximum value.\",\n    \"Step 4 - Stop Condition\": \"Exit the loop when any list is fully processed, as the heap will no longer represent all lists.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          [\n            4,\n            10,\n            15,\n            24,\n            26\n          ],\n          [\n            0,\n            9,\n            12,\n            20\n          ],\n          [\n            5,\n            18,\n            22,\n            30\n          ]\n        ]\n      },\n      \"output\": [\n        20,\n        24\n      ],\n      \"explanation\": \"The smallest range [20, 24] includes elements from all three lists: 24 from the first list, 20 from the second list, and 22 from the third list.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          [\n            1,\n            2,\n            3\n          ],\n          [\n            1,\n            2,\n            3\n          ],\n          [\n            1,\n            2,\n            3\n          ]\n        ]\n      },\n      \"output\": [\n        1,\n        1\n      ],\n      \"explanation\": \"The smallest range is [1, 1] since all lists contain the value 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"k_range\": \"1 <= k <= 3500\",\n    \"list_length\": \"1 <= nums[i].length <= 50\",\n    \"value_range\": \"-10^5 <= nums[i][j] <= 10^5\"\n  },\n  \"follow_up\": \"Explore optimizations for handling extremely large `k` and discuss potential trade-offs in maintaining a priority queue for high-frequency updates.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Return the nodes you see when you look at the tree from the right side."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of a binary tree, return the list of node values visible from the right side, top to bottom.\",\n  \"objective\": \"Use BFS or DFS to identify the rightmost node at each level.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task requires collecting the last visible node at each depth level.\",\n    \"Step 2 - BFS Implementation\": \"Perform level-order traversal using a queue, keeping the last node at each level.\",\n    \"Step 3 - DFS Implementation\": \"Prioritize the right child during depth-first traversal and record the first node at each level.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider empty trees, single-node trees, and left-skewed trees.\",\n    \"Step 5 - Optimize\": \"Minimize space usage by using iterative approaches where applicable.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3,\n          null,\n          5,\n          null,\n          4\n        ]\n      },\n      \"output\": [\n        1,\n        3,\n        4\n      ],\n      \"explanation\": \"Visible nodes are 1 (root), 3 (right child), and 4 (rightmost child).\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          null,\n          3\n        ]\n      },\n      \"output\": [\n        1,\n        3\n      ],\n      \"explanation\": \"Visible nodes are 1 and 3.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 100\",\n    \"node_values\": \"-100 <= Node.val <= 100\"\n  },\n  \"follow_up\": \"Can you solve the problem using an iterative approach to minimize stack usage?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the sum of all root-to-leaf numbers in a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary tree containing digits from 0 to 9, return the total sum of all root-to-leaf numbers. Each root-to-leaf path represents a number formed by concatenating the digits from root to leaf. A leaf is defined as a node with no children.\",\n  \"objective\": \"Design an efficient algorithm to calculate the total sum of all root-to-leaf numbers in a binary tree.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that each root-to-leaf path forms a number by concatenating node values along the path.\",\n    \"Step 2 - Recursive Traversal\": \"Use a recursive function to traverse the tree and compute the number for each path.\",\n    \"Step 3 - Accumulate Sums\": \"Keep track of the cumulative sum during traversal and add it to the total when a leaf node is reached.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as a single-node tree or trees with varying depths.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(n) time with O(h) space, where `h` is the height of the tree.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": 25,\n      \"explanation\": \"The root-to-leaf paths form numbers 12 and 13, and their sum is 25.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          4,\n          9,\n          0,\n          5,\n          1\n        ]\n      },\n      \"output\": 1026,\n      \"explanation\": \"The root-to-leaf paths form numbers 495, 491, and 40, and their sum is 1026.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"1 <= number of nodes <= 1000\",\n    \"node_values\": \"0 <= Node.val <= 9\",\n    \"tree_depth\": \"The depth of the tree will not exceed 10.\"\n  },\n  \"follow_up\": \"Can you solve this problem iteratively using a stack or queue for traversal?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Write a function to reverse a string."}, {"role": "assistant", "content": "{\n  \"description\": \"Reverse a string represented as an array of characters, `s`, in-place with `O(1)` extra memory. Return the reversed string.\",\n  \"objective\": \"Design an in-place algorithm to reverse the input string array.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand the Problem\": \"The task is to reverse the elements of the array `s` in-place, swapping the first character with the last, the second with the second-to-last, and so on.\",\n    \"Step 2 - Constraints\": [\n      \"The solution must not use extra memory beyond a constant amount.\",\n      \"The array `s` must be modified directly.\"\n    ],\n    \"Step 3 - Algorithm\": [\n      \"Use a two-pointer approach:\",\n      \"1. Initialize one pointer at the start (`left`) and another at the end (`right`) of the array.\",\n      \"2. While `left < right`, swap the elements at `left` and `right`, then move `left` one step forward and `right` one step backward.\",\n      \"3. Repeat until the two pointers meet or cross.\"\n    ],\n    \"Step 4 - Complexity\": \"Ensure the solution runs in `O(n)` time and uses `O(1)` space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": [\n        \"h\",\n        \"e\",\n        \"l\",\n        \"l\",\n        \"o\"\n      ],\n      \"output\": [\n        \"o\",\n        \"l\",\n        \"l\",\n        \"e\",\n        \"h\"\n      ],\n      \"explanation\": \"Reversing the string modifies the array in place.\"\n    },\n    {\n      \"input\": [\n        \"H\",\n        \"a\",\n        \"n\",\n        \"n\",\n        \"a\",\n        \"h\"\n      ],\n      \"output\": [\n        \"h\",\n        \"a\",\n        \"n\",\n        \"n\",\n        \"a\",\n        \"H\"\n      ],\n      \"explanation\": \"Reversing swaps the case-sensitive characters to their correct positions.\"\n    }\n  ],\n  \"constraints\": {\n    \"range_s\": \"1 <= s.length <= 10^5\",\n    \"character_set\": \"`s[i]` is a printable ASCII character.\"\n  },\n  \"follow_up\": \"Can you modify the algorithm to reverse a linked list in a similar in-place manner?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the AND of all numbers between left and right."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two integers `left` and `right` representing the range `[left, right]`, compute the bitwise AND of all numbers in this range.\",\n  \"objective\": \"Design an efficient algorithm to calculate the bitwise AND for a given range, minimizing unnecessary calculations.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the AND operation will keep a bit set only if all numbers in the range have the bit set.\",\n    \"Step 2 - Pattern Recognition\": \"Realize that if the range crosses a power of 2 or a significant bit flips in any number, the AND result will zero out for those bits.\",\n    \"Step 3 - Optimization\": \"Use bit manipulation to shift the range until both numbers are equal, as this will isolate common bits.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases where the range is zero (`left == right == 0`) or spans a large distance (`left = 1, right = 2^31 - 1`).\",\n    \"Step 5 - Complexity\": \"Ensure the solution works in logarithmic time by iteratively modifying the input rather than iterating through the range.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"left\": 5,\n        \"right\": 7\n      },\n      \"output\": 4,\n      \"explanation\": \"5 = 101, 6 = 110, 7 = 111. Bitwise AND gives 100 (4).\"\n    },\n    {\n      \"input\": {\n        \"left\": 0,\n        \"right\": 0\n      },\n      \"output\": 0,\n      \"explanation\": \"The range contains only 0, so the result is 0.\"\n    },\n    {\n      \"input\": {\n        \"left\": 1,\n        \"right\": 2147483647\n      },\n      \"output\": 0,\n      \"explanation\": \"The range includes numbers with different high-order bits, resulting in 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"range\": \"0 <= left <= right <= 2^31 - 1\"\n  },\n  \"follow_up\": \"Can you implement the algorithm with a time complexity of `O(log(max(left, right)))`?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Compare two version numbers."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two version numbers `version1` and `version2`, compare them and return -1 if `version1 < version2`, 1 if `version1 > version2`, or 0 if they are equal. Revisions within the version numbers are separated by dots and must be compared as integers.\",\n  \"objective\": \"Design an efficient algorithm to compare version numbers revision by revision.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves comparing revisions of two version numbers as integers, ignoring leading zeros.\",\n    \"Step 2 - Split Version Numbers\": \"Split the version strings into arrays of revisions using the dot separator.\",\n    \"Step 3 - Compare Revisions\": \"Iterate through the revisions of both versions, comparing their integer values.\",\n    \"Step 4 - Handle Unequal Lengths\": \"If one version has more revisions, treat the missing revisions in the other version as 0.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm processes each version in O(n) time where n is the length of the longer version.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"version1\": \"1.01\",\n        \"version2\": \"1.001\"\n      },\n      \"output\": 0,\n      \"explanation\": \"Both versions are equal after ignoring leading zeros.\"\n    },\n    {\n      \"input\": {\n        \"version1\": \"1.0\",\n        \"version2\": \"1.0.0\"\n      },\n      \"output\": 0,\n      \"explanation\": \"Missing revisions are treated as 0, so both versions are equal.\"\n    },\n    {\n      \"input\": {\n        \"version1\": \"0.1\",\n        \"version2\": \"1.1\"\n      },\n      \"output\": -1,\n      \"explanation\": \"The first revision of `version1` is less than the first revision of `version2`.\"\n    }\n  ],\n  \"constraints\": {\n    \"version_length\": \"1 <= version1.length, version2.length <= 500\",\n    \"character_set\": \"Version numbers contain only digits and dots.\",\n    \"revision_values\": \"Revisions can be stored in a 32-bit integer.\"\n  },\n  \"follow_up\": \"How would you handle cases where the version strings contain invalid characters or formats?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Make two strings equal by deleting characters."}, {"role": "assistant", "content": "{\n  \"description\": \"Calculate the lowest ASCII sum of deleted characters required to make two given strings `s1` and `s2` equal.\",\n  \"objective\": \"Implement a dynamic programming solution with memoization to minimize the ASCII sum of characters deleted from two strings to make them identical.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Define a helper function `computeCost(i, j)` that calculates the minimum ASCII sum required to make the substrings `s1[0..i]` and `s2[0..j]` equal.\",\n    \"Step 2\": \"Use a hash map `savedResult` to store the results of sub-problems with keys as pairs `(i, j)` and values as the minimum cost for these indices.\",\n    \"Step 3\": \"If both indices `i` and `j` are less than 0, return 0 as no characters need to be deleted.\",\n    \"Step 4\": \"Handle base cases where either `i < 0` or `j < 0`. In these cases, return the ASCII sum of the remaining characters in `s2[0..j]` or `s1[0..i]` respectively.\",\n    \"Step 5\": \"If the characters `s1[i]` and `s2[j]` are equal, recursively compute the cost for `computeCost(i-1, j-1)` without any deletion.\",\n    \"Step 6\": \"If the characters `s1[i]` and `s2[j]` are not equal, consider deleting either `s1[i]` or `s2[j]`. Compute the cost for both options and take the minimum.\",\n    \"Step 7\": \"Store the result of `computeCost(i, j)` in `savedResult` and return it to avoid recomputation.\",\n    \"Step 8\": \"Call `computeCost(s1.length - 1, s2.length - 1)` to get the final result.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s1\": \"sea\",\n        \"s2\": \"eat\"\n      },\n      \"output\": 231,\n      \"explanation\": \"Delete 's' from `s1` (ASCII 115) and 't' from `s2` (ASCII 116). Total: 115 + 116 = 231.\"\n    },\n    {\n      \"input\": {\n        \"s1\": \"delete\",\n        \"s2\": \"leet\"\n      },\n      \"output\": 403,\n      \"explanation\": \"Delete 'd', 'e', 'e' from `s1` (ASCII 100 + 101 + 101) and 'e' from `s2` (ASCII 101). Total: 403.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s1.length, s2.length <= 1000\",\n    \"character_set\": \"`s1` and `s2` consist of lowercase English letters\"\n  },\n  \"follow_up\": \"Discuss the time complexity O(m * n) and space complexity O(m * n) of this approach. Suggest optimizations for space by using a rolling array for the DP table.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Make a class to find moving averages with a window size."}, {"role": "assistant", "content": "{\n  \"description\": \"Implement a class `MovingAverage` to compute the moving average of the last `size` values in a stream of integers. Use efficient data structures to ensure the solution handles up to 10,000 calls efficiently.\",\n  \"objective\": \"Design a class that uses a fixed-size sliding window to calculate the average of the last `size` values in a stream, updating the window dynamically as new values arrive.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize\": \"Create the `MovingAverage` class with a constructor to set the window size and initialize necessary data structures (e.g., a queue or array).\",\n    \"Step 2 - Updating the Window\": [\n      \"1. Add each incoming value to the window.\",\n      \"2. If the window size exceeds `size`, remove the oldest value to maintain the fixed size.\"\n    ],\n    \"Step 3 - Calculate the Average\": \"Compute the moving average of the current window by summing all elements and dividing by the window size.\",\n    \"Step 4 - Optimize\": \"Ensure the implementation uses `O(1)` time for updating and calculating the average.\"\n  },\n  \"examples\": [\n    {\n      \"input\": [\n        \"MovingAverage(3)\",\n        \"next(1)\",\n        \"next(10)\",\n        \"next(3)\",\n        \"next(5)\"\n      ],\n      \"output\": [\n        null,\n        1.0,\n        5.5,\n        4.66667,\n        6.0\n      ],\n      \"explanation\": [\n        \"The first value `1` produces a window `[1]`, average = 1.\",\n        \"Adding `10` updates the window to `[1, 10]`, average = (1+10)/2 = 5.5.\",\n        \"Adding `3` updates the window to `[1, 10, 3]`, average = (1+10+3)/3 = 4.66667.\",\n        \"Adding `5` removes `1` from the window to keep it size 3, window = `[10, 3, 5]`, average = (10+3+5)/3 = 6.\"\n      ]\n    }\n  ],\n  \"constraints\": {\n    \"window_size\": \"1 <= size <= 1000\",\n    \"stream_range\": \"-10^5 <= val <= 10^5\",\n    \"max_calls\": \"At most 10^4 calls will be made to `next`.\"\n  },\n  \"follow_up\": \"Can you adapt the solution to calculate other statistics (e.g., median or mode) within the sliding window?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Make all unique BSTs from numbers 1 to n."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `n`, return all structurally unique BSTs (binary search trees) that can be formed using unique values from 1 to `n`.\",\n  \"objective\": \"Design an algorithm to generate all unique BSTs efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that unique BSTs are formed by choosing a root and recursively constructing left and right subtrees using subsets of remaining values.\",\n    \"Step 2 - Recursive Construction\": \"Recursively generate all possible left and right subtrees for each possible root value.\",\n    \"Step 3 - Combine Subtrees\": \"For each root, combine all left and right subtree combinations to form a complete BST.\",\n    \"Step 4 - Optimize\": \"Use memoization to avoid recomputing trees for the same subset of values.\",\n    \"Step 5 - Handle Edge Cases\": \"Handle edge cases such as `n = 1` (single node tree) and `n = 0` (empty tree).\"\n  },\n  \"examples\": [\n    {\n      \"input\": 3,\n      \"output\": [\n        [\n          1,\n          null,\n          2,\n          null,\n          3\n        ],\n        [\n          1,\n          null,\n          3,\n          2\n        ],\n        [\n          2,\n          1,\n          3\n        ],\n        [\n          3,\n          1,\n          null,\n          null,\n          2\n        ],\n        [\n          3,\n          2,\n          null,\n          1\n        ]\n      ],\n      \"explanation\": \"All unique BSTs formed using values {1, 2, 3} are listed.\"\n    },\n    {\n      \"input\": 1,\n      \"output\": [\n        [\n          1\n        ]\n      ],\n      \"explanation\": \"Only one BST can be formed using the single value 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_range\": \"1 <= n <= 8\"\n  },\n  \"follow_up\": \"Can you analyze the time complexity and use memoization to optimize the generation of unique BSTs?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You have kids and cookies. Match cookies to kids so that as many kids are happy as possible."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given two integer arrays `g` and `s`. The array `g` represents the greed factors of children, where `g[i]` is the minimum size of a cookie required to satisfy the `i-th` child. The array `s` represents the sizes of cookies, where `s[j]` is the size of the `j-th` cookie. Each child can be assigned at most one cookie, and each cookie can only be assigned to one child. Your task is to determine the maximum number of children that can be satisfied by distributing the cookies optimally.\",\n  \"objective\": \"Design an algorithm to maximize the number of content children by efficiently assigning cookies, ensuring each child gets at most one cookie and no cookie is used more than once.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the problem structure: You have two arrays `g` and `s`. The goal is to find how many children in `g` can be satisfied with cookies in `s` such that a child with greed factor `g[i]` gets a cookie of size at least `g[i]`.\",\n    \"Step 2 - Sorting for Efficiency\": \"Sort both arrays `g` and `s` in ascending order. This ensures that smaller greed factors and smaller cookie sizes are considered first, simplifying the assignment process.\",\n    \"Step 3 - Assign Cookies\": \"Iterate through both arrays using two pointers. For each child, try to assign the smallest available cookie that satisfies the child's greed. Move the pointers appropriately as you assign cookies.\",\n    \"Step 4 - Output Format\": \"Return the total number of children that were satisfied. Handle edge cases, such as when there are no cookies (`s` is empty) or when all children have greed factors larger than the largest cookie.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Optimize the solution to run in `O(n log n)` time, where `n` is the larger of the lengths of `g` and `s`. Ensure the code handles edge cases where arrays have minimal length, maximal values, or no elements.\",\n    \"Final Check - Constraints Verification\": \"Verify the implementation works within the constraints `1 <= g.length <= 3 * 10^4` and `1 <= g[i], s[j] <= 2^31 - 1`, ensuring efficient sorting and iteration.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"g\": [\n          1,\n          2,\n          3\n        ],\n        \"s\": [\n          1,\n          1\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"After sorting, greed factors are [1, 2, 3] and cookie sizes are [1, 1]. Only one child with greed factor 1 can be satisfied using one cookie of size 1.\"\n    },\n    {\n      \"input\": {\n        \"g\": [\n          1,\n          2\n        ],\n        \"s\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"After sorting, greed factors are [1, 2] and cookie sizes are [1, 2, 3]. Two children can be satisfied using cookies of sizes 1 and 2.\"\n    },\n    {\n      \"input\": {\n        \"g\": [\n          10,\n          9,\n          8,\n          7\n        ],\n        \"s\": [\n          5,\n          6,\n          7,\n          8\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"After sorting, greed factors are [7, 8, 9, 10] and cookie sizes are [5, 6, 7, 8]. Two children can be satisfied using cookies of sizes 7 and 8.\"\n    }\n  ],\n  \"constraints\": {\n    \"children_greed_length\": \"1 <= g.length <= 30,000\",\n    \"cookie_sizes_length\": \"0 <= s.length <= 30,000\",\n    \"values_range\": \"1 <= g[i], s[j] <= 2^31 - 1\"\n  },\n  \"follow_up\": \"Can you further optimize the solution to minimize space usage, ensuring the implementation is efficient for edge cases such as large input arrays?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count the number of nodes in the tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of a complete binary tree, return the total number of nodes in the tree.\",\n  \"objective\": \"Design an algorithm that computes the number of nodes in less than O(n) time complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Analyze the Tree Structure\": \"Understand the properties of a complete binary tree: all levels except possibly the last are fully filled, and the last level nodes are as far left as possible.\",\n    \"Step 2 - Leverage the Binary Search Property\": \"Use a combination of depth calculation and binary search to count the nodes efficiently.\",\n    \"Step 3 - Handle Edge Cases\": \"Ensure the algorithm handles cases where the tree is empty or has only one node.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"The tree has a total of 6 nodes as shown in the given input array representation.\"\n    },\n    {\n      \"input\": {\n        \"root\": []\n      },\n      \"output\": 0,\n      \"explanation\": \"An empty tree contains no nodes.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"A tree with a single node returns a count of 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"The number of nodes in the tree is in the range [0, 5 * 10^4].\",\n    \"node_values\": \"0 <= Node.val <= 5 * 10^4.\",\n    \"tree_property\": \"The tree is guaranteed to be complete.\"\n  },\n  \"follow_up\": \"Can you generalize your solution to compute nodes for an arbitrary binary tree efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "In a PAC-MAN game, check if you can reach the target before any ghosts."}, {"role": "assistant", "content": "{\n  \"description\": \"You are playing a simplified PAC-MAN game on an infinite 2-D grid, starting at the point [0, 0], and your goal is to reach a target point [xtarget, ytarget] before any ghosts. You are given the starting positions of the ghosts in a 2D array `ghosts`, where each ghost's position is represented by [xi, yi]. Each turn, you and the ghosts can move 1 unit in any direction or stay still. The goal is to determine if you can reach the target point before any ghost does, considering that the ghosts move simultaneously with you. If you can reach the target before any ghost, return `true`; otherwise, return `false`. If you arrive at the target at the same time as a ghost, it doesn't count as an escape.\",\n  \"objective\": \"Determine if it's possible to escape from the ghosts and reach the target before they do.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The goal is to reach the target point [xtarget, ytarget] before any ghost can reach it. Each ghost moves 1 unit per turn, just like the player, and they all start simultaneously. You must ensure that you can reach the target either before the ghosts or without colliding with them. If a ghost reaches the target or your position before you, you lose.\",\n    \"Step 2 - Distance Calculation\": \"The key observation is that the player moves at the same speed as the ghosts. The escape condition requires comparing the time it takes the player and each ghost to reach the target. The distance can be calculated using the Manhattan distance formula, `|x2 - x1| + |y2 - y1|`, where `(x1, y1)` is the start and `(x2, y2)` is the target position.\",\n    \"Step 3 - Decision Process\": \"If the player can reach the target in fewer turns than any ghost, then the player escapes. However, if any ghost can reach the target at the same time or earlier than the player, escape is not possible.\",\n    \"Step 4 - Algorithm\": \"For each ghost, calculate the Manhattan distance from the ghost's start position to the target and compare it with the player's distance. If any ghost reaches the target earlier or at the same time as the player, return `false`. If the player can always reach the target first, return `true`.\",\n    \"Step 5 - Edge Case Handling\": \"Consider edge cases where multiple ghosts are at the same position or where the player and ghost start at the same distance. Also, handle large and small values for the target and ghost positions within the constraints.\",\n    \"Step 6 - Code Efficiency\": \"Ensure the algorithm efficiently handles up to 100 ghosts, with positions in the range [-10^4, 10^4], as this is the upper bound for inputs.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"ghosts\": [\n          [\n            1,\n            0\n          ],\n          [\n            0,\n            3\n          ]\n        ],\n        \"target\": [\n          0,\n          1\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"You can reach the target (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you.\"\n    },\n    {\n      \"input\": {\n        \"ghosts\": [\n          [\n            1,\n            0\n          ]\n        ],\n        \"target\": [\n          2,\n          0\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"You need to reach the target (2, 0), but the ghost at (1, 0) lies between you and the destination, so you cannot escape.\"\n    },\n    {\n      \"input\": {\n        \"ghosts\": [\n          [\n            2,\n            0\n          ]\n        ],\n        \"target\": [\n          1,\n          0\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The ghost at (2, 0) can reach the target at the same time as you. Therefore, you cannot escape.\"\n    }\n  ],\n  \"constraints\": {\n    \"ghosts_length\": \"1 <= ghosts.length <= 100\",\n    \"ghost_position_range\": \"-10^4 <= xi, yi <= 10^4\",\n    \"target_position_range\": \"-10^4 <= xtarget, ytarget <= 10^4\",\n    \"same_location\": \"Multiple ghosts can occupy the same location.\"\n  },\n  \"follow_up\": \"Can the solution be optimized further to handle larger grids or ghost positions?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Make a class to add and find words."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a data structure that can add words and search for words using dot `.` as a wildcard character.\",\n  \"objective\": \"Implement a `WordDictionary` class with methods to add and search words efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Data Structure\": \"Create a TrieNode structure to store characters and child nodes.\",\n    \"Step 2 - Add Word\": \"For each character in the word, traverse or create TrieNodes and mark the last node as the end of a word.\",\n    \"Step 3 - Search Word\": \"Implement a recursive or iterative search that supports matching dots `.` to any character.\",\n    \"Step 4 - Handle Wildcards\": \"Ensure the search handles multiple wildcards in a word by exploring all possible paths.\"\n  },\n  \"examples\": [\n    {\n      \"input\": [\n        [\n          \"WordDictionary\",\n          \"addWord\",\n          \"addWord\",\n          \"search\",\n          \"search\",\n          \"search\",\n          \"search\"\n        ],\n        [\n          [],\n          [\n            \"bad\"\n          ],\n          [\n            \"dad\"\n          ],\n          [\n            \"bad\"\n          ],\n          [\n            \".ad\"\n          ],\n          [\n            \"b..\"\n          ],\n          [\n            \"pad\"\n          ]\n        ]\n      ],\n      \"output\": [\n        null,\n        null,\n        null,\n        true,\n        true,\n        true,\n        false\n      ],\n      \"explanation\": \"The word 'bad' is in the dictionary. '.ad' matches 'bad' and 'dad'. 'b..' matches 'bad'. 'pad' is not found.\"\n    },\n    {\n      \"input\": [\n        [\n          \"WordDictionary\",\n          \"addWord\",\n          \"search\"\n        ],\n        [\n          [],\n          [\n            \"a\"\n          ],\n          [\n            \".\"\n          ]\n        ]\n      ],\n      \"output\": [\n        null,\n        true\n      ],\n      \"explanation\": \"The word 'a' is added and matched with '.'.\"\n    }\n  ],\n  \"constraints\": {\n    \"word_length\": \"1 <= word.length <= 25\",\n    \"calls\": \"At most 10^4 calls to `addWord` and `search`\",\n    \"input_characters\": \"Words consist of lowercase letters and may include the dot '.' in searches.\"\n  },\n  \"follow_up\": \"Could you optimize the `search` method for frequent wildcard usage?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a binary tree, determine if it is a complete binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary tree, determine if it is a _complete binary tree_. A **complete binary tree** is a binary tree where every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. The last level can have between `1` and `2^h` nodes inclusive, where `h` is the height of the tree.\",\n  \"objective\": \"Write an algorithm that checks if a binary tree is a complete binary tree. A complete binary tree is defined by the properties that all levels, except the last, must be filled, and the nodes in the last level must be as far left as possible.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We are tasked with checking if the given binary tree follows the rules of a complete binary tree. A complete binary tree can have missing nodes on the last level but requires that all other levels are fully populated, and the last level must be filled from left to right.\",\n    \"Step 2 - Plan of Approach\": \"We need to traverse the binary tree level by level, ensuring that all nodes in each level (except the last one) are filled. For the last level, we need to check if all nodes are as left as possible.\",\n    \"Step 3 - Handling Edge Cases\": \"We need to handle edge cases where the tree has only one node, is empty, or where nodes at the last level are misaligned.\",\n    \"Step 4 - Output Format\": \"Return a boolean value: `true` if the tree is a complete binary tree, and `false` otherwise.\",\n    \"Step 5 - Code Efficiency\": \"The algorithm should traverse the binary tree once and check the required conditions in an efficient manner (i.e., O(n) time complexity, where n is the number of nodes in the tree).\",\n    \"Step 6 - Final Check\": \"Ensure that the input binary tree is within the constraints, such that the number of nodes is between 1 and 100, and node values are within the range of 1 to 1000.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"Every level before the last is full (levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          null,\n          7\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The node with value 7 isn't as far left as possible, violating the completeness of the binary tree.\"\n    }\n  ],\n  \"constraints\": {\n    \"tree_size\": \"1 <= number of nodes <= 100\",\n    \"node_values\": \"1 <= Node.val <= 1000\"\n  },\n  \"follow_up\": \"Can you implement a more optimized solution that checks the completeness without needing to traverse the entire tree multiple times?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find bulls and cows in the Bulls and Cows game."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two strings `secret` and `guess`, determine the number of 'bulls' and 'cows' in the Bulls and Cows game. Bulls are digits in the guess that are in the correct position, while cows are digits in the guess that are in the secret but not in the correct position.\",\n  \"objective\": \"Design an efficient algorithm to calculate the number of bulls and cows for any valid input, handling cases with duplicate digits.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the requirements:\\n1. A 'bull' occurs when a digit in `guess` matches the corresponding digit in `secret`.\\n2. A 'cow' occurs when a digit in `guess` exists in `secret` but is not a bull and appears in the wrong position.\",\n    \"Step 2 - Counting Bulls\": \"Iterate through `secret` and `guess`. For each index where the digits match, count it as a bull.\",\n    \"Step 3 - Counting Cows\": \"Use a frequency count to track unmatched digits in both `secret` and `guess`. Match the minimum frequency of each digit between the two counts to determine the cows.\",\n    \"Step 4 - Format the Output\": \"Return the result as a string formatted as 'xAyB', where `x` is the number of bulls and `y` is the number of cows.\",\n    \"Step 5 - Edge Cases\": \"Handle scenarios such as:\\n- All digits matching (`secret` == `guess`).\\n- No matches (completely different `secret` and `guess`).\\n- Large inputs up to the constraint limits.\",\n    \"Step 6 - Efficiency\": \"Ensure the algorithm runs in O(n) time complexity, where n is the length of `secret` and `guess`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"secret\": \"1807\",\n        \"guess\": \"7810\"\n      },\n      \"output\": \"1A3B\",\n      \"explanation\": \"One bull (1) and three cows (8, 0, 7).\"\n    },\n    {\n      \"input\": {\n        \"secret\": \"1123\",\n        \"guess\": \"0111\"\n      },\n      \"output\": \"1A1B\",\n      \"explanation\": \"One bull (1) and one cow (1).\"\n    },\n    {\n      \"input\": {\n        \"secret\": \"1234\",\n        \"guess\": \"5678\"\n      },\n      \"output\": \"0A0B\",\n      \"explanation\": \"No bulls or cows.\"\n    }\n  ],\n  \"constraints\": {\n    \"length\": \"1 <= secret.length == guess.length <= 1000\",\n    \"content\": \"`secret` and `guess` consist of digits only.\"\n  },\n  \"follow_up\": \"Can you optimize the solution for extremely large inputs by reducing memory usage or preprocessing?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Write a function to encode and decode a list of strings."}, {"role": "assistant", "content": "{\n  \"description\": \"Design an algorithm to encode a list of strings into a single string that can be transmitted over a network, and decode the received string back into the original list of strings. The encoding and decoding must ensure no loss of data or ambiguity in the reconstruction.\",\n  \"objective\": \"Implement the `encode` and `decode` functions such that the encoding handles strings of arbitrary content, including special characters like delimiters, and ensures the decoded output is identical to the original input.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the problem involves converting a list of strings into a single string while ensuring no ambiguity in decoding. Delimiters like commas or spaces cannot be directly used as they might be part of the strings.\",\n    \"Step 2 - Encoding Approach\": \"Use a length-prefix encoding strategy. For each string, append its length followed by a special delimiter (e.g., `#`), then the string itself. Combine all such encodings into a single string.\",\n    \"Step 3 - Decoding Approach\": \"Traverse the encoded string to parse the lengths and extract the corresponding substrings. Use the delimiter to distinguish between length and content.\",\n    \"Step 4 - Edge Cases\": \"Handle edge cases like empty strings, strings with only special characters, or very large strings. Ensure decoding works even for empty lists or strings.\",\n    \"Step 5 - Output\": \"Return the original list of strings after decoding.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"strs\": [\n          \"Hello\",\n          \"World\"\n        ]\n      },\n      \"output\": [\n        \"Hello\",\n        \"World\"\n      ],\n      \"explanation\": \"The encoded string might look like '5#Hello5#World'. After decoding, the original list is reconstructed.\"\n    },\n    {\n      \"input\": {\n        \"strs\": [\n          \"\",\n          \"Test\",\n          \"#Delimiters\"\n        ]\n      },\n      \"output\": [\n        \"\",\n        \"Test\",\n        \"#Delimiters\"\n      ],\n      \"explanation\": \"The encoded string handles empty strings and special characters correctly.\"\n    },\n    {\n      \"input\": {\n        \"strs\": [\n          \" \"\n        ]\n      },\n      \"output\": [\n        \" \"\n      ],\n      \"explanation\": \"The encoded string preserves spaces as part of the data.\"\n    }\n  ],\n  \"constraints\": {\n    \"list_size\": \"1 <= strs.length <= 200\",\n    \"string_length\": \"0 <= strs[i].length <= 200\",\n    \"character_set\": \"strs[i] can contain any of the 256 valid ASCII characters.\"\n  },\n  \"follow_up\": \"Can you generalize the algorithm to work with any set of characters, including Unicode, while maintaining efficiency?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Calculate the maximum profit with stock trading and a transaction fee."}, {"role": "assistant", "content": "{\n  \"description\": \"Calculate the maximum profit achievable by buying and selling stocks over multiple days with a given transaction fee.\",\n  \"objective\": \"Implement a space-optimized dynamic programming approach to maximize the profit, ensuring you consider the transaction fee for each sale.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Initialize variables `free` to 0 and `hold` to -prices[0], representing the maximum profit on day 0 when not holding and holding a stock, respectively.\",\n    \"Step 2\": \"Iterate through the `prices` array from day 1 to the last day.\",\n    \"Step 3\": \"For each day, temporarily store the previous value of `hold` in a variable `tmp`.\",\n    \"Step 4\": \"Update `hold` as the maximum of its current value or `free - prices[i]`.\",\n    \"Step 5\": \"Update `free` as the maximum of its current value or `tmp + prices[i] - fee`.\",\n    \"Step 6\": \"After processing all days, return the value of `free`, representing the maximum profit achievable.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"prices\": [\n          1,\n          3,\n          2,\n          8,\n          4,\n          9\n        ],\n        \"fee\": 2\n      },\n      \"output\": 8,\n      \"explanation\": \"The maximum profit is achieved by: Buying at day 0 (price 1), selling at day 3 (price 8), buying at day 4 (price 4), and selling at day 5 (price 9). The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.\"\n    },\n    {\n      \"input\": {\n        \"prices\": [\n          1,\n          3,\n          7,\n          5,\n          10,\n          3\n        ],\n        \"fee\": 3\n      },\n      \"output\": 6,\n      \"explanation\": \"The maximum profit is achieved by: Buying at day 0 (price 1), selling at day 2 (price 7), and buying at day 3 (price 5), selling at day 4 (price 10). The total profit is ((7 - 1) - 3) + ((10 - 5) - 3) = 6.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"1 <= prices.length <= 5 * 10^4\",\n    \"element_range\": \"1 <= prices[i] < 5 * 10^4\",\n    \"fee_range\": \"0 <= fee < 5 * 10^4\"\n  },\n  \"follow_up\": \"Analyze the time complexity as O(n), where n is the number of days, and the space complexity as O(1) due to the optimization of variables. Discuss scenarios where the transaction fee makes trading unprofitable and how this impacts the algorithm.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Remove all occurrences of a value from an array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums` and an integer `val`, remove all occurrences of `val` from `nums` **in-place**. Return the number of elements in `nums` that are not equal to `val`. Modify the array such that the first `k` elements contain the values that are not equal to `val`, and the order of elements can be changed. The remaining elements in `nums` beyond the first `k` do not matter.\",\n  \"objective\": \"Design an efficient algorithm to remove all occurrences of `val` from the array in-place, ensuring the solution modifies the array within the given constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The task involves removing all occurrences of a specific value (`val`) from an array. The solution must modify the array in-place, and the relative order of elements does not need to be preserved.\",\n    \"Step 2 - Two-Pointer Technique\": \"Use a two-pointer approach: one pointer traverses the array, and the other keeps track of the position where the next valid element should be placed.\",\n    \"Step 3 - Update the Array\": \"Whenever an element not equal to `val` is encountered, place it at the position tracked by the second pointer and increment the pointer.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution adheres to the constraints, such as `0 <= nums.length <= 100` and `0 <= val <= 100`.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider scenarios where `nums` is empty, `val` does not exist in `nums`, or all elements in `nums` are equal to `val`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          2,\n          2,\n          3\n        ],\n        \"val\": 3\n      },\n      \"output\": {\n        \"k\": 2,\n        \"nums\": [\n          2,\n          2,\n          \"_\",\n          \"_\"\n        ]\n      },\n      \"explanation\": \"The function modifies the array to contain only the elements not equal to 3 and returns k = 2.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          1,\n          2,\n          2,\n          3,\n          0,\n          4,\n          2\n        ],\n        \"val\": 2\n      },\n      \"output\": {\n        \"k\": 5,\n        \"nums\": [\n          0,\n          1,\n          4,\n          0,\n          3,\n          \"_\",\n          \"_\",\n          \"_\"\n        ]\n      },\n      \"explanation\": \"The function removes all occurrences of 2, and the remaining 5 elements can be in any order.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"0 <= nums.length <= 100\",\n    \"element_range\": \"0 <= nums[i] <= 50\",\n    \"val_range\": \"0 <= val <= 100\"\n  },\n  \"follow_up\": \"Can you solve this problem in `O(n)` time complexity and `O(1)` extra space?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Calculate the score of a parentheses string. The score is based on the parentheses structure."}, {"role": "assistant", "content": "{\n  \"description\": \"You are tasked with calculating the score of a balanced parentheses string. The score follows specific rules for different types of balanced parentheses strings. If the string is just '()', the score is 1. If it is a combination of balanced strings, the score is the sum of the individual scores. If it is a nested balanced string, the score is doubled for the inner string.\",\n  \"objective\": \"Write a function that calculates the score of a balanced parentheses string based on the provided rules.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The goal is to evaluate a balanced parentheses string where the scoring follows specific rules for simple parentheses, combinations of balanced strings, and nested parentheses. We need to calculate the score for these cases accurately.\",\n    \"Step 2 - Approach\": \"We can use a stack-based approach to evaluate the score of a balanced parentheses string. By iterating through the string, we can process each character and calculate scores based on the surrounding parentheses structure.\",\n    \"Step 3 - Algorithm Design\": \"A stack will help us track the score for each nested level of parentheses. When we encounter a closing parenthesis, we calculate the score for the enclosed string and add it to the current level's score. If there are multiple balanced strings, we simply add their scores together.\",\n    \"Step 4 - Edge Case Considerations\": \"Handle edge cases like strings consisting of simple pairs of parentheses or multiple combinations of parentheses correctly. Ensure that the function can handle strings of varying lengths, including the maximum allowed length of 50.\",\n    \"Step 5 - Final Check\": \"Make sure the function works as expected with different combinations of parentheses and returns the correct score for each test case. Test with cases such as '(())', '()', and combinations like '()()'.\"\n  },\n  \"examples\": [\n    {\n      \"input\": \"(())\",\n      \"output\": 2,\n      \"explanation\": \"The inner parentheses '()' has a score of 1, and the outer parentheses doubles this score, resulting in 2.\"\n    },\n    {\n      \"input\": \"()()\",\n      \"output\": 2,\n      \"explanation\": \"Two pairs of parentheses each have a score of 1, and their total score is 2.\"\n    }\n  ],\n  \"constraints\": {\n    \"length\": \"2 <= s.length <= 50\",\n    \"characters\": \"The string `s` consists of only '(' and ')'.\",\n    \"balance\": \"The string `s` is guaranteed to be balanced.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum cost to paint all houses where no two adjacent houses have the same color."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a row of `n` houses, each house can be painted in one of three colors: red, blue, or green. The cost of painting each house with a specific color is represented by a `n x 3` matrix `costs`, where `costs[i][j]` is the cost of painting the `i-th` house with the `j-th` color. The task is to paint all the houses such that no two adjacent houses have the same color, and the total painting cost is minimized.\",\n  \"objective\": \"Implement an efficient algorithm to calculate the minimum cost of painting all houses. Use dynamic programming to handle dependencies between adjacent houses while ensuring an optimal solution.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the constraints where adjacent houses cannot share the same color, and the task is to minimize the total cost. Recognize that the cost for each house depends on the cost of painting the previous house.\",\n    \"Step 2 - Dynamic Programming Approach\": \"Maintain a table or update the input matrix in place to track cumulative minimum costs for each color. Use a transition formula where the cost of painting house `i` with a specific color depends on the minimum cost of painting the previous house with a different color.\",\n    \"Step 3 - Transition Formula\": \"For each house `i` and color `j` (0 for red, 1 for blue, 2 for green), update `costs[i][j]` as `costs[i][j] += min(costs[i-1][(j+1) % 3], costs[i-1][(j+2) % 3])`.\",\n    \"Step 4 - Edge Cases\": \"Handle cases with a single house (choose the minimum cost directly) or large matrices with varying costs.\",\n    \"Step 5 - Output\": \"Return the minimum value in the last row of the updated `costs` matrix, which represents the minimal cost to paint all houses.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"costs\": [\n          [\n            17,\n            2,\n            17\n          ],\n          [\n            16,\n            16,\n            5\n          ],\n          [\n            14,\n            3,\n            19\n          ]\n        ]\n      },\n      \"output\": 10,\n      \"explanation\": \"Paint house 0 blue (2), house 1 green (5), and house 2 blue (3). Total cost: 2 + 5 + 3 = 10.\"\n    },\n    {\n      \"input\": {\n        \"costs\": [\n          [\n            7,\n            6,\n            2\n          ]\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"With only one house, choose the minimum cost (2).\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size\": \"1 <= costs.length == n <= 100\",\n    \"cost_range\": \"1 <= costs[i][j] <= 20\",\n    \"colors\": \"Each house can only be painted in red, blue, or green.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to use `O(1)` space by modifying the `costs` matrix in place?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Split a linked list into k parts."}, {"role": "assistant", "content": "{\n  \"description\": \"Split a singly linked list into `k` consecutive parts of approximately equal size. Some parts may be null.\",\n  \"objective\": \"Implement an in-place solution to divide the linked list into `k` parts, where each part has a size difference of at most 1, and earlier parts have a greater size if there is a remainder.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Calculate the total size of the linked list by traversing it once.\",\n    \"Step 2\": \"Determine the base size of each part as `totalSize // k` and calculate the number of extra nodes as `totalSize % k`.\",\n    \"Step 3\": \"Initialize an array `ans` of size `k` to hold the parts.\",\n    \"Step 4\": \"For each part, determine its size as `baseSize + 1` if there are remaining extra nodes, or `baseSize` otherwise.\",\n    \"Step 5\": \"Iterate through the nodes to form each part by updating pointers. Set the `next` of the last node in each part to `null` to detach it.\",\n    \"Step 6\": \"Store the head of each part in `ans` and repeat for all parts.\",\n    \"Step 7\": \"Return `ans` containing all the parts.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2,\n          3\n        ],\n        \"k\": 5\n      },\n      \"output\": [\n        [\n          1\n        ],\n        [\n          2\n        ],\n        [\n          3\n        ],\n        [],\n        []\n      ],\n      \"explanation\": \"The linked list has 3 nodes, and we split it into 5 parts. The first three parts contain one node each, and the last two parts are null.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n          9,\n          10\n        ],\n        \"k\": 3\n      },\n      \"output\": [\n        [\n          1,\n          2,\n          3,\n          4\n        ],\n        [\n          5,\n          6,\n          7\n        ],\n        [\n          8,\n          9,\n          10\n        ]\n      ],\n      \"explanation\": \"The linked list has 10 nodes, which is divided into 3 parts. The sizes are 4, 3, and 3, with no remainder.\"\n    }\n  ],\n  \"constraints\": {\n    \"list_size\": \"The number of nodes is in the range [0, 1000]\",\n    \"node_value\": \"0 <= Node.val <= 1000\",\n    \"k_range\": \"1 <= k <= 50\"\n  },\n  \"follow_up\": \"Discuss how the algorithm would change for a circular linked list or if the input was a doubly linked list.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the majority element in an array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `nums` of size `n`, find the majority element. The majority element is the element that appears more than `\\u230an / 2\\u230b` times.\",\n  \"objective\": \"Design an efficient algorithm to determine the majority element in the array.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the majority element is guaranteed to exist in the array and occurs more than `\\u230an / 2\\u230b` times.\",\n    \"Step 2 - Utilize Boyer-Moore Voting Algorithm\": \"Iterate through the array using a counter to find the candidate for the majority element.\",\n    \"Step 3 - Verify Candidate\": \"Ensure that the candidate element indeed occurs more than `\\u230an / 2\\u230b` times by counting its occurrences.\",\n    \"Step 4 - Optimize Space\": \"Design the solution to run in O(n) time and use O(1) space by avoiding additional data structures.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider edge cases like arrays of size 1, all elements being the same, or alternating elements.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          2,\n          3\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"3 occurs more than \\u230a3 / 2\\u230b times.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          2,\n          1,\n          1,\n          1,\n          2,\n          2\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"2 occurs more than \\u230a7 / 2\\u230b times.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 5 * 10^4\",\n    \"element_range\": \"-10^9 <= nums[i] <= 10^9\"\n  },\n  \"follow_up\": \"Can you solve the problem in O(n) time and O(1) space?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given strings in a grid. Check which columns aren't sorted."}, {"role": "assistant", "content": "{}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the sum of two integers."}, {"role": "assistant", "content": "{\n  \"title\": \"Sum Two Integers Without Using `+` or `-` Operators\",\n  \"description\": \"Calculate the sum of two integers using bitwise operations instead of the `+` and `-` operators.\",\n  \"input\": {\n    \"parameters\": [\n      {\n        \"name\": \"a\",\n        \"type\": \"integer\",\n        \"description\": \"First integer input.\",\n        \"constraints\": \"-1000 <= a <= 1000\"\n      },\n      {\n        \"name\": \"b\",\n        \"type\": \"integer\",\n        \"description\": \"Second integer input.\",\n        \"constraints\": \"-1000 <= b <= 1000\"\n      }\n    ]\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The sum of the two integers calculated without using `+` or `-` operators.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"a\": 1,\n        \"b\": 2\n      },\n      \"output\": 3,\n      \"explanation\": \"Using bitwise operations: (1 XOR 2) + ((1 AND 2) << 1).\"\n    },\n    {\n      \"input\": {\n        \"a\": -2,\n        \"b\": 3\n      },\n      \"output\": 1,\n      \"explanation\": \"Using bitwise operations to simulate addition of a negative and positive integer.\"\n    },\n    {\n      \"input\": {\n        \"a\": 1000,\n        \"b\": -1000\n      },\n      \"output\": 0,\n      \"explanation\": \"Adding a positive and its negative counterpart results in zero.\"\n    }\n  ],\n  \"hints\": [\n    \"Use bitwise XOR (`^`) for addition without carrying.\",\n    \"Use bitwise AND (`&`) followed by a left shift to compute the carry.\",\n    \"Iteratively add until there is no carry.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Implement an iterative solution that handles both positive and negative integers efficiently.\",\n    \"constraints\": \"Avoid recursion to ensure the solution does not exceed stack limits.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Rank athletes based on their scores, assigning medals to the top three and numerical ranks to the rest."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `score` of unique scores for `n` athletes, return an array where each element represents the rank of the corresponding athlete based on their score. The top three athletes receive ranks as 'Gold Medal', 'Silver Medal', and 'Bronze Medal', respectively. Athletes ranked from 4th place onwards receive their numerical rank as a string.\",\n  \"objective\": \"Design an algorithm to determine each athlete's rank based on their score, using an efficient approach to map each score to the correct rank, ideally leveraging array indexing.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Examine the input `score` array, which contains unique integer values for each athlete. Sort the scores from highest to lowest to assign ranks. Map each rank back to the original indices to ensure the result array reflects each athlete\\u2019s correct position.\",\n    \"Step 2 - Efficient Array Mapping\": \"To avoid repeated lookups, create an array `scoreToIndex` of size `maxScore + 1`, where each index corresponds to a possible score. Store each athlete\\u2019s original index in this array by their score.\",\n    \"Step 3 - Mapping Scores to Ranks\": \"Traverse `scoreToIndex` in reverse (from highest score to lowest), assigning ranks based on position. For the top three positions, use 'Gold Medal', 'Silver Medal', and 'Bronze Medal'; for subsequent positions, use the numerical rank as a string.\",\n    \"Step 4 - Updating Results Array\": \"Initialize an empty `rank` array to store the results. For each score in descending order, update the `rank` array at the stored index of the athlete\\u2019s score, assigning the correct rank or medal.\",\n    \"Step 5 - Complexity and Constraints\": \"Optimize by ensuring `scoreToIndex` has minimal unused space, leveraging direct index access for O(n) time complexity.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution works for up to `10^4` athletes with scores ranging up to `10^6`, ensuring it is efficient in memory usage and runtime.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"score\": [\n          5,\n          4,\n          3,\n          2,\n          1\n        ]\n      },\n      \"output\": [\n        \"Gold Medal\",\n        \"Silver Medal\",\n        \"Bronze Medal\",\n        \"4\",\n        \"5\"\n      ],\n      \"explanation\": \"The scores correspond to placements [1st, 2nd, 3rd, 4th, 5th], where the top three are assigned medals and others receive their numerical rank.\"\n    },\n    {\n      \"input\": {\n        \"score\": [\n          10,\n          3,\n          8,\n          9,\n          4\n        ]\n      },\n      \"output\": [\n        \"Gold Medal\",\n        \"5\",\n        \"Bronze Medal\",\n        \"Silver Medal\",\n        \"4\"\n      ],\n      \"explanation\": \"The scores correspond to placements [1st, 5th, 3rd, 2nd, 4th], assigned medals for the top three and numerical ranks for the others.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"1 <= n <= 10^4\",\n    \"score_range\": \"0 <= score[i] <= 10^6\",\n    \"uniqueness\": \"All values in `score` are unique.\"\n  },\n  \"follow_up\": \"Could you devise a solution that minimizes memory usage by avoiding hashmap lookups, instead relying on direct index operations or sorting to optimize performance?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Return the index of a target number randomly."}, {"role": "assistant", "content": "{\n  \"title\": \"Random Index Picker for Duplicates\",\n  \"description\": \"Given an integer array `nums` that may contain duplicates, implement a solution to randomly pick an index of a target number from the array. All indices where `nums[i] == target` should have an equal probability of being returned.\",\n  \"objective\": \"Design an efficient algorithm using appropriate data structures to allow quick random selection of target indices.\",\n  \"methods\": {\n    \"Solution\": {\n      \"description\": \"Initializes the object with the input array `nums`.\",\n      \"parameters\": [\n        {\n          \"name\": \"nums\",\n          \"type\": \"array of integers\",\n          \"description\": \"The input array that may contain duplicate elements.\",\n          \"constraints\": \"1 <= nums.length <= 2 * 10^4, -2^31 <= nums[i] <= 2^31 - 1\"\n        }\n      ]\n    },\n    \"pick\": {\n      \"description\": \"Randomly selects an index `i` where `nums[i] == target`.\",\n      \"parameters\": [\n        {\n          \"name\": \"target\",\n          \"type\": \"integer\",\n          \"description\": \"The target number to find in the array.\"\n        }\n      ],\n      \"output\": {\n        \"type\": \"integer\",\n        \"description\": \"A random index `i` such that `nums[i] == target`.\"\n      }\n    }\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"methods\": [\n          \"Solution\",\n          \"pick\",\n          \"pick\",\n          \"pick\"\n        ],\n        \"arguments\": [\n          [\n            [\n              1,\n              2,\n              3,\n              3,\n              3\n            ]\n          ],\n          [\n            3\n          ],\n          [\n            1\n          ],\n          [\n            3\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        4,\n        0,\n        2\n      ],\n      \"explanation\": \"In the array `nums = [1, 2, 3, 3, 3]`, the method `pick(3)` randomly returns one of the indices `[2, 3, 4]` with equal probability. `pick(1)` returns `0` since `1` only appears at index `0`.\"\n    }\n  ],\n  \"hints\": [\n    \"Preprocess the array to map each number to its list of indices.\",\n    \"Use reservoir sampling or direct lookup for uniform random selection.\",\n    \"Ensure each valid index has an equal chance of being picked.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Minimize preprocessing and query time. `pick` should run in O(1) or O(log k) time where `k` is the number of occurrences of `target`.\",\n    \"constraints\": \"Avoid excessive memory usage for preprocessing, particularly for sparse arrays.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count the number of arrays with a given number of inverse pairs."}, {"role": "assistant", "content": "{\n  \"description\": \"Given integers `n` and `k`, compute the number of arrays consisting of numbers from 1 to `n` that have exactly `k` inverse pairs, modulo `10^9 + 7`.\",\n  \"objective\": \"Efficiently calculate the count of arrays with exactly `k` inverse pairs using dynamic programming.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize DP Table\": \"Create a 2D DP table `dp[i][j]` where `dp[i][j]` represents the number of arrays with `i` elements and exactly `j` inverse pairs. Initialize `dp[0][0] = 1`.\",\n    \"Step 2 - Base Cases\": \"Set `dp[i][0] = 1` for all `i`, since there is only one way to form arrays with no inverse pairs (sorted order).\",\n    \"Step 3 - Fill DP Table\": \"For each `i` from 1 to `n` and `j` from 1 to `k`, update `dp[i][j]` as the sum of `dp[i-1][j-p]` for all valid `p` values, where `0 <= p <= min(j, i-1)`.\",\n    \"Step 4 - Optimize with Sliding Window\": \"Use cumulative sums to optimize the calculation of `dp[i][j]` by maintaining a sliding window sum for valid `p` values.\",\n    \"Step 5 - Return Result\": \"Retrieve the result from `dp[n][k]` modulo `10^9 + 7`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 3,\n        \"k\": 0\n      },\n      \"output\": 1,\n      \"explanation\": \"Only the array [1, 2, 3] has exactly 0 inverse pairs.\"\n    },\n    {\n      \"input\": {\n        \"n\": 3,\n        \"k\": 1\n      },\n      \"output\": 2,\n      \"explanation\": \"The arrays [1, 3, 2] and [2, 1, 3] have exactly 1 inverse pair.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 1000\",\n    \"k_range\": \"0 <= k <= 1000\"\n  },\n  \"follow_up\": \"Explore space optimization techniques for the DP table to handle large values of `n` and `k` more efficiently.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum distance between Alex and the closest person in a row of seats."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an array `seats` where each element represents a seat in a row. `seats[i] = 1` indicates a person is sitting in the `i`th seat, while `seats[i] = 0` indicates that the `i`th seat is empty. Alex wants to sit in an empty seat such that the distance to the closest person is maximized. The task is to return the maximum distance between Alex and the closest person in the row.\",\n  \"objective\": \"Design an algorithm that efficiently finds the maximum distance between Alex and the closest person, ensuring it handles large inputs efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The problem requires finding the empty seat where the maximum distance to the closest person is achieved. The input is a list of `0`s and `1`s, where `0` represents an empty seat, and `1` represents a person sitting in that seat. At least one `0` and one `1` will always be present in the input.\",\n    \"Step 2 - Initial Approach\": \"Start by identifying all the positions of the people (i.e., where `seats[i] = 1`). Then, for each empty seat, compute the distance to the closest person. Keep track of the maximum such distance across all empty seats.\",\n    \"Step 3 - Optimization Consideration\": \"To avoid inefficient calculations, consider iterating through the array and using two pointers or calculating distances from the closest person on both sides of each empty seat.\",\n    \"Step 4 - Edge Cases\": \"Consider edge cases like a row where people are seated at the very beginning or end, or rows with many empty seats in the middle. Ensure the solution accounts for all such possibilities.\",\n    \"Step 5 - Output Format\": \"Return the maximum distance to the closest person as an integer.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"seats\": [\n          1,\n          0,\n          0,\n          0,\n          1,\n          0,\n          1\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"If Alex sits in the second open seat (i.e., seats[2]), the closest person has distance 2. Any other open seat has a distance of 1. Thus, the maximum distance to the closest person is 2.\"\n    },\n    {\n      \"input\": {\n        \"seats\": [\n          1,\n          0,\n          0,\n          0\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"If Alex sits in the last seat (i.e., seats[3]), the closest person is 3 seats away. This is the maximum distance possible.\"\n    },\n    {\n      \"input\": {\n        \"seats\": [\n          0,\n          1\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"Alex can sit in either seat, and the closest person is 1 seat away in both cases.\"\n    }\n  ],\n  \"constraints\": {\n    \"seats_length\": \"2 <= seats.length <= 2 * 10^4\",\n    \"seats_values\": \"seats[i] is 0 or 1\",\n    \"seat_conditions\": \"At least one seat is empty, and at least one seat is occupied\"\n  },\n  \"follow_up\": \"Can you optimize the solution to achieve a time complexity better than O(n) by utilizing additional space, such as storing distances in a separate array or using a more efficient algorithm?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Calculate the minimum number of operations to get n 'A's on a notepad using copy and paste."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the minimum number of operations needed to get exactly n characters 'A' on a notepad, starting with one 'A' and performing only 'Copy All' or 'Paste' operations.\",\n  \"objective\": \"Minimize the number of operations using a mathematical approach based on the prime factorization of n.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Variables\": \"Start with a variable ans initialized to 0 for the sum of prime factors, and set d to 2, the first possible prime factor.\",\n    \"Step 2 - Process Prime Factors\": \"Iteratively divide n by its smallest prime factor d, adding d to ans each time. Increment d to find the next factor once n is no longer divisible by d.\",\n    \"Step 3 - Return the Result\": \"Return ans as the total number of operations required once n is reduced to 1.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 3\n      },\n      \"output\": 3,\n      \"explanation\": \"Perform [Copy All] -> [Paste] -> [Paste] to reach 'AAA' with 3 operations.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1\n      },\n      \"output\": 0,\n      \"explanation\": \"No operations are needed since the initial state already has 1 'A'.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 1000\"\n  },\n  \"follow_up\": \"Discuss the time complexity of the prime factorization approach and how it compares to other possible strategies for solving the problem.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the longest consecutive path in a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of a binary tree, return the length of the longest consecutive path where consecutive nodes have values differing by 1. The path can be either increasing or decreasing and may include parent-child or child-parent relationships.\",\n  \"objective\": \"Implement an efficient solution using a single traversal of the tree. For each node, compute the longest increasing and decreasing consecutive sequences originating from that node. Use recursion to propagate these values and track the maximum path length.\",\n  \"meta_prompt\": {\n    \"Step 1 - Define Recursive Function\": \"Define a helper function `longestPath(node)` that returns an array `[inr, dcr]` for the node, where `inr` represents the length of the longest increasing consecutive path, and `dcr` represents the longest decreasing consecutive path for that node.\",\n    \"Step 2 - Initialize Base Values\": \"For each node, initialize `inr` and `dcr` as 1, since any node alone forms a consecutive path of length 1.\",\n    \"Step 3 - Process Left Child\": \"If the node has a left child, recursively call `longestPath(node.left)`. If `node.left.val == node.val - 1`, it forms a decreasing sequence, so update `dcr` to `left_dcr + 1`. If `node.left.val == node.val + 1`, it forms an increasing sequence, so update `inr` to `left_inr + 1`.\",\n    \"Step 4 - Process Right Child\": \"If the node has a right child, apply similar logic with `longestPath(node.right)`. Update `inr` and `dcr` based on whether `node.right.val` forms an increasing or decreasing sequence with `node.val`. Take the maximum values for `inr` and `dcr` from both left and right children.\",\n    \"Step 5 - Update Global Maximum\": \"At each node, update a global maximum variable `maxval` as `max(maxval, inr + dcr - 1)` to account for the longest consecutive path found so far. Subtract 1 to avoid counting the current node twice, as both `inr` and `dcr` paths include the current node.\",\n    \"Step 6 - Return Results\": \"The `longestPath` function should return `[inr, dcr]` for each node to the parent function. After traversal, return `maxval` as the longest consecutive path in the tree.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the function handles the maximum constraints, with up to 30,000 nodes and a range of values from `-30,000` to `30,000`. Confirm that paths across different parts of the tree are evaluated correctly, including both increasing and decreasing paths.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The longest consecutive path is either `[1, 2]` or `[2, 1]`, resulting in a path length of 2.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          2,\n          1,\n          3\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The longest consecutive path is `[1, 2, 3]` or `[3, 2, 1]`, resulting in a path length of 3.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"1 <= n <= 30000\",\n    \"node_value_range\": \"-30000 <= Node.val <= 30000\"\n  },\n  \"follow_up\": \"Consider alternative traversal techniques or data structures for tracking path sequences, especially if the tree is particularly large or has specific balancing properties.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Reverse the digits of an integer."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a signed 32-bit integer `x`, reverse its digits and return the reversed integer. If reversing the digits causes the value to go outside the signed 32-bit integer range `[-2^31, 2^31 - 1]`, return `0`. Avoid using 64-bit integers in your solution.\",\n  \"objective\": \"Design an efficient algorithm to reverse the digits of the integer `x` while ensuring the result stays within the 32-bit integer range. Avoid converting the integer to a string for the reversal.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task requires reversing the digits of a signed 32-bit integer while handling overflows. The input value `x` can be positive or negative, and the result must adhere to the 32-bit integer range.\",\n    \"Step 2 - Initial Approach\": \"Use mathematical operations such as modulo and division to extract and reverse the digits. Avoid string-based approaches as they increase unnecessary space complexity.\",\n    \"Step 3 - Handling Overflow\": \"Check whether the reversed integer exceeds the 32-bit integer bounds during each iteration. If it does, return `0` immediately.\",\n    \"Step 4 - Edge Cases\": \"Handle edge cases such as `x = 0`, single-digit integers, and values near the boundaries of the 32-bit range.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"x\": 123\n      },\n      \"output\": 321,\n      \"explanation\": \"Reversing the digits of 123 results in 321.\"\n    },\n    {\n      \"input\": {\n        \"x\": -123\n      },\n      \"output\": -321,\n      \"explanation\": \"Reversing the digits of -123 results in -321.\"\n    },\n    {\n      \"input\": {\n        \"x\": 120\n      },\n      \"output\": 21,\n      \"explanation\": \"Reversing the digits of 120 results in 21 (leading zeros are dropped).\"\n    },\n    {\n      \"input\": {\n        \"x\": 1534236469\n      },\n      \"output\": 0,\n      \"explanation\": \"Reversing the digits results in a number outside the 32-bit range, so the output is 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"x_range\": \"-2^31 <= x <= 2^31 - 1\",\n    \"storage\": \"Do not use 64-bit integers.\"\n  },\n  \"follow_up\": \"Can you implement this solution without using multiplication or modulo operations?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Merge a list of sorted linked-lists into one sorted list."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an array of `k` linked-lists, where each linked-list is sorted in ascending order. Your task is to merge all the linked-lists into one sorted linked-list and return its head.\",\n  \"objective\": \"Design an efficient algorithm to merge `k` sorted linked-lists into a single sorted list, ensuring the solution handles large input sizes and adheres to the constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task requires merging multiple sorted linked-lists into one sorted list. Each input linked-list is sorted, which can be leveraged for efficient merging.\",\n    \"Step 2 - Optimal Approach Using a Min-Heap\": \"Use a priority queue (min-heap) to efficiently merge the sorted linked-lists. Add the head of each list to the heap and repeatedly extract the smallest element, pushing the next node from the same list into the heap.\",\n    \"Step 3 - Alternative Approaches\": \"Alternatively, use a divide-and-conquer strategy to iteratively merge pairs of linked-lists, reducing the problem size at each step until a single list remains.\",\n    \"Step 4 - Edge Cases\": \"Consider scenarios such as an empty list of linked-lists, individual linked-lists being empty, and lists with duplicate or negative values.\",\n    \"Step 5 - Constraints Compliance\": \"Ensure the solution adheres to constraints such as `0 <= k <= 10^4`, the total number of nodes not exceeding `10^4`, and that all input lists are sorted.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"lists\": [\n          [\n            1,\n            4,\n            5\n          ],\n          [\n            1,\n            3,\n            4\n          ],\n          [\n            2,\n            6\n          ]\n        ]\n      },\n      \"output\": [\n        1,\n        1,\n        2,\n        3,\n        4,\n        4,\n        5,\n        6\n      ],\n      \"explanation\": \"The input lists are merged into a single sorted list: 1->1->2->3->4->4->5->6.\"\n    },\n    {\n      \"input\": {\n        \"lists\": []\n      },\n      \"output\": [],\n      \"explanation\": \"No linked-lists are provided, so the result is an empty list.\"\n    },\n    {\n      \"input\": {\n        \"lists\": [\n          []\n        ]\n      },\n      \"output\": [],\n      \"explanation\": \"The only linked-list is empty, so the result is also empty.\"\n    }\n  ],\n  \"constraints\": {\n    \"num_lists\": \"0 <= k <= 10^4\",\n    \"list_lengths\": \"0 <= lists[i].length <= 500\",\n    \"node_values\": \"-10^4 <= lists[i][j] <= 10^4\",\n    \"sorted_order\": \"Each linked-list is sorted in ascending order.\",\n    \"total_nodes\": \"The sum of all nodes in the input lists does not exceed 10^4.\"\n  },\n  \"follow_up\": \"Can you implement the algorithm in `O(N log k)` time complexity, where `N` is the total number of nodes and `k` is the number of linked-lists?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number of '1's in the magical string up to n elements."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an integer `n`. The task is to generate the first `n` elements of the magical string `s`, which consists only of `'1'` and `'2'`. The string obeys the rule that concatenating the number of contiguous occurrences of characters `'1'` and `'2'` generates the string itself. Your objective is to calculate and return the number of `'1'`s in the first `n` elements of the string.\",\n  \"objective\": \"Design an efficient algorithm to generate the magical string `s` up to the first `n` elements and count the occurrences of `'1'` in it. Ensure that the solution can handle the constraint where `n` can be as large as `10^5`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand the Structure\": \"Understand the recursive self-defining nature of the magical string. It is formed by expanding the occurrences of `'1'` and `'2'` as specified by the string itself.\",\n    \"Step 2 - Efficient Generation\": \"Generate the string up to `n` elements using a dynamic approach without building unnecessary parts of the string. Keep track of the current index for appending new groups.\",\n    \"Step 3 - Count `'1'` Efficiently\": \"While generating the string, maintain a running count of the number of `'1'`s, so you do not need to traverse the string again.\",\n    \"Step 4 - Output\": \"Return the count of `'1'`s after generating the string up to the desired length.\",\n    \"Step 5 - Constraints and Optimization\": \"Ensure the algorithm avoids memory overflow by only storing the necessary part of the string and stops once `n` elements are generated.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 6\n      },\n      \"output\": 3,\n      \"explanation\": \"The first 6 elements of the magical string are '122112', which contains three '1's.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1\n      },\n      \"output\": 1,\n      \"explanation\": \"The first element of the magical string is '1', so the count of '1's is 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"input_range\": \"1 <= n <= 10^5\",\n    \"output_range\": \"0 <= count of '1's <= n\",\n    \"efficient_memory\": \"The algorithm should only use memory proportional to the value of `n` and not generate unnecessary parts of the string.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"Can you optimize the algorithm further by avoiding explicit string generation?\",\n    \"question_2\": \"How would the algorithm change if asked to return the count of `'2'`s instead of `'1'`s?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given an array of strings. Group the strings based on whether they can be transformed into each other by swapping characters."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an array of strings of the same length. In one move, you can swap any two even-indexed characters or any two odd-indexed characters of a string. Two strings are special-equivalent if, after any number of moves, they can be made equal. Your task is to find the number of groups of special-equivalent strings from the input array. A group is the largest possible subset where every pair of strings in the group are special-equivalent, and no string outside the group is special-equivalent to all the strings in the group.\",\n  \"objective\": \"Design an algorithm to count the number of groups of special-equivalent strings from the given array. Each group consists of strings that can be transformed into each other through a series of swaps of even and odd indexed characters.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Each string can be transformed into another by swapping even-indexed characters and odd-indexed characters. Therefore, a string's transformation is determined by the sorted sequence of its even-indexed characters and its odd-indexed characters. We need to group strings that have identical sorted even and odd parts.\",\n    \"Step 2 - Approach\": \"For each string, create a key by sorting its even-indexed characters and odd-indexed characters separately. Two strings are special-equivalent if their corresponding keys are identical.\",\n    \"Step 3 - Grouping Strings\": \"Use a hashmap to count how many strings share the same key. Each unique key represents a group of special-equivalent strings.\",\n    \"Step 4 - Output Format\": \"Return the total number of unique groups formed by special-equivalent strings.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure that the solution is efficient enough to handle up to 1000 strings, each with a length of up to 20 characters. Consider edge cases such as strings with the same characters and strings of minimum length.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution works within the constraints: 1 <= words.length <= 1000, 1 <= words[i].length <= 20, and the strings contain only lowercase English letters.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"words\": [\n          \"abcd\",\n          \"cdab\",\n          \"cbad\",\n          \"xyzz\",\n          \"zzxy\",\n          \"zzyx\"\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"There are three groups: ['abcd', 'cdab', 'cbad'], ['xyzz', 'zzxy'], and ['zzyx'].\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"abc\",\n          \"acb\",\n          \"bac\",\n          \"bca\",\n          \"cab\",\n          \"cba\"\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"There are three groups: ['abc', 'acb', 'bac'], ['bca', 'cab'], and ['cba'].\"\n    }\n  ],\n  \"constraints\": {\n    \"words_length\": \"1 <= words.length <= 1000\",\n    \"word_length\": \"1 <= words[i].length <= 20\",\n    \"characters\": \"words[i] consists of lowercase English letters\"\n  },\n  \"follow_up\": \"How can you optimize the solution further for larger inputs? Consider ways to reduce space complexity while maintaining time efficiency.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given an array nums, find the element repeated n times."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an integer array `nums` where the length of `nums` is `2 * n`. The array contains `n + 1` unique elements, and exactly one element is repeated `n` times. The task is to find the element that is repeated `n` times and return it.\",\n  \"objective\": \"Given an array `nums` with `2 * n` elements, where exactly one element is repeated `n` times and all other elements are unique, return the element that is repeated `n` times.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We are given an array of size `2 * n`. Among the elements, one element occurs exactly `n` times while the rest of the elements are unique. The task is to identify the element that is repeated `n` times.\",\n    \"Step 2 - Approach\": \"We can use a hash map or set to track the frequency of each element in the array. When we encounter an element whose frequency reaches `n`, we return that element.\",\n    \"Step 3 - Algorithm Design\": \"We can iterate through the array and use a hash map or dictionary to count the occurrences of each element. Once we find the element with `n` occurrences, we return it.\",\n    \"Step 4 - Code Efficiency\": \"The solution should be efficient in terms of time complexity. A linear scan of the array using a hash map should give us an optimal solution with time complexity of O(n).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          3\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"In the array [1, 2, 3, 3], the element 3 is repeated twice. Therefore, 3 is the element repeated `n` times.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          1,\n          2,\n          5,\n          3,\n          2\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"In the array [2, 1, 2, 5, 3, 2], the element 2 is repeated three times. Hence, the output is 2.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          5,\n          1,\n          5,\n          2,\n          5,\n          3,\n          5,\n          4\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"In the array [5, 1, 5, 2, 5, 3, 5, 4], the element 5 is repeated four times. Therefore, the output is 5.\"\n    }\n  ],\n  \"constraints\": {\n    \"input_size\": \"2 <= n <= 5000\",\n    \"array_length\": \"nums.length == 2 * n\",\n    \"value_range\": \"0 <= nums[i] <= 104\",\n    \"unique_elements\": \"nums contains n + 1 unique elements, and one element is repeated n times.\"\n  },\n  \"follow_up\": \"Can you optimize the solution further, for example, using a constant space solution or using sorting?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum profit you can get from buying and selling stocks with prices and a cooldown day."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an array `prices` where `prices[i]` represents the stock price on the `ith` day. Your task is to maximize the profit by completing as many buy-sell transactions as possible, with the restriction that after selling stock, you must observe a one-day cooldown before buying again. Multiple transactions cannot overlap (i.e., you must sell the stock before you buy again).\",\n  \"objective\": \"Design an efficient algorithm to calculate the maximum profit with the cooldown restriction, ensuring it works for large arrays of up to 5000 days.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the problem can be solved using dynamic programming by maintaining states for holding stock, selling stock, and being in cooldown. Transitions occur based on whether you buy, sell, or wait.\",\n    \"Step 2 - State Representation\": \"Define three states: `hold` (maximum profit while holding stock), `sell` (maximum profit after selling stock), and `cooldown` (maximum profit during cooldown).\",\n    \"Step 3 - Transition Logic\": \"Determine the transitions: (1) If holding stock, decide to keep holding or sell. (2) If selling stock, update the cooldown state. (3) If in cooldown, decide to stay in cooldown or buy stock.\",\n    \"Step 4 - Base Cases\": \"Set initial conditions where `hold` is negative infinity (cannot hold initially), `sell` is 0 (no stock sold), and `cooldown` is 0 (no transactions).\",\n    \"Step 5 - Optimization\": \"Iteratively compute the maximum profit for each state using the transition logic, keeping track of the states dynamically for each day.\",\n    \"Step 6 - Final Result\": \"The final profit is the maximum of the `sell` and `cooldown` states on the last day, as you cannot end holding stock.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"prices\": [\n          1,\n          2,\n          3,\n          0,\n          2\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"Optimal transactions: buy on day 1, sell on day 2, cooldown on day 3, buy on day 4, sell on day 5. Profit = 2 - 1 + 2 - 0 = 3.\"\n    },\n    {\n      \"input\": {\n        \"prices\": [\n          1\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"No transactions can be made with a single day's data.\"\n    }\n  ],\n  \"constraints\": {\n    \"prices_length\": \"1 <= prices.length <= 5000\",\n    \"price_range\": \"0 <= prices[i] <= 1000\"\n  },\n  \"follow_up\": \"Can you optimize the solution to use `O(1)` space complexity by reusing variables for state transitions instead of maintaining arrays for all states?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count the number of squareful permutations in the array `nums`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `nums`, return the number of permutations of `nums` that are **squareful**. An array is **squareful** if the sum of every pair of adjacent elements is a **perfect square**. Two permutations `perm1` and `perm2` are different if there is some index `i` such that `perm1[i] != perm2[i]`.\",\n  \"objective\": \"Design an algorithm to count the number of permutations of `nums` that are squareful, ensuring that the sum of every pair of adjacent elements is a perfect square.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the requirements: Identify permutations of `nums` where the sum of each pair of adjacent elements is a perfect square.\",\n    \"Step 2 - Initial Approach\": \"Consider using backtracking to generate all possible permutations of the array and check if each permutation is squareful. However, this may not be efficient for larger arrays.\",\n    \"Step 3 - Optimized Approach with Pruning\": \"To improve efficiency, use backtracking with pruning: Generate permutations recursively, and prune branches early if a pair of adjacent elements does not form a perfect square.\",\n    \"Step 4 - Permutation Generation\": \"Implement a function to generate permutations of the array, checking at each step if the current permutation can potentially be squareful.\",\n    \"Step 5 - Check for Perfect Square\": \"Create a helper function to check if a given sum is a perfect square. Use this to validate pairs of adjacent elements.\",\n    \"Step 6 - Algorithm Steps\": \"1. Initialize a counter for squareful permutations. 2. Use backtracking to generate permutations. 3. For each valid permutation, increment the counter. 4. Return the counter value.\",\n    \"Step 7 - Output Format\": \"Ensure the function returns the total count of squareful permutations as an integer.\",\n    \"Step 8 - Code Efficiency and Edge Cases\": \"Focus on efficient permutation generation and pruning to achieve a time complexity better than O(n!). Handle edge cases such as arrays with identical elements or single-element arrays.\",\n    \"Final Check - Constraints Verification\": \"Verify the solution operates within the constraints: `1 <= nums.length <= 12` and `0 <= nums[i] <= 10^9`. Ensure the algorithm is robust and handles large inputs efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          17,\n          8\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"Valid permutations are [1, 8, 17] and [17, 8, 1].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          2,\n          2\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"There is only one permutation: [2, 2, 2].\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 12\",\n    \"nums_range\": \"0 <= nums[i] <= 10^9\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle larger arrays efficiently, ensuring the algorithm scales well with input size and maintains correctness?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Solve the sliding puzzle where the goal is to make the board look like [[1, 2, 3], [4, 5, 0]]."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a 2x3 puzzle board with five numbered tiles labeled from 1 to 5 and one empty square represented by 0. A move consists of swapping the 0 with one of its 4-directionally adjacent tiles. The goal is to find the minimum number of moves required to reach the solved board state, which is [[1, 2, 3], [4, 5, 0]]. If it is not possible to solve the puzzle, return -1.\",\n  \"objective\": \"Given an initial board configuration, return the minimum number of moves required to solve the puzzle, or -1 if it is impossible to solve.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understanding the Board\": \"The puzzle consists of a 2x3 grid with numbers 1-5 and a 0 that represents an empty tile. The goal is to swap tiles to reach the solved configuration of [[1, 2, 3], [4, 5, 0]].\",\n    \"Step 2 - Legal Moves\": \"A move consists of swapping the 0 with one of the tiles adjacent to it (up, down, left, or right).\",\n    \"Step 3 - Breadth-First Search (BFS) Approach\": \"This is a typical search problem, and a Breadth-First Search (BFS) is appropriate for finding the shortest path to the solved configuration.\",\n    \"Step 4 - Checking Solvability\": \"If the puzzle configuration is not solvable, return -1. A configuration is solvable if the number of inversions (out-of-order pairs of numbers) is even.\",\n    \"Step 5 - Output\": \"Return the number of moves or -1 if the puzzle cannot be solved. The state of the board is solved if and only if it matches [[1, 2, 3], [4, 5, 0]].\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"board\": [\n          [\n            1,\n            2,\n            3\n          ],\n          [\n            4,\n            0,\n            5\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"Swap the 0 and 5 in one move to solve the puzzle.\"\n    },\n    {\n      \"input\": {\n        \"board\": [\n          [\n            1,\n            2,\n            3\n          ],\n          [\n            5,\n            4,\n            0\n          ]\n        ]\n      },\n      \"output\": -1,\n      \"explanation\": \"The puzzle is unsolvable because no series of moves can reach the solved state.\"\n    },\n    {\n      \"input\": {\n        \"board\": [\n          [\n            4,\n            1,\n            2\n          ],\n          [\n            5,\n            0,\n            3\n          ]\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"Five moves are required to solve the puzzle. One possible path involves the following swaps: 5->4->1->0->3.\"\n    }\n  ],\n  \"constraints\": {\n    \"board_size\": \"board.length == 2\",\n    \"board_row_size\": \"board[i].length == 3\",\n    \"board_values\": \"0 <= board[i][j] <= 5\",\n    \"unique_values\": \"Each value in the board is unique\"\n  },\n  \"follow_up\": \"Can you implement an optimization for larger board configurations?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the longest consecutive sequence in a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary tree, find the length of the longest **consecutive sequence path**. A consecutive sequence path is a path where the values increase by 1 along the path, and the path can start at any node. Traversal can only move to child nodes (not back to the parent).\",\n  \"objective\": \"Design an efficient algorithm to determine the longest path of consecutive values in a binary tree, considering all edge cases.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the definition of a consecutive sequence path:\\n1. The sequence must increase by 1 from parent to child.\\n2. Traversal is restricted to one direction (down the tree).\",\n    \"Step 2 - Recursive Traversal\": \"Use a depth-first search (DFS) approach:\\n1. Pass down the expected consecutive value to validate the sequence.\\n2. Keep a running count of consecutive values and update the maximum length found so far.\",\n    \"Step 3 - Global Tracking\": \"Maintain a global variable to store the maximum sequence length across the entire tree.\",\n    \"Step 4 - Edge Cases\": \"Consider scenarios such as:\\n- Single-node trees.\\n- Trees with no consecutive sequences.\\n- Large and unbalanced trees.\",\n    \"Step 5 - Output\": \"Return the length of the longest consecutive sequence path as an integer.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          null,\n          3,\n          2,\n          4,\n          null,\n          null,\n          null,\n          5\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The longest consecutive sequence path is 3-4-5, so the length is 3.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          2,\n          null,\n          3,\n          2,\n          null,\n          1\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The longest consecutive sequence path is 2-3, so the length is 2.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"A single-node tree has a longest sequence length of 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"1 <= number of nodes <= 3 * 10^4\",\n    \"node_values\": \"-3 * 10^4 <= Node.val <= 3 * 10^4\"\n  },\n  \"follow_up\": \"Can you optimize the solution to use O(h) auxiliary space where h is the height of the tree?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the subarray with the largest sum in an array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums`, find the contiguous subarray (containing at least one number) which has the largest sum, and return its sum.\",\n  \"objective\": \"Design an efficient algorithm to find the maximum sum of a subarray in `nums`, adhering to the constraints and considering both linear and divide-and-conquer approaches.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task is to find the contiguous subarray with the largest sum. This is a classic maximum subarray problem.\",\n    \"Step 2 - Kadane's Algorithm\": \"Use Kadane's Algorithm, which tracks the current maximum sum ending at each index while maintaining the global maximum sum.\",\n    \"Step 3 - Constraints Compliance\": \"Ensure the algorithm runs in `O(n)` time for arrays with up to 10^5 elements and handles values within `-10^4 <= nums[i] <= 10^4`.\",\n    \"Step 4 - Divide and Conquer Approach\": \"For the follow-up, implement a divide-and-conquer strategy by dividing the array into two halves and considering the maximum subarrays in the left half, right half, and across the middle.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider edge cases like single-element arrays, all negative numbers, or a mix of positive and negative numbers.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          -2,\n          1,\n          -3,\n          4,\n          -1,\n          2,\n          1,\n          -5,\n          4\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"The subarray [4, -1, 2, 1] has the largest sum, 6.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The subarray [1] has the largest sum, 1.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          5,\n          4,\n          -1,\n          7,\n          8\n        ]\n      },\n      \"output\": 23,\n      \"explanation\": \"The subarray [5, 4, -1, 7, 8] has the largest sum, 23.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10^5\",\n    \"element_range\": \"-10^4 <= nums[i] <= 10^4\",\n    \"time_complexity\": \"The solution must run in O(n) time for the primary implementation.\"\n  },\n  \"follow_up\": \"Can you implement the divide-and-conquer approach and compare its performance to Kadane's Algorithm for large arrays?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find if the number of global inversions is equal to the number of local inversions in the list."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an integer array nums, which is a permutation of integers in the range [0, n-1]. Your task is to check if the number of global inversions is equal to the number of local inversions. A global inversion is defined as a pair (i, j) where 0 <= i < j < n and nums[i] > nums[j]. A local inversion is defined as an index i where 0 <= i < n-1 and nums[i] > nums[i+1]. Return true if the number of global inversions equals the number of local inversions.\",\n  \"objective\": \"Design an algorithm to efficiently determine if the number of global inversions equals the number of local inversions, ensuring optimal performance for large inputs.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Start by understanding the input: nums is a permutation of integers from 0 to n-1. A global inversion compares pairs of numbers where nums[i] > nums[j] and i < j. A local inversion compares consecutive pairs where nums[i] > nums[i+1].\",\n    \"Step 2 - Approach for Global Inversions\": \"To count global inversions, a brute force solution could compare each pair (i, j) where i < j, but this would be O(n^2) in time complexity. We need a more efficient approach.\",\n    \"Step 3 - Approach for Local Inversions\": \"Local inversions are easier to count since they only involve consecutive pairs, which can be done in O(n) time.\",\n    \"Step 4 - Efficient Algorithm\": \"Consider merging strategies or sorting techniques to count the global inversions while keeping track of local inversions in a single pass or through clever use of data structures.\",\n    \"Step 5 - Output Format\": \"The solution should return true or false depending on whether the number of global inversions equals the number of local inversions. Ensure it handles edge cases efficiently, such as when n is at its maximum value.\",\n    \"Step 6 - Code Efficiency and Edge Cases\": \"The solution should operate in O(n log n) time or better to handle large input sizes. Consider edge cases like minimal input where n = 1 or cases with many local inversions but few global inversions.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the code handles the constraints n <= 10^5 and 0 <= nums[i] < n, and verify that nums contains unique integers as specified.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          0,\n          2\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"There is 1 global inversion and 1 local inversion, so the output is true.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          0\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"There are 2 global inversions and 1 local inversion, so the output is false.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= n <= 10^5\",\n    \"nums_elements_range\": \"0 <= nums[i] < n\",\n    \"unique_elements\": \"All the integers of nums are unique.\",\n    \"permutation_constraint\": \"nums is a permutation of all the integers in the range [0, n - 1].\"\n  },\n  \"follow_up\": \"Can you come up with an algorithm that counts global inversions in O(n log n) time complexity while ensuring the solution is space efficient?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given an integer array `arr` and need to return the maximum number of chunks you can make by sorting the chunks and concatenating them to form a sorted array."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an integer array `arr` of length `n`, representing a permutation of the integers in the range `[0, n - 1]`. Your task is to determine the maximum number of chunks (or partitions) into which the array can be split such that sorting each chunk individually and then concatenating them results in the entire array being sorted in ascending order.\",\n  \"objective\": \"Design an algorithm to find the largest number of chunks that can be formed where sorting each chunk independently results in the array being sorted after concatenation.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The array is a permutation of integers from 0 to n-1, and the goal is to split it into chunks. Sorting each chunk should yield a sorted array when concatenated together.\",\n    \"Step 2 - Initial Approach\": \"To determine the maximum number of chunks, iterate through the array while tracking the maximum element encountered so far. At each index, check if the maximum element seen so far is less than or equal to the element at the current index.\",\n    \"Step 3 - Optimal Solution\": \"Use a greedy approach: traverse the array while keeping track of the running maximum value. When the current index matches the maximum value encountered so far, a chunk boundary is reached. This ensures that each chunk is valid when sorted independently.\",\n    \"Step 4 - Output Format\": \"Return the largest number of chunks that can be made such that sorting each chunk results in a sorted array.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure the solution operates in linear time O(n). Handle edge cases, such as arrays with a single element.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution meets the problem's constraints, including the array length and the fact that all elements are unique and within the range [0, n-1].\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"arr\": [\n          4,\n          3,\n          2,\n          1,\n          0\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The array is in reverse order, so it cannot be split into more than one chunk. The only valid split is the entire array as one chunk.\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          1,\n          0,\n          2,\n          3,\n          4\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"The array can be split into four chunks: [1, 0], [2], [3], [4]. Sorting each chunk individually will yield the sorted array [0, 1, 2, 3, 4].\"\n    }\n  ],\n  \"constraints\": {\n    \"arr_length\": \"1 <= arr.length <= 10\",\n    \"arr_elements_range\": \"0 <= arr[i] < n\",\n    \"unique_elements\": \"All elements of `arr` are unique.\"\n  },\n  \"follow_up\": \"Can you solve this in linear time O(n)?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Design a calendar that prevents triple bookings."}, {"role": "assistant", "content": "{\n  \"description\": \"Implement a calendar that prevents triple bookings by keeping track of overlaps in events.\",\n  \"objective\": \"Use a map to track event bookings and ensure that the maximum overlap of events does not exceed two at any time.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Initialize a map `bookingCount` to track the count of event starts and ends at specific time points. Maintain a variable `maxOverlappedBooking` initialized to 2 to enforce triple booking prevention.\",\n    \"Step 2\": \"For every `book(start, end)` operation, increment the count of `start` and decrement the count of `end` in the map to simulate the event booking.\",\n    \"Step 3\": \"Traverse the sorted keys of `bookingCount` to calculate a prefix sum `overlappedBooking`, which represents the number of active events at any time point.\",\n    \"Step 4\": \"If `overlappedBooking` exceeds `maxOverlappedBooking`, revert the changes made to `bookingCount` for the current event and return `false`.\",\n    \"Step 5\": \"If traversal completes without exceeding `maxOverlappedBooking`, the event is successfully added. Return `true`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"operations\": [\n          \"MyCalendarTwo\",\n          \"book\",\n          \"book\",\n          \"book\",\n          \"book\",\n          \"book\",\n          \"book\"\n        ],\n        \"arguments\": [\n          [],\n          [\n            10,\n            20\n          ],\n          [\n            50,\n            60\n          ],\n          [\n            10,\n            40\n          ],\n          [\n            5,\n            15\n          ],\n          [\n            5,\n            10\n          ],\n          [\n            25,\n            55\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        true,\n        true,\n        true,\n        false,\n        true,\n        true\n      ],\n      \"explanation\": [\n        \"Event [10, 20) is booked successfully.\",\n        \"Event [50, 60) is booked successfully.\",\n        \"Event [10, 40) creates a double booking but is allowed.\",\n        \"Event [5, 15) causes a triple booking and is rejected.\",\n        \"Event [5, 10) does not cause a triple booking and is allowed.\",\n        \"Event [25, 55) is booked successfully despite partial overlaps.\"\n      ]\n    }\n  ],\n  \"constraints\": {\n    \"time_range\": \"0 <= start < end <= 10^9\",\n    \"calls\": \"At most 1000 calls to `book`.\",\n    \"description\": \"Ensure triple bookings are not allowed while maintaining efficiency in processing.\"\n  },\n  \"follow_up\": \"Analyze the time complexity of the approach. Discuss the implications of using a map for event tracking and consider alternate data structures for higher efficiency when `book` calls are numerous.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum day when two turned-on bulbs have exactly `k` turned-off bulbs between them."}, {"role": "assistant", "content": "{\n  \"description\": \"Identify and remove the redundant edge in a graph to ensure the resulting graph is a tree with `n` nodes.\",\n  \"objective\": \"Use a Union-Find (Disjoint Set Union) data structure with path compression and union-by-rank to efficiently find the redundant edge.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize DSU\": \"Create a parent array to track the leader of each node and a rank array to optimize the merging of connected components.\",\n    \"Step 2 - Define Find Function\": \"Implement a `find(x)` function that uses path compression to find the leader of the connected component containing node `x`.\",\n    \"Step 3 - Define Union Function\": \"Implement a `union(x, y)` function that connects the components containing `x` and `y` based on rank, returning `false` if they are already connected.\",\n    \"Step 4 - Process Edges\": \"Iterate through each edge in the graph. For each edge, use `union(x, y)` to check if adding the edge creates a cycle.\",\n    \"Step 5 - Return Redundant Edge\": \"If a cycle is detected when processing an edge, return that edge as the redundant connection.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"edges\": [\n          [\n            1,\n            2\n          ],\n          [\n            1,\n            3\n          ],\n          [\n            2,\n            3\n          ]\n        ]\n      },\n      \"output\": [\n        2,\n        3\n      ],\n      \"explanation\": \"Adding the edge [2, 3] creates a cycle, so it is the redundant connection.\"\n    },\n    {\n      \"input\": {\n        \"edges\": [\n          [\n            1,\n            2\n          ],\n          [\n            2,\n            3\n          ],\n          [\n            3,\n            4\n          ],\n          [\n            1,\n            4\n          ],\n          [\n            1,\n            5\n          ]\n        ]\n      },\n      \"output\": [\n        1,\n        4\n      ],\n      \"explanation\": \"Adding the edge [1, 4] creates a cycle, so it is the redundant connection.\"\n    }\n  ],\n  \"constraints\": {\n    \"edges_length\": \"n == edges.length\",\n    \"node_range\": \"1 <= ai < bi <= n\",\n    \"valid_edges\": \"No repeated edges; the graph is initially connected.\"\n  },\n  \"follow_up\": \"Discuss the efficiency of the Union-Find approach with path compression and union-by-rank and compare it to other methods like DFS or BFS for cycle detection.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count how many magic square subgrids are there in a grid."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a grid of integers with a certain number of rows and columns, your task is to find how many distinct 3x3 'magic square' subgrids are present within the grid. A 'magic square' is a 3x3 grid where the distinct numbers from 1 to 9 are arranged such that each row, column, and both diagonals sum up to the same value. The subgrids must be contiguous and must consist of exactly 3x3 elements.\",\n  \"objective\": \"Design an algorithm to count how many 3x3 magic square subgrids exist within a given grid, where a magic square is a 3x3 grid with distinct values from 1 to 9 and all rows, columns, and diagonals sum to the same number.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the problem: You are given a grid with distinct integers from 1 to 9, and you need to find how many 3x3 subgrids within this grid are 'magic squares'. A magic square is one where each row, column, and both diagonals sum to the same value.\",\n    \"Step 2 - Brute Force Approach\": \"You can start by checking all possible 3x3 subgrids within the given grid. For each subgrid, check if it contains distinct numbers from 1 to 9 and if all rows, columns, and diagonals have the same sum.\",\n    \"Step 3 - Optimized Search\": \"Once you\\u2019ve implemented the brute-force solution, think about possible optimizations. For instance, ensure that you avoid redundant checks and focus on verifying the conditions for a magic square efficiently.\",\n    \"Step 4 - Output Format\": \"Return the count of distinct 3x3 magic square subgrids in the given grid.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure your code works efficiently within the constraints, handling cases such as grids smaller than 3x3, grids with repeated numbers, or grids that don't contain any magic squares.\",\n    \"Step 6 - Final Check\": \"Verify that your solution works within the given constraints, and handles edge cases where the grid may not have a valid 3x3 magic square.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            4,\n            3,\n            8,\n            4\n          ],\n          [\n            9,\n            5,\n            1,\n            9\n          ],\n          [\n            2,\n            7,\n            6,\n            2\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"There is exactly one magic square subgrid in the given grid.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            8\n          ]\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"A 1x1 grid does not contain any 3x3 magic square subgrids.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_size\": \"1 <= row, col <= 10\",\n    \"grid_elements_range\": \"0 <= grid[i][j] <= 15\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Write a function to encode a string using `[k]` notation where repeated substrings are shortened. If the string isn't shorter, keep it the same."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s`, encode it using the shortest possible representation based on the rule `k[encoded_string]`, where `encoded_string` is repeated exactly `k` times. Return the encoded string only if it reduces the length of `s`; otherwise, return `s` unchanged. If multiple solutions exist, any valid solution is acceptable.\",\n  \"objective\": \"Design an efficient algorithm to minimize the encoded length of the string by considering all possible partitions and repeating substrings, while ensuring the result is the shortest possible encoded string.\",\n  \"meta_prompt\": {\n    \"Step 1 - Analyze the Problem\": \"Understand the encoding rule `k[encoded_string]`. Consider cases where repeating substrings reduce the total length of `s`. The goal is to find the optimal partition of `s` to minimize the encoded string length.\",\n    \"Step 2 - Evaluate Possible Solutions\": \"Consider dynamic programming to split `s` into all possible substrings. Check if a substring repeats, and if so, calculate the potential encoded length. Compare with the original length and return the shorter result.\",\n    \"Step 3 - Handle Edge Cases\": \"Handle strings with no repeating substrings or strings that do not benefit from encoding. Also, account for multiple valid encodings and ensure the function can return any shortest valid result.\",\n    \"Step 4 - Optimize the Implementation\": \"Iterate over all substrings efficiently using dynamic programming with a time complexity close to `O(n^3)`, where `n` is the length of `s`.\",\n    \"Step 5 - Return Result\": \"Return the encoded string if its length is shorter; otherwise, return the original string.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"aaa\"\n      },\n      \"output\": \"aaa\",\n      \"explanation\": \"The string `aaa` does not have a shorter encoded representation, so we return it unchanged.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"aaaaa\"\n      },\n      \"output\": \"5[a]\",\n      \"explanation\": \"The string `aaaaa` can be encoded as `5[a]`, reducing its length from 5 to 4.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"abcabcabcabc\"\n      },\n      \"output\": \"4[abc]\",\n      \"explanation\": \"The string `abcabcabcabc` can be encoded as `4[abc]`, which is shorter than the original.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 150\",\n    \"character_set\": \"s consists of only lowercase English letters.\",\n    \"encoding_rule\": \"Encoding should use the format `k[encoded_string]` where `k` is a positive integer.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"Can you improve the algorithm to handle larger inputs efficiently?\",\n    \"question_2\": \"What other encoding formats might further compress the string?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the best way to divide numbers to get the highest result."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums`, find the expression with the highest possible value by adding parentheses to adjust division priority. The expression starts with the first number divided by all subsequent numbers, and the result should minimize the denominator to maximize the value.\",\n  \"objective\": \"Return a string of the maximum value expression by placing parentheses such that the result of dividing the numbers in `nums` is as large as possible.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand Expression Maximization\": \"For an array `nums = [a, b, c, d]`, dividing consecutively (a/b/c/d) results in a smaller value due to sequential division. To maximize the expression, we want to minimize the denominator by grouping the subsequent terms under a single division operation.\",\n    \"Step 2 - Determine Grouping Logic\": \"Since all numbers in `nums` are greater than 1, wrap all terms from the second element onward in parentheses. This creates a single division operation with the first element as the numerator: `a/(b/c/d)`. This pattern holds for any number of terms.\",\n    \"Step 3 - Construct Result String\": \"Convert `nums` into the form `a/(b/c/d/...)`. For cases where `nums` has only two elements `[a, b]`, the expression `a/b` suffices without extra parentheses.\",\n    \"Final Check - Constraints Verification\": \"Verify that the result handles all constraints, with 1 <= `nums.length` <= 10, and ensure no redundant parentheses are added.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1000,\n          100,\n          10,\n          2\n        ]\n      },\n      \"output\": \"1000/(100/10/2)\",\n      \"explanation\": \"By grouping terms from the second element onward, the maximum result is achieved as 200.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          3,\n          4\n        ]\n      },\n      \"output\": \"2/(3/4)\",\n      \"explanation\": \"The expression `2/(3/4)` maximizes the division result as 2.667.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 10\",\n    \"nums_values\": \"Each element in `nums` is in the range [2, 1000]\"\n  },\n  \"follow_up\": \"Explore further generalizations for maximizing results with varying operators or more complex expressions.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the longest turbulent subarray in the list."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `arr`, your task is to find the length of the maximum size turbulent subarray in `arr`. A turbulent subarray is one in which the comparison sign between each adjacent pair of elements flips alternately, either increasing and decreasing or decreasing and increasing. More formally, for any index `k`, if `k` is even, the element at `arr[k]` should be greater than `arr[k+1]` and vice versa if `k` is odd, or the other way around.\",\n  \"objective\": \"Design an efficient algorithm that finds the length of the longest turbulent subarray in the array `arr`. The solution should be optimized to handle large arrays efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Understand the problem: We need to find the length of the largest subarray where the elements alternate in a fluctuating pattern (i.e., greater and less alternately between adjacent elements).\",\n    \"Step 2 - Approach\": \"A straightforward solution might involve iterating through all subarrays, but that would be inefficient. Instead, try to traverse the array once while keeping track of the length of the current turbulent subarray.\",\n    \"Step 3 - Efficient Solution\": \"Use a linear scan to maintain the current turbulent subarray length. Check each pair of adjacent elements and decide if they follow the turbulent pattern based on their positions (odd or even). Reset the current length whenever the turbulent condition breaks.\",\n    \"Step 4 - Output Format\": \"Return the length of the longest turbulent subarray found. If no turbulent subarray is found, return 1 (since any single element is a subarray by itself).\",\n    \"Step 5 - Edge Cases\": \"Handle edge cases such as arrays with only one element or arrays that are already turbulent or non-turbulent.\",\n    \"Final Check - Constraints Verification\": \"Ensure the solution runs in O(n) time complexity to handle up to 40,000 elements in the array efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"arr\": [\n          9,\n          4,\n          2,\n          10,\n          7,\n          8,\n          8,\n          1,\n          9\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"The longest turbulent subarray is [9, 4, 2, 10, 7], which alternates in direction: greater, less, greater, less.\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          4,\n          8,\n          12,\n          16\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The longest turbulent subarray is [4, 8], which has a single flip.\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          100\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"A single element is trivially a turbulent subarray of length 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"arr_length\": \"1 <= arr.length <= 40,000\",\n    \"arr_elements_range\": \"0 <= arr[i] <= 10^9\"\n  },\n  \"follow_up\": \"Can you improve the time complexity to O(n) by iterating through the array only once while maintaining the alternating pattern and keeping track of the maximum length?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Insert a new interval into a sorted list of intervals and merge overlaps."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a sorted array of non-overlapping intervals `intervals` and a new interval `newInterval`. Insert `newInterval` into `intervals` such that the resulting array is still sorted in ascending order and contains no overlapping intervals (merge overlapping intervals if necessary).\",\n  \"objective\": \"Design an efficient algorithm to insert the new interval into the sorted array, merging overlapping intervals, and maintaining the order and non-overlapping property.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task requires inserting `newInterval` into the sorted `intervals` array, merging any overlapping intervals while keeping the array sorted and non-overlapping.\",\n    \"Step 2 - Linear Traversal\": \"Traverse the `intervals` array and categorize intervals as non-overlapping (completely before or after `newInterval`) or overlapping. Merge overlapping intervals with `newInterval` by updating its start and end values.\",\n    \"Step 3 - Result Construction\": \"Construct the result array by adding non-overlapping intervals before and after the merged interval, and include the merged interval in the correct position.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the algorithm works efficiently for constraints such as `0 <= intervals.length <= 10^4` and `0 <= starti, start, endi, end <= 10^5`.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider cases such as an empty `intervals` array, `newInterval` not overlapping with any interval, or `newInterval` completely overlapping all intervals.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"intervals\": [\n          [\n            1,\n            3\n          ],\n          [\n            6,\n            9\n          ]\n        ],\n        \"newInterval\": [\n          2,\n          5\n        ]\n      },\n      \"output\": [\n        [\n          1,\n          5\n        ],\n        [\n          6,\n          9\n        ]\n      ],\n      \"explanation\": \"The new interval [2, 5] overlaps with [1, 3], merging them into [1, 5].\"\n    },\n    {\n      \"input\": {\n        \"intervals\": [\n          [\n            1,\n            2\n          ],\n          [\n            3,\n            5\n          ],\n          [\n            6,\n            7\n          ],\n          [\n            8,\n            10\n          ],\n          [\n            12,\n            16\n          ]\n        ],\n        \"newInterval\": [\n          4,\n          8\n        ]\n      },\n      \"output\": [\n        [\n          1,\n          2\n        ],\n        [\n          3,\n          10\n        ],\n        [\n          12,\n          16\n        ]\n      ],\n      \"explanation\": \"The new interval [4, 8] overlaps with [3, 5], [6, 7], and [8, 10], merging them into [3, 10].\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"0 <= intervals.length <= 10^4\",\n    \"interval_range\": \"0 <= starti, start, endi, end <= 10^5\",\n    \"interval_format\": \"`intervals[i].length == 2` and `newInterval.length == 2`\",\n    \"sorting_property\": \"The input intervals are sorted by `starti` in ascending order.\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm to handle dynamically updated intervals or reduce the number of comparisons for very large datasets?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Return the kth smallest number in lexicographical order from 1 to n."}, {"role": "assistant", "content": "{\n  \"title\": \"Find kth Lexicographical Number\",\n  \"description\": \"Given two integers `n` and `k`, return the `kth` lexicographically smallest integer in the range `[1, n]`.\",\n  \"input\": {\n    \"n\": {\n      \"type\": \"integer\",\n      \"description\": \"The upper bound of the range.\",\n      \"constraints\": {\n        \"range\": \"[1, 10^9]\"\n      }\n    },\n    \"k\": {\n      \"type\": \"integer\",\n      \"description\": \"The rank of the desired integer in lexicographical order.\",\n      \"constraints\": {\n        \"range\": \"[1, n]\"\n      }\n    }\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The kth lexicographically smallest number in the range [1, n].\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 13,\n        \"k\": 2\n      },\n      \"output\": 10,\n      \"explanation\": \"The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9]. The second smallest is 10.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1,\n        \"k\": 1\n      },\n      \"output\": 1,\n      \"explanation\": \"The lexicographical order is [1]. The first (and only) number is 1.\"\n    }\n  ],\n  \"hints\": [\n    \"The problem can be solved using a prefix-based traversal of the lexicographical tree.\",\n    \"Count the nodes in the lexicographical order starting from the current prefix to determine how many numbers fall under it.\",\n    \"Use a greedy approach to determine the next digit to explore based on the count of lexicographically smaller numbers.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Find the kth number efficiently using a tree traversal-like approach with O(log(n) * log(n)) complexity.\",\n    \"constraints\": \"Avoid generating all numbers explicitly to stay within time and memory constraints for large n.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Search for a target in a rotated sorted array with duplicates."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a rotated integer array `nums` sorted in non-decreasing order (with possible duplicates), determine if a target value exists in `nums`. The array is rotated at an unknown pivot index. Return `true` if the target exists, and `false` otherwise. The solution must minimize the number of operations.\",\n  \"objective\": \"Design an efficient algorithm using binary search principles, with adjustments for duplicate values in the rotated sorted array.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the array is a rotated sorted array with possible duplicates. The challenge is to efficiently search for the target while handling cases where duplicates may disrupt the typical binary search.\",\n    \"Step 2 - Binary Search with Adjustments\": \"Implement a modified binary search algorithm. Compare the mid-point value with the target and use array properties to decide which half to explore, carefully handling cases where duplicates prevent straightforward decisions.\",\n    \"Step 3 - Handle Duplicates\": \"If `nums[start] == nums[mid] == nums[end]`, increment `start` and decrement `end` to narrow the range while avoiding unnecessary comparisons.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution works efficiently for constraints such as `1 <= nums.length <= 5000` and handles duplicate values gracefully.\",\n    \"Step 5 - Edge Cases\": \"Consider edge cases such as arrays with all identical elements, arrays where the target is at the pivot, or arrays where the target is not present.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          5,\n          6,\n          0,\n          0,\n          1,\n          2\n        ],\n        \"target\": 0\n      },\n      \"output\": true,\n      \"explanation\": \"The target 0 exists in the array at index 3.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          5,\n          6,\n          0,\n          0,\n          1,\n          2\n        ],\n        \"target\": 3\n      },\n      \"output\": false,\n      \"explanation\": \"The target 3 does not exist in the array.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 5000\",\n    \"value_range\": \"-10^4 <= nums[i], target <= 10^4\",\n    \"rotated_array\": \"The input array is guaranteed to be rotated at some pivot.\",\n    \"duplicates\": \"The array may contain duplicate values.\"\n  },\n  \"follow_up\": \"Explore how duplicates affect the runtime complexity of binary search. Can you prove why the worst-case time complexity becomes O(n) when duplicates exist?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the largest streak of 1s in the array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a binary array `nums`, find the maximum number of consecutive `1`s in the array. Consecutive `1`s are uninterrupted sequences of `1`s that may be bounded by `0`s or the ends of the array. Return the length of the longest such sequence.\",\n  \"objective\": \"Design an efficient algorithm that traverses the array in a single pass (`O(n)` complexity) to find the longest contiguous subsequence of `1`s.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Understand that the input is a binary array containing only `0`s and `1`s. The goal is to find the maximum number of consecutive `1`s.\",\n    \"Step 2 - Efficient Approach\": \"Iterate through the array while keeping a counter for the current streak of `1`s and updating the maximum streak encountered so far.\",\n    \"Step 3 - Reset Counter\": \"Reset the current streak counter to zero whenever a `0` is encountered. Continue counting after the reset.\",\n    \"Step 4 - Output Maximum\": \"At the end of the iteration, return the maximum streak recorded during the traversal.\",\n    \"Final Check\": \"Verify that edge cases, such as arrays with all `0`s, all `1`s, or a single element, are handled correctly.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          1,\n          0,\n          1,\n          1,\n          1\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The longest sequence of consecutive `1`s is [1, 1, 1], which has a length of 3.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          0,\n          1,\n          1,\n          0,\n          1\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The longest sequences of consecutive `1`s are [1, 1], each with a length of 2.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          0,\n          0,\n          0\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"There are no `1`s in the array.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          1,\n          1,\n          1\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"The entire array is a sequence of `1`s with a length of 4.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10^5\",\n    \"array_elements\": \"Each element in `nums` is either 0 or 1.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"How would the solution change if you were asked to count the maximum consecutive `1`s after flipping at most one `0`?\",\n    \"question_2\": \"What optimizations can be applied if the input array is given as a stream of numbers?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Add two strings as if they are numbers."}, {"role": "assistant", "content": "{\n  \"title\": \"Add Two Large Numbers as Strings\",\n  \"description\": \"Given two non-negative integers `num1` and `num2` represented as strings, compute their sum and return it as a string. Do not use libraries for large integers or convert the inputs directly to integers.\",\n  \"objective\": \"Perform addition on two strings digit-by-digit without converting them to integers, ensuring correctness for arbitrarily large input sizes.\",\n  \"input\": {\n    \"name\": [\n      \"num1\",\n      \"num2\"\n    ],\n    \"type\": \"two strings\",\n    \"description\": \"Strings representing non-negative integers without leading zeros (except for zero itself).\",\n    \"constraints\": \"1 <= num1.length, num2.length <= 10^4; characters consist only of digits.\"\n  },\n  \"output\": {\n    \"type\": \"string\",\n    \"description\": \"The sum of `num1` and `num2` represented as a string.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"num1\": \"11\",\n        \"num2\": \"123\"\n      },\n      \"output\": \"134\",\n      \"explanation\": \"Adding 11 and 123 gives 134.\"\n    },\n    {\n      \"input\": {\n        \"num1\": \"456\",\n        \"num2\": \"77\"\n      },\n      \"output\": \"533\",\n      \"explanation\": \"Adding 456 and 77 gives 533.\"\n    },\n    {\n      \"input\": {\n        \"num1\": \"0\",\n        \"num2\": \"0\"\n      },\n      \"output\": \"0\",\n      \"explanation\": \"Adding 0 and 0 gives 0.\"\n    }\n  ],\n  \"hints\": [\n    \"Process the numbers from right to left to simulate addition manually.\",\n    \"Use a carry to handle sums greater than 9.\",\n    \"Handle cases where one string is longer than the other.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(max(n, m)) time complexity, where n and m are the lengths of `num1` and `num2`.\",\n    \"constraints\": \"Avoid using additional space proportional to the input size except for the result string.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a strictly increasing array, return the length of the longest Fibonacci-like subsequence."}, {"role": "assistant", "content": "{\n  \"description\": \"We are given a strictly increasing array of positive integers, and the task is to find the length of the longest Fibonacci-like subsequence. A Fibonacci-like sequence is defined such that each element is the sum of the previous two elements. A subsequence is derived by deleting any number of elements from the array without changing the order.\",\n  \"objective\": \"Return the length of the longest Fibonacci-like subsequence of the given array. If no such subsequence exists, return 0.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"A Fibonacci-like sequence is formed by ensuring that the sum of two consecutive elements equals the next element. The challenge is to find such subsequences in a strictly increasing array.\",\n    \"Step 2 - Approach\": \"Use dynamic programming (DP) to keep track of the longest Fibonacci-like subsequences as we iterate over the array. Specifically, for each pair of elements, check if their sum exists later in the array.\",\n    \"Step 3 - Output Format\": \"Return the length of the longest Fibonacci-like subsequence, or 0 if none exists.\",\n    \"Step 4 - Code Efficiency and Edge Cases\": \"The solution should be efficient enough to handle up to 1000 elements, ensuring that the time complexity does not exceed O(n^2). Handle cases where no Fibonacci-like subsequence exists.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"arr\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          8\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"The longest Fibonacci-like subsequence is [1,2,3,5,8], with a length of 5.\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          1,\n          3,\n          7,\n          11,\n          12,\n          14,\n          18\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The longest Fibonacci-like subsequences are [1, 11, 12], [3, 11, 14], or [7, 11, 18], each with a length of 3.\"\n    }\n  ],\n  \"constraints\": {\n    \"arr_length\": \"3 <= arr.length <= 1000\",\n    \"arr_values\": \"1 <= arr[i] < arr[i + 1] <= 10^9\"\n  },\n  \"follow_up\": \"Can we optimize this solution for even larger arrays or arrays with additional constraints?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the quietest person in a group based on richer relationships."}, {"role": "assistant", "content": "{\n  \"description\": \"You are tasked with determining the quietest person among those who definitely have equal to or more money than each person in a group. The input consists of a directed graph represented by an array `richer` and an array `quiet`. The `richer` array contains pairs `[ai, bi]` which indicate that person `ai` is richer than person `bi`. The `quiet` array assigns each person a unique quietness value. Your goal is to return an array `answer` such that `answer[x] = y`, where `y` is the quietest person (minimum quietness value) among all people who are as rich or richer than person `x`.\",\n  \"objective\": \"Design an algorithm to process the richer relationships and quietness levels, ensuring that for each person, you can determine the quietest person in their 'richer group' efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Graph Representation\": \"Model the richer relationships as a directed graph where an edge from `ai` to `bi` indicates that `ai` is richer than `bi`.\",\n    \"Step 2 - Determine Quietest\": \"For each person, traverse the graph to identify all individuals who are as rich or richer, and find the one with the smallest quietness value.\",\n    \"Step 3 - Efficient Traversal\": \"Consider using graph traversal techniques like DFS or BFS to process the graph. Alternatively, use a topological sorting approach since the graph is acyclic.\",\n    \"Step 4 - Output Construction\": \"Build the `answer` array such that each element corresponds to the quietest person richer than or equal to the person at the respective index.\",\n    \"Step 5 - Constraints Handling\": \"Ensure the algorithm adheres to the constraints, especially the size limit `n <= 500` and the uniqueness of the quietness values.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"richer\": [\n          [\n            1,\n            0\n          ],\n          [\n            2,\n            1\n          ],\n          [\n            3,\n            1\n          ],\n          [\n            3,\n            7\n          ],\n          [\n            4,\n            3\n          ],\n          [\n            5,\n            3\n          ],\n          [\n            6,\n            3\n          ]\n        ],\n        \"quiet\": [\n          3,\n          2,\n          5,\n          4,\n          6,\n          1,\n          7,\n          0\n        ]\n      },\n      \"output\": [\n        5,\n        5,\n        2,\n        5,\n        4,\n        5,\n        6,\n        7\n      ],\n      \"explanation\": \"Each person's answer is determined by finding the quietest person in their richer group. For example, person 0 has person 5 as the quietest among their richer group.\"\n    },\n    {\n      \"input\": {\n        \"richer\": [],\n        \"quiet\": [\n          0\n        ]\n      },\n      \"output\": [\n        0\n      ],\n      \"explanation\": \"Since there are no richer relationships, each person is their own quietest in the group.\"\n    }\n  ],\n  \"constraints\": {\n    \"graph_structure\": \"The input `richer` defines a directed acyclic graph (DAG).\",\n    \"n_range\": \"1 <= n <= 500\",\n    \"quiet_values\": \"All values in `quiet` are unique and within range `0 <= quiet[i] < n`.\",\n    \"richer_pairs\": \"Each pair `[ai, bi]` in `richer` is unique, and all observations are logically consistent.\"\n  },\n  \"follow_up\": \"Can you improve your algorithm to handle the largest allowed input size efficiently, ensuring that the time complexity is linear or near-linear relative to the input size?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find two numbers in a sorted array that sum to a target."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a 1-indexed sorted array `numbers`, find two indices `index1` and `index2` such that their corresponding elements sum to a given `target`. Return the indices as `[index1, index2]`.\",\n  \"objective\": \"Design an efficient algorithm to find two indices whose elements sum to the target using a sorted array.\",\n  \"meta_prompt\": {\n    \"Step 1 - Use Two Pointers\": \"Since the array is sorted, use a two-pointer approach to find the two numbers efficiently.\",\n    \"Step 2 - Increment or Decrement Pointers\": \"If the sum of the elements at the pointers is less than the target, move the left pointer forward. If the sum is greater, move the right pointer backward.\",\n    \"Step 3 - Return Indices\": \"When the target sum is found, return the indices adjusted to 1-based indexing.\",\n    \"Step 4 - Handle Edge Cases\": \"Ensure the solution works for edge cases like negative numbers, large inputs, and arrays of length 2.\",\n    \"Step 5 - Optimize Space\": \"Use only O(1) extra space for the solution.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"numbers\": [\n          2,\n          7,\n          11,\n          15\n        ],\n        \"target\": 9\n      },\n      \"output\": [\n        1,\n        2\n      ],\n      \"explanation\": \"The sum of numbers[0] and numbers[1] is 9, so return [1, 2].\"\n    },\n    {\n      \"input\": {\n        \"numbers\": [\n          -1,\n          0\n        ],\n        \"target\": -1\n      },\n      \"output\": [\n        1,\n        2\n      ],\n      \"explanation\": \"The sum of numbers[0] and numbers[1] is -1, so return [1, 2].\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"2 <= numbers.length <= 3 * 10^4\",\n    \"element_range\": \"-1000 <= numbers[i] <= 1000\",\n    \"target_range\": \"-1000 <= target <= 1000\"\n  },\n  \"follow_up\": \"Can you explain why the two-pointer approach is optimal for a sorted array?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the area of the smallest rectangle around black pixels in a matrix."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a binary `m x n` matrix `image` representing a grid where `0` is a white pixel and `1` is a black pixel, find the area of the smallest axis-aligned rectangle that encloses all black pixels. The black pixels form a single connected region.\",\n  \"objective\": \"Design an efficient algorithm to compute the area of the enclosing rectangle in less than O(mn) runtime complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the problem constraints:\\n1. Black pixels ('1') are connected either horizontally or vertically.\\n2. The rectangle is axis-aligned, so its sides are parallel to the grid axes.\",\n    \"Step 2 - Binary Search for Bounds\": \"Leverage binary search to locate the top, bottom, left, and right boundaries of the black pixel region:\\n- For rows, find the first and last rows containing a black pixel.\\n- For columns, find the first and last columns containing a black pixel.\",\n    \"Step 3 - Area Calculation\": \"Compute the area of the rectangle using the formula: `(bottom - top + 1) * (right - left + 1)`.\",\n    \"Step 4 - Optimization\": \"Avoid visiting every pixel by applying binary search only to relevant rows and columns.\",\n    \"Step 5 - Edge Cases\": \"Handle special cases such as:\\n- A single black pixel.\\n- The entire matrix filled with black pixels.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"image\": [\n          [\n            \"0\",\n            \"0\",\n            \"1\",\n            \"0\"\n          ],\n          [\n            \"0\",\n            \"1\",\n            \"1\",\n            \"0\"\n          ],\n          [\n            \"0\",\n            \"1\",\n            \"0\",\n            \"0\"\n          ]\n        ],\n        \"x\": 0,\n        \"y\": 2\n      },\n      \"output\": 6,\n      \"explanation\": \"The rectangle enclosing all black pixels has an area of 6.\"\n    },\n    {\n      \"input\": {\n        \"image\": [\n          [\n            \"1\"\n          ]\n        ],\n        \"x\": 0,\n        \"y\": 0\n      },\n      \"output\": 1,\n      \"explanation\": \"The rectangle enclosing the single black pixel has an area of 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size\": \"1 <= m, n <= 100\",\n    \"pixel_values\": \"Each cell in `image` is either '0' or '1'.\",\n    \"pixel_position\": \"0 <= x < m, 0 <= y < n\",\n    \"valid_input\": \"`image[x][y] == '1'` and the black pixels form a single connected component.\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm further by combining binary search with BFS/DFS for sparse matrices?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the most frequent subtree sum(s) in a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of a binary tree, your task is to return the most frequent subtree sum(s). A subtree sum is defined as the sum of all node values within a subtree rooted at a particular node. If multiple sums have the highest frequency, return them in any order.\",\n  \"objective\": \"Design an algorithm to efficiently compute the subtree sums and track their frequencies using post-order traversal. The algorithm should then identify and return the most frequent sums.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Identify the problem as calculating the sum of each subtree in a binary tree and determining the frequency of each sum. The subtree sum includes the node itself and all its descendants.\",\n    \"Step 2 - Using Post-Order Traversal\": \"Leverage post-order traversal, which processes child nodes before their parent node. This allows computing the sum of each subtree directly from the sums of its left and right children, avoiding redundant calculations.\",\n    \"Step 3 - Tracking Subtree Sums\": \"Use a hashmap to track the frequency of each subtree sum encountered. For each node, calculate its subtree sum and increment its count in the hashmap.\",\n    \"Step 4 - Identifying Most Frequent Sums\": \"After traversal, iterate through the hashmap to find the highest frequency of any subtree sum. Collect all sums that have this maximum frequency.\",\n    \"Step 5 - Complexity and Edge Case Handling\": \"The algorithm should efficiently handle large trees with up to `10^4` nodes, ensuring subtree sums are computed in `O(n)` time by avoiding recalculations and only visiting each node once.\",\n    \"Final Check - Constraints Verification\": \"Ensure the solution works within constraints, with each node\\u2019s value in the range `[-10^5, 10^5]` and handles cases where multiple sums have the same maximum frequency.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          5,\n          2,\n          -3\n        ]\n      },\n      \"output\": [\n        2,\n        -3,\n        4\n      ],\n      \"explanation\": \"The subtree sums 2, -3, and 4 each have the highest frequency, appearing once, and are returned in any order.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          5,\n          2,\n          -5\n        ]\n      },\n      \"output\": [\n        2\n      ],\n      \"explanation\": \"The subtree sum 2 has the highest frequency, appearing twice, so it is returned as the most frequent sum.\"\n    }\n  ],\n  \"constraints\": {\n    \"tree_node_range\": \"1 <= number of nodes <= 10^4\",\n    \"node_value_range\": \"-10^5 <= Node.val <= 10^5\"\n  },\n  \"follow_up\": \"Could you implement the solution with minimal space usage while ensuring efficient traversal, leveraging post-order traversal to avoid recalculating subtree sums?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Calculate the total importance of an employee and all their subordinates using a graph representation."}, {"role": "assistant", "content": "{\n  \"description\": \"Calculate the total importance of an employee and all their subordinates using a graph representation of employee information.\",\n  \"objective\": \"Use depth-first search (DFS) to compute the total importance of an employee, including all direct and indirect subordinates, based on their unique ID.\",\n  \"meta_prompt\": {\n    \"Step 1 - Build a Hashmap\": \"Construct a hashmap where each employee's ID maps to their corresponding employee object for O(1) access.\",\n    \"Step 2 - Define Recursive DFS\": \"Implement a DFS function that takes an employee's ID, retrieves their importance value, and recursively computes the importance of all subordinates.\",\n    \"Step 3 - Traverse Subordinates\": \"For each subordinate ID, recursively call the DFS function to calculate and accumulate their total importance.\",\n    \"Step 4 - Return Total Importance\": \"After processing all subordinates, return the total importance of the current employee and their hierarchy.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"employees\": [\n          {\n            \"id\": 1,\n            \"importance\": 5,\n            \"subordinates\": [\n              2,\n              3\n            ]\n          },\n          {\n            \"id\": 2,\n            \"importance\": 3,\n            \"subordinates\": []\n          },\n          {\n            \"id\": 3,\n            \"importance\": 3,\n            \"subordinates\": []\n          }\n        ],\n        \"id\": 1\n      },\n      \"output\": 11,\n      \"explanation\": \"Employee 1 has an importance of 5. Their subordinates (employees 2 and 3) have importances of 3 each. Total importance is 5 + 3 + 3 = 11.\"\n    },\n    {\n      \"input\": {\n        \"employees\": [\n          {\n            \"id\": 1,\n            \"importance\": 2,\n            \"subordinates\": [\n              5\n            ]\n          },\n          {\n            \"id\": 5,\n            \"importance\": -3,\n            \"subordinates\": []\n          }\n        ],\n        \"id\": 5\n      },\n      \"output\": -3,\n      \"explanation\": \"Employee 5 has an importance of -3 and no subordinates. Total importance is -3.\"\n    }\n  ],\n  \"constraints\": {\n    \"employee_count\": \"1 <= employees.length <= 2000\",\n    \"id_range\": \"1 <= employees[i].id <= 2000\",\n    \"importance_range\": \"-100 <= employees[i].importance <= 100\",\n    \"subordinate_count\": \"Each employee can have multiple subordinates but at most one direct leader.\"\n  },\n  \"follow_up\": \"Discuss the scalability of the DFS approach when handling a large number of employees and the potential trade-offs of using BFS instead.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Reverse all words in a string."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s`, reverse each word's characters while keeping whitespace and word order unchanged. Each word in `s` is separated by a single space with no leading or trailing spaces.\",\n  \"objective\": \"Efficiently reverse each word in place using a two-pointer approach to achieve optimal time complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Identify Words\": \"Initialize a variable `lastSpaceIndex` to -1. Traverse `s` to identify each word by detecting spaces.\",\n    \"Step 2 - Reverse Each Word Using Two Pointers\": \"For each word, set `startIndex` to `lastSpaceIndex + 1` and `endIndex` to `strIndex - 1`. Reverse the characters between `startIndex` and `endIndex` using a two-pointer approach by swapping characters at these indices and moving `startIndex` and `endIndex` towards each other until they meet.\",\n    \"Step 3 - Update Last Space Index\": \"After reversing each word, update `lastSpaceIndex` to the current space index to prepare for the next word.\",\n    \"Step 4 - Final Word Reversal\": \"After the loop, handle the last word by reversing from `lastSpaceIndex + 1` to the end of the string if it hasn\\u2019t been reversed.\",\n    \"Final Check - Constraints Verification\": \"Ensure that all characters in each word are reversed in place, and confirm the solution meets the constraints of `1 <= s.length <= 5 * 10^4` and `s` containing only ASCII printable characters.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"Let's take LeetCode contest\"\n      },\n      \"output\": \"s'teL ekat edoCteeL tsetnoc\",\n      \"explanation\": \"Each word is reversed in place, preserving the original word order.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"God Ding\"\n      },\n      \"output\": \"doG gniD\",\n      \"explanation\": \"Both words 'God' and 'Ding' are individually reversed to 'doG' and 'gniD'.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 5 * 10^4\",\n    \"character_type\": \"s contains only printable ASCII characters\",\n    \"word_spacing\": \"Words in s are separated by a single space with no leading or trailing spaces\"\n  },\n  \"follow_up\": \"Consider how to modify the algorithm if extra space is allowed or if the input contains varying whitespace patterns.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Remove all nodes from a linked list that have the given value."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the head of a linked list and a value `val`, remove all nodes with `Node.val == val` and return the updated linked list.\",\n  \"objective\": \"Design an algorithm to traverse the linked list and remove nodes with the specified value.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that nodes with `Node.val == val` must be removed while maintaining the structure of the list.\",\n    \"Step 2 - Edge Case Handling\": \"Consider scenarios like an empty list, all nodes matching `val`, or no nodes matching `val`.\",\n    \"Step 3 - Two-Pointer Technique\": \"Use a dummy node to simplify edge cases and two pointers to traverse and update the list.\",\n    \"Step 4 - Recursive Approach\": \"Alternatively, solve the problem using recursion by processing one node at a time.\",\n    \"Step 5 - Complexity\": \"Ensure the solution runs in O(n) time with O(1) extra space for the iterative approach.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2,\n          6,\n          3,\n          4,\n          5,\n          6\n        ],\n        \"val\": 6\n      },\n      \"output\": [\n        1,\n        2,\n        3,\n        4,\n        5\n      ],\n      \"explanation\": \"Nodes with value 6 are removed.\"\n    },\n    {\n      \"input\": {\n        \"head\": [],\n        \"val\": 1\n      },\n      \"output\": [],\n      \"explanation\": \"An empty list remains empty.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          7,\n          7,\n          7,\n          7\n        ],\n        \"val\": 7\n      },\n      \"output\": [],\n      \"explanation\": \"All nodes are removed as they match the given value.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 10^4\",\n    \"node_value_range\": \"1 <= Node.val <= 50\",\n    \"value_range\": \"0 <= val <= 50\"\n  },\n  \"follow_up\": \"How would you handle very large lists in a memory-constrained environment?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a number is happy by summing the squares of its digits until it becomes 1 or gets stuck in a loop."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if a number is a 'happy number', where a happy number eventually leads to 1 after repeatedly replacing the number by the sum of the squares of its digits.\",\n  \"objective\": \"Implement an algorithm to detect if a number is a happy number efficiently, avoiding infinite loops.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that a happy number's iterative process either leads to 1 or falls into a cycle.\",\n    \"Step 2 - Algorithm Design\": \"Use a set to track visited numbers to detect cycles or utilize the Floyd's Cycle Detection Algorithm.\",\n    \"Step 3 - Repeated Calculation\": \"For each iteration, calculate the sum of squares of digits until the number equals 1 or repeats.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider numbers like 1, very large numbers, or numbers that immediately cycle.\",\n    \"Step 5 - Optimize\": \"Minimize unnecessary calculations using efficient digit extraction and loop detection.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 19\n      },\n      \"output\": true,\n      \"explanation\": \"19 -> 82 -> 68 -> 100 -> 1 (happy number).\"\n    },\n    {\n      \"input\": {\n        \"n\": 2\n      },\n      \"output\": false,\n      \"explanation\": \"2 leads to a cycle: 2 -> 4 -> 16 -> 37 -> 58 -> 89 -> 145 -> 42 -> 20 -> 4.\"\n    }\n  ],\n  \"constraints\": {\n    \"number_range\": \"1 <= n <= 2^31 - 1\"\n  },\n  \"follow_up\": \"Can you solve this using O(1) extra space by employing Floyd's Cycle Detection Algorithm?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Build the maximum binary tree from an array by splitting it using the largest value."}, {"role": "assistant", "content": "{\n  \"description\": \"Construct the maximum binary tree from an integer array by recursively splitting the array into left and right subarrays based on the maximum value.\",\n  \"objective\": \"Recursively build the binary tree by identifying the maximum value as the root, and dividing the array into left and right subtrees for further construction.\",\n  \"meta_prompt\": {\n    \"Step 1 - Define Recursive Function\": \"Implement a function construct(nums, l, r) that takes the array and the current range [l, r) as input and returns the root of the maximum binary tree for that range.\",\n    \"Step 2 - Base Case\": \"If the range [l, r) is empty, return null as there are no elements to process.\",\n    \"Step 3 - Find Maximum Value\": \"Identify the maximum value in the range [l, r) and its index, max_i. Create a root node with this maximum value.\",\n    \"Step 4 - Recursively Build Subtrees\": \"Use construct(nums, l, max_i) to create the left subtree and construct(nums, max_i + 1, r) to create the right subtree.\",\n    \"Step 5 - Return the Root\": \"Attach the left and right subtrees to the root node and return it.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          2,\n          1,\n          6,\n          0,\n          5\n        ]\n      },\n      \"output\": [\n        6,\n        3,\n        5,\n        null,\n        2,\n        0,\n        null,\n        null,\n        1\n      ],\n      \"explanation\": \"The largest value in [3, 2, 1, 6, 0, 5] is 6. The left subtree is built from [3, 2, 1], and the right subtree is built from [0, 5].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          2,\n          1\n        ]\n      },\n      \"output\": [\n        3,\n        null,\n        2,\n        null,\n        1\n      ],\n      \"explanation\": \"The largest value in [3, 2, 1] is 3. The left subtree is empty, and the right subtree is built from [2, 1].\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 1000\",\n    \"nums_values\": \"0 <= nums[i] <= 1000\",\n    \"nums_uniqueness\": \"All integers in nums are unique.\"\n  },\n  \"follow_up\": \"Analyze the time complexity of the approach and discuss how to optimize the solution for very large arrays with repetitive recursive calls.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a number is a palindrome."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `x`, determine if it reads the same forward and backward. Return `true` if `x` is a palindrome, and `false` otherwise. A palindrome is a number that remains the same when its digits are reversed. Negative numbers and numbers ending in zero (except 0 itself) cannot be palindromes.\",\n  \"objective\": \"Design an efficient algorithm to determine if an integer is a palindrome without converting it to a string. Focus on reducing space complexity while handling edge cases like negative numbers and values near the 32-bit integer range.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the properties of palindromic numbers and how reversing the digits can determine if a number is a palindrome. Handle constraints like 32-bit integer limits.\",\n    \"Step 2 - Initial Approach\": \"Reverse the digits of the integer mathematically by extracting digits using modulo and division operations. Compare the original number with its reversed counterpart.\",\n    \"Step 3 - Optimize for Half-Reversal\": \"To reduce computational effort, reverse only half the digits of the number and compare them with the other half.\",\n    \"Step 4 - Edge Cases\": \"Handle cases such as single-digit numbers (always palindromes), negative numbers (never palindromes), and numbers ending in zero (not palindromes unless the number is 0).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"x\": 121\n      },\n      \"output\": true,\n      \"explanation\": \"121 reads the same forward and backward.\"\n    },\n    {\n      \"input\": {\n        \"x\": -121\n      },\n      \"output\": false,\n      \"explanation\": \"Negative numbers cannot be palindromes.\"\n    },\n    {\n      \"input\": {\n        \"x\": 10\n      },\n      \"output\": false,\n      \"explanation\": \"10 reads as 01 backward, so it is not a palindrome.\"\n    },\n    {\n      \"input\": {\n        \"x\": 0\n      },\n      \"output\": true,\n      \"explanation\": \"0 is a single-digit number and reads the same forward and backward.\"\n    }\n  ],\n  \"constraints\": {\n    \"x_range\": \"-2^31 <= x <= 2^31 - 1\"\n  },\n  \"follow_up\": \"Can you solve this problem without converting the integer to a string and using only constant space?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Join strings into a loop and find the largest string."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of strings `strs`, concatenate these strings into a loop, where each string can be reversed or left as is. The loop can then be 'cut' at any point, forming a new linear string. The task is to find the lexicographically largest string that can be formed by concatenating, reversing, and cutting as described.\",\n  \"objective\": \"Implement an algorithm that examines possible loop configurations and determines the largest string lexicographically by reversing strings where beneficial and choosing the optimal cut point in the looped sequence.\",\n  \"meta_prompt\": {\n    \"Step 1 - Reverse Each String\": \"Iterate through each string in `strs`, creating both the original and reversed versions of each string.\",\n    \"Step 2 - Concatenate with Reversal Options\": \"For each string in `strs`, try to arrange it both as-is and reversed in sequence, forming two separate configurations for the entire loop: one where each string remains as given and one where each string is reversed.\",\n    \"Step 3 - Form All Loop Variations\": \"For each configuration (original and reversed strings in sequence), generate the loop by concatenating the entire sequence into a single string, then append it to itself to allow circular 'cuts' at any position.\",\n    \"Step 4 - Find Lexicographically Largest Substring\": \"For each loop configuration, examine each substring starting from each character to determine which substring is lexicographically the largest by iterating over the first half of each doubled sequence (as all substrings in the second half are cyclic repetitions of the first).\",\n    \"Final Check - Constraints Verification\": \"Confirm that the solution efficiently handles the constraints where `strs.length` can be up to 1000 strings, and each string can be up to 1000 characters long.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"strs\": [\n          \"abc\",\n          \"xyz\"\n        ]\n      },\n      \"output\": \"zyxcba\",\n      \"explanation\": \"By reversing both strings and concatenating in a loop, the largest lexicographical order is achieved with the sequence 'zyxcba'.\"\n    },\n    {\n      \"input\": {\n        \"strs\": [\n          \"abc\"\n        ]\n      },\n      \"output\": \"cba\",\n      \"explanation\": \"The largest lexicographical result is achieved by reversing 'abc' to form 'cba'.\"\n    }\n  ],\n  \"constraints\": {\n    \"strs_length\": \"1 <= strs.length <= 1000\",\n    \"str_length\": \"1 <= strs[i].length <= 1000\",\n    \"total_length\": \"1 <= sum(strs[i].length) <= 1000\",\n    \"characters\": \"strs[i] consists of lowercase English letters.\"\n  },\n  \"follow_up\": \"Consider how this approach could be optimized further for even larger strings or alternate character orderings.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if one string is a scrambled version of another."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two strings `s1` and `s2` of the same length, determine if `s2` is a scrambled version of `s1`. A scrambled string is derived using a recursive process that splits `s1` into substrings and randomly swaps or keeps the substrings in the same order. The process is recursively applied to the substrings.\",\n  \"objective\": \"Design an efficient algorithm using dynamic programming or recursion with memoization to determine if `s2` can be derived as a scrambled string of `s1`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves recursively splitting and rearranging `s1` to match `s2`. Dynamic programming or recursion with memoization can be used to avoid redundant computations.\",\n    \"Step 2 - Recursive Approach\": \"Recursively split `s1` and check if the rearranged substrings match `s2`. For each split, there are two possibilities: swap the substrings or keep them in order.\",\n    \"Step 3 - Base Case\": \"If `s1` is equal to `s2`, return `true`. If the characters in `s1` and `s2` are not the same when sorted, return `false`.\",\n    \"Step 4 - Memoization\": \"Store results of previously computed substrings in a hash map to avoid redundant recursive calls.\",\n    \"Step 5 - Constraints Compliance\": \"Ensure the solution efficiently handles constraints where `s1` and `s2` have lengths up to 30, resulting in a maximum of 2^30 recursive calls if unchecked.\",\n    \"Step 6 - Handle Edge Cases\": \"Consider cases where `s1` and `s2` are identical, have only one character, or where the characters do not match in count.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s1\": \"great\",\n        \"s2\": \"rgeat\"\n      },\n      \"output\": true,\n      \"explanation\": \"Using the recursive splitting and swapping process, 'great' can be scrambled to become 'rgeat'.\"\n    },\n    {\n      \"input\": {\n        \"s1\": \"abcde\",\n        \"s2\": \"caebd\"\n      },\n      \"output\": false,\n      \"explanation\": \"No valid sequence of recursive splits and swaps can transform 'abcde' into 'caebd'.\"\n    },\n    {\n      \"input\": {\n        \"s1\": \"a\",\n        \"s2\": \"a\"\n      },\n      \"output\": true,\n      \"explanation\": \"A single character string is always a scrambled version of itself.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s1.length == s2.length <= 30\",\n    \"character_set\": \"s1 and s2 consist of lowercase English letters.\",\n    \"output_type\": \"Return `true` if `s2` is a scrambled string of `s1`, else return `false`.\"\n  },\n  \"follow_up\": \"Can you optimize the recursive solution further to avoid exploring unnecessary branches, especially for larger input sizes?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the sum of Hamming distances between all pairs of numbers in an array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of integers `nums`, compute the sum of Hamming distances between all pairs of integers in the array. The Hamming distance between two integers is defined as the number of bit positions where their binary representations differ.\",\n  \"objective\": \"Efficiently calculate the sum of Hamming distances between all pairs of integers in `nums` by leveraging the properties of bit manipulation to reduce computational complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Recognize that the Hamming distance counts differing bits between two integers. For multiple pairs, consider a scalable approach without directly comparing every pair.\",\n    \"Step 2 - Key Insight\": \"Focus on each bit position independently. Count how many numbers have a `1` at the position and how many have a `0`. The product of these counts gives the Hamming contributions for that bit across all pairs.\",\n    \"Step 3 - Algorithm Design\": \"1. Iterate over all bit positions (0 to 31 for a 32-bit integer). 2. For each bit position, count the numbers with `1` and `0`. 3. Compute the contribution of the bit position to the total Hamming distance using the product of the counts. 4. Sum contributions for all bit positions.\",\n    \"Step 4 - Optimize and Verify\": \"By processing bitwise, achieve a time complexity of `O(32 * n) = O(n)`. Ensure correctness for edge cases like arrays with duplicate numbers or a single number.\",\n    \"Step 5 - Constraints Verification\": \"Ensure the solution handles the range `1 <= nums.length <= 10^4` and `0 <= nums[i] <= 10^9` efficiently without exceeding memory or time limits.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          4,\n          14,\n          2\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"Binary representations: 4 (0100), 14 (1110), 2 (0010). Hamming distances: H(4,14)=2, H(4,2)=2, H(14,2)=2. Total=2+2+2=6.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          4,\n          14,\n          4\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"Binary representations: 4 (0100), 14 (1110). Hamming distances: H(4,14)=2, H(4,4)=0, H(14,4)=2. Total=2+0+2=4.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"Binary representations: 1 (0001), 2 (0010), 3 (0011). Hamming distances: H(1,2)=2, H(1,3)=1, H(2,3)=1. Total=2+1+1=4.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 10^4\",\n    \"nums_range\": \"0 <= nums[i] <= 10^9\",\n    \"output_limit\": \"The result must fit in a 32-bit integer.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"How would you modify the approach if the range of numbers is extended to 64-bit integers?\",\n    \"question_2\": \"Can you generalize the solution to calculate Hamming distances in arrays of strings representing binary numbers?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Generate a sequence of n-bit gray codes."}, {"role": "assistant", "content": "{\n  \"description\": \"Generate an **n-bit gray code sequence**, where the sequence consists of `2^n` integers such that the binary representations of consecutive numbers differ by exactly one bit. The sequence should start with `0` and ensure all integers appear exactly once.\",\n  \"objective\": \"Design an efficient algorithm to generate a valid n-bit gray code sequence.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the goal is to generate a sequence of integers where the binary representations of adjacent numbers differ by exactly one bit. The sequence must include all integers in the range `[0, 2^n - 1]` without repetition.\",\n    \"Step 2 - Recursive Gray Code Generation\": \"Use the recursive definition of gray code: Start with the base case for `n = 1` as `[0, 1]`. For `n > 1`, generate the gray code for `n - 1` and then reverse it, prefixing the original sequence with `0` and the reversed sequence with `1`.\",\n    \"Step 3 - Iterative Approach\": \"Alternatively, use an iterative approach where each number in the gray code sequence is generated using the formula `gray[i] = i ^ (i >> 1)`.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution handles constraints such as `1 <= n <= 16` efficiently. For `n = 16`, the sequence will have up to `2^16 = 65536` elements.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider cases such as `n = 1`, which only has two numbers, and ensure correctness for larger values of `n` up to 16.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 2\n      },\n      \"output\": [\n        0,\n        1,\n        3,\n        2\n      ],\n      \"explanation\": \"The binary representations of the sequence are [00, 01, 11, 10], where adjacent values differ by one bit.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1\n      },\n      \"output\": [\n        0,\n        1\n      ],\n      \"explanation\": \"The binary representations of the sequence are [0, 1], where the two values differ by one bit.\"\n    },\n    {\n      \"input\": {\n        \"n\": 3\n      },\n      \"output\": [\n        0,\n        1,\n        3,\n        2,\n        6,\n        7,\n        5,\n        4\n      ],\n      \"explanation\": \"The binary representations of the sequence are [000, 001, 011, 010, 110, 111, 101, 100], where adjacent values differ by one bit.\"\n    }\n  ],\n  \"constraints\": {\n    \"bit_length\": \"1 <= n <= 16\",\n    \"sequence_length\": \"The sequence must include exactly `2^n` integers.\",\n    \"validity\": \"Adjacent integers' binary representations must differ by exactly one bit.\"\n  },\n  \"follow_up\": \"Can you modify the algorithm to generate the sequence in constant space, returning one number at a time without storing the entire sequence?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given bus routes and source and target, find the number of buses to take."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an array representing bus routes. Each bus route is a sequence of bus stops that the bus follows, repeating forever. The goal is to determine the least number of bus rides required to travel from a source bus stop to a target bus stop. If no such path exists, return -1.\",\n  \"objective\": \"Write a function to find the minimum number of bus routes needed to travel from source to target. If a path is not possible, return -1.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Given bus routes that are cyclic, determine the minimum number of buses required to travel from the source bus stop to the target bus stop.\",\n    \"Step 2 - Graph Representation\": \"Represent each bus stop as a node and each bus route as an edge between bus stops. A node is connected to another if they appear on the same bus route.\",\n    \"Step 3 - BFS Approach\": \"To minimize the number of buses, implement a breadth-first search (BFS) approach. This ensures that you explore all possible bus routes level by level.\",\n    \"Step 4 - Efficient Bus Stop Traversal\": \"For each bus stop, keep track of the buses that stop at that location. Use this to transition from one bus stop to another via different buses.\",\n    \"Step 5 - Edge Cases and Final Output\": \"Consider cases where the source and target are the same, or where there is no route connecting the source to the target. Return the number of buses if a path is found, otherwise -1.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"routes\": [\n          [\n            1,\n            2,\n            7\n          ],\n          [\n            3,\n            6,\n            7\n          ]\n        ],\n        \"source\": 1,\n        \"target\": 6\n      },\n      \"output\": 2,\n      \"explanation\": \"Take the first bus to stop 7, then switch to the second bus to reach stop 6.\"\n    },\n    {\n      \"input\": {\n        \"routes\": [\n          [\n            7,\n            12\n          ],\n          [\n            4,\n            5,\n            15\n          ],\n          [\n            6\n          ],\n          [\n            15,\n            19\n          ],\n          [\n            9,\n            12,\n            13\n          ]\n        ],\n        \"source\": 15,\n        \"target\": 12\n      },\n      \"output\": -1,\n      \"explanation\": \"There is no possible route from 15 to 12.\"\n    }\n  ],\n  \"constraints\": {\n    \"routes_length\": \"1 <= routes.length <= 500\",\n    \"bus_route_length\": \"1 <= routes[i].length <= 10^5\",\n    \"total_route_length\": \"sum(routes[i].length) <= 10^5\",\n    \"bus_stop_range\": \"0 <= routes[i][j] < 10^6\",\n    \"source_target_range\": \"0 <= source, target < 10^6\"\n  },\n  \"follow_up\": \"Can the solution be optimized further for cases where there are many bus stops or many routes?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create a structure to store key-value pairs with timestamps and retrieve values."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a time-based key-value data structure that allows storing multiple values for the same key at different timestamps and retrieving the key's value at a specific timestamp. Implement the `TimeMap` class with the following methods: `TimeMap()` initializes the data structure. `void set(String key, String value, int timestamp)` stores the key-value pair at the given timestamp. `String get(String key, int timestamp)` retrieves the latest value associated with the key at or before the specified timestamp.\",\n  \"objective\": \"Create a data structure that supports efficient storage and retrieval of key-value pairs based on timestamps, ensuring optimal performance for multiple set and get operations.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the input requirements: The `set` method stores a key-value pair at a given timestamp, and the `get` method retrieves the latest value for a key at or before a specified timestamp.\",\n    \"Step 2 - Initial Approach\": \"Consider using a dictionary to store lists of tuples (value, timestamp) for each key. This allows for appending new values efficiently.\",\n    \"Step 3 - Optimal Solution with Binary Search\": \"To optimize retrieval, use binary search to find the appropriate value for a given timestamp in the list of stored values. This ensures efficient lookups, ideally achieving O(log n) time complexity for the `get` method.\",\n    \"Step 4 - Output Format\": \"Ensure the `get` method returns the value as a string. If no value exists for the key at or before the specified timestamp, return an empty string \\\"\\\".\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Focus on efficient implementation of both `set` and `get` methods. Handle edge cases such as when the key does not exist or when all timestamps are larger than the specified timestamp in the `get` method.\",\n    \"Final Check - Constraints Verification\": \"Verify the solution operates within the constraints: `1 <= key.length, value.length <= 100`, `1 <= timestamp <= 10^7`, and at most `2 * 10^5` calls to `set` and `get`. Ensure the solution handles large inputs effectively.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"commands\": [\n          \"TimeMap\",\n          \"set\",\n          \"get\",\n          \"get\",\n          \"set\",\n          \"get\",\n          \"get\"\n        ],\n        \"arguments\": [\n          [],\n          [\n            \"foo\",\n            \"bar\",\n            1\n          ],\n          [\n            \"foo\",\n            1\n          ],\n          [\n            \"foo\",\n            3\n          ],\n          [\n            \"foo\",\n            \"bar2\",\n            4\n          ],\n          [\n            \"foo\",\n            4\n          ],\n          [\n            \"foo\",\n            5\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        null,\n        \"bar\",\n        \"bar\",\n        null,\n        \"bar2\",\n        \"bar2\"\n      ],\n      \"explanation\": \"TimeMap timeMap = new TimeMap(); timeMap.set(\\\"foo\\\", \\\"bar\\\", 1); timeMap.get(\\\"foo\\\", 1); returns \\\"bar\\\"; timeMap.get(\\\"foo\\\", 3); returns \\\"bar\\\", because the latest value at timestamp <= 3 is \\\"bar\\\" at timestamp 1; timeMap.set(\\\"foo\\\", \\\"bar2\\\", 4); timeMap.get(\\\"foo\\\", 4); returns \\\"bar2\\\"; timeMap.get(\\\"foo\\\", 5); returns \\\"bar2\\\".\"\n    }\n  ],\n  \"constraints\": {\n    \"key_value_length\": \"1 <= key.length, value.length <= 100\",\n    \"timestamp_range\": \"1 <= timestamp <= 10^7\",\n    \"max_calls\": \"At most 2 * 10^5 calls will be made to `set` and `get`.\"\n  },\n  \"follow_up\": \"Can you design an algorithm that optimizes both time and space complexity for the `set` and `get` operations, ensuring efficient handling of large numbers of operations and data?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the missing numbers from the array."}, {"role": "assistant", "content": "{\n  \"title\": \"Find Disappeared Numbers\",\n  \"description\": \"You are given an array `nums` of length `n` where each integer is in the range `[1, n]`. Your task is to return an array of all integers in the range `[1, n]` that do not appear in `nums`.\",\n  \"input\": {\n    \"nums\": {\n      \"type\": \"array\",\n      \"description\": \"An array of integers where `nums[i]` is in the range `[1, n]`.\",\n      \"constraints\": {\n        \"length\": \"[1, 10^5]\",\n        \"values\": \"Each element in `nums` is between 1 and `n` (inclusive).\"\n      }\n    }\n  },\n  \"output\": {\n    \"type\": \"array\",\n    \"description\": \"An array of integers representing the missing numbers in the range `[1, n]`.\",\n    \"constraints\": {\n      \"values\": \"Each integer is in the range `[1, n]`.\"\n    }\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          4,\n          3,\n          2,\n          7,\n          8,\n          2,\n          3,\n          1\n        ]\n      },\n      \"output\": [\n        5,\n        6\n      ],\n      \"explanation\": \"The numbers 5 and 6 are missing from the range `[1, 8]`.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          1\n        ]\n      },\n      \"output\": [\n        2\n      ],\n      \"explanation\": \"The number 2 is missing from the range `[1, 2]`.\"\n    }\n  ],\n  \"hints\": [\n    \"Try marking the presence of elements using in-place modifications to the input array.\",\n    \"Negate the value at the index corresponding to each number in the array.\",\n    \"Iterate through the array to find indices that remain positive; these indices represent missing numbers.\"\n  ],\n  \"constraints\": {\n    \"timeComplexity\": \"O(n)\",\n    \"spaceComplexity\": \"O(1) (excluding output space)\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Partition an array into two parts such that the left part has all smaller numbers than the right part."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an integer array `nums`. Your task is to partition it into two contiguous subarrays `left` and `right` such that: (1) Every element in `left` is less than or equal to every element in `right`, (2) both `left` and `right` are non-empty, and (3) `left` has the smallest possible size. Return the length of the `left` subarray after partitioning.\",\n  \"objective\": \"Design an efficient algorithm to find the length of the smallest valid `left` subarray that satisfies the given conditions, with a focus on time complexity, ideally O(n).\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We need to partition the array into two contiguous subarrays where the elements of the left subarray are less than or equal to the elements of the right subarray. Additionally, the left subarray must be as small as possible, and both subarrays must be non-empty.\",\n    \"Step 2 - Approach\": \"To solve this problem, one approach is to compute the maximum element in the `left` subarray and the minimum element in the `right` subarray as we traverse the array. We can then look for the smallest index where the maximum element of `left` is less than or equal to the minimum element of `right`.\",\n    \"Step 3 - Efficient Strategy\": \"Iterate from the right end of the array and compute the minimum value for the `right` subarray. At each step, compare this minimum value with the maximum value from the left subarray. The partition is valid when the maximum value in `left` is less than or equal to the minimum value in `right`.\",\n    \"Step 4 - Output Format\": \"Return the length of the `left` subarray that satisfies the partition conditions. The solution should consider edge cases such as when the array has the smallest possible length.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Aim for an O(n) time complexity solution to handle large inputs effectively. Ensure that the solution accounts for arrays with a variety of values, including edge cases where the partition is at the very beginning or end of the array.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution works within the constraints of 2 <= nums.length <= 10^5 and 0 <= nums[i] <= 10^6, ensuring scalability.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          5,\n          0,\n          3,\n          8,\n          6\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"We can partition the array as left = [5, 0, 3] and right = [8, 6]. The length of left is 3.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          1,\n          1,\n          0,\n          6,\n          12\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"We can partition the array as left = [1, 1, 1, 0] and right = [6, 12]. The length of left is 4.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"2 <= nums.length <= 10^5\",\n    \"nums_elements_range\": \"0 <= nums[i] <= 10^6\"\n  },\n  \"follow_up\": \"Can you come up with a solution that achieves the optimal time complexity of O(n) while considering edge cases where the partition occurs near the start or end of the array?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum product you can get by breaking an integer `n` into smaller integers."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `n`, break it into the sum of `k` positive integers (where `k >= 2`) and maximize the product of those integers. Return the maximum product.\",\n  \"objective\": \"Design an algorithm to efficiently compute the maximum product of integers that sum to `n`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand the Problem\": \"The goal is to split `n` into integers such that their product is maximized. A mathematical observation reveals that the number `3` contributes the most to maximizing the product, followed by `2`.\",\n    \"Step 2 - Key Observations\": [\n      \"If `n == 2` or `n == 3`, the result is `n - 1` because splitting into smaller integers reduces the product.\",\n      \"Break `n` into as many `3`s as possible because `3` maximizes the product compared to other numbers.\",\n      \"If there is a remainder of `1` when dividing by `3`, adjust by replacing one `3` with two `2`s (i.e., `3 + 1 -> 2 + 2`).\"\n    ],\n    \"Step 3 - Algorithm\": \"Divide `n` by `3` and determine the remainder:\\n1. If the remainder is `0`, return `3^(n/3)`.\\n2. If the remainder is `1`, return `3^((n/3) - 1) * 4`.\\n3. If the remainder is `2`, return `3^(n/3) * 2`.\",\n    \"Step 4 - Optimize for Constraints\": \"Ensure the solution is efficient for `2 <= n <= 58` by using a simple division and power computation.\"\n  },\n  \"examples\": [\n    {\n      \"input\": 2,\n      \"output\": 1,\n      \"explanation\": \"2 = 1 + 1, product = 1 * 1 = 1.\"\n    },\n    {\n      \"input\": 10,\n      \"output\": 36,\n      \"explanation\": \"10 = 3 + 3 + 4, product = 3 * 3 * 4 = 36.\"\n    },\n    {\n      \"input\": 8,\n      \"output\": 18,\n      \"explanation\": \"8 = 3 + 3 + 2, product = 3 * 3 * 2 = 18.\"\n    }\n  ],\n  \"constraints\": {\n    \"range_n\": \"2 <= n <= 58\",\n    \"output_range\": \"Return the maximum product as an integer.\"\n  },\n  \"follow_up\": \"Can you generalize this approach for maximizing the product for `n` beyond 58 or minimizing the product of integers that sum to `n`?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if the given `nums` matches the sequences."}, {"role": "assistant", "content": "{\n  \"title\": \"Shortest Supersequence Validation\",\n  \"description\": \"You are given an array `nums` and a list of subsequences `sequences`. Check if `nums` is the **only shortest supersequence** that can include all `sequences` as subsequences.\\n\\nA **supersequence** is a sequence that contains all the given subsequences in their original order. The **shortest supersequence** is the sequence with the minimum length that satisfies this condition. If there is more than one shortest supersequence or if `nums` is not the shortest, return `false`. Otherwise, return `true`.\",\n  \"input\": {\n    \"nums\": {\n      \"type\": \"array\",\n      \"description\": \"A permutation of integers from 1 to `n`.\",\n      \"constraints\": {\n        \"length\": \"n\",\n        \"element_range\": \"[1, n]\",\n        \"unique_elements\": true\n      }\n    },\n    \"sequences\": {\n      \"type\": \"2D array\",\n      \"description\": \"A list of subsequences, each representing part of the supersequence.\",\n      \"constraints\": {\n        \"length_range\": \"[1, 10^4]\",\n        \"subsequence_length\": \"[1, 10^4]\",\n        \"sum_of_lengths\": \"\\u2264 10^5\",\n        \"element_range\": \"[1, n]\",\n        \"unique_sequences\": true\n      }\n    }\n  },\n  \"output\": {\n    \"type\": \"boolean\",\n    \"description\": \"`true` if `nums` is the only shortest supersequence for `sequences`, otherwise `false`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3\n        ],\n        \"sequences\": [\n          [\n            1,\n            2\n          ],\n          [\n            1,\n            3\n          ]\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"There are two valid shortest supersequences: [1, 2, 3] and [1, 3, 2].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3\n        ],\n        \"sequences\": [\n          [\n            1,\n            2\n          ],\n          [\n            1,\n            3\n          ],\n          [\n            2,\n            3\n          ]\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The only valid shortest supersequence is [1, 2, 3].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3\n        ],\n        \"sequences\": [\n          [\n            1,\n            2\n          ]\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The shortest supersequence for [1, 2] is [1, 2], not [1, 2, 3].\"\n    }\n  ],\n  \"hints\": [\n    \"Consider constructing a graph where each number represents a node and directed edges represent the order constraints between numbers.\",\n    \"Use topological sorting to validate if the order of `nums` aligns with the constraints.\",\n    \"If there is more than one valid order derived from the constraints, return `false`.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(n + sum(sequences[i].length)) time complexity and O(n) space complexity.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count the number of valid triangles from an array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums`, determine the number of triplets `(i, j, k)` that form valid triangles if taken as side lengths, where `nums[i] + nums[j] > nums[k]`.\",\n  \"objective\": \"Efficiently count valid triplets from the array that satisfy the triangle inequality condition, leveraging sorting and a linear scan strategy.\",\n  \"meta_prompt\": {\n    \"Step 1 - Sort the Array\": \"Sort the array `nums` in ascending order to simplify the process of finding valid triplets.\",\n    \"Step 2 - Iterate Over Triplets\": \"Fix the third side `nums[k]` using a decreasing index `k` and determine the count of pairs `(i, j)` that satisfy the triangle condition for this `k`.\",\n    \"Step 3 - Linear Scan for Valid Pairs\": \"For a fixed `k`, use two pointers to identify valid pairs `(i, j)` such that `nums[i] + nums[j] > nums[k]`. Move the pointers appropriately to avoid redundant computations.\",\n    \"Step 4 - Accumulate Results\": \"Add the count of valid pairs for each fixed `k` to the total count of valid triplets.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          2,\n          3,\n          4\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"Valid combinations are [2,3,4] (using the first 2), [2,3,4] (using the second 2), and [2,2,3].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          4,\n          2,\n          3,\n          4\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"Valid combinations are [2,3,4], [2,4,4], and two instances of [3,4,4].\"\n    }\n  ],\n  \"constraints\": {\n    \"length_range\": \"1 <= nums.length <= 1000\",\n    \"value_range\": \"0 <= nums[i] <= 1000\"\n  },\n  \"follow_up\": \"Explore optimizations to handle edge cases where many duplicates exist or for very large inputs, and analyze the time complexity of the two-pointer approach.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the shortest part of the array that needs sorting to make the whole array sorted."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums`, find the length of the shortest subarray that if sorted in ascending order will make the whole array sorted. Return the length of this subarray.\",\n  \"objective\": \"Use a stack to identify the boundaries of the unsorted subarray by locating where elements fall out of sorted order from the left and right sides of the array.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Stack\": \"Create an empty stack to keep track of indices where elements appear in ascending order.\",\n    \"Step 2 - Determine Left Boundary\": \"Traverse `nums` from left to right. Push indices onto the stack for elements in increasing order. When you find a `nums[j]` that is smaller than the element at the stack's top index, pop from the stack until the element at the stack\\u2019s top is less than `nums[j]`. Track the leftmost position `left` where this occurs.\",\n    \"Step 3 - Determine Right Boundary\": \"Traverse `nums` from right to left. For elements in descending order, push their indices onto the stack. When you find a `nums[j]` that is larger than the element at the stack's top index, pop from the stack until the element at the stack\\u2019s top is greater than `nums[j]`. Track the rightmost position `right` where this occurs.\",\n    \"Step 4 - Calculate Length\": \"If `left` and `right` boundaries are set, the length of the subarray is `right - left + 1`. If the array is already sorted (i.e., `left` is not set), return 0.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution handles arrays up to `nums.length = 10^4` efficiently and produces accurate boundaries in O(n) time.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          6,\n          4,\n          8,\n          10,\n          9,\n          15\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"Sorting the subarray [6, 4, 8, 10, 9] in ascending order will make the whole array sorted.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          4\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"The array is already sorted, so no subarray needs to be sorted.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10^4\",\n    \"element_range\": \"-10^5 <= nums[i] <= 10^5\"\n  },\n  \"follow_up\": \"Consider alternative methods like using sorting or two-pointer approaches to handle cases where a stack may not be optimal.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Calculate the surface area of shapes formed by cubes in a grid."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an n x n grid where each cell contains a value v representing a tower of cubes. The height of the tower is v, and each cube has dimensions 1 x 1 x 1. After placing these cubes, the goal is to glue directly adjacent cubes together to form irregular 3D shapes. You need to return the total surface area of all the resulting shapes. Remember that the bottom face of each shape counts toward its surface area.\",\n  \"objective\": \"Design an algorithm to calculate the total surface area of the 3D shapes formed by the cubes, taking into account the gluing of adjacent cubes and the bottom face of each shape.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The grid is an n x n matrix where each element represents the height of a tower of cubes. Adjacent cubes that are directly connected (either horizontally or vertically) will reduce the exposed surface area. The total surface area is determined by the exposed faces of these cubes.\",\n    \"Step 2 - Initial Approach\": \"Start by calculating the surface area for each cube without considering adjacency. Each cube initially contributes 6 units to the surface area. Then, subtract the area that is hidden due to adjacency between cubes.\",\n    \"Step 3 - Handling Adjacent Cubes\": \"For each pair of adjacent cells, check if they are vertically or horizontally aligned and calculate the overlap in surface area. Subtract the overlapping area between adjacent cubes.\",\n    \"Step 4 - Output Format\": \"Return the total surface area as an integer, ensuring that the bottom faces are counted and that the total surface area is calculated after considering adjacency.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Optimize the algorithm to ensure that it handles grids of size up to 50 x 50 efficiently. Also, ensure that edge cases such as grids with height 0 or grids with only one cube are handled correctly.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution works within the constraints 1 <= n <= 50 and 0 <= grid[i][j] <= 50. Ensure the algorithm runs efficiently for large grids.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            2\n          ],\n          [\n            3,\n            4\n          ]\n        ]\n      },\n      \"output\": 34,\n      \"explanation\": \"For the grid [[1,2],[3,4]], the total surface area is 34, taking into account the adjacent cubes.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            1,\n            1\n          ],\n          [\n            1,\n            0,\n            1\n          ],\n          [\n            1,\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": 32,\n      \"explanation\": \"For the grid [[1,1,1],[1,0,1],[1,1,1]], the total surface area is 32.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            2,\n            2,\n            2\n          ],\n          [\n            2,\n            1,\n            2\n          ],\n          [\n            2,\n            2,\n            2\n          ]\n        ]\n      },\n      \"output\": 46,\n      \"explanation\": \"For the grid [[2,2,2],[2,1,2],[2,2,2]], the total surface area is 46.\"\n    }\n  ],\n  \"constraints\": {\n    \"n\": \"1 <= n <= 50\",\n    \"grid_range\": \"0 <= grid[i][j] <= 50\"\n  },\n  \"follow_up\": \"Can you come up with a more efficient approach to calculate the total surface area for larger grids, possibly reducing unnecessary calculations for adjacent cubes?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a nested list, find the weighted sum of integers based on their depth."}, {"role": "assistant", "content": "{\n  \"title\": \"Weighted Sum Inverse Depth Calculation\",\n  \"description\": \"Given a nested list of integers, compute the weighted sum where the weight of an integer is based on the maximum depth of the integers in the nested list.\",\n  \"input\": [\n    {\n      \"name\": \"nestedList\",\n      \"type\": \"nested list of integers\",\n      \"description\": \"A list where each element is either an integer or another nested list.\",\n      \"constraints\": \"1 <= nestedList.length <= 50, -100 <= integer values <= 100, maximum depth <= 50\"\n    }\n  ],\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The sum of integers weighted by `maxDepth - depth + 1` for each integer.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nestedList\": [\n          [\n            1,\n            1\n          ],\n          2,\n          [\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": 8,\n      \"explanation\": \"Each 1 has a weight of 1 (depth 1), and 2 has a weight of 2 (depth 2). 1*1 + 1*1 + 2*2 + 1*1 + 1*1 = 8.\"\n    },\n    {\n      \"input\": {\n        \"nestedList\": [\n          1,\n          [\n            4,\n            [\n              6\n            ]\n          ]\n        ]\n      },\n      \"output\": 17,\n      \"explanation\": \"The integer 1 has a weight of 3 (depth 3), 4 has a weight of 2 (depth 2), and 6 has a weight of 1 (depth 1). 1*3 + 4*2 + 6*1 = 17.\"\n    }\n  ],\n  \"hints\": [\n    \"Step 1: Calculate the maximum depth (`maxDepth`) of the nested list using a DFS approach.\",\n    \"Step 2: Traverse the nested list again to compute the weighted sum by assigning weights as `maxDepth - depth + 1` to each integer.\",\n    \"Step 3: Accumulate the weighted sum during traversal.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Efficiently compute `maxDepth` and the weighted sum in O(n)` time where `n` is the number of elements in the list.\",\n    \"constraints\": \"Avoid unnecessary recursive calls or processing of already-visited elements.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count the number of subarrays with a product less than `k`."}, {"role": "assistant", "content": "{\n  \"description\": \"Count the number of contiguous subarrays in a given integer array `nums` where the product of all the elements in the subarray is strictly less than a given integer `k`.\",\n  \"objective\": \"Use logarithmic transformations and binary search on prefix sums of logarithmic values to efficiently count subarrays with a product less than `k`.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Check if `k` is 0; if true, immediately return 0 since no subarray can have a product less than 0.\",\n    \"Step 2\": \"Calculate the logarithm of `k` (`logK`) and initialize a prefix sum array `logsPrefixSum` to store cumulative sums of logarithmic values of elements in `nums`.\",\n    \"Step 3\": \"Iterate over the elements of `nums` to compute the prefix sum of logarithmic values and store them in `logsPrefixSum`.\",\n    \"Step 4\": \"For each element in `logsPrefixSum`, use binary search to determine the range of subarrays that have a sum of logarithms less than `logK`.\",\n    \"Step 5\": \"Use the binary search results to count the valid subarrays for each starting point, and accumulate this count in a total variable.\",\n    \"Step 6\": \"Return the total count of subarrays as the result.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          10,\n          5,\n          2,\n          6\n        ],\n        \"k\": 100\n      },\n      \"output\": 8,\n      \"explanation\": \"The valid subarrays are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3\n        ],\n        \"k\": 0\n      },\n      \"output\": 0,\n      \"explanation\": \"No subarray can have a product less than 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"1 <= nums.length <= 3 * 10^4\",\n    \"element_range\": \"1 <= nums[i] <= 1000\",\n    \"k_range\": \"0 <= k <= 10^6\"\n  },\n  \"follow_up\": \"Analyze the time complexity of the algorithm, which involves calculating prefix sums in O(n) and performing binary search for each element, leading to an overall complexity of O(n log n). Discuss the impact of floating-point precision on logarithmic calculations and how to mitigate these issues.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if n is a power of four."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if an integer `n` is a power of four. If there exists an integer `x` such that `n == 4^x`, return `true`. Otherwise, return `false`.\",\n  \"objective\": \"Write an efficient function to check if `n` is a power of four. Implement a solution that avoids loops or recursion for better performance.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand the Power of Four\": \"Powers of four are numbers of the form `4^x`, such as 1, 4, 16, 64, etc. They follow the general condition `n > 0` and only have one bit set in binary at an even position.\",\n    \"Step 2 - Key Observations\": \"For `n` to be a power of four, it must also be a power of two (only one bit set). Additionally, this bit must be in an even position.\",\n    \"Step 3 - Algorithm\": \"Combine the following checks:\\n1. `n > 0`\\n2. `n & (n - 1) == 0` to ensure `n` is a power of two.\\n3. `n & 0xAAAAAAAA == 0` to verify the single set bit is in an even position.\",\n    \"Step 4 - Optimize without Loops\": \"Use bit manipulation and integer properties for an `O(1)` solution.\"\n  },\n  \"examples\": [\n    {\n      \"input\": 16,\n      \"output\": true,\n      \"explanation\": \"16 is 4^2, so it is a power of four.\"\n    },\n    {\n      \"input\": 5,\n      \"output\": false,\n      \"explanation\": \"5 is not a power of four.\"\n    },\n    {\n      \"input\": 1,\n      \"output\": true,\n      \"explanation\": \"1 is 4^0, so it is a power of four.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"(-2^31) <= n <= (2^31) - 1\"\n  },\n  \"follow_up\": \"Extend the solution to verify if a number is a power of any other base, such as 3 or 5, using logarithmic methods or bitwise operations.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Turn a binary tree into a string with parentheses."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of a binary tree, construct a string in a preorder traversal format where node values are enclosed in parentheses. Omit unnecessary parentheses pairs while maintaining a one-to-one mapping between the string and the tree structure.\",\n  \"objective\": \"Efficiently generate a string representation of the tree in preorder traversal, minimizing the use of unnecessary parentheses.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Stack\": \"Start with the root node pushed onto a stack and an empty string `s`. Use a set to track visited nodes.\",\n    \"Step 2 - Process Node\": \"For the current node at the top of the stack, append its value to the result string `s`, prefixed with `(`, if it has not been visited yet.\",\n    \"Step 3 - Handle Children\": \"Push the left and/or right children onto the stack in preorder order. Represent absent children explicitly with `()` only when required for structural preservation.\",\n    \"Step 4 - Mark Node Completion\": \"When a node is revisited, append `)` to close its subtree and remove it from the stack.\",\n    \"Step 5 - Remove Outer Parentheses\": \"Trim any redundant outermost parentheses from the result string for a cleaner output.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3,\n          4\n        ]\n      },\n      \"output\": \"1(2(4))(3)\",\n      \"explanation\": \"The tree is traversed in preorder, omitting redundant empty parentheses.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3,\n          null,\n          4\n        ]\n      },\n      \"output\": \"1(2()(4))(3)\",\n      \"explanation\": \"The null left child for node `2` is explicitly represented as `()` to preserve structure.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_range\": \"1 <= number of nodes <= 10^4\",\n    \"value_range\": \"-1000 <= Node.val <= 1000\"\n  },\n  \"follow_up\": \"Investigate recursive and iterative approaches for similar tree traversal tasks, comparing their runtime and space complexities.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Clone a graph given a reference to one of its nodes."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a reference of a node in a connected undirected graph, return a deep copy (clone) of the graph. Each node contains a value (`int`) and a list (`List[Node]`) of its neighbors.\",\n  \"objective\": \"Design an efficient algorithm to clone a graph represented by its adjacency list.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves creating a deep copy of a connected graph by replicating nodes and their relationships.\",\n    \"Step 2 - Breadth-First or Depth-First Traversal\": \"Use BFS or DFS to traverse the graph and clone nodes and edges.\",\n    \"Step 3 - Use a Hash Map\": \"Maintain a hash map to track the original nodes and their cloned counterparts to avoid duplications.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as an empty graph or a graph with a single node.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(V + E) time, where `V` is the number of vertices and `E` is the number of edges.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"adjList\": [\n          [\n            2,\n            4\n          ],\n          [\n            1,\n            3\n          ],\n          [\n            2,\n            4\n          ],\n          [\n            1,\n            3\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          2,\n          4\n        ],\n        [\n          1,\n          3\n        ],\n        [\n          2,\n          4\n        ],\n        [\n          1,\n          3\n        ]\n      ],\n      \"explanation\": \"The original graph is cloned, preserving all nodes and edges.\"\n    },\n    {\n      \"input\": {\n        \"adjList\": [\n          []\n        ]\n      },\n      \"output\": [\n        []\n      ],\n      \"explanation\": \"The graph contains one node with no neighbors.\"\n    },\n    {\n      \"input\": {\n        \"adjList\": []\n      },\n      \"output\": [],\n      \"explanation\": \"An empty graph is returned as an empty output.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 100\",\n    \"node_value\": \"1 <= Node.val <= 100\",\n    \"graph_properties\": \"No repeated edges or self-loops. The graph is connected.\"\n  },\n  \"follow_up\": \"Can you implement the algorithm using both BFS and DFS approaches?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Sort a linked list in ascending order."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `head` of a linked list, return the list sorted in ascending order. Implement an efficient sorting algorithm to handle up to 50,000 nodes.\",\n  \"objective\": \"Design an algorithm to sort a linked list in ascending order.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves sorting a linked list efficiently.\",\n    \"Step 2 - Choose a Sorting Algorithm\": \"Use merge sort for its O(n log n) time complexity and suitability for linked lists.\",\n    \"Step 3 - Split the List\": \"Use the slow and fast pointer technique to split the list into two halves.\",\n    \"Step 4 - Recursive Sorting\": \"Recursively sort each half of the list.\",\n    \"Step 5 - Merge Sorted Lists\": \"Merge the two sorted halves into a single sorted list.\",\n    \"Step 6 - Handle Edge Cases\": \"Handle cases such as an empty list, a single-node list, or a list with duplicate values.\",\n    \"Step 7 - Optimize Memory\": \"Implement the solution with O(1) additional memory where possible.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          4,\n          2,\n          1,\n          3\n        ]\n      },\n      \"output\": [\n        1,\n        2,\n        3,\n        4\n      ],\n      \"explanation\": \"The input list is sorted in ascending order.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          -1,\n          5,\n          3,\n          4,\n          0\n        ]\n      },\n      \"output\": [\n        -1,\n        0,\n        3,\n        4,\n        5\n      ],\n      \"explanation\": \"The input list is sorted in ascending order.\"\n    },\n    {\n      \"input\": {\n        \"head\": []\n      },\n      \"output\": [],\n      \"explanation\": \"An empty list remains unchanged.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 5 * 10^4\",\n    \"node_values\": \"-10^5 <= Node.val <= 10^5\"\n  },\n  \"follow_up\": \"Can you sort the linked list in O(n log n) time complexity using only constant space?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the sum of all root-to-leaf paths in a binary tree represented by an array of three-digit integers."}, {"role": "assistant", "content": "{\n  \"description\": \"Calculate the sum of all root-to-leaf paths in a binary tree represented by an array of three-digit integers.\",\n  \"objective\": \"Use a breadth-first search (BFS) algorithm to traverse the tree, calculating the sum of all paths from the root to the leaves.\",\n  \"meta_prompt\": {\n    \"Step 1 - Parse Input\": \"Extract depth, position, and value for each node from the given three-digit integers. Store them in a hashmap where the key is the coordinates (depth and position) and the value is the node's value.\",\n    \"Step 2 - Initialize BFS\": \"Use a queue to perform a BFS traversal starting from the root. Enqueue the root's coordinates and its value as the initial sum.\",\n    \"Step 3 - Traverse Tree\": \"For each node, check if it is a leaf by determining if it has no children in the hashmap. If it is a leaf, add the running sum to the total. Otherwise, enqueue its left and right children with updated running sums.\",\n    \"Step 4 - Compute Total Sum\": \"Continue the BFS traversal until all nodes are processed. Return the total sum of all root-to-leaf paths.\",\n    \"Step 5 - Handle Edge Cases\": \"Ensure the algorithm works for edge cases like single-node trees or fully populated small trees.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          113,\n          215,\n          221\n        ]\n      },\n      \"output\": 12,\n      \"explanation\": \"The tree represented by [113, 215, 221] has paths with sums (3 + 5) and (3 + 1). The total sum is 12.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          113,\n          221\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"The tree represented by [113, 221] has one root-to-leaf path with a sum of (3 + 1).\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 15\",\n    \"value_range\": \"110 <= nums[i] <= 489\",\n    \"tree_property\": \"nums represents a valid connected binary tree with depth less than 5.\"\n  },\n  \"follow_up\": \"Discuss the time complexity of the BFS approach and how it scales for the maximum allowed input size.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Sort a linked list using insertion sort."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `head` of a singly linked list, sort the list using insertion sort and return the sorted list's head. Insertion sort iterates through the list, building a sorted portion and inserting elements in the correct position.\",\n  \"objective\": \"Design an efficient algorithm to sort a linked list using insertion sort.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that insertion sort involves iteratively placing each node into its correct position in a sorted portion of the list.\",\n    \"Step 2 - Traverse the List\": \"Iterate through the list, extracting nodes one by one.\",\n    \"Step 3 - Insert into Sorted Portion\": \"For each node, find its correct position in the sorted portion and insert it.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as a single-node list or a list that is already sorted.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm maintains O(n^2) time complexity and uses O(1) extra space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          4,\n          2,\n          1,\n          3\n        ]\n      },\n      \"output\": [\n        1,\n        2,\n        3,\n        4\n      ],\n      \"explanation\": \"The sorted linked list is obtained by placing each node in the correct position.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          -1,\n          5,\n          3,\n          4,\n          0\n        ]\n      },\n      \"output\": [\n        -1,\n        0,\n        3,\n        4,\n        5\n      ],\n      \"explanation\": \"The sorted linked list is obtained by placing each node in the correct position.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"1 <= number of nodes <= 5000\",\n    \"node_values\": \"-5000 <= Node.val <= 5000\"\n  },\n  \"follow_up\": \"Can you optimize the implementation for edge cases such as nearly sorted lists?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum area rectangle formed by the points."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of points in the X-Y plane, return the minimum area of any rectangle formed from these points. The rectangle\\u2019s sides are not necessarily parallel to the X and Y axes. If no such rectangle can be formed, return `0`. Answers within `10^-5` of the actual answer will be accepted.\",\n  \"objective\": \"Find the minimum area of a rectangle that can be formed by any four points in the array, ensuring that the rectangle's sides are not necessarily aligned with the X and Y axes. If no rectangle is possible, return `0`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We are given an array of points in a 2D plane. The task is to compute the minimum area of a rectangle that can be formed by these points, where the sides of the rectangle do not need to be aligned with the coordinate axes.\",\n    \"Step 2 - Approach\": \"The challenge is to identify four points that can form a rectangle. A possible approach is to compute distances and angles between points and check for orthogonal vectors that might form rectangle sides. The area of a valid rectangle should then be computed.\",\n    \"Step 3 - Algorithm Design\": \"You need to evaluate each combination of four points, check if they can form a rectangle, and then compute the area of the rectangle. If no rectangle is found, return 0.\",\n    \"Step 4 - Code Efficiency\": \"Ensure the solution runs efficiently, as we are allowed a maximum of 50 points. This suggests that an approach with O(n^2) or O(n^3) complexity might be sufficient, where n is the number of points.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"points\": [\n          [\n            1,\n            2\n          ],\n          [\n            2,\n            1\n          ],\n          [\n            1,\n            0\n          ],\n          [\n            0,\n            1\n          ]\n        ]\n      },\n      \"output\": 2.0,\n      \"explanation\": \"The minimum area rectangle occurs at points (1,2), (2,1), (1,0), and (0,1), with an area of 2.\"\n    },\n    {\n      \"input\": {\n        \"points\": [\n          [\n            0,\n            1\n          ],\n          [\n            2,\n            1\n          ],\n          [\n            1,\n            1\n          ],\n          [\n            1,\n            0\n          ],\n          [\n            2,\n            0\n          ]\n        ]\n      },\n      \"output\": 1.0,\n      \"explanation\": \"The minimum area rectangle occurs at points (1,0), (1,1), (2,1), and (2,0), with an area of 1.\"\n    },\n    {\n      \"input\": {\n        \"points\": [\n          [\n            0,\n            3\n          ],\n          [\n            1,\n            2\n          ],\n          [\n            3,\n            1\n          ],\n          [\n            1,\n            3\n          ],\n          [\n            2,\n            1\n          ]\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"There is no possible rectangle that can be formed from these points.\"\n    }\n  ],\n  \"constraints\": {\n    \"input_size\": \"1 <= points.length <= 50\",\n    \"value_range\": \"0 <= xi, yi <= 40000\",\n    \"unique_points\": \"All the given points are unique.\"\n  },\n  \"follow_up\": \"Can you think of an optimized solution that avoids brute force combinations and checks for rectangles more efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find a way to make all the numbers in the list unique by incrementing some of them."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of integers nums, your task is to return the minimum number of moves required to make all the values in the array unique. In one move, you can select an index i (0 <= i < nums.length) and increment nums[i] by 1. The goal is to find the smallest number of moves necessary to make every number in the array unique.\",\n  \"objective\": \"Design an efficient algorithm to calculate the minimum number of moves needed to make all values in the array unique, keeping the runtime complexity manageable for large inputs.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Start by identifying the number of duplicate values in the array. The key challenge is to increment these duplicates to unique values while minimizing the total number of moves.\",\n    \"Step 2 - Initial Approach\": \"Consider using a set to keep track of the unique values in the array. For each duplicate value, increment it until it becomes unique.\",\n    \"Step 3 - Optimized Solution\": \"Sort the array to handle duplicates efficiently, and then iterate through the array, ensuring each value is greater than the last unique value encountered. This way, you minimize the number of increments required.\",\n    \"Step 4 - Output Format\": \"Return the total number of increments required as an integer.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Focus on optimizing for time complexity, aiming for a solution with O(n log n) or O(n). Ensure that edge cases such as very small arrays or arrays with maximum element values are handled appropriately.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          2\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"After one move, the array becomes [1, 2, 3], making all values unique.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          2,\n          1,\n          2,\n          1,\n          7\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"After 6 moves, the array becomes [3, 4, 1, 2, 5, 7], making all values unique.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 10^5\",\n    \"nums_elements_range\": \"0 <= nums[i] <= 10^5\"\n  },\n  \"follow_up\": \"Can you come up with a solution that improves the time complexity for large arrays, potentially using a greedy approach to minimize the number of moves?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given an `n x n` binary matrix `grid`. You can change at most one `0` to `1`. Find the size of the largest island after the change. An island is a group of connected `1`s."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an `n x n` binary matrix `grid`, where each element is either `0` or `1`. You are allowed to change **at most one** `0` to `1`. Your task is to find the size of the largest **island** that can be formed in `grid` after this operation. An **island** is defined as a group of connected `1`s in the matrix, where connectivity is allowed in four directions (up, down, left, and right).\",\n  \"objective\": \"Write a function that returns the size of the largest island that can be formed in `grid` after changing one `0` to `1`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The task is to modify the given binary matrix by changing one `0` to `1` and then determine the largest island formed by connected `1`s. The island is defined as a group of `1`s that are connected either vertically or horizontally.\",\n    \"Step 2 - Problem Constraints\": \"Given the constraints, where `n` can be as large as 500, the solution should efficiently handle matrices of size up to `500 x 500`.\",\n    \"Step 3 - Approach\": \"One possible approach is to first identify all the islands and calculate their sizes. Then, for each `0`, check the potential island size formed if that `0` is turned into a `1`. This requires checking the neighboring islands to see if they can be merged.\",\n    \"Step 4 - Optimization Strategy\": \"Use Depth-First Search (DFS) or Breadth-First Search (BFS) to find the connected components (islands) in the matrix. Keep track of visited nodes and islands to avoid redundant calculations.\",\n    \"Step 5 - Output\": \"Return the size of the largest island that can be obtained by changing one `0` to `1`. If no `0` can be changed, return the size of the largest existing island.\",\n    \"Step 6 - Considerations\": \"Ensure that the solution efficiently handles large matrices by optimizing the search for neighboring islands when changing a `0` to `1`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            0\n          ],\n          [\n            0,\n            1\n          ]\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"After changing the `0` at position (0,1) to `1`, the two islands (top-left and bottom-right) connect to form a larger island of size 3.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            1\n          ],\n          [\n            1,\n            0\n          ]\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"By changing the `0` at position (1,1) to `1`, the two `1`s in the top-left corner and the newly changed `1` form a larger island of size 4.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            1\n          ],\n          [\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"There are no `0`s to change, so the largest island has an area of 4.\"\n    }\n  ],\n  \"constraints\": {\n    \"n\": \"The matrix size `n` is between 1 and 500.\",\n    \"grid\": \"Each element of the matrix is either `0` or `1`.\"\n  },\n  \"follow_up\": \"Can you improve the efficiency of the solution, especially when dealing with larger matrices? Consider memoization or dynamic programming to reduce redundant computations.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count the substrings in a binary string `s` that have equal numbers of `0`'s and `1`'s."}, {"role": "assistant", "content": "{\n  \"description\": \"Count the number of non-empty substrings in a binary string `s` that have equal numbers of `0`'s and `1`'s with consecutive grouping of characters.\",\n  \"objective\": \"Use a linear scan to calculate the number of valid substrings directly by tracking consecutive groups of `0`'s and `1`'s.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Counters\": \"Maintain two variables `prev` and `cur` to store the lengths of the previous and current consecutive groups of characters. Initialize `prev = 0`, `cur = 1`, and `count = 0`.\",\n    \"Step 2 - Traverse the String\": \"Iterate through the binary string `s` starting from the second character. Compare the current character with the previous one.\",\n    \"Step 3 - Update Group Counts\": \"If the current character is the same as the previous one, increment `cur`. Otherwise, update `count` with `min(prev, cur)`, set `prev = cur`, and reset `cur = 1`.\",\n    \"Step 4 - Final Count Adjustment\": \"After the loop, add `min(prev, cur)` to account for the last pair of groups.\",\n    \"Step 5 - Return Result\": \"Return the total count of valid substrings.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"00110011\"\n      },\n      \"output\": 6,\n      \"explanation\": \"Valid substrings are '0011', '01', '1100', '10', '0011', '01'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"10101\"\n      },\n      \"output\": 4,\n      \"explanation\": \"Valid substrings are '10', '01', '10', '01'.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 105\",\n    \"characters\": \"`s[i]` is either '0' or '1'\"\n  },\n  \"follow_up\": \"Discuss the O(n) time complexity and O(1) space complexity of this approach, and how it compares to using arrays to track all groups of characters.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum path sum in a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary tree, return the maximum path sum of any non-empty path. A path is defined as a sequence of nodes where each pair of adjacent nodes is connected by an edge, and no node appears more than once in the path. The path does not need to pass through the root.\",\n  \"objective\": \"Design an algorithm to calculate the maximum path sum in a binary tree efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that a path can be any sequence of connected nodes and does not need to include the root. The goal is to find the maximum sum among all possible paths.\",\n    \"Step 2 - Recursive Approach\": \"Use a recursive function to compute the maximum path sum passing through each node. For each node, calculate the maximum contribution from its left and right subtrees.\",\n    \"Step 3 - Global Maximum\": \"Keep track of a global maximum path sum during the traversal.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as trees with a single node or trees with all negative values.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(n) time with O(h) space, where `h` is the height of the tree.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"The optimal path is 2 -> 1 -> 3 with a sum of 6.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          -10,\n          9,\n          20,\n          null,\n          null,\n          15,\n          7\n        ]\n      },\n      \"output\": 42,\n      \"explanation\": \"The optimal path is 15 -> 20 -> 7 with a sum of 42.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"1 <= number of nodes <= 3 * 10^4\",\n    \"node_values\": \"-1000 <= Node.val <= 1000\"\n  },\n  \"follow_up\": \"Can you calculate the maximum path sum without modifying the original tree structure?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Make a password strong by following some rules."}, {"role": "assistant", "content": "{\n  \"title\": \"Strong Password Validation\",\n  \"description\": \"Determine the minimum number of steps required to make a password strong based on given criteria. A password is considered strong if it meets length constraints, contains specific character types, and avoids three consecutive repeating characters.\",\n  \"objective\": \"Identify the number of operations (insertion, deletion, replacement) required to transform a given password into a strong password.\",\n  \"input\": {\n    \"password\": {\n      \"type\": \"string\",\n      \"description\": \"The input password to be validated and modified.\",\n      \"constraints\": \"1 <= password.length <= 50; password consists of letters, digits, dot `'.'`, or exclamation mark `'!'`.\"\n    }\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The minimum number of operations needed to make the password strong.\"\n  },\n  \"criteria\": [\n    \"Password length must be between 6 and 20 characters.\",\n    \"Password must include at least one lowercase letter, one uppercase letter, and one digit.\",\n    \"Password must not contain three or more consecutive repeating characters.\"\n  ],\n  \"examples\": [\n    {\n      \"input\": {\n        \"password\": \"a\"\n      },\n      \"output\": 5,\n      \"explanation\": \"The password is too short and lacks an uppercase letter and a digit. It requires 5 steps to become strong.\"\n    },\n    {\n      \"input\": {\n        \"password\": \"aA1\"\n      },\n      \"output\": 3,\n      \"explanation\": \"The password is too short (less than 6 characters). It requires 3 additional characters.\"\n    },\n    {\n      \"input\": {\n        \"password\": \"1337C0d3\"\n      },\n      \"output\": 0,\n      \"explanation\": \"The password meets all the criteria and is already strong.\"\n    }\n  ],\n  \"hints\": [\n    \"Break down the problem into three aspects: length, character type requirements, and consecutive repetitions.\",\n    \"Prioritize operations that resolve multiple issues simultaneously, such as replacing a repeating character with a missing type.\",\n    \"Use separate counters for lowercase, uppercase, and digit requirements to simplify logic.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Implement an efficient solution that validates and modifies the password in a single pass if possible.\",\n    \"constraints\": \"Ensure O(n) time complexity and O(1) space complexity.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Determine the height of the tallest stack after dropping squares on a plane."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine the height of the tallest stack after sequentially dropping squares on a 2D plane, where each square falls until it lands on another square or the X-axis.\",\n  \"objective\": \"Use block decomposition to efficiently calculate the heights of stacks after each square drop by updating and querying intervals.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Initialize two arrays: `heights` to store the height of the stack at each point and `blocks` to segment the domain into blocks of size \\u221aW.\",\n    \"Step 2\": \"For each square in `positions`, determine the interval `[left, right]` it occupies based on its position and side length.\",\n    \"Step 3\": \"Query the maximum height in the interval `[left, right]` by reading from `heights` for partial intervals and `blocks` for full blocks.\",\n    \"Step 4\": \"Update the interval `[left, right]` to reflect the new heights by setting the heights of all points in the interval to the maximum height plus the square's side length.\",\n    \"Step 5\": \"Update the corresponding block sums for any affected blocks to maintain the segmentation property.\",\n    \"Step 6\": \"Record the new maximum height after each square drop and store it in the output array `ans`.\",\n    \"Step 7\": \"Repeat steps 2-6 for all squares and return the final result `ans`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"positions\": [\n          [\n            1,\n            2\n          ],\n          [\n            2,\n            3\n          ],\n          [\n            6,\n            1\n          ]\n        ]\n      },\n      \"output\": [\n        2,\n        5,\n        5\n      ],\n      \"explanation\": \"After the first square, the height is 2. After the second square, the tallest stack is 5. The third square does not increase the height.\"\n    },\n    {\n      \"input\": {\n        \"positions\": [\n          [\n            100,\n            100\n          ],\n          [\n            200,\n            100\n          ]\n        ]\n      },\n      \"output\": [\n        100,\n        100\n      ],\n      \"explanation\": \"Both squares form independent stacks with height 100, so the result is [100, 100].\"\n    }\n  ],\n  \"constraints\": {\n    \"positions_length\": \"1 <= positions.length <= 1000\",\n    \"position_range\": \"1 <= lefti <= 10^8\",\n    \"side_length\": \"1 <= sideLengthi <= 10^6\"\n  },\n  \"follow_up\": \"Analyze the time complexity of the block decomposition approach and discuss how it compares to a brute-force simulation for large `positions` arrays with high values of `lefti`.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a binary array `nums` and an integer `goal`, return the number of subarrays with sum equal to `goal`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a binary array `nums` and an integer `goal`, the task is to return the number of non-empty subarrays with a sum equal to the `goal`. A subarray is defined as a contiguous part of the array. The goal is to count all the subarrays that satisfy this condition.\",\n  \"objective\": \"Count the number of contiguous subarrays in the array `nums` whose sum is equal to the given `goal`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Input Understanding\": \"You are given a binary array, `nums`, where each element is either `0` or `1`. You are also given an integer, `goal`, which represents the target sum of a subarray.\",\n    \"Step 2 - Subarray Definition\": \"A subarray is a contiguous part of the array. For example, in the array `[1, 0, 1]`, the subarrays are `[1]`, `[0]`, `[1]`, and `[1, 0]`, `[0, 1]`, `[1, 0, 1]`.\",\n    \"Step 3 - Approach\": \"To find the number of subarrays with a sum equal to `goal`, you can iterate over the array while maintaining a running sum and a hashmap that tracks the count of previously seen sums. For each element, calculate the difference between the running sum and the goal. If that difference exists in the hashmap, it means there are subarrays ending at the current index that sum to `goal`.\",\n    \"Step 4 - Output Format\": \"Return an integer representing the number of subarrays whose sum equals `goal`.\",\n    \"Step 5 - Edge Case Considerations\": \"Consider edge cases such as an empty array, a `goal` of 0, or the entire array summing to the `goal`.\",\n    \"Step 6 - Code Efficiency\": \"The solution should efficiently count subarrays in linear time (O(n)) using a hashmap to track sums.\"\n  },\n  \"examples\": [\n    {\n      \"input\": [\n        1,\n        0,\n        1,\n        0,\n        1\n      ],\n      \"goal\": 2,\n      \"output\": 4,\n      \"explanation\": \"The 4 subarrays with a sum of 2 are: [1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1], and [1, 0, 1].\"\n    },\n    {\n      \"input\": [\n        0,\n        0,\n        0,\n        0,\n        0\n      ],\n      \"goal\": 0,\n      \"output\": 15,\n      \"explanation\": \"There are 15 subarrays with a sum of 0 in the array of five 0's.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 3 * 10^4\",\n    \"nums_values\": \"Each element in `nums` is either 0 or 1.\",\n    \"goal_range\": \"0 <= goal <= nums.length\"\n  },\n  \"follow_up\": \"Can you optimize the solution to run in O(n) time using a hashmap?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the starting gas station index to complete a circuit or return -1 if not possible."}, {"role": "assistant", "content": "{\n  \"description\": \"There are `n` gas stations along a circular route, where `gas[i]` is the amount of gas at the `i`th station, and `cost[i]` is the cost of gas to travel from the `i`th station to the next. Return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return `-1`.\",\n  \"objective\": \"Design an algorithm to determine if a complete circuit is possible and find the starting index if it is.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the problem involves checking whether the total gas is greater than or equal to the total cost, and identifying a valid starting point.\",\n    \"Step 2 - Track Current Gas Balance\": \"Iterate through the stations while maintaining the gas balance and restarting the trip whenever the balance drops below zero.\",\n    \"Step 3 - Validate the Circuit\": \"Ensure that the total gas is greater than or equal to the total cost for the trip to be feasible.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as a single station or stations where the total gas is less than the total cost.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(n) time and O(1) space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"gas\": [\n          1,\n          2,\n          3,\n          4,\n          5\n        ],\n        \"cost\": [\n          3,\n          4,\n          5,\n          1,\n          2\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"Start at station 3 and complete the circuit as detailed in the explanation.\"\n    },\n    {\n      \"input\": {\n        \"gas\": [\n          2,\n          3,\n          4\n        ],\n        \"cost\": [\n          3,\n          4,\n          3\n        ]\n      },\n      \"output\": -1,\n      \"explanation\": \"No starting point allows completing the circuit.\"\n    }\n  ],\n  \"constraints\": {\n    \"station_count\": \"1 <= n <= 10^5\",\n    \"gas_and_cost_values\": \"0 <= gas[i], cost[i] <= 10^4\"\n  },\n  \"follow_up\": \"Can you determine the feasibility in one pass using a greedy approach?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find all pairs of words in the array that make a palindrome when joined."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of unique strings `words`, find all palindrome pairs `(i, j)` such that `words[i] + words[j]` forms a palindrome. Return the result as a list of integer pairs.\",\n  \"objective\": \"Design an efficient algorithm to identify all palindrome pairs with a focus on reducing computational overhead for long strings and large arrays.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand Palindrome Properties\": \"A palindrome reads the same forward and backward. For `words[i] + words[j]` to be a palindrome, the reverse of `words[j]` must match the prefix of `words[i]` or vice versa.\",\n    \"Step 2 - Optimized Lookup\": \"Use a hash map to store reversed strings and their indices. This allows for constant-time lookups.\",\n    \"Step 3 - Special Cases\": \"Handle cases where `words[i]` or `words[j]` is an empty string, as it forms a palindrome with any palindrome string.\",\n    \"Step 4 - Edge Matching\": \"Split each word into two parts and check if one part is a palindrome while the other part has its reverse in the hash map.\",\n    \"Step 5 - Avoid Self-Pairing\": \"Ensure indices `i` and `j` are distinct to satisfy the condition `i != j`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"words\": [\n          \"abcd\",\n          \"dcba\",\n          \"lls\",\n          \"s\",\n          \"sssll\"\n        ]\n      },\n      \"output\": [\n        [\n          0,\n          1\n        ],\n        [\n          1,\n          0\n        ],\n        [\n          3,\n          2\n        ],\n        [\n          2,\n          4\n        ]\n      ],\n      \"explanation\": \"Concatenating the pairs forms palindromes: 'abcddcba', 'dcbaabcd', 'slls', 'llssssll'.\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"bat\",\n          \"tab\",\n          \"cat\"\n        ]\n      },\n      \"output\": [\n        [\n          0,\n          1\n        ],\n        [\n          1,\n          0\n        ]\n      ],\n      \"explanation\": \"Concatenating 'bat' and 'tab' (in both orders) forms palindromes.\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"a\",\n          \"\"\n        ]\n      },\n      \"output\": [\n        [\n          0,\n          1\n        ],\n        [\n          1,\n          0\n        ]\n      ],\n      \"explanation\": \"'a' concatenated with '' forms a palindrome in both orders.\"\n    }\n  ],\n  \"constraints\": {\n    \"words_length\": \"1 <= words.length <= 5000\",\n    \"word_length\": \"0 <= words[i].length <= 300\",\n    \"characters\": \"Each word consists only of lowercase English letters.\"\n  },\n  \"follow_up\": \"Can you reduce the time complexity by leveraging Trie data structures or suffix-prefix matching techniques for palindrome validation?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find how many unique BSTs can be made with `n` nodes."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `n`, return the number of structurally unique BSTs (binary search trees) that can be formed using unique values from 1 to `n`.\",\n  \"objective\": \"Design an efficient algorithm to compute the count of unique BSTs for `n` nodes.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the count of unique BSTs for `n` nodes is determined by selecting a root and counting left and right subtree combinations.\",\n    \"Step 2 - Use Catalan Numbers\": \"Recognize that the number of unique BSTs follows the Catalan number formula.\",\n    \"Step 3 - Dynamic Programming\": \"Use a DP array where `dp[i]` stores the count of unique BSTs for `i` nodes.\",\n    \"Step 4 - Compute Counts\": \"For each `i`, compute `dp[i]` as the sum of products of counts for left and right subtrees for each root.\",\n    \"Step 5 - Handle Edge Cases\": \"Handle edge cases such as `n = 0` (empty tree) and `n = 1` (single-node tree).\"\n  },\n  \"examples\": [\n    {\n      \"input\": 3,\n      \"output\": 5,\n      \"explanation\": \"There are 5 structurally unique BSTs that can be formed with 3 nodes.\"\n    },\n    {\n      \"input\": 1,\n      \"output\": 1,\n      \"explanation\": \"Only one unique BST can be formed with a single node.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_range\": \"1 <= n <= 19\"\n  },\n  \"follow_up\": \"Can you analyze the relationship to Catalan numbers and derive an O(n^2) dynamic programming solution?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find a peak in an array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a 0-indexed array `nums`, find a peak element and return its index. A peak element is strictly greater than its neighbors. The function must run in O(log n) time.\",\n  \"objective\": \"Design an efficient algorithm to find the index of any peak element in the array.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that a peak element is an element that is strictly greater than its neighbors. Consider edge cases where the array size is 1 or where the peak is at the edges.\",\n    \"Step 2 - Binary Search\": \"Use binary search to divide the array into halves and identify which half contains a peak.\",\n    \"Step 3 - Validate Peak Condition\": \"Check if the middle element is a peak. If not, move to the half containing a greater neighbor.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as an array with all increasing or all decreasing values, or arrays with multiple peaks.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(log n) time and uses O(1) extra space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          1\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The element at index 2 (value 3) is a peak.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          1,\n          3,\n          5,\n          6,\n          4\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"The element at index 5 (value 6) is one of the peaks.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 1000\",\n    \"element_values\": \"-2^31 <= nums[i] <= 2^31 - 1\",\n    \"unique_values\": \"nums[i] != nums[i + 1]\"\n  },\n  \"follow_up\": \"Can you explain how binary search guarantees O(log n) time complexity in this problem?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Connect all next right pointers in a general binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a binary tree, populate each node's `next` pointer to point to its next right node. If there is no next right node, the `next` pointer should be set to `NULL`. This applies to general binary trees, not just perfect binary trees.\",\n  \"objective\": \"Design an algorithm to populate the `next` pointers for all nodes in a general binary tree.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves connecting nodes at the same level for a binary tree that may not be perfect.\",\n    \"Step 2 - Level Order Traversal\": \"Use a queue to perform level order traversal and connect nodes at the same level.\",\n    \"Step 3 - Constant Space Optimization\": \"Use previously established `next` pointers to traverse and connect nodes efficiently.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as an empty tree or a single-node tree.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(n) time with O(1) extra space, excluding the implicit recursion stack.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          null,\n          7\n        ]\n      },\n      \"output\": [\n        1,\n        \"#\",\n        2,\n        3,\n        \"#\",\n        4,\n        5,\n        7,\n        \"#\"\n      ],\n      \"explanation\": \"Nodes are connected at the same level as per the tree structure.\"\n    },\n    {\n      \"input\": {\n        \"root\": []\n      },\n      \"output\": [],\n      \"explanation\": \"An empty tree results in no connections.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 6000\",\n    \"node_values\": \"-100 <= Node.val <= 100\",\n    \"space_complexity\": \"Follow-up: Solve using constant extra space.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check for a pair of numbers that are close in both value and position."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if there exist indices `i` and `j` in an array such that `abs(i - j) <= indexDiff` and `abs(nums[i] - nums[j]) <= valueDiff`.\",\n  \"objective\": \"Design an efficient solution using sliding window and binary search tree or bucket sort approach.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Identify the two constraints: indices difference and value difference.\",\n    \"Step 2 - Choose Data Structure\": \"Use a sliding window with a binary search tree or buckets to keep track of nearby values.\",\n    \"Step 3 - Maintain Valid Window\": \"Ensure that only indices within the range of `indexDiff` are tracked in the data structure.\",\n    \"Step 4 - Optimize Search for Values\": \"Quickly find values within the `valueDiff` range using efficient queries on the data structure.\",\n    \"Step 5 - Return Result\": \"Return `true` as soon as a valid pair is found; otherwise, return `false`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          1\n        ],\n        \"indexDiff\": 3,\n        \"valueDiff\": 0\n      },\n      \"output\": true,\n      \"explanation\": \"Indices 0 and 3 satisfy abs(0 - 3) \\u2264 3 and abs(1 - 1) \\u2264 0.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          5,\n          9,\n          1,\n          5,\n          9\n        ],\n        \"indexDiff\": 2,\n        \"valueDiff\": 3\n      },\n      \"output\": false,\n      \"explanation\": \"No pair satisfies both constraints.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"2 <= nums.length <= 10^5\",\n    \"value_range\": \"-10^9 <= nums[i] <= 10^9\",\n    \"index_diff_range\": \"1 <= indexDiff <= nums.length\",\n    \"value_diff_range\": \"0 <= valueDiff <= 10^9\"\n  },\n  \"follow_up\": \"How can the bucket approach be modified to handle edge cases with large value ranges efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the in-order successor of a given node in a BST. Return `null` if there is no successor."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a node in a binary search tree (BST), find its in-order successor. The in-order successor of a node is defined as the node with the smallest key greater than `node.val`. If the node has no in-order successor, return `null`. You have direct access to the node, but not the root of the tree. Each node has references to its left, right, and parent nodes.\",\n  \"objective\": \"Design an efficient algorithm to find the in-order successor in a BST, making use of the BST structure and the node\\u2019s parent references to achieve an optimal solution without needing to access node values directly.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the in-order successor is the smallest node in the tree with a value greater than the given node\\u2019s value. Two cases arise depending on whether the node has a right child.\",\n    \"Step 2 - Case 1: Node with Right Child\": \"If the node has a right child, the successor is the leftmost node in the node's right subtree. To find it, go to the right child once and then as far left as possible.\",\n    \"Step 3 - Case 2: Node without Right Child\": \"If the node has no right child, the successor is located higher in the tree. Move up through parent references until reaching a node that is the left child of its parent. The parent of this node is the in-order successor.\",\n    \"Step 4 - Handling Null Successor\": \"If no such node exists (e.g., when traversing up the tree does not yield a left child relationship), return `null` as there is no in-order successor.\",\n    \"Step 5 - Complexity and Constraints\": \"The solution should achieve optimal complexity by leveraging parent references, eliminating the need to traverse the entire tree, and handle up to `10^4` nodes efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"tree\": [\n          2,\n          1,\n          3\n        ],\n        \"node\": 1\n      },\n      \"output\": 2,\n      \"explanation\": \"The in-order successor of node 1 is node 2.\"\n    },\n    {\n      \"input\": {\n        \"tree\": [\n          5,\n          3,\n          6,\n          2,\n          4,\n          null,\n          null,\n          1\n        ],\n        \"node\": 6\n      },\n      \"output\": null,\n      \"explanation\": \"Node 6 has no in-order successor, so the result is `null`.\"\n    }\n  ],\n  \"constraints\": {\n    \"tree_node_range\": \"1 <= number of nodes <= 10^4\",\n    \"node_value_range\": \"-10^5 <= Node.val <= 10^5\",\n    \"unique_values\": \"All node values in the tree are unique.\"\n  },\n  \"follow_up\": \"Could you solve this problem without looking up any node's value directly, relying only on the structure of the tree and parent-child relationships?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a set of commands and obstacles, return the maximum distance the robot travels."}, {"role": "assistant", "content": "{\n  \"description\": \"We are given a sequence of commands for a robot on an infinite XY-plane, starting at the origin and facing north. The robot can turn left or right by 90 degrees or move forward by a specified number of units. There are also obstacles that the robot must avoid. The goal is to determine the maximum Euclidean distance squared from the origin that the robot ever reaches during its journey.\",\n  \"objective\": \"Return the maximum squared Euclidean distance that the robot ever gets from the origin while following the sequence of commands, considering the obstacles.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The robot moves in a 2D plane starting from (0, 0) and can turn left or right or move forward. Obstacles prevent the robot from moving to certain grid points. The task is to calculate the maximum squared distance the robot travels from the origin during its movement, while accounting for obstacles.\",\n    \"Step 2 - Approach\": \"Simulate the robot's movements using a series of commands, updating its position after each command. Track the maximum distance squared from the origin while checking for obstacles to ensure the robot does not move into them. Use a set to store obstacles for O(1) lookup time.\",\n    \"Step 3 - Output Format\": \"Return the maximum squared Euclidean distance the robot ever gets from the origin, based on the movement and obstacle information.\",\n    \"Step 4 - Code Efficiency and Edge Cases\": \"Ensure the solution can handle up to 10,000 commands and obstacles efficiently. The obstacle checking should be optimized by using a set to store coordinates.\",\n    \"Step 5 - Optimization Considerations\": \"The algorithm needs to be optimized to avoid recalculating distances for every single command, using efficient data structures such as sets and conditionals to handle obstacles quickly.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"commands\": [\n          4,\n          -1,\n          3\n        ],\n        \"obstacles\": []\n      },\n      \"output\": 25,\n      \"explanation\": \"The robot moves north 4 units, then turns right and moves east 3 units. The furthest point reached is (3, 4), and its squared distance is 32 + 42 = 25.\"\n    },\n    {\n      \"input\": {\n        \"commands\": [\n          4,\n          -1,\n          4,\n          -2,\n          4\n        ],\n        \"obstacles\": [\n          [\n            2,\n            4\n          ]\n        ]\n      },\n      \"output\": 65,\n      \"explanation\": \"After the robot moves to (0, 4), it encounters an obstacle at (2, 4) and moves to (1, 4). Later, it moves north to (1, 8), with the furthest point reached being (1, 8), and the squared distance is 12 + 82 = 65.\"\n    },\n    {\n      \"input\": {\n        \"commands\": [\n          6,\n          -1,\n          -1,\n          6\n        ],\n        \"obstacles\": []\n      },\n      \"output\": 36,\n      \"explanation\": \"The robot moves north 6 units, turns right twice to face south, and moves back to the origin. The furthest point reached is (0, 6), with the squared distance 62 = 36.\"\n    }\n  ],\n  \"constraints\": {\n    \"commands_length\": \"1 <= commands.length <= 10^4\",\n    \"obstacles_length\": \"0 <= obstacles.length <= 10^4\",\n    \"command_values\": \"commands[i] is either -2, -1, or an integer in the range [1, 9]\",\n    \"obstacle_range\": \"obstacles[i] = [xi, yi], -3 * 10^4 <= xi, yi <= 3 * 10^4\",\n    \"distance_bound\": \"The answer is guaranteed to be less than 231.\"\n  },\n  \"follow_up\": \"Can we optimize the solution further by reducing the space complexity or handling more obstacles in a more efficient way?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Take an encoded string like `2[a]` and return the decoded version."}, {"role": "assistant", "content": "{\n  \"title\": \"Decode Encoded String\",\n  \"description\": \"Given an encoded string following the pattern `k[encoded_string]`, return its decoded string.\",\n  \"objective\": \"Efficiently decode the string by processing nested and repeated segments correctly.\",\n  \"input\": {\n    \"name\": \"s\",\n    \"type\": \"string\",\n    \"description\": \"A valid encoded string consisting of lowercase letters, digits, and square brackets.\",\n    \"constraints\": \"1 <= s.length <= 30, s is well-formed and contains only valid patterns.\"\n  },\n  \"output\": {\n    \"type\": \"string\",\n    \"description\": \"The fully decoded string.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"3[a]2[bc]\"\n      },\n      \"output\": \"aaabcbc\",\n      \"explanation\": \"`3[a]` expands to `aaa`, and `2[bc]` expands to `bcbc`, resulting in `aaabcbc`.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"3[a2[c]]\"\n      },\n      \"output\": \"accaccacc\",\n      \"explanation\": \"`2[c]` expands to `cc`, then `3[a2[c]]` expands to `accaccacc`.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"2[abc]3[cd]ef\"\n      },\n      \"output\": \"abcabccdcdcdef\",\n      \"explanation\": \"`2[abc]` expands to `abcabc`, and `3[cd]` expands to `cdcdcd`, resulting in `abcabccdcdcdef`.\"\n    }\n  ],\n  \"hints\": [\n    \"Use a stack to manage nested encoded patterns and process them iteratively.\",\n    \"When encountering a `]`, decode the most recent `k[encoded_string]` and append it to the result.\",\n    \"Track repeat counts `k` and their corresponding substrings using separate stacks.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Process the string in a single traversal using a stack-based approach to handle nested patterns.\",\n    \"constraints\": \"Minimize space complexity by efficiently managing intermediate results.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find self-dividing numbers in a range."}, {"role": "assistant", "content": "{\n  \"description\": \"Find all self-dividing numbers in a given range `[left, right]`.\",\n  \"objective\": \"Check each number in the range `[left, right]` to determine if it is divisible by all its non-zero digits and return a list of all such numbers.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Iterate through each number in the range `[left, right]`.\",\n    \"Step 2\": \"For each number, extract its digits.\",\n    \"Step 3\": \"Check if any digit is zero or if the number is not divisible by any of its digits.\",\n    \"Step 4\": \"If the number passes the checks, add it to the result list.\",\n    \"Step 5\": \"Return the list of self-dividing numbers after iterating through the range.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"left\": 1,\n        \"right\": 22\n      },\n      \"output\": [\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        11,\n        12,\n        15,\n        22\n      ],\n      \"explanation\": \"All numbers in the range are checked, and those divisible by all their non-zero digits are included.\"\n    },\n    {\n      \"input\": {\n        \"left\": 47,\n        \"right\": 85\n      },\n      \"output\": [\n        48,\n        55,\n        66,\n        77\n      ],\n      \"explanation\": \"The numbers 48, 55, 66, and 77 meet the self-dividing condition in this range.\"\n    }\n  ],\n  \"constraints\": {\n    \"range\": \"1 <= left <= right <= 10^4\",\n    \"number_validity\": \"Numbers should not contain the digit zero.\"\n  },\n  \"follow_up\": \"Discuss the efficiency of this approach and explore optimizations such as breaking early when a digit is zero or not divisible.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the longest word in a dictionary that can be formed as a subsequence of a given string `s`. If there is a tie, return the lexicographically smallest word."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s` and a string array `dictionary`, return the longest string from the dictionary that can be formed as a subsequence of `s`. If there is a tie in length, return the lexicographically smallest word. Return an empty string if no such word exists.\",\n  \"objective\": \"Implement an efficient solution to find the longest subsequence in the dictionary by sorting based on length and lexicographical order and checking for subsequence matches in `s`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The problem is to find the longest dictionary word that can be formed by deleting characters from `s`. If multiple words match in length, the lexicographically smallest one should be returned.\",\n    \"Step 2 - Sorting Dictionary\": \"Sort `dictionary` by length in descending order, and by lexicographical order in ascending order for words of the same length. This ensures that longer, lexicographically smaller words are considered first.\",\n    \"Step 3 - Checking Subsequence\": \"For each word in the sorted dictionary, check if it is a subsequence of `s` by iterating through `s` and matching characters in order. If a word is a subsequence, return it immediately as it\\u2019s the longest valid option.\",\n    \"Step 4 - Edge Cases\": \"If no word in `dictionary` is a subsequence of `s`, return an empty string. Handle cases where `s` or dictionary entries have minimal or maximal lengths efficiently.\",\n    \"Step 5 - Complexity and Constraints\": \"The solution should efficiently handle up to 1,000 dictionary entries and a string `s` of up to 1,000 characters, leveraging sorting and subsequence checks to achieve optimal performance.\",\n    \"Final Check - Constraints Verification\": \"Ensure the solution meets constraints of `1 <= s.length <= 1000`, `1 <= dictionary.length <= 1000`, and `1 <= dictionary[i].length <= 1000` by verifying sorted order and subsequence checks are correctly applied.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"abpcplea\",\n        \"dictionary\": [\n          \"ale\",\n          \"apple\",\n          \"monkey\",\n          \"plea\"\n        ]\n      },\n      \"output\": \"apple\",\n      \"explanation\": \"'apple' is the longest subsequence of 'abpcplea' in dictionary, matching length and lexicographical criteria.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"abpcplea\",\n        \"dictionary\": [\n          \"a\",\n          \"b\",\n          \"c\"\n        ]\n      },\n      \"output\": \"a\",\n      \"explanation\": \"'a' is the lexicographically smallest word among words of length 1 in dictionary that are subsequences of 'abpcplea'.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length_range\": \"1 <= s.length <= 1000\",\n    \"dictionary_length_range\": \"1 <= dictionary.length <= 1000\",\n    \"dictionary_entry_length\": \"1 <= dictionary[i].length <= 1000\",\n    \"character_type\": \"s and dictionary[i] consist of only lowercase English letters.\"\n  },\n  \"follow_up\": \"Could you extend this solution to handle larger dictionaries by optimizing the subsequence check for dictionary entries efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if you can plant flowers in a garden represented as an array."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if it's possible to plant `n` flowers in a flowerbed without violating the no-adjacent-flowers rule. A flowerbed is represented as an array of `0`s and `1`s where `0` indicates an empty plot and `1` indicates an occupied plot.\",\n  \"objective\": \"Efficiently check if the flowerbed can accommodate `n` additional flowers by following the planting constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Traverse Flowerbed\": \"Iterate through the `flowerbed` array to check each plot for planting eligibility.\",\n    \"Step 2 - Check Adjacent Plots\": \"For each empty plot (`0`), check its adjacent plots to ensure they are also empty. For the first and last plots, check only the available adjacent plot.\",\n    \"Step 3 - Update Flower Count\": \"If a plot is valid for planting, place a flower (`1`), update the flower count, and skip to the next non-adjacent plot.\",\n    \"Step 4 - Early Exit\": \"If the number of planted flowers equals or exceeds `n`, return `true` immediately.\",\n    \"Final Check - Constraints Verification\": \"After the loop, check if the flower count is sufficient. Return `true` if `n` flowers are planted, otherwise return `false`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"flowerbed\": [\n          1,\n          0,\n          0,\n          0,\n          1\n        ],\n        \"n\": 1\n      },\n      \"output\": true,\n      \"explanation\": \"One flower can be planted at index 2 without violating the no-adjacent-flowers rule.\"\n    },\n    {\n      \"input\": {\n        \"flowerbed\": [\n          1,\n          0,\n          0,\n          0,\n          1\n        ],\n        \"n\": 2\n      },\n      \"output\": false,\n      \"explanation\": \"Only one flower can be planted (at index 2). Planting two flowers is not possible.\"\n    },\n    {\n      \"input\": {\n        \"flowerbed\": [\n          0,\n          0,\n          1,\n          0,\n          0\n        ],\n        \"n\": 1\n      },\n      \"output\": true,\n      \"explanation\": \"A flower can be planted at index 0 or index 4.\"\n    }\n  ],\n  \"constraints\": {\n    \"flowerbed_length\": \"1 <= flowerbed.length <= 2 * 10^4\",\n    \"flowerbed_values\": \"flowerbed[i] is 0 or 1\",\n    \"no_two_adjacent_flowers\": \"The flowerbed does not contain two adjacent flowers.\",\n    \"planting_limit\": \"0 <= n <= flowerbed.length\"\n  },\n  \"follow_up\": \"Consider optimizing for larger flowerbeds and minimizing the number of checks performed by leveraging early exits.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Combine the strings in the array `words` into the shortest possible string."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of strings `words`, your task is to find the shortest string that contains every string in `words` as a substring. If there are multiple valid shortest strings, return any of them. No string in the input array `words` is a substring of another string in `words`.\",\n  \"objective\": \"Design an algorithm to construct the smallest superstring that includes all the strings in `words` as substrings, while optimizing for minimal string length and computational efficiency.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the problem involves combining strings with overlapping substrings to minimize the resulting string's length. The order of strings can vary as long as the final string contains all input strings.\",\n    \"Step 2 - Initial Approach\": \"Consider all permutations of the input strings and for each permutation, construct a superstring by merging overlapping strings. Choose the shortest resulting superstring.\",\n    \"Step 3 - Optimal Solution Using Graph Representation\": \"Model the problem as a graph where each string is a node, and the weight of an edge between two nodes represents the overlap between the two strings. Use a greedy or dynamic programming approach to find a path (or ordering) through the graph that maximizes overlap and minimizes the superstring's length.\",\n    \"Step 4 - Output Format\": \"Return the shortest superstring as a single string. Ensure that edge cases, such as when all strings have no overlap, are handled appropriately.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Implement an efficient algorithm using techniques like bit masking and dynamic programming (DP) to handle the small input size (up to 12 strings) while minimizing computational overhead. Ensure that the solution is robust for varying string lengths.\",\n    \"Final Check - Constraints Verification\": \"Verify that the algorithm works within the constraints `1 <= words.length <= 12` and `1 <= words[i].length <= 20`, handling all unique and lowercase string inputs correctly.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"words\": [\n          \"alex\",\n          \"loves\",\n          \"leetcode\"\n        ]\n      },\n      \"output\": \"alexlovesleetcode\",\n      \"explanation\": \"The strings can be combined into 'alexlovesleetcode', which is the shortest superstring containing all input strings.\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"catg\",\n          \"ctaagt\",\n          \"gcta\",\n          \"ttca\",\n          \"atgcatc\"\n        ]\n      },\n      \"output\": \"gctaagttcatgcatc\",\n      \"explanation\": \"The strings can be combined into 'gctaagttcatgcatc', which is the shortest superstring.\"\n    }\n  ],\n  \"constraints\": {\n    \"words_length\": \"1 <= words.length <= 12\",\n    \"string_length\": \"1 <= words[i].length <= 20\",\n    \"characters\": \"words[i] consists of lowercase English letters.\",\n    \"uniqueness\": \"All strings in words are unique and no string is a substring of another.\"\n  },\n  \"follow_up\": \"Can you implement an efficient algorithm that avoids explicitly constructing all permutations and instead uses graph-based or dynamic programming approaches to minimize computational complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find all the letter combinations for a string of numbers."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string containing digits from `2-9` inclusive, return all possible letter combinations that the number could represent. Each digit maps to a set of letters as found on a traditional telephone keypad. Return the combinations in any order.\",\n  \"objective\": \"Design an efficient algorithm to generate all possible letter combinations for the given digits, ensuring that edge cases and constraints are handled correctly.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that each digit maps to a specific set of letters (e.g., 2 maps to 'abc'). For a given string of digits, all possible letter combinations need to be generated.\",\n    \"Step 2 - Recursive Approach\": \"Use a recursive approach to explore all combinations by iterating through the letters of each digit, appending to a combination, and proceeding to the next digit.\",\n    \"Step 3 - Iterative Approach\": \"Alternatively, use an iterative method to build combinations step by step for each digit in the input.\",\n    \"Step 4 - Edge Cases\": \"Handle edge cases such as an empty input string, a single digit string, or strings with repeated digits.\",\n    \"Step 5 - Constraints Compliance\": \"Ensure the solution meets the constraints: `0 <= digits.length <= 4` and that each `digits[i]` is in the range `['2', '9']`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"digits\": \"23\"\n      },\n      \"output\": [\n        \"ad\",\n        \"ae\",\n        \"af\",\n        \"bd\",\n        \"be\",\n        \"bf\",\n        \"cd\",\n        \"ce\",\n        \"cf\"\n      ],\n      \"explanation\": \"The combinations are formed using 'abc' for 2 and 'def' for 3.\"\n    },\n    {\n      \"input\": {\n        \"digits\": \"\"\n      },\n      \"output\": [],\n      \"explanation\": \"An empty string results in no combinations.\"\n    },\n    {\n      \"input\": {\n        \"digits\": \"2\"\n      },\n      \"output\": [\n        \"a\",\n        \"b\",\n        \"c\"\n      ],\n      \"explanation\": \"The combinations are formed using 'abc' for 2.\"\n    }\n  ],\n  \"constraints\": {\n    \"digits_length\": \"0 <= digits.length <= 4\",\n    \"digits_values\": \"Each `digits[i]` is in the range ['2', '9']\",\n    \"time_complexity\": \"Ensure that the solution scales with the number of combinations (approximately `O(3^n)` or `O(4^n)` depending on the digits).\"\n  },\n  \"follow_up\": \"Can you extend the algorithm to handle longer input strings, or use an iterative approach instead of recursion to reduce memory overhead?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Convert a column number to an Excel column title."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `columnNumber`, return its corresponding column title as it appears in an Excel sheet. Column titles follow the sequence A, B, ..., Z, AA, AB, ..., AZ, BA, ..., ZZ, AAA, and so on.\",\n  \"objective\": \"Design an algorithm to convert a column number to its corresponding Excel column title.\",\n  \"meta_prompt\": {\n    \"Step 1 - Convert to Base-26\": \"Treat the column number as a base-26 number system with letters A to Z representing digits 1 to 26.\",\n    \"Step 2 - Calculate Characters\": \"Use modulo 26 to determine the current character and reduce the column number by integer division.\",\n    \"Step 3 - Handle Rollover\": \"Adjust for zero-based indexing by decrementing the column number before each calculation.\",\n    \"Step 4 - Generate Title\": \"Iterate until the column number is reduced to 0 and append characters to form the title.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider edge cases such as the smallest column number (1) and very large column numbers.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"columnNumber\": 1\n      },\n      \"output\": \"A\",\n      \"explanation\": \"The column number 1 corresponds to 'A'.\"\n    },\n    {\n      \"input\": {\n        \"columnNumber\": 28\n      },\n      \"output\": \"AB\",\n      \"explanation\": \"The column number 28 corresponds to 'AB'.\"\n    },\n    {\n      \"input\": {\n        \"columnNumber\": 701\n      },\n      \"output\": \"ZY\",\n      \"explanation\": \"The column number 701 corresponds to 'ZY'.\"\n    }\n  ],\n  \"constraints\": {\n    \"column_number\": \"1 <= columnNumber <= 2^31 - 1\"\n  },\n  \"follow_up\": \"How would you extend the solution for column numbers beyond 2^31 - 1?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a binary tree and a sequence `voyage`, flip some nodes to match the tree's pre-order traversal with `voyage`. Return the list of flipped nodes, or `[-1]` if it is impossible."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given the root of a binary tree and a sequence `voyage` representing the desired pre-order traversal of the tree. The objective is to flip the smallest number of nodes in the tree (by swapping their left and right subtrees) so that the pre-order traversal of the tree matches `voyage`. If it is impossible to do so, return `[-1]`. Otherwise, return a list of the values of the flipped nodes.\",\n  \"objective\": \"Write an algorithm that takes the root of a binary tree and a sequence `voyage`, and returns the list of flipped nodes required to match the pre-order traversal of the tree to the `voyage` sequence. If it's impossible to match the `voyage`, return `[-1]`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The task is to find the smallest number of node flips (where each flip swaps the left and right subtrees of a node) to match the pre-order traversal of a binary tree to a given `voyage` sequence. You need to return the list of flipped nodes or `[-1]` if it's impossible.\",\n    \"Step 2 - Tree Traversal\": \"We can use a recursive pre-order traversal of the binary tree. During this traversal, we check if the current node's value matches the value in the `voyage` sequence. If not, we try to flip the node and proceed.\",\n    \"Step 3 - Handling Flips\": \"At each node, if the value in the tree matches the current position in `voyage`, continue recursively. If not, attempt to flip the node and check if this leads to a valid pre-order traversal that matches `voyage`.\",\n    \"Step 4 - Base Case\": \"If at any point the node's value cannot match the corresponding value in `voyage`, or if further flips are not helpful, return `[-1]` to indicate that it's impossible to match the desired traversal.\",\n    \"Step 5 - Edge Cases\": \"Consider edge cases such as when the tree is already in the correct pre-order traversal (no flips needed), or when no possible sequence of flips can match the desired traversal.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution works for all constraints, including a maximum of 100 nodes, and that both the tree and `voyage` contain unique values.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2\n        ],\n        \"voyage\": [\n          2,\n          1\n        ]\n      },\n      \"output\": [\n        -1\n      ],\n      \"explanation\": \"It is impossible to flip the nodes to make the pre-order traversal match `voyage`.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3\n        ],\n        \"voyage\": [\n          1,\n          3,\n          2\n        ]\n      },\n      \"output\": [\n        1\n      ],\n      \"explanation\": \"Flipping node 1 swaps nodes 2 and 3, making the pre-order traversal match `voyage`.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3\n        ],\n        \"voyage\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": [],\n      \"explanation\": \"The tree's pre-order traversal already matches `voyage`, so no flips are needed.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 100\",\n    \"node_value_range\": \"1 <= Node.val, voyage[i] <= n\",\n    \"uniqueness\": \"All node values and `voyage` values are unique.\"\n  },\n  \"follow_up\": \"Can you implement an optimized solution that avoids unnecessary recursive calls by pruning the search space when certain flips are not helpful?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given an array `hand` and an integer `groupSize`, return true if you can rearrange the cards into groups of size `groupSize` with consecutive cards."}, {"role": "assistant", "content": "{\n  \"description\": \"Alice has a hand of cards and wants to rearrange them into groups where each group contains `groupSize` consecutive cards. Given an array `hand` where `hand[i]` represents the value on the ith card and an integer `groupSize`, return `true` if it's possible to rearrange the cards into groups of consecutive values, or `false` otherwise.\",\n  \"objective\": \"Determine if it's possible to rearrange the cards into groups of size `groupSize` where each group consists of `groupSize` consecutive cards.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understanding the Problem\": \"The task requires grouping the cards into sets of consecutive integers. A group must consist of `groupSize` consecutive cards, and we are asked if such groups can be formed from the array.\",\n    \"Step 2 - Approach\": \"First, check if the length of the array is divisible by `groupSize`. If not, it is impossible to form the groups. Then, count the frequency of each card value, and try to form groups by starting with the smallest available card value and selecting `groupSize` consecutive cards.\",\n    \"Step 3 - Efficient Solution\": \"The solution should efficiently track the available card values and form the groups. Sorting the cards and using a frequency map would help to efficiently attempt to form the required groups. The solution should be O(n log n) where n is the number of cards.\",\n    \"Step 4 - Output Format\": \"Return `true` if it's possible to rearrange the cards into valid groups, otherwise return `false`.\",\n    \"Step 5 - Edge Cases\": \"Consider edge cases where the array has fewer elements than `groupSize`, or where it's impossible to form the required groups due to missing consecutive cards.\",\n    \"Step 6 - Code Efficiency and Constraints\": \"Ensure that the solution meets the problem's constraints: `1 <= hand.length <= 10^4` and `1 <= groupSize <= hand.length`. Pay attention to memory usage and time complexity.\",\n    \"Final Check - Solution Validation\": \"The solution must work within the constraints and return correct results for all test cases, including edge cases.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"hand\": [\n          1,\n          2,\n          3,\n          6,\n          2,\n          3,\n          4,\n          7,\n          8\n        ],\n        \"groupSize\": 3\n      },\n      \"output\": true,\n      \"explanation\": \"The cards can be rearranged into the groups [1, 2, 3], [2, 3, 4], [6, 7, 8], which are valid.\"\n    },\n    {\n      \"input\": {\n        \"hand\": [\n          1,\n          2,\n          3,\n          4,\n          5\n        ],\n        \"groupSize\": 4\n      },\n      \"output\": false,\n      \"explanation\": \"It's impossible to rearrange the cards into groups of 4 consecutive values.\"\n    }\n  ],\n  \"constraints\": {\n    \"hand_length\": \"1 <= hand.length <= 10^4\",\n    \"hand_values\": \"0 <= hand[i] <= 10^9\",\n    \"groupSize\": \"1 <= groupSize <= hand.length\"\n  },\n  \"follow_up\": \"Can you implement the solution in O(n log n) time complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number of paths in the binary tree that add up to a given sum."}, {"role": "assistant", "content": "{\n  \"title\": \"Path Sum III\",\n  \"description\": \"Given the `root` of a binary tree and an integer `targetSum`, return the number of paths in the tree where the sum of the values along the path equals `targetSum`. Paths must move downward from parent nodes to child nodes, but they do not need to start or end at the root or a leaf.\",\n  \"input\": {\n    \"root\": {\n      \"type\": \"TreeNode\",\n      \"description\": \"The root of a binary tree.\"\n    },\n    \"targetSum\": {\n      \"type\": \"integer\",\n      \"description\": \"The target sum of the path values.\"\n    },\n    \"constraints\": {\n      \"number_of_nodes\": \"[0, 1000]\",\n      \"node_value_range\": \"[-10^9, 10^9]\",\n      \"targetSum_range\": \"[-1000, 1000]\"\n    }\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The total number of paths in the tree that sum up to `targetSum`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          10,\n          5,\n          -3,\n          3,\n          2,\n          null,\n          11,\n          3,\n          -2,\n          null,\n          1\n        ],\n        \"targetSum\": 8\n      },\n      \"output\": 3,\n      \"explanation\": \"The three paths summing to 8 are:\\n- [5, 3]\\n- [5, 2, 1]\\n- [-3, 11]\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          5,\n          4,\n          8,\n          11,\n          null,\n          13,\n          4,\n          7,\n          2,\n          null,\n          null,\n          5,\n          1\n        ],\n        \"targetSum\": 22\n      },\n      \"output\": 3,\n      \"explanation\": \"The three paths summing to 22 are:\\n- [5, 4, 11, 2]\\n- [5, 8, 4, 5]\\n- [4, 11, 7]\"\n    }\n  ],\n  \"hints\": [\n    \"Use recursion to traverse the tree and keep track of cumulative sums.\",\n    \"Consider prefix sums to optimize the search for paths with the desired sum.\",\n    \"Paths can start from any node, so you'll need to consider all possible starting points.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve a time complexity better than O(n^2) by utilizing hashmaps for prefix sums.\",\n    \"constraints\": \"Minimize memory usage to O(h), where h is the height of the tree.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a sorted array of primes and 1, find the kth smallest fraction."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a sorted array of unique integers containing 1 and prime numbers, and an integer k, the task is to find the kth smallest fraction formed by dividing each element by another element in the array, where the first element is always less than the second. Return the pair of integers corresponding to the kth smallest fraction.\",\n  \"objective\": \"For every pair (i, j) in the array such that i < j, form a fraction arr[i] / arr[j] and return the kth smallest fraction in sorted order.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We are given a sorted array of integers that contains 1 and prime numbers, and a value k. For every pair of elements arr[i] and arr[j] where i < j, we need to compute the fraction arr[i] / arr[j] and return the kth smallest fraction.\",\n    \"Step 2 - Observations\": \"The fractions need to be sorted to find the kth smallest one. Since the array is sorted and contains prime numbers and 1, we can calculate fractions efficiently.\",\n    \"Step 3 - Strategy\": \"We need to generate all possible fractions arr[i] / arr[j] (where i < j), sort them, and return the kth smallest. Since the array is sorted, fractions with smaller values of i will likely be smaller.\",\n    \"Step 4 - Approach\": \"We can use a min-heap (priority queue) to efficiently find the kth smallest fraction. The min-heap will allow us to keep track of the smallest fractions and retrieve the kth smallest one by processing the heap.\",\n    \"Step 5 - Constraints Consideration\": \"Given that the array length can be up to 1000, generating all pairs results in a time complexity of O(n^2). We aim to improve this with a more efficient solution.\",\n    \"Step 6 - Optimizing\": \"We can optimize the approach by using a min-heap and iterating over fractions, ensuring that we only keep track of the smallest fractions and avoid the need to sort the entire array of fractions.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"arr\": [\n          1,\n          2,\n          3,\n          5\n        ],\n        \"k\": 3\n      },\n      \"output\": [\n        2,\n        5\n      ],\n      \"explanation\": \"The fractions are: 1/5, 1/3, 2/5, 1/2, 3/5, 2/3. The 3rd smallest is 2/5.\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          1,\n          7\n        ],\n        \"k\": 1\n      },\n      \"output\": [\n        1,\n        7\n      ],\n      \"explanation\": \"There is only one fraction, 1/7, and it is the 1st smallest.\"\n    }\n  ],\n  \"constraints\": {\n    \"arr_length\": \"2 <= arr.length <= 1000\",\n    \"arr_elements\": \"1 <= arr[i] <= 30,000 and arr[i] is a prime number for i > 0\",\n    \"k_range\": \"1 <= k <= arr.length * (arr.length - 1) / 2\"\n  },\n  \"follow_up\": \"Can we reduce the time complexity below O(n^2) by optimizing the process of finding the kth smallest fraction using techniques like binary search?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Arrange the numbers to form the largest number."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a list of non-negative integers `nums`, arrange them such that they form the largest number and return it as a string.\",\n  \"objective\": \"Design an algorithm to arrange integers to maximize the concatenated result as a string.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the goal is to concatenate integers in an order that results in the lexicographically largest string.\",\n    \"Step 2 - Sorting Strategy\": \"Sort the integers based on a custom comparator that considers the concatenated order of two numbers `x` and `y` (i.e., compare `x+y` and `y+x`).\",\n    \"Step 3 - Handle Edge Cases\": \"Ensure the solution works for edge cases such as all zeros or single-element arrays.\",\n    \"Step 4 - Return Result as String\": \"Convert the integers to strings and join them to form the result.\",\n    \"Step 5 - Optimize\": \"Ensure the sorting algorithm is efficient and the implementation avoids redundant calculations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          10,\n          2\n        ]\n      },\n      \"output\": \"210\",\n      \"explanation\": \"Concatenating '2' before '10' forms the largest number.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          30,\n          34,\n          5,\n          9\n        ]\n      },\n      \"output\": \"9534330\",\n      \"explanation\": \"The order '9', '5', '34', '3', '30' forms the largest number.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"1 <= nums.length <= 100\",\n    \"element_range\": \"0 <= nums[i] <= 10^9\"\n  },\n  \"follow_up\": \"Can you implement this in a way that avoids unnecessary string conversions and reduces comparison operations?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Determine if it is possible to assign integers to variables to satisfy all given equations."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of strings `equations` representing relationships between variables (each string is of length `4` and can be in the form `\\\"xi==yi\\\"` or `\\\"xi!=yi\\\"`), return `true` if it is possible to assign integers to variable names so as to satisfy all the given equations, or `false` otherwise. Variables `xi` and `yi` are lowercase letters representing one-letter variable names.\",\n  \"objective\": \"Design an efficient algorithm to determine whether it is possible to satisfy all the given equations by assigning integers to variable names.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the requirements: Determine if all given equations can be satisfied by assigning integers to variables, considering both equality (`==`) and inequality (`!=`) constraints.\",\n    \"Step 2 - Initial Approach\": \"Consider using a graph-based approach: Represent the equality equations as connected components and then check the inequality equations for any contradictions.\",\n    \"Step 3 - Union-Find Data Structure\": \"Implement a Union-Find (Disjoint Set Union) data structure to efficiently manage the connected components for equality equations. Union the variables that are equal and then check if any inequality equation contradicts the connected components.\",\n    \"Step 4 - Algorithm Steps\": \"First, process all `==` equations and union the variables. Then, process all `!=` equations and check if any inequality contradicts the union-find structure. If any inequality is violated, return `false`; otherwise, return `true`.\",\n    \"Step 5 - Output Format\": \"Ensure the function returns a boolean value indicating whether all equations can be satisfied. Handle edge cases where the input is minimal or all variables are equal.\",\n    \"Step 6 - Code Efficiency and Edge Cases\": \"Focus on achieving an efficient solution with a time complexity of O(n log n), where n is the number of equations. Handle edge cases such as minimal input size, all variables being equal, and conflicting constraints.\",\n    \"Final Check - Constraints Verification\": \"Verify the solution operates within the constraints: `1 <= equations.length <= 500`, `equations[i].length == 4`, and equations are in the specified format. Ensure the algorithm is robust and handles large inputs efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"equations\": [\n          \"a==b\",\n          \"b!=a\"\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"If we assign a = 1 and b = 1, the first equation is satisfied but not the second. Hence, the equations cannot be satisfied together.\"\n    },\n    {\n      \"input\": {\n        \"equations\": [\n          \"b==a\",\n          \"a==b\"\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"We could assign a = 1 and b = 1 to satisfy both equations.\"\n    }\n  ],\n  \"constraints\": {\n    \"equations_length\": \"1 <= equations.length <= 500\",\n    \"equation_format\": \"equations[i].length == 4\",\n    \"variable_range\": \"equations[i][0] is a lowercase letter\",\n    \"operator_range\": \"equations[i][1] is either '=' or '!', and equations[i][2] is '='\",\n    \"variable_range_2\": \"equations[i][3] is a lowercase letter\"\n  },\n  \"follow_up\": \"Can you further optimize the solution to handle larger sets of equations efficiently, ensuring the algorithm scales well with input size and maintains correctness?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the smallest string by moving one of the first k letters of s to the end."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string s and an integer k, your task is to find the lexicographically smallest string that can be obtained by applying the following operation any number of times: select one of the first k letters of s and move it to the end of the string.\",\n  \"objective\": \"Design an algorithm that efficiently computes the lexicographically smallest string possible after performing the allowed operation any number of times, where the operation involves selecting one of the first k letters and appending it at the end.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Start by analyzing the input: you are given a string s and an integer k. The goal is to transform s into the lexicographically smallest string by repeatedly moving one of the first k letters of s to the end.\",\n    \"Step 2 - Initial Approach\": \"For k = 1, the operation essentially becomes a rotating process of the string. For k > 1, you have more flexibility in choosing the letters to move. Think about the consequences of each move and how you can minimize the string lexicographically.\",\n    \"Step 3 - Efficient Solution\": \"Consider using a sliding window approach or rotating the string efficiently while keeping track of the lexicographically smallest string. For larger k values, optimize by checking only the relevant positions of the string for possible moves.\",\n    \"Step 4 - Output Format\": \"Return the lexicographically smallest string that can be obtained after any number of moves. Ensure that the solution handles edge cases like the smallest strings or strings with repeated characters.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure that the algorithm runs in linear or linearithmic time to handle larger strings. Consider handling edge cases such as strings with only one unique character or when k equals the length of the string.\",\n    \"Final Check - Constraints Verification\": \"Verify that the algorithm works within the constraints where 1 <= k <= s.length <= 1000 and s consists of lowercase English letters.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"cba\",\n        \"k\": 1\n      },\n      \"output\": \"acb\",\n      \"explanation\": \"By moving 'c' to the end, we get 'bac'. Then, by moving 'b' to the end, we get the lexicographically smallest string 'acb'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"baaca\",\n        \"k\": 3\n      },\n      \"output\": \"aaabc\",\n      \"explanation\": \"By moving 'b' to the end, we get 'aacab'. Then, moving 'c' to the end gives 'aaabc', which is the lexicographically smallest string.\"\n    }\n  ],\n  \"constraints\": {\n    \"k_range\": \"1 <= k <= s.length <= 1000\",\n    \"s_elements_range\": \"s consists of lowercase English letters.\"\n  },\n  \"follow_up\": \"Can you come up with an algorithm that avoids unnecessary string rotations and computes the result in optimal time?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Calculate math problems from a string."}, {"role": "assistant", "content": "{\n  \"description\": \"Evaluate a string containing a mathematical expression.\",\n  \"objective\": \"Return the result of the expression considering operator precedence and integer division truncation.\",\n  \"meta_prompt\": {\n    \"Step 1 - Tokenize Input\": \"Split the string into numbers and operators.\",\n    \"Step 2 - Handle Operator Precedence\": \"Use stacks or variables to process operators in the correct order.\",\n    \"Step 3 - Perform Evaluation\": \"Iterate through tokens and compute the final result.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"3+2*2\"\n      },\n      \"output\": 7,\n      \"explanation\": \"Multiplication has higher precedence, so compute 2*2 first, then add 3.\"\n    },\n    {\n      \"input\": {\n        \"s\": \" 3/2 \"\n      },\n      \"output\": 1,\n      \"explanation\": \"Integer division truncates the result toward zero.\"\n    },\n    {\n      \"input\": {\n        \"s\": \" 3+5 / 2 \"\n      },\n      \"output\": 5,\n      \"explanation\": \"Division is performed first, then addition.\"\n    }\n  ],\n  \"constraints\": {\n    \"input_length\": \"1 <= s.length <= 3 * 10^5\",\n    \"valid_characters\": \"s contains digits, '+', '-', '*', '/', and spaces.\",\n    \"result_range\": \"Result fits in a signed 32-bit integer.\"\n  },\n  \"follow_up\": \"How would you extend your solution to support additional operators or functions?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Rearrange linked list nodes. Odd ones first, then even ones."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `head` of a singly linked list, reorder the list such that all nodes at odd indices are grouped together followed by all nodes at even indices. Return the reordered linked list.\",\n  \"objective\": \"Efficiently rearrange the nodes of the linked list in a single traversal, maintaining the relative order of nodes within both the odd-indexed and even-indexed groups.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand Node Grouping\": \"Consider the first node as odd, the second as even, and so on. Use two pointers: one to track odd-indexed nodes and another for even-indexed nodes.\",\n    \"Step 2 - Traverse and Rearrange\": \"Iterate through the list, building separate odd and even lists. Maintain their relative order by linking nodes in the sequence they appear.\",\n    \"Step 3 - Merge the Groups\": \"At the end of the traversal, connect the last node of the odd group to the head of the even group.\",\n    \"Step 4 - Optimize for Constraints\": \"Ensure the solution operates in O(n) time complexity with O(1) additional space by performing all operations in-place.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2,\n          3,\n          4,\n          5\n        ]\n      },\n      \"output\": [\n        1,\n        3,\n        5,\n        2,\n        4\n      ],\n      \"explanation\": \"Nodes at odd indices are [1,3,5] and even indices are [2,4]. The reordered list is [1,3,5,2,4].\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          2,\n          1,\n          3,\n          5,\n          6,\n          4,\n          7\n        ]\n      },\n      \"output\": [\n        2,\n        3,\n        6,\n        7,\n        1,\n        5,\n        4\n      ],\n      \"explanation\": \"Nodes at odd indices are [2,3,6,7] and even indices are [1,5,4]. The reordered list is [2,3,6,7,1,5,4].\"\n    },\n    {\n      \"input\": {\n        \"head\": []\n      },\n      \"output\": [],\n      \"explanation\": \"The input list is empty, so the output is also empty.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 10^4\",\n    \"node_value\": \"-10^6 <= Node.val <= 10^6\"\n  },\n  \"follow_up\": \"How would you extend this solution to work for a doubly linked list?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the subarray with the largest product."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums`, find a subarray that has the largest product and return the product. A subarray is a contiguous part of the array.\",\n  \"objective\": \"Design an efficient algorithm to find the maximum product of a subarray in the given array.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves finding a subarray with the maximum product. The product may be affected by negative numbers.\",\n    \"Step 2 - Track Maximum and Minimum Products\": \"Use dynamic programming to keep track of the maximum and minimum products at each index.\",\n    \"Step 3 - Update Iteratively\": \"At each index, calculate the current maximum and minimum products using the previous values and the current number.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as single-element arrays, arrays with all negative numbers, or arrays with zeros.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(n) time using constant space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          3,\n          -2,\n          4\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"The subarray [2, 3] has the largest product.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          -2,\n          0,\n          -1\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"The maximum product is 0 because the subarray with the highest product is [0].\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 2 * 10^4\",\n    \"element_values\": \"-10 <= nums[i] <= 10\"\n  },\n  \"follow_up\": \"How does your solution handle large arrays efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum profit from buying and selling a stock on different days."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `prices` where `prices[i]` is the price of a stock on the `i`th day, return the maximum profit you can achieve by choosing one day to buy and another day in the future to sell. If no profit can be made, return `0`.\",\n  \"objective\": \"Design an efficient algorithm to compute the maximum profit achievable from a single buy and sell transaction.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task requires identifying the maximum difference between two elements `prices[j]` and `prices[i]` (where `j > i`).\",\n    \"Step 2 - Track Minimum Price\": \"Iterate through the array while tracking the minimum price encountered so far.\",\n    \"Step 3 - Calculate Profit\": \"For each price, calculate the profit if sold on that day and update the maximum profit.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as arrays with a single element or arrays with non-increasing prices.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(n) time and O(1) space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"prices\": [\n          7,\n          1,\n          5,\n          3,\n          6,\n          4\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5.\"\n    },\n    {\n      \"input\": {\n        \"prices\": [\n          7,\n          6,\n          4,\n          3,\n          1\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"No profit can be achieved as prices are non-increasing.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= prices.length <= 10^5\",\n    \"price_range\": \"0 <= prices[i] <= 10^4\"\n  },\n  \"follow_up\": \"Can you extend this solution to handle multiple transactions for maximum profit?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Randomly pick and flip a `0` in a binary grid to `1`, ensuring all `0`s have an equal chance of being selected."}, {"role": "assistant", "content": "{\n  \"description\": \"Design an algorithm to randomly pick and flip an index `(i, j)` in an `m x n` binary grid `matrix`, where each `matrix[i][j] == 0` initially. The index chosen must be flipped to `1`, and every index where `matrix[i][j] == 0` should be equally likely to be selected. Implement efficient methods to minimize calls to the built-in random function and optimize for time and space complexity.\",\n  \"objective\": \"Implement a class `Solution` with methods for efficiently flipping cells in a binary grid and resetting the grid to all `0`s, ensuring each `flip()` call picks an unflipped cell uniformly at random.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Recognize that the objective is to uniformly flip unflipped cells in an `m x n` grid. Directly generating random indices and checking each flip could be inefficient, so optimization is necessary.\",\n    \"Step 2 - Mapping 2D Grid to 1D Array\": \"Convert the 2D grid to a 1D space (index `0` to `m*n-1`) for efficient random selection. Use this mapping to treat each position in the 2D grid as a unique integer, simplifying random access.\",\n    \"Step 3 - Tracking Flipped Cells with a Set\": \"Use a dictionary (or hash map) to track flipped positions by storing mappings from the 1D index to valid indices, minimizing space by avoiding a full grid in memory. After selecting a random index, check if it\\u2019s flipped; if not, store it as flipped.\",\n    \"Step 4 - Optimizing with Reservoir Sampling\": \"Instead of re-rolling already-flipped indices, use the dictionary to re-map flipped indices to available indices, thus maintaining efficiency with O(1) lookups.\",\n    \"Step 5 - Resetting the Grid\": \"Implement a `reset()` function that clears the dictionary and resets internal tracking, allowing subsequent `flip()` calls to treat the grid as initially unflipped again.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution handles up to `10^4` grid cells and 1,000 `flip()`/`reset()` calls efficiently, optimizing random sampling while keeping memory usage low.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"methodCalls\": [\n          \"Solution\",\n          \"flip\",\n          \"flip\",\n          \"flip\",\n          \"reset\",\n          \"flip\"\n        ],\n        \"methodArgs\": [\n          [\n            3,\n            1\n          ],\n          [],\n          [],\n          [],\n          [],\n          []\n        ]\n      },\n      \"output\": [\n        null,\n        [\n          1,\n          0\n        ],\n        [\n          2,\n          0\n        ],\n        [\n          0,\n          0\n        ],\n        null,\n        [\n          2,\n          0\n        ]\n      ],\n      \"explanation\": \"Initial flips select random available indices, each only flipping once. Reset clears all flips for a new start.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_dimensions\": \"1 <= m, n <= 10^4\",\n    \"method_calls\": \"Up to 1000 calls will be made to `flip` and `reset`\",\n    \"valid_cell\": \"Each call to `flip` will have at least one unflipped cell available\"\n  },\n  \"follow_up\": \"Can you extend this solution to support grids larger than `10^4 x 10^4`, perhaps by optimizing random index tracking without using additional space for each cell?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the path with the minimum sum in a grid where you can move only right or down."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `m x n` grid filled with non-negative numbers, find the path from the top-left corner to the bottom-right corner that minimizes the sum of all numbers along the path. You can only move either down or right at any point in time.\",\n  \"objective\": \"Design an efficient dynamic programming algorithm to compute the minimum path sum for the grid, adhering to the constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves finding the path with the minimum sum in a grid where movements are restricted to right and down. The path sum accumulates values from each cell visited.\",\n    \"Step 2 - Dynamic Programming Table\": \"Define a DP table `dp[i][j]` where each entry represents the minimum path sum to reach cell `(i, j)`. Initialize `dp[0][0] = grid[0][0]`.\",\n    \"Step 3 - Transition Formula\": \"For each cell `(i, j)`, calculate `dp[i][j]` as the minimum of the path sums from the cell above and the cell to the left, plus the current cell value: `dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1])`.\",\n    \"Step 4 - Space Optimization\": \"Optimize the space complexity by using a single row or column to store intermediate results instead of a full DP table.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider edge cases like a single-cell grid, single-row/column grids, or grids where all cells contain zeros.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            3,\n            1\n          ],\n          [\n            1,\n            5,\n            1\n          ],\n          [\n            4,\n            2,\n            1\n          ]\n        ]\n      },\n      \"output\": 7,\n      \"explanation\": \"The path 1 -> 3 -> 1 -> 1 -> 1 minimizes the sum.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            2,\n            3\n          ],\n          [\n            4,\n            5,\n            6\n          ]\n        ]\n      },\n      \"output\": 12,\n      \"explanation\": \"The path 1 -> 2 -> 3 -> 6 minimizes the sum.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_size\": \"1 <= m, n <= 200\",\n    \"grid_values\": \"0 <= grid[i][j] <= 100\"\n  },\n  \"follow_up\": \"Can you modify the algorithm to handle cases where diagonal movements are allowed, or to return the actual path with the minimum sum?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Build a file system with functions."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a data structure that simulates an in-memory file system capable of creating directories, storing files, and retrieving their content. Implement the necessary functions to interact with the file system while adhering to specified constraints and behaviors.\",\n  \"objective\": \"Simulate a file system with operations for listing directories/files, creating directories, writing/appending to files, and reading file content, ensuring efficient handling of path traversal and lexicographical ordering.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize File System\": \"Set up a root directory that acts as the starting point for the file system. Use nested hash maps to represent directories and files.\",\n    \"Step 2 - List (ls) Function\": \"Traverse the path to identify whether it's a directory or a file. If it's a directory, return a sorted list of its contents (both directories and files). If it's a file, return its name as a single-element list.\",\n    \"Step 3 - Create Directory (mkdir)\": \"Break down the path into components and create missing directories along the specified path.\",\n    \"Step 4 - Add Content to File\": \"Navigate to the file path and either create a new file with the given content or append the content to an existing file.\",\n    \"Step 5 - Read File Content\": \"Navigate to the file path and retrieve its stored content.\",\n    \"Final Check - Constraints Verification\": \"Ensure all operations adhere to constraints: valid paths, proper handling of lexicographical order, and efficient operations for up to 300 calls.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"operations\": [\n          \"FileSystem\",\n          \"ls\",\n          \"mkdir\",\n          \"addContentToFile\",\n          \"ls\",\n          \"readContentFromFile\"\n        ],\n        \"arguments\": [\n          [],\n          [\n            \"/\"\n          ],\n          [\n            \"/a/b/c\"\n          ],\n          [\n            \"/a/b/c/d\",\n            \"hello\"\n          ],\n          [\n            \"/\"\n          ],\n          [\n            \"/a/b/c/d\"\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        [],\n        null,\n        null,\n        [\n          \"a\"\n        ],\n        \"hello\"\n      ],\n      \"explanation\": \"Initialize the file system, list root directory, create nested directories '/a/b/c', add content to a file '/a/b/c/d', list root directory to verify, and read the content of the file.\"\n    },\n    {\n      \"input\": {\n        \"operations\": [\n          \"FileSystem\",\n          \"mkdir\",\n          \"addContentToFile\",\n          \"readContentFromFile\",\n          \"ls\"\n        ],\n        \"arguments\": [\n          [],\n          [\n            \"/x/y/z\"\n          ],\n          [\n            \"/x/y/z/file.txt\",\n            \"test content\"\n          ],\n          [\n            \"/x/y/z/file.txt\"\n          ],\n          [\n            \"/x/y\"\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        null,\n        null,\n        \"test content\",\n        [\n          \"z\"\n        ]\n      ],\n      \"explanation\": \"Create nested directories '/x/y/z', add content to '/x/y/z/file.txt', read the content of the file, and list the '/x/y' directory to verify structure.\"\n    }\n  ],\n  \"constraints\": {\n    \"path_length\": \"1 <= path.length, filePath.length <= 100\",\n    \"valid_paths\": \"Paths are absolute and start with '/' without ending in '/' except for the root.\",\n    \"unique_names\": \"All directory and file names are unique within the same directory.\",\n    \"operations\": \"At most 300 calls to ls, mkdir, addContentToFile, and readContentFromFile.\",\n    \"content_length\": \"1 <= content.length <= 50\"\n  },\n  \"follow_up\": \"Consider extending the file system to handle additional operations such as file deletion, moving files, or supporting symbolic links, while maintaining efficiency.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Calculate the number of cherries that can be collected in a grid."}, {"role": "assistant", "content": "{\n  \"description\": \"Calculate the maximum number of cherries that can be collected while moving from the top-left corner to the bottom-right corner of a grid and back.\",\n  \"objective\": \"Use a dynamic programming approach to compute the maximum cherries collected for two simultaneous paths, leveraging overlapping subproblems.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Initialize a DP array `dp` to store the maximum cherries collected for two paths simultaneously at each layer `t = r1 + c1`.\",\n    \"Step 2\": \"Iterate over layers `t` from 0 to `2n - 2`, where `n` is the grid size. For each layer, calculate all valid positions `(c1, c2)` for two paths.\",\n    \"Step 3\": \"For each `(c1, c2)`, calculate the maximum cherries picked by considering all possible previous states: `dp[c1-1][c2-1]`, `dp[c1-1][c2]`, `dp[c1][c2-1]`, `dp[c1][c2]`, ensuring validity of grid positions.\",\n    \"Step 4\": \"Add the cherries collected at `(r1, c1)` and `(r2, c2)`, accounting for duplicates when `r1 == r2` and `c1 == c2`.\",\n    \"Step 5\": \"After processing all layers, return the value of `dp[0][0]` or `0` if no valid path exists.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            0,\n            1,\n            -1\n          ],\n          [\n            1,\n            0,\n            -1\n          ],\n          [\n            1,\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"The player picks cherries while traveling down and back up, maximizing the total count.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            1,\n            -1\n          ],\n          [\n            1,\n            -1,\n            1\n          ],\n          [\n            -1,\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"No valid path exists due to blocked cells.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_size\": \"1 <= n <= 50\",\n    \"cell_values\": \"grid[i][j] is -1, 0, or 1\",\n    \"start_end_valid\": \"grid[0][0] != -1 and grid[n-1][n-1] != -1\",\n    \"objective\": \"Ensure efficient computation for large grids.\"\n  },\n  \"follow_up\": \"Discuss the time and space complexity of this DP approach. Suggest optimizations, such as reducing space complexity by keeping only two layers of the DP table in memory.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create a circular queue that allows adding and removing elements."}, {"role": "assistant", "content": "{\n  \"description\": \"Design and implement a circular queue (ring buffer) that supports FIFO operations and optimally utilizes available space by connecting the last position back to the first.\",\n  \"objective\": \"Implement a data structure to support efficient operations for adding, removing, and accessing elements in a circular queue.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Attributes\": \"Define attributes: capacity (maximum size), head (front element index), tail (rear element index), count (current number of elements), and a data array of size k to store elements.\",\n    \"Step 2 - Enqueue Operation\": \"Check if the queue is full using the count. If not, add the element to the tail index, increment count, and update tail to (tail + 1) % capacity.\",\n    \"Step 3 - Dequeue Operation\": \"Check if the queue is empty using the count. If not, increment head to (head + 1) % capacity and decrement count.\",\n    \"Step 4 - Front Operation\": \"Return the element at the head index if the queue is not empty; otherwise, return -1.\",\n    \"Step 5 - Rear Operation\": \"Return the element at (tail - 1 + capacity) % capacity if the queue is not empty; otherwise, return -1.\",\n    \"Step 6 - Check Empty\": \"Return true if count is 0; otherwise, return false.\",\n    \"Step 7 - Check Full\": \"Return true if count equals capacity; otherwise, return false.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"operations\": [\n          \"MyCircularQueue\",\n          \"enQueue\",\n          \"enQueue\",\n          \"enQueue\",\n          \"enQueue\",\n          \"Rear\",\n          \"isFull\",\n          \"deQueue\",\n          \"enQueue\",\n          \"Rear\"\n        ],\n        \"arguments\": [\n          [\n            3\n          ],\n          [\n            1\n          ],\n          [\n            2\n          ],\n          [\n            3\n          ],\n          [\n            4\n          ],\n          [],\n          [],\n          [],\n          [\n            4\n          ],\n          []\n        ]\n      },\n      \"output\": [\n        null,\n        true,\n        true,\n        true,\n        false,\n        3,\n        true,\n        true,\n        true,\n        4\n      ],\n      \"explanation\": \"The queue supports a maximum of 3 elements. It successfully adds 1, 2, and 3, but fails to add 4 as the queue is full. After dequeuing, adding 4 is successful.\"\n    },\n    {\n      \"input\": {\n        \"operations\": [\n          \"MyCircularQueue\",\n          \"enQueue\",\n          \"deQueue\",\n          \"Front\",\n          \"isEmpty\",\n          \"isFull\"\n        ],\n        \"arguments\": [\n          [\n            2\n          ],\n          [\n            5\n          ],\n          [],\n          [],\n          [],\n          []\n        ]\n      },\n      \"output\": [\n        null,\n        true,\n        true,\n        5,\n        true,\n        false\n      ],\n      \"explanation\": \"The queue initializes with size 2. Adding 5 is successful, and dequeuing retrieves the front element 5, leaving the queue empty.\"\n    }\n  ],\n  \"constraints\": {\n    \"queue_size\": \"1 <= k <= 1000\",\n    \"element_range\": \"0 <= value <= 1000\",\n    \"operations_count\": \"At most 3000 calls to operations.\"\n  },\n  \"follow_up\": \"Explore dynamic resizing techniques for circular queues and their impact on performance. Evaluate use cases for fixed-size queues in real-time systems.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum cost to buy items using prices and special offers."}, {"role": "assistant", "content": "{\n  \"description\": \"Given prices of items, special offers, and the number of items needed, determine the minimum cost to fulfill the purchase requirements using the most optimal combination of regular prices and special offers.\",\n  \"objective\": \"Minimize the total cost of purchasing items while adhering to the constraints provided by the special offers and the exact quantities of items needed.\",\n  \"meta_prompt\": {\n    \"Step 1 - Calculate Direct Cost\": \"Compute the total cost of the items by buying them individually without using any special offers.\",\n    \"Step 2 - Validate Special Offers\": \"Check if each special offer can be applied based on the current remaining needs.\",\n    \"Step 3 - Apply Special Offer\": \"For a valid special offer, recursively calculate the cost after applying it and compare it with the minimum cost found so far.\",\n    \"Step 4 - Return Minimum Cost\": \"Compare the costs from all possible combinations of direct purchases and special offers to find the optimal solution.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"price\": [\n          2,\n          5\n        ],\n        \"special\": [\n          [\n            3,\n            0,\n            5\n          ],\n          [\n            1,\n            2,\n            10\n          ]\n        ],\n        \"needs\": [\n          3,\n          2\n        ]\n      },\n      \"output\": 14,\n      \"explanation\": \"Use special offer #2 for 1A and 2B, costing $10. Buy 2A individually, costing $4. Total = $10 + $4 = $14.\"\n    },\n    {\n      \"input\": {\n        \"price\": [\n          2,\n          3,\n          4\n        ],\n        \"special\": [\n          [\n            1,\n            1,\n            0,\n            4\n          ],\n          [\n            2,\n            2,\n            1,\n            9\n          ]\n        ],\n        \"needs\": [\n          1,\n          2,\n          1\n        ]\n      },\n      \"output\": 11,\n      \"explanation\": \"Use special offer #1 for 1A and 1B, costing $4. Buy 1B for $3 and 1C for $4. Total = $4 + $3 + $4 = $11.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 6\",\n    \"price_and_needs_range\": \"0 <= price[i], needs[i] <= 10\",\n    \"special_offers_range\": \"1 <= special.length <= 100\",\n    \"special_items_range\": \"0 <= special[i][j] <= 50\"\n  },\n  \"follow_up\": \"Investigate optimizations for larger datasets, including memoization to store intermediate results to avoid redundant calculations.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Guess the secret word from a list of six-letter words using a helper."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an array of unique six-letter words and a secret word. Your task is to guess the secret word using a helper object 'Master'. You can call 'Master.guess(word)' where the word must be from the provided list of words. The function 'Master.guess' will return either '-1' if the word is not in the list or an integer representing the number of exact matches (both value and position) between the guessed word and the secret word. You are given a maximum number of allowed guesses to find the secret word. The goal is to guess the secret word within the allowed number of guesses.\",\n  \"objective\": \"Design a strategy that guesses the secret word using 'Master.guess' efficiently, without exceeding the allowed number of guesses. The exact matches should be tracked, and based on this information, you can narrow down the possible guesses. Ensure that the secret word is guessed correctly within the allowed number of guesses.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"You have a list of words and need to guess the secret word using 'Master.guess'. Each guess will return the number of exact matches, helping you determine which word in the list is the secret word.\",\n    \"Step 2 - Strategy Exploration\": \"The secret word must be guessed without exceeding the allowed number of guesses. A strategy such as reducing the search space based on feedback from 'Master.guess' can be used. Consider creating a plan to reduce the number of possible words each time based on the results from previous guesses.\",\n    \"Step 3 - Guessing Process\": \"For each guess, analyze the feedback (number of exact matches) to update the list of possible words. Continue guessing until you identify the secret word or exhaust the allowed number of guesses.\",\n    \"Step 4 - Output Format\": \"The output should be 'You guessed the secret word correctly.' if the secret word is guessed within the allowed guesses, or 'Either you took too many guesses, or you did not find the secret word.' if the guessing process fails.\",\n    \"Step 5 - Edge Cases\": \"Consider edge cases where the list of words is very small (e.g., just two words) or the number of allowed guesses is large.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"secret\": \"acckzz\",\n        \"words\": [\n          \"acckzz\",\n          \"ccbazz\",\n          \"eiowzz\",\n          \"abcczz\"\n        ],\n        \"allowedGuesses\": 10\n      },\n      \"output\": \"You guessed the secret word correctly.\",\n      \"explanation\": \"After making 5 guesses with feedback from 'Master.guess', the secret word 'acckzz' is identified.\"\n    },\n    {\n      \"input\": {\n        \"secret\": \"hamada\",\n        \"words\": [\n          \"hamada\",\n          \"khaled\"\n        ],\n        \"allowedGuesses\": 10\n      },\n      \"output\": \"You guessed the secret word correctly.\",\n      \"explanation\": \"Since there are only two words, guessing both ensures finding the secret word.\"\n    }\n  ],\n  \"constraints\": {\n    \"words_length\": \"1 <= words.length <= 100\",\n    \"word_length\": \"words[i].length == 6\",\n    \"allowed_guesses_range\": \"10 <= allowedGuesses <= 30\"\n  },\n  \"follow_up\": \"Can you improve the guessing strategy to reduce the number of guesses in cases where the word list is large?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Move all the `0`s in an array to the end while keeping the order of other elements."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums`, move all `0`s to the end of the array while maintaining the relative order of non-zero elements. Perform the operation in-place without using additional space for another array.\",\n  \"objective\": \"Design an efficient algorithm to rearrange the array with minimal operations, ensuring the constraints are met.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task requires rearranging elements in the same array without creating a copy. This involves overwriting `0`s and shifting non-zero elements forward.\",\n    \"Step 2 - Two-Pointer Approach\": \"Use a two-pointer technique:\\n- One pointer iterates through the array (`i`), while another pointer (`pos`) tracks the position to insert the next non-zero element.\\n- For each non-zero element encountered, write it to `nums[pos]` and increment `pos`.\",\n    \"Step 3 - Fill Remaining Positions with Zeros\": \"After iterating through the array, fill the remaining positions from `pos` to the end of the array with zeros.\",\n    \"Step 4 - Edge Cases\": \"Handle edge cases like an array with no zeros, all zeros, or a single element.\",\n    \"Step 5 - Output\": \"Modify the array in-place and return the rearranged array.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          1,\n          0,\n          3,\n          12\n        ]\n      },\n      \"output\": [\n        1,\n        3,\n        12,\n        0,\n        0\n      ],\n      \"explanation\": \"Non-zero elements [1, 3, 12] are moved forward, and zeros are placed at the end.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0\n        ]\n      },\n      \"output\": [\n        0\n      ],\n      \"explanation\": \"The array contains only one element, so no rearrangement is needed.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"1 <= nums.length <= 10^4\",\n    \"value_range\": \"-2^31 <= nums[i] <= 2^31 - 1\",\n    \"in_place\": \"The solution must be implemented without making a copy of the array.\"\n  },\n  \"follow_up\": \"Can you minimize the total number of write operations by optimizing the movement of elements?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the biggest numbers in sliding windows."}, {"role": "assistant", "content": "{\n  \"description\": \"Return the maximum values of a sliding window over an array.\",\n  \"objective\": \"Calculate the maximum value in each sliding window of size `k` as the window moves from left to right across the array.\",\n  \"steps\": [\n    \"Use a deque to store indices of potential maximum values in the current window.\",\n    \"As the window moves, remove indices that are out of bounds.\",\n    \"Keep only indices of elements that are greater than the current element in the deque.\",\n    \"Add the maximum value of the current window to the result.\",\n    \"Repeat until the window has moved through the entire array.\"\n  ],\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          3,\n          -1,\n          -3,\n          5,\n          3,\n          6,\n          7\n        ],\n        \"k\": 3\n      },\n      \"output\": [\n        3,\n        3,\n        5,\n        5,\n        6,\n        7\n      ]\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1\n        ],\n        \"k\": 1\n      },\n      \"output\": [\n        1\n      ]\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          9,\n          11\n        ],\n        \"k\": 2\n      },\n      \"output\": [\n        11\n      ]\n    }\n  ],\n  \"constraints\": \"Optimize the solution to O(n) time complexity by processing each element at most once.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Multiply two complex numbers given as strings in the form 'real+imaginaryi' and return the result in the same format."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two complex numbers as strings in the form `'real+imaginaryi'`, return the result of their multiplication in the same string format.\",\n  \"objective\": \"Parse the real and imaginary parts from each input string, perform complex number multiplication based on the formula, and return the result as a formatted string.\",\n  \"meta_prompt\": {\n    \"Step 1 - Parse Real and Imaginary Parts\": \"For each input string, split it using the '+' and 'i' characters to extract the real and imaginary components. Convert these components to integers for calculation.\",\n    \"Step 2 - Apply Complex Multiplication Formula\": \"Using the formula `(a+bi) * (c+di) = (ac - bd) + (ad + bc)i`, calculate the new real part as `ac - bd` and the new imaginary part as `ad + bc`.\",\n    \"Step 3 - Format Output String\": \"Convert the resulting real and imaginary parts back to strings and format them as 'real+imaginaryi'. This string is then returned as the result.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution handles the constraints where real and imaginary values are within [-100, 100], with each operation being completed in constant time O(1) since there are a fixed number of operations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"num1\": \"1+1i\",\n        \"num2\": \"1+1i\"\n      },\n      \"output\": \"0+2i\",\n      \"explanation\": \"The multiplication (1 + i) * (1 + i) results in 0 + 2i.\"\n    },\n    {\n      \"input\": {\n        \"num1\": \"1+-1i\",\n        \"num2\": \"1+-1i\"\n      },\n      \"output\": \"0+-2i\",\n      \"explanation\": \"The multiplication (1 - i) * (1 - i) results in 0 + -2i.\"\n    }\n  ],\n  \"constraints\": {\n    \"complex_number_format\": \"Each input is in the form 'real+imaginaryi', with 'real' and 'imaginary' values in the range [-100, 100].\"\n  },\n  \"follow_up\": \"Can you extend this solution to handle complex number division or implement additional complex number operations using similar parsing and formatting techniques?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Write a program to traverse a matrix diagonally and return the result."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a matrix `mat` of size `m x n`. Your task is to return an array containing all the elements of the matrix traversed in a diagonal zigzag order. In this order, the traversal alternates between upward and downward diagonals, starting from the top-left corner of the matrix.\",\n  \"objective\": \"Design an efficient algorithm that extracts all elements from the matrix in diagonal zigzag order, minimizing time complexity and ensuring correctness for large inputs.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Understand that diagonal zigzag traversal alternates between diagonals going upwards (from bottom-left to top-right) and diagonals going downwards (from top-right to bottom-left).\",\n    \"Step 2 - Traversal Details\": \"Determine all diagonals of the matrix by their sum of row and column indices, `d = i + j`. Traverse the diagonals alternately by reversing the order for every alternate diagonal.\",\n    \"Step 3 - Edge Cases\": \"Consider edge cases such as a single row, a single column, or non-square matrices with `m != n`. Ensure the algorithm handles small and large matrices efficiently.\",\n    \"Step 4 - Output Construction\": \"Iteratively append elements from each diagonal to the result array while maintaining the specified traversal order.\",\n    \"Step 5 - Complexity Analysis\": \"Ensure that the algorithm has `O(m * n)` time complexity, as each element is processed exactly once, and it avoids unnecessary operations.\",\n    \"Final Verification\": \"Validate that the solution adheres to the constraints `1 <= m, n <= 10^4` and `1 <= m * n <= 10^4` and handles negative values in the matrix elements correctly.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"mat\": [\n          [\n            1,\n            2,\n            3\n          ],\n          [\n            4,\n            5,\n            6\n          ],\n          [\n            7,\n            8,\n            9\n          ]\n        ]\n      },\n      \"output\": [\n        1,\n        2,\n        4,\n        7,\n        5,\n        3,\n        6,\n        8,\n        9\n      ],\n      \"explanation\": \"The traversal starts with 1, then moves diagonally upward (2, 4), downward (7, 5, 3), upward (6, 8), and finally downward (9).\"\n    },\n    {\n      \"input\": {\n        \"mat\": [\n          [\n            1,\n            2\n          ],\n          [\n            3,\n            4\n          ]\n        ]\n      },\n      \"output\": [\n        1,\n        2,\n        3,\n        4\n      ],\n      \"explanation\": \"The traversal starts with 1, then moves upward (2), downward (3), and finally upward (4).\"\n    },\n    {\n      \"input\": {\n        \"mat\": [\n          [\n            1\n          ],\n          [\n            2\n          ],\n          [\n            3\n          ]\n        ]\n      },\n      \"output\": [\n        1,\n        2,\n        3\n      ],\n      \"explanation\": \"The traversal simply follows the single column in order.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_dimensions\": \"1 <= m, n <= 10^4\",\n    \"element_constraints\": \"-10^5 <= mat[i][j] <= 10^5\",\n    \"total_elements\": \"1 <= m * n <= 10^4\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"Can you modify the solution to return the result row by row instead of diagonally?\",\n    \"question_2\": \"How would you handle a scenario where the matrix is too large to fit into memory?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Generate a nested string showing the match sequence for a tournament with `n` teams. Pair the highest-ranked team with the lowest-ranked team until one team remains."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a number `n` representing `n` teams, each labeled from `1` to `n` based on their rank, construct the match sequence in a string format. During each round, always pair the highest-ranked team with the lowest-ranked team and continue this pairing recursively until there is only one team left as the final winner.\",\n  \"objective\": \"Implement an efficient algorithm that constructs the match sequence in linear time by using recursion or iteration. Output the final result as a string with nested parentheses representing each round of matches.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Teams\": \"Create an initial list of teams labeled from `1` to `n`. Each round will involve pairing the first and last teams, then proceeding inward to pair remaining teams.\",\n    \"Step 2 - Pairing Strategy\": \"Iteratively or recursively, construct each round by pairing the strongest available team with the weakest. Store these pairs in a new list where each pair is represented in the format `(a, b)`.\",\n    \"Step 3 - Recursively Construct Nested Pairs\": \"Repeat the pairing process, nesting the results of each round inside parentheses for subsequent rounds until only one pairing remains.\",\n    \"Step 4 - Format Final Output\": \"Return the final match string in nested parentheses, with each round represented by appropriate parentheses and comma-separated team labels. Ensure the format matches the specified example outputs exactly.\",\n    \"Final Check - Constraints Verification\": \"Verify that the input is a power of two (i.e., `n == 2^x`), handle cases where `n` can be any power of two up to 4096 (as `n` up to `2^12`), and confirm that results are correctly formatted and optimized for performance.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 4\n      },\n      \"output\": \"((1,4),(2,3))\",\n      \"explanation\": \"In the first round, pair (1,4) and (2,3). In the next round, pair ((1,4),(2,3)) to get the final output.\"\n    },\n    {\n      \"input\": {\n        \"n\": 8\n      },\n      \"output\": \"(((1,8),(4,5)),((2,7),(3,6)))\",\n      \"explanation\": \"In the first round, pair (1,8), (2,7), (3,6), and (4,5). In the second round, pair ((1,8),(4,5)) and ((2,7),(3,6)). In the final round, pair (((1,8),(4,5)),((2,7),(3,6))).\"\n    }\n  ],\n  \"constraints\": {\n    \"team_count\": \"n == 2^x where 1 <= x <= 12\",\n    \"team_labels\": \"Teams are labeled consecutively from 1 to n based on rank.\"\n  },\n  \"follow_up\": \"Explore the complexity of constructing this result for larger values of n and the effects of different pairing strategies on overall tournament structure.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find all integers that can be expressed as `xi + yj` for `i >= 0` and `j >= 0` with `x`, `y`, and `bound` given."}, {"role": "assistant", "content": "{\n  \"description\": \"Given three integers `x`, `y`, and `bound`, the task is to return a list of all **powerful integers** that are less than or equal to `bound`. An integer is **powerful** if it can be represented as `xi + yj` for some integers `i >= 0` and `j >= 0`. Each value should occur **at most once** in the list.\",\n  \"objective\": \"Design an algorithm to find all powerful integers that satisfy the condition `xi + yj <= bound`. You may return the results in any order. Ensure that the list does not contain duplicates.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The task is to identify all integers that can be expressed in the form `xi + yj` where `i >= 0` and `j >= 0`. Both `x` and `y` are given as input, and the output should be a list of all unique powerful integers less than or equal to `bound`.\",\n    \"Step 2 - Initial Approach\": \"Consider iterating through possible values of `i` and `j` for both `x` and `y`, calculating `xi + yj` and checking if the result is within the `bound` limit. Use a set to avoid duplicates.\",\n    \"Step 3 - Efficient Algorithm\": \"To minimize computation, stop iterating over `i` and `j` when `xi` or `yj` exceeds `bound`.\",\n    \"Step 4 - Output Format\": \"The output should be a list of integers representing all powerful integers less than or equal to `bound`. Each integer should appear at most once, and the list can be returned in any order.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Consider edge cases like when `x` or `y` equals `1`, or when `bound` is `0`. Ensure that the solution works efficiently for large inputs up to `bound = 10^6`.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution respects the constraint `1 <= x, y <= 100` and `0 <= bound <= 10^6`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"x\": 2,\n        \"y\": 3,\n        \"bound\": 10\n      },\n      \"output\": [\n        2,\n        3,\n        4,\n        5,\n        7,\n        9,\n        10\n      ],\n      \"explanation\": \"The powerful integers less than or equal to 10 are 2, 3, 4, 5, 7, 9, and 10, which can be represented as xi + yj for some values of `i` and `j`.\"\n    },\n    {\n      \"input\": {\n        \"x\": 3,\n        \"y\": 5,\n        \"bound\": 15\n      },\n      \"output\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        14\n      ],\n      \"explanation\": \"The powerful integers less than or equal to 15 are 2, 4, 6, 8, 10, and 14.\"\n    }\n  ],\n  \"constraints\": {\n    \"x_range\": \"1 <= x <= 100\",\n    \"y_range\": \"1 <= y <= 100\",\n    \"bound_range\": \"0 <= bound <= 10^6\"\n  },\n  \"follow_up\": \"Can you improve the efficiency of the solution by optimizing how you iterate over `i` and `j` to avoid unnecessary calculations?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number of ways to climb a staircase with `n` steps, where you can climb either 1 or 2 steps at a time."}, {"role": "assistant", "content": "{\n  \"description\": \"You are climbing a staircase with `n` steps. Each time you can climb either `1` step or `2` steps. Determine the number of distinct ways to climb to the top.\",\n  \"objective\": \"Design an efficient algorithm to calculate the number of distinct ways to climb the staircase using either dynamic programming or recursion with memoization.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves finding the number of ways to reach the top of a staircase by taking 1 or 2 steps at a time. The problem can be modeled as a Fibonacci sequence where `ways(n) = ways(n-1) + ways(n-2)`.\",\n    \"Step 2 - Recursive Approach\": \"Use recursion to break the problem into smaller subproblems: `ways(n) = ways(n-1) + ways(n-2)`. Optimize with memoization to avoid redundant computations.\",\n    \"Step 3 - Iterative Dynamic Programming\": \"Use an iterative approach with a DP array where `dp[i]` represents the number of ways to reach step `i`. Update values iteratively using the relation `dp[i] = dp[i-1] + dp[i-2]`.\",\n    \"Step 4 - Space Optimization\": \"Optimize space by using two variables to store the last two results instead of maintaining a full DP array.\",\n    \"Step 5 - Handle Constraints\": \"Ensure the solution handles constraints such as `1 <= n <= 45` efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 2\n      },\n      \"output\": 2,\n      \"explanation\": \"There are two ways to climb to the top: [1,1] or [2].\"\n    },\n    {\n      \"input\": {\n        \"n\": 3\n      },\n      \"output\": 3,\n      \"explanation\": \"There are three ways to climb to the top: [1,1,1], [1,2], or [2,1].\"\n    }\n  ],\n  \"constraints\": {\n    \"steps_range\": \"1 <= n <= 45\",\n    \"valid_moves\": \"Each step can either be 1 or 2.\"\n  },\n  \"follow_up\": \"Can you generalize the solution to allow for more step options, such as climbing 1, 2, or 3 steps at a time?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Design a HashMap with linked lists for collision handling."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a HashMap without using any built-in hash table libraries, where collisions are handled using buckets implemented as linked lists.\",\n  \"objective\": \"Implement a HashMap that supports `put`, `get`, and `remove` operations efficiently with collision handling via chaining using buckets.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Define the MyHashMap class, which includes a constructor to initialize the hash map and methods `put`, `get`, and `remove`.\",\n    \"Step 2\": \"Define a Bucket class to handle collisions using linked lists. Each bucket will contain a list of key-value pairs.\",\n    \"Step 3\": \"Define a hash function to compute the index for a given key by taking the modulo of the key with a prime-sized array (e.g., `key % 2069`).\",\n    \"Step 4\": \"Implement the `put` method to insert or update a key-value pair. Use the hash function to locate the bucket. If the key exists, update the value; otherwise, add a new key-value pair.\",\n    \"Step 5\": \"Implement the `get` method to retrieve the value for a given key. Use the hash function to locate the bucket and search for the key within the bucket.\",\n    \"Step 6\": \"Implement the `remove` method to delete a key-value pair. Use the hash function to locate the bucket and remove the key from the bucket if it exists.\"\n  },\n  \"examples\": [\n    {\n      \"input\": [\n        [\n          \"MyHashMap\",\n          \"put\",\n          \"put\",\n          \"get\",\n          \"get\",\n          \"put\",\n          \"get\",\n          \"remove\",\n          \"get\"\n        ],\n        [\n          [],\n          [\n            1,\n            1\n          ],\n          [\n            2,\n            2\n          ],\n          [\n            1\n          ],\n          [\n            3\n          ],\n          [\n            2,\n            1\n          ],\n          [\n            2\n          ],\n          [\n            2\n          ],\n          [\n            2\n          ]\n        ]\n      ],\n      \"output\": [\n        null,\n        null,\n        null,\n        1,\n        -1,\n        null,\n        1,\n        null,\n        -1\n      ],\n      \"explanation\": \"Operations are performed sequentially: insert (1, 1), insert (2, 2), get(1), get(3), update (2, 1), get(2), remove(2), and get(2) again.\"\n    }\n  ],\n  \"constraints\": {\n    \"key_range\": \"0 <= key, value <= 10^6\",\n    \"method_calls\": \"At most 10^4 calls to `put`, `get`, and `remove`.\"\n  },\n  \"follow_up\": \"Analyze the time complexity of operations in the worst case when all keys hash to the same bucket, and discuss improvements such as rehashing or using balanced trees within buckets.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count the subarrays where the max value is between left and right."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums` and two integers `left` and `right`, return the number of contiguous non-empty subarrays such that the maximum element in that subarray lies within the inclusive range `[left, right]`. This means that for each subarray, the highest element must be between `left` and `right` (both inclusive).\",\n  \"objective\": \"Return the count of valid subarrays where the maximum element in the subarray is between `left` and `right`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We are tasked with counting the number of subarrays where the maximum value of elements in the subarray is within a specified range [left, right]. A subarray is a contiguous part of the array.\",\n    \"Step 2 - Approach\": \"To solve this problem, we can use the sliding window or two-pointer technique. We will iterate through the array and maintain a window that satisfies the condition that the maximum value within the window is between `left` and `right`.\",\n    \"Step 3 - Plan\": \"1. Iterate through the array with two pointers: one for the start of the subarray and one for the end. 2. Expand the end pointer and track the maximum value in the window. 3. When the maximum value is in the range [left, right], count all valid subarrays starting from the current `start` pointer to `end`. 4. When the maximum exceeds `right` or is less than `left`, adjust the `start` pointer accordingly.\",\n    \"Step 4 - Edge Cases\": \"Consider edge cases where all elements are smaller than `left`, all elements are greater than `right`, or the array contains repeated numbers.\",\n    \"Step 5 - Optimization\": \"The approach should aim for linear time complexity (O(n)) since iterating over all subarrays could lead to O(n^2) time complexity, which is inefficient for large input sizes.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          1,\n          4,\n          3\n        ],\n        \"left\": 2,\n        \"right\": 3\n      },\n      \"output\": 3,\n      \"explanation\": \"The subarrays that meet the requirement are [2], [2, 1], and [3].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          9,\n          2,\n          5,\n          6\n        ],\n        \"left\": 2,\n        \"right\": 8\n      },\n      \"output\": 7,\n      \"explanation\": \"The valid subarrays are: [2], [2, 9], [9], [2], [2, 5], [5], [6].\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10^5\",\n    \"element_range\": \"0 <= nums[i] <= 10^9\",\n    \"left_right_range\": \"0 <= left <= right <= 10^9\"\n  },\n  \"follow_up\": \"How would the solution change if we were asked to count subarrays where the sum, rather than the maximum, is within a given range?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a string `s` and an array of words, determine how many of the words can be transformed into `s` by extending groups of characters to form groups of size 3 or more."}, {"role": "assistant", "content": "{\n  \"description\": \"In this problem, we are given a string `s` and an array of query strings `words`. A query word is **stretchy** if it can be transformed into the string `s` by applying a specific operation multiple times. The operation allows us to extend groups of adjacent characters in the query string to form groups of size three or more. We need to determine how many of the query words can be made equal to `s` through these operations.\",\n  \"objective\": \"Write a function to determine the number of query words that are stretchy. A query word is stretchy if it can be transformed into `s` by extending groups of characters to form groups of size three or more.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Given a string `s` and an array `words`, we need to check for each query word if it can be extended to match `s` by applying a specific transformation: extend groups of characters in the query word to form groups of at least size 3. The task is to count how many query words are stretchy.\",\n    \"Step 2 - Key Concepts\": \"The problem involves string manipulation, specifically grouping adjacent characters and extending those groups. This is essentially a problem of matching two strings (`s` and a query word) with some flexibility in the character groupings.\",\n    \"Step 3 - Approach\": \"For each query word, we should iterate over both `s` and the query word in parallel, comparing each group of characters. If the character groups in the query word can be extended (repeated) to match the corresponding character groups in `s`, the word is stretchy.\",\n    \"Step 4 - Solution Strategy\": \"We can approach the problem using two pointers, one for `s` and one for the query word. For each pair of characters in both strings, we check if the characters match and if the length of each group of characters can be extended to satisfy the required size condition.\",\n    \"Step 5 - Optimizations\": \"Efficiently iterate through both strings and check the conditions without repeatedly checking the same characters. We need to make sure that once a mismatch occurs between groups, we can immediately discard that query word as non-stretchy.\",\n    \"Step 6 - Final Solution\": \"The final solution will define a helper function to check whether a given query word can be made stretchy and then count the number of stretchy query words by applying this function to each word in the array `words`.\",\n    \"Step 7 - Edge Case Handling\": \"Handle edge cases such as very short strings (`s` or query word length of 1), where no stretching can occur. Also, ensure that all characters in the groups match appropriately.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"heeellooo \",\n        \"words\": [\n          \"hello \",\n          \"hi \",\n          \"helo \"\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"We can extend 'e' and 'o' in the word 'hello' to get 'heeellooo'. The word 'helo' cannot be extended because the group 'll' is not of size 3 or more.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"zzzzzyyyyy \",\n        \"words\": [\n          \"zzyy \",\n          \"zy \",\n          \"zyy \"\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"All three words 'zzyy', 'zy', and 'zyy' can be extended to match 'zzzzzyyyyy'.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_lengths\": {\n      \"s_length\": \"1 <= s.length <= 100\",\n      \"words_length\": \"1 <= words.length <= 100\",\n      \"word_length\": \"1 <= words[i].length <= 100\"\n    },\n    \"characters\": \"s and words[i] consist of lowercase letters.\"\n  },\n  \"follow_up\": \"How would you approach this problem if the constraints were larger, and how could you optimize this solution for performance?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Implement an iterator to return elements from two vectors alternately."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two vectors `v1` and `v2`, implement an iterator `ZigzagIterator` to return their elements alternately. If one vector is exhausted, continue iterating over the remaining elements of the other vector.\",\n  \"objective\": \"Design a class `ZigzagIterator` with methods `hasNext()` and `next()`. Ensure the solution works efficiently for vectors of varying lengths and handles edge cases like empty vectors.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the goal is to return elements alternately from `v1` and `v2`. If one vector is exhausted, continue returning elements from the other vector.\",\n    \"Step 2 - Initialization\": \"Initialize a data structure to store the iterators for `v1` and `v2`. Use a queue or similar structure to manage the alternation between vectors.\",\n    \"Step 3 - Alternation Logic\": \"For each call to `next()`, return the next element from the front vector and move it to the back of the queue if it still has elements. For `hasNext()`, check if any vector still has elements.\",\n    \"Step 4 - Edge Cases\": \"Handle cases where one or both vectors are empty, or where the vectors have different lengths.\",\n    \"Step 5 - Output\": \"Ensure the output order matches the zigzag pattern, and the implementation adheres to the constraints.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"v1\": [\n          1,\n          2\n        ],\n        \"v2\": [\n          3,\n          4,\n          5,\n          6\n        ]\n      },\n      \"output\": [\n        1,\n        3,\n        2,\n        4,\n        5,\n        6\n      ],\n      \"explanation\": \"Alternate elements from `v1` and `v2`. After `v1` is exhausted, continue with remaining elements of `v2`.\"\n    },\n    {\n      \"input\": {\n        \"v1\": [\n          1\n        ],\n        \"v2\": []\n      },\n      \"output\": [\n        1\n      ],\n      \"explanation\": \"Only `v1` has elements, so the output is just the elements of `v1`.\"\n    },\n    {\n      \"input\": {\n        \"v1\": [],\n        \"v2\": [\n          1\n        ]\n      },\n      \"output\": [\n        1\n      ],\n      \"explanation\": \"Only `v2` has elements, so the output is just the elements of `v2`.\"\n    }\n  ],\n  \"constraints\": {\n    \"vector_length\": \"0 <= v1.length, v2.length <= 1000\",\n    \"total_length\": \"1 <= v1.length + v2.length <= 2000\",\n    \"element_range\": \"-2^31 <= v1[i], v2[i] <= 2^31 - 1\"\n  },\n  \"follow_up\": \"Extend the implementation to handle `k` vectors instead of just two. Ensure the solution remains efficient and adheres to the cyclic ordering.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given rectangles and need to check if they cover a region perfectly."}, {"role": "assistant", "content": "{\n  \"title\": \"Check Rectangles for Exact Cover\",\n  \"description\": \"Given an array of axis-aligned rectangles, determine if they perfectly cover a rectangular region without overlaps or gaps.\",\n  \"objective\": \"Verify that all rectangles combine to form a single, non-overlapping rectangular region using mathematical and geometric checks.\",\n  \"input\": {\n    \"parameters\": [\n      {\n        \"name\": \"rectangles\",\n        \"type\": \"array of arrays\",\n        \"description\": \"Each sub-array represents a rectangle `[xi, yi, ai, bi]` where `(xi, yi)` is the bottom-left corner and `(ai, bi)` is the top-right corner.\",\n        \"constraints\": \"1 <= rectangles.length <= 2 * 10^4, -10^5 <= xi, yi, ai, bi <= 10^5\"\n      }\n    ]\n  },\n  \"output\": {\n    \"type\": \"boolean\",\n    \"description\": \"`true` if the rectangles form an exact cover of a rectangular region, `false` otherwise.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"rectangles\": [\n          [\n            1,\n            1,\n            3,\n            3\n          ],\n          [\n            3,\n            1,\n            4,\n            2\n          ],\n          [\n            3,\n            2,\n            4,\n            4\n          ],\n          [\n            1,\n            3,\n            2,\n            4\n          ],\n          [\n            2,\n            3,\n            3,\n            4\n          ]\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The rectangles perfectly form a 3x3 rectangular region.\"\n    },\n    {\n      \"input\": {\n        \"rectangles\": [\n          [\n            1,\n            1,\n            2,\n            3\n          ],\n          [\n            1,\n            3,\n            2,\n            4\n          ],\n          [\n            3,\n            1,\n            4,\n            2\n          ],\n          [\n            3,\n            2,\n            4,\n            4\n          ]\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"There is a gap between the rectangles, so they do not form a single region.\"\n    },\n    {\n      \"input\": {\n        \"rectangles\": [\n          [\n            1,\n            1,\n            3,\n            3\n          ],\n          [\n            3,\n            1,\n            4,\n            2\n          ],\n          [\n            1,\n            3,\n            2,\n            4\n          ],\n          [\n            2,\n            2,\n            4,\n            4\n          ]\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"Two rectangles overlap, so they do not form a perfect cover.\"\n    }\n  ],\n  \"hints\": [\n    \"Compute the total area of all rectangles and verify it matches the area of the bounding rectangle.\",\n    \"Track the four corner points of the bounding rectangle. Ensure that each appears exactly once.\",\n    \"Use a set to track points. Interior points should appear an even number of times.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(n) time complexity by utilizing area calculations and set operations to validate the cover.\",\n    \"constraints\": \"Avoid iterating through all possible grid points or performing brute-force checks for overlaps.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the longest increasing path in a matrix."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `m x n` integer matrix, find the length of the longest increasing path in the matrix. You can move from each cell to its neighbors (up, down, left, right) only if the value of the neighboring cell is greater than the current cell. You cannot move diagonally or outside the matrix boundary.\",\n  \"objective\": \"Design an efficient algorithm to compute the longest path, leveraging memoization or dynamic programming to avoid redundant computations.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Identify the need for a Depth-First Search (DFS) with memoization to explore all paths efficiently, avoiding revisiting cells.\",\n    \"Step 2 - Explore Increasing Paths\": \"For each cell, use DFS to find the longest increasing path starting from that cell, caching results for reuse.\",\n    \"Step 3 - Combine Results\": \"Iterate over all cells to compute the global maximum path length.\",\n    \"Step 4 - Optimize\": \"Ensure the algorithm handles edge cases like single-cell matrices, all-equal matrices, or large matrices up to the constraint limits.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            9,\n            9,\n            4\n          ],\n          [\n            6,\n            6,\n            8\n          ],\n          [\n            2,\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"The longest increasing path is [1, 2, 6, 9].\"\n    },\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            3,\n            4,\n            5\n          ],\n          [\n            3,\n            2,\n            6\n          ],\n          [\n            2,\n            2,\n            1\n          ]\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"The longest increasing path is [3, 4, 5, 6].\"\n    },\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            1\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"A single cell matrix has a path length of 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size\": \"1 <= m, n <= 200\",\n    \"value_range\": \"0 <= matrix[i][j] <= 2^31 - 1\"\n  },\n  \"follow_up\": \"How would your solution handle very large matrices with highly repetitive values? Can you optimize the memory usage further?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Split a list of numbers into ranges."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a sorted unique integer array `nums`, return the smallest sorted list of ranges that cover all numbers in the array exactly.\",\n  \"objective\": \"Generate a list of ranges such that each range `[a, b]` contains consecutive integers, and all ranges are non-overlapping.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Variables\": \"Start tracking ranges using two pointers or variables.\",\n    \"Step 2 - Traverse Array\": \"Iterate through `nums`, identifying consecutive numbers.\",\n    \"Step 3 - Form Ranges\": \"If numbers are not consecutive, finalize the current range and start a new one.\",\n    \"Step 4 - Format Output\": \"Output each range as `\\\"a->b\\\"` if `a != b`, otherwise as `\\\"a\\\"`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          1,\n          2,\n          4,\n          5,\n          7\n        ]\n      },\n      \"output\": [\n        \"0->2\",\n        \"4->5\",\n        \"7\"\n      ],\n      \"explanation\": \"The ranges [0,2], [4,5], and [7] cover all numbers in the array.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          2,\n          3,\n          4,\n          6,\n          8,\n          9\n        ]\n      },\n      \"output\": [\n        \"0\",\n        \"2->4\",\n        \"6\",\n        \"8->9\"\n      ],\n      \"explanation\": \"The ranges [0], [2,4], [6], and [8,9] cover all numbers.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"0 <= nums.length <= 20\",\n    \"value_range\": \"-2^31 <= nums[i] <= 2^31 - 1\",\n    \"uniqueness\": \"All numbers in `nums` are unique and sorted in ascending order.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given a binary string `s`. Flip characters to make the string monotone increasing. Return the number of flips."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a binary string `s`. A binary string is called monotone increasing if it consists of some number of `0`s (possibly none), followed by some number of `1`s (also possibly none). You can flip any character in the string: change a `0` to a `1`, or change a `1` to a `0`. The task is to return the minimum number of flips required to make the string monotone increasing.\",\n  \"objective\": \"Determine the minimum number of flips to make a binary string monotone increasing, where the string should have all `0`s followed by all `1`s, with the least amount of changes.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"We need to ensure that for any `1` in the string, there are no `0`s after it. This means the string should be split into two parts: a sequence of `0`s followed by a sequence of `1`s. The challenge is to figure out how to minimize the number of flips required to achieve this structure.\",\n    \"Step 2 - Key Observations\": \"A flip can change a `0` into a `1` or a `1` into a `0`. Thus, the task boils down to identifying where the string breaks the monotone increasing condition and counting how many flips are needed.\",\n    \"Step 3 - Approach\": \"One approach is to keep track of how many flips are needed to convert all characters to `0` before a certain index and how many flips are needed to convert all characters to `1` after that index. The goal is to minimize the sum of these flips over all possible partition points in the string.\",\n    \"Step 4 - Efficiency Consideration\": \"The time complexity of this solution is O(n), where n is the length of the string, because we need to traverse the string once to calculate the necessary flips for each partition.\",\n    \"Step 5 - Output Format\": \"Return the minimum number of flips required to make the string monotone increasing.\",\n    \"Step 6 - Code Efficiency and Edge Cases\": \"Consider edge cases such as strings that are already monotone increasing, strings with only `0`s or `1`s, and the smallest possible strings.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"00110\"\n      },\n      \"output\": 1,\n      \"explanation\": \"Flipping the last digit gives the string '00111', which is monotone increasing.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"010110\"\n      },\n      \"output\": 2,\n      \"explanation\": \"We can flip to get either '011111' or '000111'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"00011000\"\n      },\n      \"output\": 2,\n      \"explanation\": \"Flipping the `1`s to `0`s gives the string '00000000', which is monotone increasing.\"\n    }\n  ],\n  \"constraints\": {\n    \"s_length\": \"1 <= s.length <= 10^5\",\n    \"character_set\": \"The string `s` consists of only the characters '0' and '1'.\"\n  },\n  \"follow_up\": \"Can you think of an optimization or alternative approach to solve this problem with a space complexity of O(1)?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Design a HashSet using a Binary Search Tree (BST)."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a HashSet without using any built-in hash table libraries, where each bucket is implemented as a Binary Search Tree (BST) to optimize operations.\",\n  \"objective\": \"Implement a HashSet that supports `add`, `contains`, and `remove` operations with efficient lookup and update times using a BST as the underlying structure for buckets.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Define the MyHashSet class, which includes a constructor to initialize the hash set and the required methods `add`, `contains`, and `remove`.\",\n    \"Step 2\": \"Create a Bucket class to represent each bucket in the HashSet. The Bucket class should include methods to check for existence, insert, and delete elements in the BST.\",\n    \"Step 3\": \"Implement the Binary Search Tree (BST) within the Bucket class. Include methods for standard BST operations: search, insert, and delete.\",\n    \"Step 4\": \"Determine the hash function for mapping keys to buckets. Use modulo operation (`key % bucketSize`) to distribute keys across buckets efficiently.\",\n    \"Step 5\": \"In the MyHashSet class, maintain an array of Bucket instances, representing the hash table structure. Ensure each bucket operates independently using the BST implementation.\",\n    \"Step 6\": \"Implement the `add` method to calculate the bucket index using the hash function and insert the key into the corresponding bucket's BST.\",\n    \"Step 7\": \"Implement the `contains` method to check for the existence of a key by searching in the appropriate bucket's BST.\",\n    \"Step 8\": \"Implement the `remove` method to delete a key from the appropriate bucket's BST.\"\n  },\n  \"examples\": [\n    {\n      \"input\": [\n        [\n          \"MyHashSet\",\n          \"add\",\n          \"add\",\n          \"contains\",\n          \"contains\",\n          \"add\",\n          \"contains\",\n          \"remove\",\n          \"contains\"\n        ],\n        [\n          [],\n          [\n            1\n          ],\n          [\n            2\n          ],\n          [\n            1\n          ],\n          [\n            3\n          ],\n          [\n            2\n          ],\n          [\n            2\n          ],\n          [\n            2\n          ],\n          [\n            2\n          ]\n        ]\n      ],\n      \"output\": [\n        null,\n        null,\n        null,\n        true,\n        false,\n        null,\n        true,\n        null,\n        false\n      ],\n      \"explanation\": \"Operations are performed on a HashSet: add(1), add(2), check contains(1), check contains(3), add(2), check contains(2), remove(2), and check contains(2) again.\"\n    }\n  ],\n  \"constraints\": {\n    \"key_range\": \"0 <= key <= 10^6\",\n    \"method_calls\": \"At most 10^4 calls to `add`, `remove`, and `contains`.\"\n  },\n  \"follow_up\": \"Analyze the performance benefits of using a BST for buckets compared to other data structures like linked lists, focusing on the time complexity of search, insert, and delete operations.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Generate a string with `a` 'a's and `b` 'b's without three consecutive identical letters."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two integers `a` and `b`, return any string `s` such that `s` has length `a + b`, contains exactly `a` `'a'` letters, and exactly `b` `'b'` letters. Additionally, the substring `'aaa'` must not occur in `s`, and the substring `'bbb'` must not occur in `s`.\",\n  \"objective\": \"Design an algorithm to generate a valid string `s` that meets the given conditions, avoiding consecutive sequences of three identical characters.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the requirements: The string `s` must have a specific length and character composition, and must avoid consecutive sequences of three identical characters.\",\n    \"Step 2 - Initial Approach\": \"Consider a greedy approach: Build the string character by character, ensuring that neither `'aaa'` nor `'bbb'` can form. Alternate adding 'a' and 'b' based on their counts.\",\n    \"Step 3 - Greedy Algorithm\": \"Use a greedy algorithm to construct the string: If possible, add the character with the higher remaining count, unless it creates an invalid sequence. Adjust the counts accordingly and continue until the string is complete.\",\n    \"Step 4 - Output Format\": \"Ensure the function returns the valid string `s` that meets all conditions. The solution should handle edge cases where `a` or `b` is zero or when one count is significantly larger than the other.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Focus on efficiently constructing the string with a linear time complexity, O(a + b), as each character is added once. Handle edge cases like a = 0 or b = 0 gracefully.\",\n    \"Final Check - Constraints Verification\": \"Verify the solution operates within the constraints: `0 <= a, b <= 100` and guarantee that a valid string exists. Ensure the algorithm is robust and handles all input sizes effectively.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"a\": 1,\n        \"b\": 2\n      },\n      \"output\": \"abb\",\n      \"explanation\": \"Possible valid strings are 'abb', 'bab', and 'bba'. All meet the conditions and avoid 'aaa' and 'bbb'.\"\n    },\n    {\n      \"input\": {\n        \"a\": 4,\n        \"b\": 1\n      },\n      \"output\": \"aabaa\",\n      \"explanation\": \"The string 'aabaa' meets the conditions: it has 4 'a's and 1 'b', and does not contain 'aaa' or 'bbb'.\"\n    }\n  ],\n  \"constraints\": {\n    \"a_b_range\": \"0 <= a, b <= 100\",\n    \"valid_string_exists\": \"It is guaranteed that a valid string exists for the given `a` and `b`.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle even larger values of `a` and `b` efficiently, while maintaining the constraints and ensuring the validity of the string?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Alice and Bob have different candy totals. You need to find two numbers, one from Alice\u2019s boxes and one from Bob\u2019s, that can be exchanged so that they have the same total number of candies."}, {"role": "assistant", "content": "{\n  \"description\": \"Alice and Bob have different total numbers of candies. You are given two integer arrays, `aliceSizes` and `bobSizes`, where each array represents the number of candies in each box that Alice and Bob have, respectively. The goal is to find a pair of candy boxes (one from Alice and one from Bob) to exchange such that after the exchange, both Alice and Bob have the same total amount of candy. Return the candy box pair (Alice's candy box and Bob's candy box) that they must exchange. If multiple valid pairs exist, return any of them.\",\n  \"objective\": \"Design an efficient solution that finds the pair of candy boxes to exchange, ensuring both Alice and Bob end up with equal amounts of candy after the exchange. Optimize the solution given the problem constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The total number of candies Alice and Bob have initially is different. You need to balance their total amounts by swapping one candy box each.\",\n    \"Step 2 - Initial Approach\": \"To solve the problem, consider calculating the sum of candies for both Alice and Bob. Then, find the difference between their totals and determine the boxes to swap using this difference.\",\n    \"Step 3 - Efficient Solution\": \"Use a hashing technique to store the candy counts of Bob\\u2019s boxes and quickly check for potential valid swaps by iterating through Alice\\u2019s candy boxes. This avoids unnecessary nested loops and improves performance.\",\n    \"Step 4 - Output Format\": \"Return the pair of integers: `answer[0]` (candy count from Alice's box) and `answer[1]` (candy count from Bob's box). Ensure this pair is valid according to the problem\\u2019s conditions.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Optimize the solution to handle up to 10^4 boxes efficiently. Ensure that there is no out-of-bounds access and that the solution works for large inputs within the problem's constraints.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution works within the problem constraints and guarantees that a solution will always exist. Ensure the solution is scalable for the maximum input sizes.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"aliceSizes\": [\n          1,\n          1\n        ],\n        \"bobSizes\": [\n          2,\n          2\n        ]\n      },\n      \"output\": [\n        1,\n        2\n      ],\n      \"explanation\": \"Swapping Alice's box with 1 candy and Bob's box with 2 candies will equalize their total candies.\"\n    },\n    {\n      \"input\": {\n        \"aliceSizes\": [\n          1,\n          2\n        ],\n        \"bobSizes\": [\n          2,\n          3\n        ]\n      },\n      \"output\": [\n        1,\n        2\n      ],\n      \"explanation\": \"Swapping Alice's box with 1 candy and Bob's box with 2 candies will make their total candies equal.\"\n    },\n    {\n      \"input\": {\n        \"aliceSizes\": [\n          2\n        ],\n        \"bobSizes\": [\n          1,\n          3\n        ]\n      },\n      \"output\": [\n        2,\n        3\n      ],\n      \"explanation\": \"Swapping Alice's box with 2 candies and Bob's box with 3 candies will balance their total candies.\"\n    }\n  ],\n  \"constraints\": {\n    \"aliceSizes_length\": \"1 <= aliceSizes.length <= 10^4\",\n    \"bobSizes_length\": \"1 <= bobSizes.length <= 10^4\",\n    \"aliceSizes_i\": \"1 <= aliceSizes[i] <= 10^5\",\n    \"bobSizes_j\": \"1 <= bobSizes[j] <= 10^5\"\n  },\n  \"follow_up\": \"Can you further optimize the solution to handle even larger inputs, ensuring that the algorithm performs efficiently in all cases?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the longest substring of the same letter after replacing up to `k` characters."}, {"role": "assistant", "content": "{\n  \"title\": \"Longest Repeating Character Replacement\",\n  \"description\": \"Given a string `s` and an integer `k`, determine the length of the longest substring that contains only one repeating character after replacing at most `k` characters in the string.\",\n  \"objective\": \"Maximize the length of the substring containing the same character after performing up to `k` character replacements.\",\n  \"input\": {\n    \"s\": {\n      \"type\": \"string\",\n      \"description\": \"The input string consisting of only uppercase English letters.\",\n      \"constraints\": \"1 <= s.length <= 10^5\"\n    },\n    \"k\": {\n      \"type\": \"integer\",\n      \"description\": \"The maximum number of character replacement operations allowed.\",\n      \"constraints\": \"0 <= k <= s.length\"\n    }\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The length of the longest substring containing only one repeating character after up to `k` replacements.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"ABAB\",\n        \"k\": 2\n      },\n      \"output\": 4,\n      \"explanation\": \"Replace two 'A's with 'B's or two 'B's with 'A's to form 'BBBB' or 'AAAA'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"AABABBA\",\n        \"k\": 1\n      },\n      \"output\": 4,\n      \"explanation\": \"Replace one 'A' with 'B' to form 'AABBBBA'. The longest repeating substring is 'BBBB' of length 4.\"\n    }\n  ],\n  \"hints\": [\n    \"Use the sliding window technique to efficiently find the longest substring.\",\n    \"Maintain a frequency map of characters in the current window.\",\n    \"At each step, check if the number of replacements needed is within `k` by comparing the length of the window and the count of the most frequent character.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(n) time complexity by leveraging the sliding window approach and constant-time updates to the frequency map.\",\n    \"constraints\": \"Avoid recomputing values unnecessarily or using excessive memory.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Design a stack that supports max operations."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a `MaxStack` data structure that supports efficient stack operations (`push`, `pop`, `top`) and efficient retrieval and removal of the maximum element (`peekMax`, `popMax`).\",\n  \"objective\": \"Implement a `MaxStack` class using a combination of a stack, a max heap, and a lazy update mechanism to efficiently support operations with constraints on time complexity.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Initialize three data structures: a stack to maintain insertion order, a max heap to retrieve the maximum efficiently, and a hash set to track removed elements by their IDs.\",\n    \"Step 2\": \"Define a global counter `cnt` to assign unique IDs to each element during `push`. These IDs will ensure correspondence between the stack and heap.\",\n    \"Step 3\": \"Implement `push(x)`: Add `(value, id)` to both the stack and the heap. Increment the counter `cnt` after each push.\",\n    \"Step 4\": \"Implement `pop()`: Remove the top element of the stack. Mark its `id` as removed in the hash set. Return the value of the popped element.\",\n    \"Step 5\": \"Implement `top()`: Return the value of the top element of the stack. Skip any elements in the stack whose IDs are marked as removed.\",\n    \"Step 6\": \"Implement `peekMax()`: Return the value of the maximum element in the heap. Skip any elements in the heap whose IDs are marked as removed.\",\n    \"Step 7\": \"Implement `popMax()`: Remove the maximum element from the heap. Mark its `id` as removed in the hash set. Return its value. Ensure the stack is updated lazily to maintain consistency.\"\n  },\n  \"examples\": [\n    {\n      \"input\": [\n        \"MaxStack\",\n        \"push\",\n        \"push\",\n        \"push\",\n        \"top\",\n        \"popMax\",\n        \"top\",\n        \"peekMax\",\n        \"pop\",\n        \"top\"\n      ],\n      \"params\": [\n        [],\n        [\n          5\n        ],\n        [\n          1\n        ],\n        [\n          5\n        ],\n        [],\n        [],\n        [],\n        [],\n        [],\n        []\n      ],\n      \"output\": [\n        null,\n        null,\n        null,\n        null,\n        5,\n        5,\n        1,\n        5,\n        1,\n        5\n      ],\n      \"explanation\": \"Demonstrates maintaining max element efficiently while supporting stack operations and handling lazy updates after removals.\"\n    },\n    {\n      \"input\": [\n        \"MaxStack\",\n        \"push\",\n        \"push\",\n        \"popMax\",\n        \"push\",\n        \"peekMax\"\n      ],\n      \"params\": [\n        [],\n        [\n          3\n        ],\n        [\n          4\n        ],\n        [],\n        [\n          2\n        ],\n        []\n      ],\n      \"output\": [\n        null,\n        null,\n        null,\n        4,\n        null,\n        3\n      ],\n      \"explanation\": \"Illustrates handling of push, retrieval, and removal of maximum elements.\"\n    }\n  ],\n  \"constraints\": {\n    \"range_of_x\": \"-10^7 <= x <= 10^7\",\n    \"max_operations\": \"At most 10^5 calls to `push`, `pop`, `top`, `peekMax`, and `popMax`.\",\n    \"valid_state\": \"There will always be at least one element in the stack when `pop`, `top`, `peekMax`, or `popMax` is called.\"\n  },\n  \"follow_up\": \"Discuss the trade-offs of maintaining consistency using lazy updates in the heap and stack, especially in scenarios with high-frequency `popMax` calls. Explore alternatives to optimize space and time complexity further.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find all combinations of k numbers that add to n."}, {"role": "assistant", "content": "{\n  \"description\": \"Find all unique combinations of `k` numbers that sum up to `n` using numbers between 1 and 9, with each number used at most once.\",\n  \"objective\": \"Generate a backtracking solution to efficiently explore all valid combinations and ensure no duplicate results.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Understand that we need to choose `k` distinct numbers from 1 to 9 that sum to `n`.\",\n    \"Step 2 - Design Backtracking Algorithm\": \"Use a recursive function to explore all possible combinations. Track the current combination, remaining sum, and remaining numbers.\",\n    \"Step 3 - Prune Invalid Paths\": \"Terminate early if the sum exceeds `n` or the combination length exceeds `k`.\",\n    \"Step 4 - Generate Results\": \"Store combinations only when their length is exactly `k` and their sum equals `n`.\",\n    \"Step 5 - Return Results\": \"Return all valid combinations, ensuring no duplicates.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"k\": 3,\n        \"n\": 7\n      },\n      \"output\": [\n        [\n          1,\n          2,\n          4\n        ]\n      ],\n      \"explanation\": \"The only valid combination of 3 numbers that sum to 7 is [1, 2, 4].\"\n    },\n    {\n      \"input\": {\n        \"k\": 3,\n        \"n\": 9\n      },\n      \"output\": [\n        [\n          1,\n          2,\n          6\n        ],\n        [\n          1,\n          3,\n          5\n        ],\n        [\n          2,\n          3,\n          4\n        ]\n      ],\n      \"explanation\": \"The valid combinations are [1, 2, 6], [1, 3, 5], and [2, 3, 4].\"\n    },\n    {\n      \"input\": {\n        \"k\": 4,\n        \"n\": 1\n      },\n      \"output\": [],\n      \"explanation\": \"It is impossible to choose 4 distinct numbers that sum to 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"number_count\": \"2 <= k <= 9\",\n    \"sum_range\": \"1 <= n <= 60\"\n  },\n  \"follow_up\": \"How can you optimize the backtracking algorithm to reduce the number of recursive calls for larger values of `n`?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given a binary matrix, and you can toggle rows and columns. The task is to maximize the sum of the numbers in the matrix."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an `m x n` binary matrix `grid`. A move consists of choosing any row or column and toggling the values (changing `0`s to `1`s and `1`s to `0`s). The task is to maximize the score of the matrix, where the score is the sum of the binary numbers represented by each row. The solution should return the highest possible score after making any number of moves.\",\n  \"objective\": \"Maximize the score of the matrix by toggling rows or columns. The score is the sum of the binary values of each row.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Each row in the matrix represents a binary number. The goal is to maximize the sum of these binary numbers after performing zero or more toggle operations. A toggle operation on a row or column changes all values in that row or column from `0` to `1` and vice versa.\",\n    \"Step 2 - Initial Approach\": \"Start by considering that each row is a binary number, and the objective is to maximize the sum of these binary numbers. We can toggle rows or columns, but we need to decide how to do this to maximize the sum.\",\n    \"Step 3 - Algorithmic Approach\": \"1. For each row, toggle the row if it results in a higher binary value (i.e., if the leftmost bit is `0`, toggle the row to make it `1`). 2. For each column, check if flipping it (inverting all its bits) would increase the overall score. 3. After toggling the rows and columns, compute the sum of the binary values of each row to get the final score.\",\n    \"Step 4 - Output Format\": \"Return the highest possible score after performing the optimal sequence of moves.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure that the solution works efficiently even with the upper constraint of 20 rows and 20 columns. Consider edge cases where the matrix is already optimal and no moves are required.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            0,\n            0,\n            1,\n            1\n          ],\n          [\n            1,\n            0,\n            1,\n            0\n          ],\n          [\n            1,\n            1,\n            0,\n            0\n          ]\n        ]\n      },\n      \"output\": 39,\n      \"explanation\": \"After toggling the rows and columns, the binary numbers in the rows become [1111, 1001, 1111], giving a sum of 15 + 9 + 15 = 39.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            0\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The only possible score is 1, as the only cell is a 0 and flipping it makes it 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size\": \"1 <= m, n <= 20\",\n    \"binary_values\": \"Each cell is either 0 or 1.\"\n  },\n  \"follow_up\": \"Can you optimize the solution further for larger matrices? Consider how the toggling of columns and rows can be done efficiently.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if there are duplicates in an array."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if an array contains any duplicate elements.\",\n  \"objective\": \"Implement an efficient solution to check for duplicates in the array, optimizing for both time and space.\",\n  \"meta_prompt\": {\n    \"Step 1 - Input Validation\": \"Ensure the input array is non-empty and falls within the specified length and value constraints.\",\n    \"Step 2 - Approach Selection\": \"Use a hash set to efficiently check for duplicates, iterating through the array.\",\n    \"Step 3 - Optimization\": \"Consider alternate approaches, such as sorting, for specific use cases where memory usage is critical.\",\n    \"Step 4 - Return Result\": \"Return `true` if any duplicates are found; otherwise, return `false`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          1\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The number 1 appears twice in the array.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          4\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"All elements in the array are distinct.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          1,\n          1,\n          3,\n          3,\n          4,\n          3,\n          2,\n          4,\n          2\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"There are multiple duplicates in the array.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10^5\",\n    \"value_range\": \"-10^9 <= nums[i] <= 10^9\"\n  },\n  \"follow_up\": \"How can you modify the solution to handle a stream of integers where the input size is unknown or too large to store in memory?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Determine if you can win the Nim Game with `n` stones."}, {"role": "assistant", "content": "{\n  \"description\": \"Solve the Nim Game where you and your friend take turns removing 1 to 3 stones from a heap of `n` stones. You win if you remove the last stone. Return `true` if you can guarantee a win assuming both players play optimally, otherwise return `false`.\",\n  \"objective\": \"Design an efficient algorithm to determine if the player who goes first can always win based on the number of stones `n`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Observe the winning and losing positions:\\n- If `n % 4 == 0`, the first player will always lose if both play optimally.\\n- If `n % 4 != 0`, the first player can always win by leaving a multiple of 4 stones for the opponent.\",\n    \"Step 2 - Mathematical Observation\": \"Reduce the problem to modulo arithmetic:\\n- When `n % 4 == 0`, the opponent can always leave you a multiple of 4.\\n- Otherwise, you can force the opponent into a losing position.\",\n    \"Step 3 - Implementation\": \"Use the modulo operator to determine the outcome in constant time.\",\n    \"Step 4 - Edge Cases\": \"Handle small values of `n` like 1, 2, or 3 where the first player always wins.\",\n    \"Step 5 - Output\": \"Return `true` if the first player can guarantee a win; otherwise, return `false`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 4\n      },\n      \"output\": false,\n      \"explanation\": \"The first player cannot avoid leaving a multiple of 4 for the opponent, so they lose.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1\n      },\n      \"output\": true,\n      \"explanation\": \"The first player removes the last stone and wins.\"\n    },\n    {\n      \"input\": {\n        \"n\": 7\n      },\n      \"output\": true,\n      \"explanation\": \"The first player can remove 3 stones, leaving 4 for the opponent, ensuring a win.\"\n    }\n  ],\n  \"constraints\": {\n    \"stone_count\": \"1 <= n <= 2^31 - 1\",\n    \"optimal_play\": \"Both players must play optimally.\"\n  },\n  \"follow_up\": \"Can you extend the solution to handle cases where the maximum number of stones that can be removed on a turn is a variable (not fixed at 3)?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if the abbreviation of a word matches the given abbreviation string."}, {"role": "assistant", "content": "{\n  \"title\": \"Verify String Abbreviation\",\n  \"description\": \"Determine if a given string `word` matches the abbreviation `abbr`. A valid abbreviation can replace non-adjacent, non-empty substrings of `word` with their lengths, and lengths must not have leading zeros.\",\n  \"input\": {\n    \"name\": \"word_abbr\",\n    \"type\": \"object\",\n    \"fields\": [\n      {\n        \"name\": \"word\",\n        \"type\": \"string\",\n        \"description\": \"The original string to verify against.\",\n        \"constraints\": \"1 <= word.length <= 20, consists of lowercase English letters.\"\n      },\n      {\n        \"name\": \"abbr\",\n        \"type\": \"string\",\n        \"description\": \"The abbreviation to validate.\",\n        \"constraints\": \"1 <= abbr.length <= 10, consists of lowercase letters and digits.\"\n      }\n    ]\n  },\n  \"output\": {\n    \"type\": \"boolean\",\n    \"description\": \"`true` if `abbr` is a valid abbreviation for `word`, `false` otherwise.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"word\": \"internationalization\",\n        \"abbr\": \"i12iz4n\"\n      },\n      \"output\": true,\n      \"explanation\": \"The abbreviation 'i12iz4n' matches 'internationalization'.\"\n    },\n    {\n      \"input\": {\n        \"word\": \"apple\",\n        \"abbr\": \"a2e\"\n      },\n      \"output\": false,\n      \"explanation\": \"The abbreviation 'a2e' does not match 'apple'.\"\n    },\n    {\n      \"input\": {\n        \"word\": \"substitution\",\n        \"abbr\": \"s10n\"\n      },\n      \"output\": true,\n      \"explanation\": \"The abbreviation 's10n' matches 'substitution'.\"\n    }\n  ],\n  \"hints\": [\n    \"Iterate through `word` and `abbr` simultaneously, verifying that characters and counts match.\",\n    \"Handle cases where digits in `abbr` are used to skip characters in `word`.\",\n    \"Ensure that numbers in `abbr` do not start with leading zeros.\"\n  ],\n  \"constraints\": {\n    \"goal\": \"Verify the abbreviation in O(word.length + abbr.length) time complexity.\",\n    \"avoid\": \"Avoid explicitly generating substrings or manipulating `word` for validation.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a parentheses string 's', figure out how many moves it takes to make it valid by inserting parentheses."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a parentheses string 's'. A string is valid if: it is empty, it can be written as 'AB' where both 'A' and 'B' are valid strings, or it can be written as '(A)' where 'A' is a valid string. Your task is to determine the minimum number of moves required to make 's' valid by inserting parentheses. A move consists of inserting either an opening or closing parenthesis at any position in the string.\",\n  \"objective\": \"Design an algorithm that computes the minimum number of insertions required to make the given parentheses string valid. The solution should focus on minimizing the number of insertions needed while considering valid parentheses rules.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The string must adhere to valid parentheses rules, meaning that each opening parenthesis must have a corresponding closing parenthesis, and the sequence must be properly nested. The string may need insertions of both opening and closing parentheses to make it valid.\",\n    \"Step 2 - Initial Approach\": \"An initial approach could involve scanning through the string while maintaining a count of unmatched opening and closing parentheses. If there is an unmatched closing parenthesis, an opening parenthesis needs to be added, and vice versa for unmatched opening parentheses.\",\n    \"Step 3 - Efficient Solution Approach\": \"Use a counter for unmatched opening parentheses. As you iterate through the string, for every closing parenthesis that doesn't have a matching opening parenthesis, increment the counter for required insertions. At the end, add any unmatched opening parentheses by inserting closing ones.\",\n    \"Step 4 - Output Format\": \"The output should be the minimum number of insertions required to balance the string. This value should be returned as an integer.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Write the algorithm to run in O(n) time complexity, where n is the length of the string, ensuring that it scales efficiently with the input size. Consider edge cases such as strings with no parentheses or strings that are already valid.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the code handles strings of length up to 1000, as specified by the problem's constraints, and that it works efficiently even with the maximum input size.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"())\"\n      },\n      \"output\": 1,\n      \"explanation\": \"One move is needed: insert an opening parenthesis at the beginning to balance the closing parenthesis.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"((( \"\n      },\n      \"output\": 3,\n      \"explanation\": \"Three moves are needed: insert three closing parentheses to balance the opening parentheses.\"\n    }\n  ],\n  \"constraints\": {\n    \"s_length\": \"1 <= s.length <= 1000\",\n    \"s_elements_range\": \"s[i] is either '(' or ')'\"\n  },\n  \"follow_up\": \"Can you improve the algorithm to handle larger strings or optimize the space complexity further?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if the path crosses itself."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an array `distance` that represents movement directions in a counter-clockwise sequence on an X-Y plane. Determine if the path crosses itself at any point. The path crosses itself if it touches or intersects a previously traveled segment.\",\n  \"objective\": \"Return `true` if the path crosses itself and `false` otherwise.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Recognize that the problem involves simulating a movement pattern on a plane and detecting path intersections based on the counter-clockwise movement.\",\n    \"Step 2 - Directional Tracking\": \"Analyze the movement in four directions: north, west, south, and east, with the movement cycling counter-clockwise.\",\n    \"Step 3 - Intersection Detection\": \"Identify conditions where the path crosses itself, such as overlaps, intersections, or re-tracing.\",\n    \"Step 4 - Efficient Algorithm Design\": \"Ensure the solution has O(n) time complexity by iterating through `distance` and using conditions to check for intersections. Avoid redundant checks or expensive computations.\",\n    \"Step 5 - Edge Cases\": \"Consider edge cases such as small arrays, paths with no turns, and paths that form a tight loop.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"distance\": [\n          2,\n          1,\n          1,\n          2\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The path crosses itself at point (0, 1).\"\n    },\n    {\n      \"input\": {\n        \"distance\": [\n          1,\n          2,\n          3,\n          4\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The path does not intersect itself.\"\n    },\n    {\n      \"input\": {\n        \"distance\": [\n          1,\n          1,\n          1,\n          2,\n          1\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The path loops back to the starting point at (0, 0).\"\n    }\n  ],\n  \"constraints\": {\n    \"distance_length\": \"1 <= distance.length <= 10^5\",\n    \"distance_values\": \"1 <= distance[i] <= 10^5\"\n  },\n  \"follow_up\": \"Optimize the algorithm to work efficiently for large inputs by ensuring O(n) complexity using only necessary comparisons and early termination when a crossing is detected.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number of derangements for a given integer n."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `n`, compute the number of derangements (permutations where no element appears in its original position) for an array of integers from `1` to `n`. Return the result modulo `10^9 + 7`.\",\n  \"objective\": \"Efficiently calculate the number of derangements using dynamic programming, leveraging the recursive formula.\",\n  \"meta_prompt\": {\n    \"Step 1 - Define Base Cases\": \"Initialize `dp[0] = 1` and `dp[1] = 0`, as there are no valid derangements for an empty array and exactly one element.\",\n    \"Step 2 - Apply Recurrence Relation\": \"Use the formula `dp[i] = (i - 1) * (dp[i - 1] + dp[i - 2])` to iteratively compute derangements up to `n`.\",\n    \"Step 3 - Return Result Modulo 10^9 + 7\": \"Ensure all computations are performed modulo `10^9 + 7` to prevent overflow and meet constraints.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 3\n      },\n      \"output\": 2,\n      \"explanation\": \"For n = 3, the valid derangements are `[2, 3, 1]` and `[3, 1, 2]`.\"\n    },\n    {\n      \"input\": {\n        \"n\": 2\n      },\n      \"output\": 1,\n      \"explanation\": \"For n = 2, the only valid derangement is `[2, 1]`.\"\n    }\n  ],\n  \"constraints\": {\n    \"value_range\": \"1 <= n <= 10^6\"\n  },\n  \"follow_up\": \"Discuss space optimization by using only two variables to store intermediate results instead of a full DP array.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create a list representing the boundary of a binary tree. Include the root, left boundary, leaves, and right boundary in the order specified. Avoid duplicates."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of a binary tree, construct the boundary of the tree in a specific order. The boundary includes the root, left boundary, leaves from left to right, and the reverse of the right boundary. The tree\\u2019s boundary order excludes duplicate nodes, and each section follows unique rules for node inclusion based on the tree\\u2019s structure.\",\n  \"objective\": \"Implement an efficient traversal solution that determines each boundary type (root, left, right, and leaves) using preorder traversal and flags to categorize each node as a left boundary, right boundary, leaf, or internal node, and return the boundary as a list.\",\n  \"meta_prompt\": {\n    \"Step 1 - Categorize Node Types\": \"Define a helper function that categorizes nodes into the root, left boundary, right boundary, or leaf based on the parent node and its position (left or right child). Each child receives a flag based on the type of boundary it falls under, guiding its placement in the final result.\",\n    \"Step 2 - Traverse Tree with Preorder Traversal\": \"Perform a preorder traversal on the tree, classifying each node based on the flag passed by its parent. For each node, assign it to one of three lists (left boundary, right boundary, leaves) based on its flag and position in the tree.\",\n    \"Step 3 - Populate Left and Right Boundaries\": \"For each node flagged as left or right boundary, add it to its respective list. Exclude any leaf nodes from boundary lists to avoid duplicates. Construct the left boundary first, followed by leaves, and finally the reversed right boundary to complete the boundary traversal.\",\n    \"Step 4 - Collect and Return Boundary\": \"Combine the root node, left boundary, leaf nodes, and reversed right boundary into a single list in the specified order, ensuring the correct boundary format without duplicates.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution handles trees with various structures, including skewed and balanced trees, and adheres to constraints with `1 <= nodes <= 10^4`. Confirm that nodes with unique values meet the expected order and structure.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          null,\n          2,\n          3,\n          4\n        ]\n      },\n      \"output\": [\n        1,\n        3,\n        4,\n        2\n      ],\n      \"explanation\": \"The tree has no left boundary since the root has no left child. The right boundary is [2] with leaves [3,4], producing [1,3,4,2].\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          null,\n          null,\n          null,\n          7,\n          8,\n          9,\n          10\n        ]\n      },\n      \"output\": [\n        1,\n        2,\n        4,\n        7,\n        8,\n        9,\n        10,\n        6,\n        3\n      ],\n      \"explanation\": \"Left boundary is [2,4], leaves are [7,8,9,10], and right boundary in reverse is [6,3]. The output combines them to [1,2,4,7,8,9,10,6,3].\"\n    }\n  ],\n  \"constraints\": {\n    \"tree_size\": \"1 <= nodes <= 10^4\",\n    \"node_values\": \"-1000 <= Node.val <= 1000, all unique values\"\n  },\n  \"follow_up\": \"Explore methods to optimize tree traversal and boundary collection for deeper or unbalanced trees, including iterative traversal or constant space solutions.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum possible score by splitting a list into some sublists."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array nums and an integer k, partition the array into at most k non-empty adjacent subarrays to maximize the score. The score of a partition is defined as the sum of the averages of each subarray. You must use every integer in nums in the partition, and the maximum score should be returned as a floating-point number rounded to six decimal places. Answers within 10^-6 of the actual answer are acceptable.\",\n  \"objective\": \"Design an algorithm to compute the maximum possible score for all valid partitions of the array, where each score is the sum of subarray averages. Aim for an efficient approach that avoids brute-force partitioning.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the input: nums is an array of integers, and k is the maximum number of non-empty adjacent subarrays allowed in any partition. The objective is to find the partition with the highest score based on the sum of each subarray's average.\",\n    \"Step 2 - Approach Selection with Dynamic Programming\": \"Consider using dynamic programming to solve this optimization problem. Define a dp array where dp[i][j] represents the maximum score achievable with j partitions using the first i elements of nums. Build up the solution by exploring subarray partitions and maximizing scores iteratively.\",\n    \"Step 3 - Implementing DP Transitions\": \"For each position i in nums, calculate the maximum score by examining possible subarray sums ending at i. Use prefix sums to efficiently calculate averages for subarrays, updating dp values based on previously computed partitions.\",\n    \"Step 4 - Output Format\": \"Return the maximum score rounded to six decimal places, which will be the value at dp[n][k] where n is the length of nums.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure efficiency with a time complexity of O(n*k) by using prefix sums and avoiding recalculations. Handle edge cases such as minimal input size (nums with one element) and when k equals nums.length (every element in its own partition).\",\n    \"Final Check - Constraints Verification\": \"Confirm the solution handles constraints, with nums.length up to 100 and values up to 10^4, ensuring that dp computations and precision are managed effectively.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          9,\n          1,\n          2,\n          3,\n          9\n        ],\n        \"k\": 3\n      },\n      \"output\": 20.0,\n      \"explanation\": \"Partitioning nums into [9], [1, 2, 3], [9] yields the highest score of 20.00000.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7\n        ],\n        \"k\": 4\n      },\n      \"output\": 20.5,\n      \"explanation\": \"Partitioning nums optimally into 4 subarrays results in the maximum score of 20.50000.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 100\",\n    \"nums_elements_range\": \"1 <= nums[i] <= 10^4\",\n    \"k_range\": \"1 <= k <= nums.length\"\n  },\n  \"follow_up\": \"Can you optimize the space complexity of the algorithm by minimizing storage in the dp table and using only necessary previous states?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a number can be written as the sum of two squares."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a non-negative integer `c`, determine if there exist two integers `a` and `b` such that `a^2 + b^2 = c`. Use Fermat's theorem for efficient computation.\",\n  \"objective\": \"Evaluate the sum-of-two-squares condition by checking the prime factorization of `c`, ensuring primes of the form `(4k + 3)` occur an even number of times.\",\n  \"meta_prompt\": {\n    \"Step 1 - Prime Factorization\": \"Iteratively divide `c` by its prime factors, keeping track of their counts.\",\n    \"Step 2 - Check (4k + 3) Primes\": \"Verify that all primes of the form `(4k + 3)` in the factorization occur an even number of times.\",\n    \"Step 3 - Handle Special Cases\": \"If `c` is itself a prime, check if it is of the form `(4k + 3)`. If true, return `false`. Otherwise, return `true`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"c\": 5\n      },\n      \"output\": true,\n      \"explanation\": \"The number 5 can be expressed as `1^2 + 2^2`.\"\n    },\n    {\n      \"input\": {\n        \"c\": 3\n      },\n      \"output\": false,\n      \"explanation\": \"The number 3 is a prime of the form `(4k + 3)` and cannot be expressed as the sum of two squares.\"\n    }\n  ],\n  \"constraints\": {\n    \"value_range\": \"0 <= c <= 2^31 - 1\"\n  },\n  \"follow_up\": \"Discuss computational optimizations for large `c`, including methods to check primality efficiently and handle edge cases for very large integers.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given an array of people sitting in a row, return the minimum number of swaps needed to make sure couples sit together."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `row` representing `2n` seats arranged in a row, where each couple (represented by a pair of consecutive integers) is seated in a row, return the minimum number of swaps needed so that each couple is sitting side by side. A swap consists of choosing two people, having them stand up, and switching seats.\",\n  \"objective\": \"Find the minimum number of swaps needed to make sure that every couple is sitting next to each other.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We need to identify how to rearrange the given seating arrangement of couples so that each couple sits together. The task is to minimize the number of swaps, which involve exchanging the positions of two people in the row.\",\n    \"Step 2 - Strategy\": \"We will track the position of each person and aim to move each person to the correct position using the minimum number of swaps. A person from each couple can only sit next to their partner, so we need to carefully arrange the people in the correct order.\",\n    \"Step 3 - Approach\": \"Start from the leftmost seat and identify when a couple is not seated together. For each person in a couple that is not seated next to their partner, find the partner and swap until they sit together. This process should be repeated for all couples.\",\n    \"Step 4 - Efficient Solution Approach\": \"A greedy approach will work here: repeatedly find the person from a couple who is out of place and swap them with the correct partner. The number of swaps is the total count of such operations.\",\n    \"Step 5 - Edge Cases\": \"The row may already have all couples seated together. If so, the output will be `0`. The size of the row will always be even, and there will be no duplicates.\",\n    \"Step 6 - Output Explanation\": \"Return the total number of swaps needed to rearrange the seating arrangement so that each couple is sitting together.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"row\": [\n          0,\n          2,\n          1,\n          3\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"In this case, we need to swap the second and third person, so the final arrangement is [0, 1, 2, 3].\"\n    },\n    {\n      \"input\": {\n        \"row\": [\n          3,\n          2,\n          0,\n          1\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"All couples are already sitting next to each other, so no swaps are needed.\"\n    }\n  ],\n  \"constraints\": {\n    \"n\": \"2 <= n <= 30\",\n    \"row_length\": \"2n == row.length\",\n    \"unique_ids\": \"0 <= row[i] < 2n\",\n    \"even_n\": \"n is even\"\n  },\n  \"follow_up\": \"How would you optimize this solution if the number of people and the number of swaps were significantly larger?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the largest rectangle area in a histogram given an array of bar heights."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of integers `heights` representing the histogram's bar heights (with a width of 1 for each bar), find the area of the largest rectangle that can be formed in the histogram.\",\n  \"objective\": \"Design an efficient algorithm using a stack-based approach to compute the largest rectangle area in O(n) time complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves finding the largest rectangle that can be formed in a histogram by combining consecutive bars. The problem can be solved efficiently using a stack to track the heights and their indices.\",\n    \"Step 2 - Stack-Based Solution\": \"Use a monotonic stack to store indices of histogram bars in non-decreasing height order. For each bar, compute the maximum possible rectangle area using the height of the bar at the top of the stack.\",\n    \"Step 3 - Algorithm Steps\": [\n      \"1. Append a zero-height bar to `heights` to ensure all rectangles are processed.\",\n      \"2. Iterate through the `heights` array.\",\n      \"3. While the current bar is smaller than the bar at the top of the stack, calculate the area using the height of the bar at the top of the stack and the width determined by the indices in the stack.\",\n      \"4. Push the current bar's index onto the stack.\",\n      \"5. Return the maximum area.\"\n    ],\n    \"Step 4 - Constraints Compliance\": \"Ensure the algorithm handles constraints such as `1 <= heights.length <= 10^5` and `0 <= heights[i] <= 10^4` efficiently.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider edge cases such as an array with all bars of equal height, an array with a single bar, or an array where all bars have height 0.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"heights\": [\n          2,\n          1,\n          5,\n          6,\n          2,\n          3\n        ]\n      },\n      \"output\": 10,\n      \"explanation\": \"The largest rectangle is formed using the bars with heights 5 and 6, with an area of 10.\"\n    },\n    {\n      \"input\": {\n        \"heights\": [\n          2,\n          4\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"The largest rectangle is formed using the single bar with height 4.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= heights.length <= 10^5\",\n    \"bar_height_range\": \"0 <= heights[i] <= 10^4\",\n    \"time_complexity\": \"The solution must run in O(n) time.\"\n  },\n  \"follow_up\": \"Can you modify the algorithm to handle histograms represented in a compressed format to reduce memory usage?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Add two linked lists together and return the result."}, {"role": "assistant", "content": "{\n  \"title\": \"Add Two Numbers (Linked List, Most Significant Digit First)\",\n  \"description\": \"You are given two non-empty linked lists `l1` and `l2`, where each node represents a digit of a non-negative integer. The digits are stored in **most significant digit first** order, and each linked list does not contain leading zeros except for the number `0` itself.\\n\\nReturn the sum of the two numbers as a linked list, also in **most significant digit first** order.\",\n  \"input\": {\n    \"l1\": {\n      \"type\": \"linked list\",\n      \"description\": \"A linked list where each node contains a single digit of a non-negative integer, ordered from most significant to least significant.\",\n      \"constraints\": {\n        \"length\": \"[1, 100]\",\n        \"Node.val\": \"[0, 9]\"\n      }\n    },\n    \"l2\": {\n      \"type\": \"linked list\",\n      \"description\": \"A linked list where each node contains a single digit of a non-negative integer, ordered from most significant to least significant.\",\n      \"constraints\": {\n        \"length\": \"[1, 100]\",\n        \"Node.val\": \"[0, 9]\"\n      }\n    }\n  },\n  \"output\": {\n    \"type\": \"linked list\",\n    \"description\": \"A linked list representing the sum of the two numbers, ordered from most significant to least significant digit.\",\n    \"constraints\": {\n      \"Node.val\": \"[0, 9]\"\n    }\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"l1\": [\n          7,\n          2,\n          4,\n          3\n        ],\n        \"l2\": [\n          5,\n          6,\n          4\n        ]\n      },\n      \"output\": [\n        7,\n        8,\n        0,\n        7\n      ],\n      \"explanation\": \"7243 + 564 = 7807, represented as [7, 8, 0, 7].\"\n    },\n    {\n      \"input\": {\n        \"l1\": [\n          2,\n          4,\n          3\n        ],\n        \"l2\": [\n          5,\n          6,\n          4\n        ]\n      },\n      \"output\": [\n        8,\n        0,\n        7\n      ],\n      \"explanation\": \"243 + 564 = 807, represented as [8, 0, 7].\"\n    },\n    {\n      \"input\": {\n        \"l1\": [\n          0\n        ],\n        \"l2\": [\n          0\n        ]\n      },\n      \"output\": [\n        0\n      ],\n      \"explanation\": \"0 + 0 = 0.\"\n    }\n  ],\n  \"hints\": [\n    \"Consider how to handle carries when adding digits.\",\n    \"Reversing the linked lists simplifies addition but violates the constraint not to reverse the input lists. Use a stack to simulate reversal.\",\n    \"Handle cases where one list is longer than the other by aligning their lengths with leading zeros.\"\n  ],\n  \"follow_up\": {\n    \"goal\": \"Solve the problem without reversing the input lists.\",\n    \"suggestion\": \"Use stacks or recursion to handle digits in the correct order.\"\n  },\n  \"optimization\": {\n    \"goal\": \"Achieve O(max(m, n)) time complexity and O(max(m, n)) space complexity.\",\n    \"m\": \"Length of l1\",\n    \"n\": \"Length of l2\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Update an array with queries and return the sum of even numbers after each update."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an integer array `nums` and an array `queries` where `queries[i] = [vali, indexi]`. For each query `i`, first, apply `nums[indexi] = nums[indexi] + vali`, then print the sum of the even values of `nums`. Return an integer array `answer` where `answer[i]` is the answer to the `ith` query.\",\n  \"objective\": \"Design an efficient algorithm to handle updates to the array `nums` based on the queries and calculate the sum of even values after each update.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the task: For each query, update the specified index in `nums` and calculate the sum of even numbers in the updated array.\",\n    \"Step 2 - Initial Approach\": \"Consider a brute force approach: For each query, update the array and recalculate the sum of even numbers by iterating through the entire array. However, this may not be efficient for large inputs.\",\n    \"Step 3 - Optimized Approach with State Tracking\": \"To improve efficiency, maintain the current sum of even numbers. For each query, update the relevant index in `nums`, adjust the sum based on whether the value at that index becomes even or odd, and update the current sum accordingly.\",\n    \"Step 4 - Output Format\": \"Ensure the function returns the array `answer` containing the sum of even values after each query.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Focus on minimizing the time complexity, ideally achieving O(n + m), where `n` is the length of `nums` and `m` is the number of queries. Handle edge cases such as negative values, zeros, and updates that do not change the parity of a number.\",\n    \"Final Check - Constraints Verification\": \"Verify the solution operates within the constraints: `1 <= nums.length <= 10^4`, `-10^4 <= nums[i] <= 10^4`, `1 <= queries.length <= 10^4`, `-10^4 <= vali <= 10^4`, and `0 <= indexi < nums.length`. Ensure the algorithm is robust and handles large inputs efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          4\n        ],\n        \"queries\": [\n          [\n            1,\n            0\n          ],\n          [\n            -3,\n            1\n          ],\n          [\n            -4,\n            0\n          ],\n          [\n            2,\n            3\n          ]\n        ]\n      },\n      \"output\": [\n        8,\n        6,\n        2,\n        4\n      ],\n      \"explanation\": \"Initially, nums = [1, 2, 3, 4]. After each query, the array is updated and the sum of even values is calculated: After [1, 0], nums = [2, 2, 3, 4], sum = 8. After [-3, 1], nums = [2, -1, 3, 4], sum = 6. After [-4, 0], nums = [-2, -1, 3, 4], sum = 2. After [2, 3], nums = [-2, -1, 3, 6], sum = 4.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1\n        ],\n        \"queries\": [\n          [\n            4,\n            0\n          ]\n        ]\n      },\n      \"output\": [\n        0\n      ],\n      \"explanation\": \"Initially, nums = [1]. After the query, nums = [5], and since there are no even values, the sum is 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 10^4\",\n    \"nums_range\": \"-10^4 <= nums[i] <= 10^4\",\n    \"queries_length\": \"1 <= queries.length <= 10^4\",\n    \"queries_range\": \"-10^4 <= vali <= 10^4\",\n    \"index_range\": \"0 <= indexi < nums.length\"\n  },\n  \"follow_up\": \"Can you further optimize the solution to handle even larger values or more frequent updates efficiently while maintaining the constraints and ensuring the correctness of the sum calculation?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the value in a binary search tree closest to a given target."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of a binary search tree (BST) and a `target` value, find the value in the BST that is closest to the `target`. If multiple values are equally close, return the smallest of them.\",\n  \"objective\": \"Design an efficient algorithm to traverse the BST and find the closest value to the `target`. Leverage the properties of the BST for an optimized search.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the BST property allows you to navigate the tree efficiently: left nodes are smaller, and right nodes are larger. Use this property to reduce unnecessary checks.\",\n    \"Step 2 - Iterative Approach\": \"Traverse the BST iteratively, maintaining a variable for the closest value found so far. Compare the current node's value with the target to decide whether to traverse left or right.\",\n    \"Step 3 - Tie-Breaker for Multiple Closest Values\": \"When multiple values are equally close to the target, choose the smallest value. This can be checked during traversal.\",\n    \"Step 4 - Edge Cases\": \"Handle cases such as a single-node tree (return the root value) and when the target value is outside the range of all node values.\",\n    \"Step 5 - Output\": \"Return the closest value as an integer.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          4,\n          2,\n          5,\n          1,\n          3\n        ],\n        \"target\": 3.714286\n      },\n      \"output\": 4,\n      \"explanation\": \"The values in the BST are {1, 2, 3, 4, 5}. The closest value to 3.714286 is 4.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1\n        ],\n        \"target\": 4.428571\n      },\n      \"output\": 1,\n      \"explanation\": \"The BST has only one node, so the closest value is 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"tree_size\": \"1 <= number of nodes <= 10^4\",\n    \"node_value_range\": \"0 <= Node.val <= 10^9\",\n    \"target_range\": \"-10^9 <= target <= 10^9\"\n  },\n  \"follow_up\": \"Can you extend the solution to find the k closest values to the target?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the shortest word that can be made from the letters in the license plate."}, {"role": "assistant", "content": "{\n  \"description\": \"Identify the shortest completing word in the given list of words based on the character requirements extracted from the license plate.\",\n  \"objective\": \"Use character frequency matching and divisibility to efficiently find the shortest completing word.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Extract all the letters from `licensePlate`, convert them to lowercase, and count their frequencies using a hash map or a similar data structure.\",\n    \"Step 2\": \"Assign each letter a prime number and compute a unique product for the letters in the license plate.\",\n    \"Step 3\": \"For each word in `words`, compute the product of its letters' primes and check divisibility by the license plate's product.\",\n    \"Step 4\": \"Keep track of the shortest word that satisfies the condition, breaking ties based on the order of occurrence in the input.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"licensePlate\": \"1s3 PSt\",\n        \"words\": [\n          \"step\",\n          \"steps\",\n          \"stripe\",\n          \"stepple\"\n        ]\n      },\n      \"output\": \"steps\",\n      \"explanation\": \"License plate requires 's', 'p', and 't' with an extra 's'. 'steps' is the shortest completing word that satisfies this requirement.\"\n    },\n    {\n      \"input\": {\n        \"licensePlate\": \"1s3 456\",\n        \"words\": [\n          \"looks\",\n          \"pest\",\n          \"stew\",\n          \"show\"\n        ]\n      },\n      \"output\": \"pest\",\n      \"explanation\": \"License plate requires only 's'. All words satisfy this, but 'pest' is the shortest word appearing first.\"\n    }\n  ],\n  \"constraints\": {\n    \"licensePlate_length\": \"1 <= licensePlate.length <= 7\",\n    \"words_length\": \"1 <= words.length <= 1000\",\n    \"word_length\": \"1 <= words[i].length <= 15\",\n    \"characters\": \"Input is guaranteed to have a valid answer.\"\n  },\n  \"follow_up\": \"Analyze the time complexity of the solution. Discuss alternate approaches, such as direct frequency comparison, and compare their efficiency with the prime product method.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given an array of strings, find the minimum deletions needed to make the array sorted."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an array of n strings, where all strings are of the same length. You can delete characters at any indices from all strings, and after deletions, the resulting strings must be in lexicographical order. Your task is to find the minimum number of deletion indices needed to achieve this ordering.\",\n  \"objective\": \"Design an algorithm to determine the minimum number of column indices that must be deleted such that the resulting strings are in lexicographical order after deletions.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"You are given an array of strings of equal length. The problem requires determining the minimum number of column indices to delete to make the array of strings sorted in lexicographical order.\",\n    \"Step 2 - Input Analysis\": \"The input consists of n strings, each of the same length, and we can choose any deletion indices. The goal is to delete the smallest number of columns so that the remaining strings are in lexicographical order.\",\n    \"Step 3 - Approach\": \"A good approach is to examine each column in the strings and check if deleting a column helps to achieve lexicographical order. Traverse the columns one by one and check if a column breaks the lexicographical order for any adjacent strings. If it does, that column must be deleted.\",\n    \"Step 4 - Output\": \"Return the minimum number of deletions needed to sort the strings in lexicographical order.\",\n    \"Step 5 - Code Efficiency\": \"Try to implement the solution in a way that checks each column efficiently to minimize unnecessary comparisons and deletions. The time complexity should be manageable for the input constraints.\",\n    \"Step 6 - Edge Cases\": \"Handle edge cases such as when the strings are already sorted or when the deletion affects multiple columns in sequence.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"strs\": [\n          \"ca\",\n          \"bb\",\n          \"ac\"\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"After deleting the first column, strs = ['a', 'b', 'c'], which are now in lexicographic order.\"\n    },\n    {\n      \"input\": {\n        \"strs\": [\n          \"xc\",\n          \"yb\",\n          \"za\"\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"The strings are already in lexicographic order, so no deletions are necessary.\"\n    },\n    {\n      \"input\": {\n        \"strs\": [\n          \"zyx\",\n          \"wvu\",\n          \"tsr\"\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"Every column must be deleted to achieve lexicographical order.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_length\": \"1 <= n <= 100\",\n    \"str_length\": \"1 <= strs[i].length <= 100\",\n    \"str_elements_range\": \"strs[i] consists of lowercase English letters\"\n  },\n  \"follow_up\": \"Can you optimize the solution further by reducing the time complexity of checking the columns?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Simulate a Candy Crush game and crush candies."}, {"role": "assistant", "content": "{\n  \"description\": \"Simulate a Candy Crush game by crushing candies and dropping them according to game rules until the board becomes stable.\",\n  \"objective\": \"Implement a solution that repeatedly finds and crushes candies, rearranges the board, and checks for further crushable candies until the board is stable.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Define a function `find_and_crush()` to locate crushable candies and mark them for removal.\",\n    \"Step 2\": \"In `find_and_crush()`, iterate through each candy on the board. If three or more candies of the same type are adjacent vertically or horizontally, mark them as negative to indicate they are to be removed.\",\n    \"Step 3\": \"After marking all crushable candies, iterate through the board and set all marked cells to `0` (indicating they are empty). Return a flag indicating whether any candies were crushed.\",\n    \"Step 4\": \"Define a function `drop()` to simulate the dropping of candies. Iterate column by column and for each column, move all non-zero elements to the bottom, filling the remaining spaces with zeros.\",\n    \"Step 5\": \"Create a main function to manage the simulation. Use a loop that repeatedly calls `find_and_crush()` and `drop()` until no more candies can be crushed.\",\n    \"Step 6\": \"Return the stable board as the output after all candies have been crushed and dropped.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"board\": [\n          [\n            110,\n            5,\n            112,\n            113,\n            114\n          ],\n          [\n            210,\n            211,\n            5,\n            213,\n            214\n          ],\n          [\n            310,\n            311,\n            3,\n            313,\n            314\n          ],\n          [\n            410,\n            411,\n            412,\n            5,\n            414\n          ],\n          [\n            5,\n            1,\n            512,\n            3,\n            3\n          ],\n          [\n            610,\n            4,\n            1,\n            613,\n            614\n          ],\n          [\n            710,\n            1,\n            2,\n            713,\n            714\n          ],\n          [\n            810,\n            1,\n            2,\n            1,\n            1\n          ],\n          [\n            1,\n            1,\n            2,\n            2,\n            2\n          ],\n          [\n            4,\n            1,\n            4,\n            4,\n            1014\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          0,\n          0,\n          0,\n          0,\n          0\n        ],\n        [\n          0,\n          0,\n          0,\n          0,\n          0\n        ],\n        [\n          0,\n          0,\n          0,\n          0,\n          0\n        ],\n        [\n          110,\n          0,\n          0,\n          0,\n          114\n        ],\n        [\n          210,\n          0,\n          0,\n          0,\n          214\n        ],\n        [\n          310,\n          0,\n          0,\n          113,\n          314\n        ],\n        [\n          410,\n          0,\n          0,\n          213,\n          414\n        ],\n        [\n          610,\n          211,\n          112,\n          313,\n          614\n        ],\n        [\n          710,\n          311,\n          412,\n          613,\n          714\n        ],\n        [\n          810,\n          411,\n          512,\n          713,\n          1014\n        ]\n      ],\n      \"explanation\": \"Crush all candies in sequences of three or more, rearrange the board, and repeat the process until no more candies can be crushed.\"\n    },\n    {\n      \"input\": {\n        \"board\": [\n          [\n            1,\n            3,\n            5,\n            5,\n            2\n          ],\n          [\n            3,\n            4,\n            3,\n            3,\n            1\n          ],\n          [\n            3,\n            2,\n            4,\n            5,\n            2\n          ],\n          [\n            2,\n            4,\n            4,\n            5,\n            5\n          ],\n          [\n            1,\n            4,\n            4,\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          1,\n          3,\n          0,\n          0,\n          0\n        ],\n        [\n          3,\n          4,\n          0,\n          5,\n          2\n        ],\n        [\n          3,\n          2,\n          0,\n          3,\n          1\n        ],\n        [\n          2,\n          4,\n          0,\n          5,\n          2\n        ],\n        [\n          1,\n          4,\n          3,\n          1,\n          1\n        ]\n      ],\n      \"explanation\": \"Repeatedly crush candies in valid sequences and rearrange until no more crushes are possible.\"\n    }\n  ],\n  \"constraints\": {\n    \"board_size\": \"3 <= m, n <= 50\",\n    \"candy_value\": \"1 <= board[i][j] <= 2000\"\n  },\n  \"follow_up\": \"Discuss how this algorithm can be optimized for larger boards or implemented for diagonal matches if required.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the nth digit in a sequence of numbers."}, {"role": "assistant", "content": "{\n  \"title\": \"Find nth Digit in Infinite Integer Sequence\",\n  \"description\": \"Determine the nth digit in the infinite sequence of concatenated integers starting from 1.\",\n  \"objective\": \"Efficiently locate the nth digit without generating the entire sequence.\",\n  \"input\": {\n    \"name\": \"n\",\n    \"type\": \"integer\",\n    \"description\": \"The position of the digit in the infinite sequence.\",\n    \"constraints\": \"1 <= n <= 2^31 - 1\"\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The nth digit in the infinite sequence.\"\n  },\n  \"examples\": [\n    {\n      \"input\": 3,\n      \"output\": 3,\n      \"explanation\": \"The 3rd digit in the sequence 1, 2, 3, 4, ... is 3.\"\n    },\n    {\n      \"input\": 11,\n      \"output\": 0,\n      \"explanation\": \"The 11th digit is part of the number 10.\"\n    },\n    {\n      \"input\": 15,\n      \"output\": 2,\n      \"explanation\": \"The 15th digit corresponds to the second digit of 12.\"\n    }\n  ],\n  \"hints\": [\n    \"Group the sequence by digit lengths: single-digit numbers, two-digit numbers, etc.\",\n    \"Determine which group the nth digit belongs to by calculating the cumulative number of digits in previous groups.\",\n    \"Locate the specific number within the group and extract the correct digit.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Minimize time and space complexity by using mathematical computations instead of generating the sequence.\",\n    \"constraints\": \"Ensure the solution works for large values of n up to 2^31 - 1.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Multiply two sparse matrices."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two sparse matrices `mat1` of size `m x k` and `mat2` of size `k x n`, calculate the result of their multiplication. Sparse matrices contain mostly zero values, so the algorithm should focus on optimizing performance by only processing non-zero values to avoid unnecessary computations.\",\n  \"objective\": \"Efficiently compute the matrix product of two sparse matrices using their sparse nature to reduce complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves matrix multiplication, where each element in the resultant matrix is the dot product of a row from `mat1` and a column from `mat2`. Due to the sparsity of the matrices, only non-zero elements contribute to the product.\",\n    \"Step 2 - Sparse Representation\": \"Represent each matrix as a list of non-zero elements with their row and column indices. This reduces memory and computation overhead.\",\n    \"Step 3 - Multiplication Logic\": \"Iterate over non-zero elements of `mat1` and find corresponding elements in `mat2` that can contribute to the product. Accumulate these results in the resultant matrix.\",\n    \"Step 4 - Complexity Optimization\": \"Avoid iterating over entire rows and columns by leveraging sparse representations. Aim for an efficient algorithm that minimizes unnecessary multiplications.\",\n    \"Step 5 - Edge Cases\": \"Handle edge cases such as matrices with all zero values or matrices with single dimensions (e.g., `1x1` matrices).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"mat1\": [\n          [\n            1,\n            0,\n            0\n          ],\n          [\n            -1,\n            0,\n            3\n          ]\n        ],\n        \"mat2\": [\n          [\n            7,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            1\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          7,\n          0,\n          0\n        ],\n        [\n          -7,\n          0,\n          3\n        ]\n      ],\n      \"explanation\": \"Only non-zero elements of `mat1` and `mat2` contribute to the product.\"\n    },\n    {\n      \"input\": {\n        \"mat1\": [\n          [\n            0\n          ]\n        ],\n        \"mat2\": [\n          [\n            0\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          0\n        ]\n      ],\n      \"explanation\": \"Both matrices are zero matrices, resulting in a zero matrix.\"\n    }\n  ],\n  \"constraints\": {\n    \"mat1_size\": \"1 <= m, k <= 100\",\n    \"mat2_size\": \"1 <= k, n <= 100\",\n    \"element_range\": \"-100 <= mat1[i][j], mat2[i][j] <= 100\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm further for matrices with very high sparsity (e.g., 99% of elements are zero)? Consider alternative sparse matrix representations such as compressed row storage or coordinate format.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given an array, determine if it is monotonic. Return `true` if it is, otherwise return `false`."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an integer array `nums`. The task is to determine whether the array is monotonic. A monotonic array is either monotone increasing or monotone decreasing. The array is monotone increasing if for all `i <= j`, `nums[i] <= nums[j]`. The array is monotone decreasing if for all `i <= j`, `nums[i] >= nums[j]`. You need to return `true` if the array is monotonic, and `false` otherwise.\",\n  \"objective\": \"Implement a function that checks if a given array is monotonic. The function should return `true` if the array is monotonic (either increasing or decreasing), and `false` otherwise.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"You need to determine if the given array `nums` is monotonic, meaning it must either be entirely non-increasing or non-decreasing. You need to check for both conditions in the array and return `true` if either holds, or `false` otherwise.\",\n    \"Step 2 - Approach Design\": \"To solve this problem, we can iterate through the array to check for two possible conditions: whether the array is increasing or decreasing. If we encounter an element that violates the increasing condition or the decreasing condition, we can immediately return `false`. If no violations are found, we return `true`.\",\n    \"Step 3 - Algorithm Design\": \"We can iterate through the array once, checking for violations of both the increasing and decreasing conditions. If the array violates both conditions at any point, we return `false`. Otherwise, we return `true`. This approach will have a time complexity of O(n), where n is the length of the array.\",\n    \"Step 4 - Solution\": \"1. Start by initializing two boolean flags, `increasing` and `decreasing`, to `true`.\\n2. Iterate through the array and check if each consecutive pair of elements is either increasing or decreasing.\\n3. If any violation occurs for both increasing and decreasing conditions, return `false`.\\n4. If no violations occur, return `true`.\",\n    \"Step 5 - Code Implementation\": \"The solution involves iterating through the array once and checking each pair of consecutive elements. If the condition for both increasing and decreasing is violated at any point, return `false`; otherwise, return `true`.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution handles the input size constraints (up to 100,000 elements in the array) efficiently. This can be achieved by iterating through the array once, giving a time complexity of O(n).\",\n    \"Final Output\": \"The solution should return `true` if the array is monotonic, and `false` otherwise, based on the above checks.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          2,\n          3\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The array is non-decreasing, so it is monotonic.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          6,\n          5,\n          4,\n          4\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The array is non-increasing, so it is monotonic.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          3,\n          2\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The array is neither non-increasing nor non-decreasing, so it is not monotonic.\"\n    }\n  ],\n  \"constraints\": {\n    \"n\": \"1 <= nums.length <= 10^5\",\n    \"range\": \"-10^5 <= nums[i] <= 10^5\"\n  },\n  \"follow_up\": \"Can you optimize the solution for even larger arrays?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the biggest string by joining and reversing strings in a loop."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of strings `strs`, concatenate these strings into a loop, where each string can be reversed or left as is. The loop can then be 'cut' at any point, forming a new linear string. The task is to find the lexicographically largest string that can be formed by concatenating, reversing, and cutting as described.\",\n  \"objective\": \"Implement an algorithm that examines possible loop configurations and determines the largest string lexicographically by reversing strings where beneficial and choosing the optimal cut point in the looped sequence.\",\n  \"meta_prompt\": {\n    \"Step 1 - Reverse Each String\": \"Iterate through each string in `strs`, creating both the original and reversed versions of each string.\",\n    \"Step 2 - Concatenate with Reversal Options\": \"For each string in `strs`, try to arrange it both as-is and reversed in sequence, forming two separate configurations for the entire loop: one where each string remains as given and one where each string is reversed.\",\n    \"Step 3 - Form All Loop Variations\": \"For each configuration (original and reversed strings in sequence), generate the loop by concatenating the entire sequence into a single string, then append it to itself to allow circular 'cuts' at any position.\",\n    \"Step 4 - Find Lexicographically Largest Substring\": \"For each loop configuration, examine each substring starting from each character to determine which substring is lexicographically the largest by iterating over the first half of each doubled sequence (as all substrings in the second half are cyclic repetitions of the first).\",\n    \"Final Check - Constraints Verification\": \"Confirm that the solution efficiently handles the constraints where `strs.length` can be up to 1000 strings, and each string can be up to 1000 characters long.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"strs\": [\n          \"abc\",\n          \"xyz\"\n        ]\n      },\n      \"output\": \"zyxcba\",\n      \"explanation\": \"By reversing both strings and concatenating in a loop, the largest lexicographical order is achieved with the sequence 'zyxcba'.\"\n    },\n    {\n      \"input\": {\n        \"strs\": [\n          \"abc\"\n        ]\n      },\n      \"output\": \"cba\",\n      \"explanation\": \"The largest lexicographical result is achieved by reversing 'abc' to form 'cba'.\"\n    }\n  ],\n  \"constraints\": {\n    \"strs_length\": \"1 <= strs.length <= 1000\",\n    \"str_length\": \"1 <= strs[i].length <= 1000\",\n    \"total_length\": \"1 <= sum(strs[i].length) <= 1000\",\n    \"characters\": \"strs[i] consists of lowercase English letters.\"\n  },\n  \"follow_up\": \"Consider how this approach could be optimized further for even larger strings or alternate character orderings.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given a Tic-Tac-Toe board represented as a 3x3 array. Return true if this is a valid game position."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a Tic-Tac-Toe board represented as a 3x3 array of strings, return `true` if and only if this board configuration is a valid one that could have been reached during the course of a legitimate Tic-Tac-Toe game. The game follows these basic rules: players alternate placing 'X' and 'O' characters into empty spaces, with 'X' always going first. The game ends when there are three consecutive 'X' or 'O' characters in a row, column, or diagonal, or when the board is full. No more moves can be made after the game ends.\",\n  \"objective\": \"Return `true` if the board configuration is valid, i.e., it could have been reached during the course of a real Tic-Tac-Toe game.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We need to validate if a given Tic-Tac-Toe board could be a possible configuration during an ongoing or completed game, following all rules and player turns.\",\n    \"Step 2 - Approach\": \"1. Count the occurrences of 'X' and 'O'. The number of 'X's should either be equal to or one more than the number of 'O's because 'X' always plays first. 2. Check for winning conditions: the game ends when a player wins. If one player has won, no further moves should have been made by the other player. 3. Ensure that the number of moves doesn't exceed the allowed number of turns (9 total moves in a 3x3 game).\",\n    \"Step 3 - Plan\": \"1. First, count the number of 'X' and 'O' characters. 2. Check if either player has won, and ensure no invalid board states are present (e.g., 'X' winning but there are more 'O's). 3. Return `true` if the configuration follows the rules, otherwise `false`.\",\n    \"Step 4 - Edge Cases\": \"Consider edge cases such as an incomplete game, where neither player has won yet, and invalid scenarios where a player has more than one turn ahead of the other player, or both players have won simultaneously.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"board\": [\n          \"O  \",\n          \"   \",\n          \"   \"\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The first player always places 'X'. The board shows that the second player (who plays 'O') placed the first piece, which is invalid.\"\n    },\n    {\n      \"input\": {\n        \"board\": [\n          \"XOX\",\n          \" X \",\n          \"   \"\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"Players alternate turns. The number of 'O's is fewer than the number of 'X's, meaning the game state is invalid.\"\n    },\n    {\n      \"input\": {\n        \"board\": [\n          \"XOX\",\n          \"O O\",\n          \"XOX\"\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"This is a valid game state where players alternated correctly, and the game has ended with no violations of the rules.\"\n    }\n  ],\n  \"constraints\": {\n    \"board_size\": \"board.length == 3 and board[i].length == 3\",\n    \"valid_characters\": \"board[i][j] must be one of 'X', 'O', or ' '\"\n  },\n  \"follow_up\": \"What would be the approach if the board size were larger (e.g., 4x4 or 5x5)? How would you validate a board in that case?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given an array of numbers, find the maximum coins you can collect by bursting the balloons in the right order."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an array of integers `nums` representing balloons with numbers painted on them. When you burst the `i-th` balloon, you gain `nums[i-1] * nums[i] * nums[i+1]` coins. If `i-1` or `i+1` is out of bounds, assume the value is `1`. Return the maximum number of coins you can collect by bursting the balloons in an optimal order.\",\n  \"objective\": \"Design a dynamic programming solution to maximize the coins collected by determining the best order to burst the balloons.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the problem involves finding an optimal order of operations (bursting balloons) that maximizes the coins collected. Consider how overlapping subproblems can be used in a dynamic programming approach.\",\n    \"Step 2 - Padding for Boundaries\": \"Add virtual balloons with a value of `1` at the start and end of the array to simplify boundary conditions.\",\n    \"Step 3 - Dynamic Programming Definition\": \"Define `dp[left][right]` as the maximum coins that can be collected by bursting all the balloons between indices `left` and `right` (exclusive).\",\n    \"Step 4 - Transition Formula\": \"Iterate through all possible last balloons to burst in the range `[left+1, right-1]` and calculate `dp[left][right]` based on previously computed subproblems.\",\n    \"Step 5 - Edge Cases\": \"Handle edge cases such as small arrays (`n = 1`) or arrays with all zero values (`nums[i] = 0`).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          1,\n          5,\n          8\n        ]\n      },\n      \"output\": 167,\n      \"explanation\": \"The optimal order to burst balloons yields the coins: 3*1*5 + 3*5*8 + 1*3*8 + 1*8*1 = 167.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          5\n        ]\n      },\n      \"output\": 10,\n      \"explanation\": \"Bursting the two balloons in order yields the coins: 1*1*5 + 1*5*1 = 10.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"1 <= n <= 300\",\n    \"balloon_values\": \"0 <= nums[i] <= 100\"\n  },\n  \"follow_up\": \"Can you optimize the space complexity of your dynamic programming solution to reduce memory usage?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a grid with '/' and '\\' characters, find the number of regions."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an n x n grid where each cell is divided into contiguous regions by the characters '/', '\\\\', or a blank space ' ', determine the number of distinct regions formed by these divisions.\",\n  \"objective\": \"Write a function to calculate the number of distinct regions in a grid based on the given '/' and '\\\\' characters, where these characters divide the cells into different regions. Spaces represent empty areas that do not affect the regions.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We need to analyze the given grid and count how many distinct regions are formed by the '/' and '\\\\' characters. Each region is a contiguous area of cells that are separated by these characters.\",\n    \"Step 2 - Approach\": \"We can use depth-first search (DFS) or breadth-first search (BFS) to explore the grid. By treating the grid as a graph, we traverse from each unvisited cell and mark all cells that belong to the same region.\",\n    \"Step 3 - Handling Escaped Characters\": \"Backslash characters ('\\\\') in the input are escaped as '\\\\\\\\', so we need to handle these characters properly when processing the grid.\",\n    \"Step 4 - Output Format\": \"The output should be a single integer representing the number of distinct regions in the grid.\",\n    \"Step 5 - Code Efficiency\": \"The solution should efficiently traverse the grid and detect regions using a DFS/BFS approach, with time complexity O(n^2), where n is the grid dimension.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          \" / \",\n          \"/ \"\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The grid forms two regions due to the '/' characters dividing the grid.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          \" / \",\n          \" \"\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"In this case, there is only one region as the '/' character divides the grid into a single region.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          \"/\\\\\\\\ \",\n          \"\\\\/ \"\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"After processing the escaped '\\\\' characters, the grid is divided into 5 distinct regions.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_size\": \"1 <= n <= 30\",\n    \"characters\": \"Each element in the grid can be '/', '\\\\', or ' '\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle larger grids more efficiently, possibly using Union-Find or other graph-based methods?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Generate all permutations of an array of numbers."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `nums` of distinct integers, return all possible permutations of `nums`. The result can be returned in any order.\",\n  \"objective\": \"Design an efficient backtracking algorithm to generate all unique permutations of the input array.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task requires generating all possible arrangements of the elements in the array `nums`. For an array of length `n`, there will be `n!` permutations.\",\n    \"Step 2 - Backtracking Approach\": \"Use backtracking to generate permutations by swapping elements. At each step, fix one element and recursively generate permutations for the remaining elements.\",\n    \"Step 3 - Optimization\": \"Avoid redundant computations by ensuring that each element is placed at each position exactly once. Use a temporary list to store the current permutation.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution adheres to constraints such as `1 <= nums.length <= 6` and all elements being distinct.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider edge cases such as an array of length 1 (only one permutation) or arrays with negative numbers.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": [\n        [\n          1,\n          2,\n          3\n        ],\n        [\n          1,\n          3,\n          2\n        ],\n        [\n          2,\n          1,\n          3\n        ],\n        [\n          2,\n          3,\n          1\n        ],\n        [\n          3,\n          1,\n          2\n        ],\n        [\n          3,\n          2,\n          1\n        ]\n      ],\n      \"explanation\": \"All permutations of [1, 2, 3] are generated.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          1\n        ]\n      },\n      \"output\": [\n        [\n          0,\n          1\n        ],\n        [\n          1,\n          0\n        ]\n      ],\n      \"explanation\": \"All permutations of [0, 1] are generated.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1\n        ]\n      },\n      \"output\": [\n        [\n          1\n        ]\n      ],\n      \"explanation\": \"The only permutation of [1] is itself.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 6\",\n    \"element_range\": \"-10 <= nums[i] <= 10\",\n    \"distinct_values\": \"All elements in `nums` are unique.\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm to handle larger arrays or implement a non-recursive solution using iterative techniques?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Set rows and columns in a matrix to zero if an element is zero."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `m x n` integer matrix `matrix`, set the entire row and column of any element that is `0` to `0` in place. The solution must avoid using extra space, except for a constant amount.\",\n  \"objective\": \"Design an in-place algorithm to modify the matrix by efficiently marking rows and columns for nullification and performing the operation without additional space.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves setting entire rows and columns to `0` if any element in them is `0`. An efficient solution should avoid using additional memory proportional to the matrix size.\",\n    \"Step 2 - Naive Approach\": \"A naive approach involves creating auxiliary storage (`O(mn)` space) to mark the rows and columns. This approach is inefficient and does not meet the space requirements.\",\n    \"Step 3 - Improved Space Solution\": \"Use two auxiliary arrays (`O(m + n)` space) to store row and column flags. Iterate through the matrix to mark rows and columns and then update the matrix in a second pass.\",\n    \"Step 4 - Constant Space Optimization\": \"Optimize further by using the first row and column of the matrix itself as markers. Traverse the matrix to mark rows and columns to be zeroed, then nullify the rows and columns in a second pass.\",\n    \"Step 5 - Constraints Compliance\": \"Ensure the solution handles constraints such as `1 <= m, n <= 200` efficiently, with operations bounded by `O(mn)` time.\",\n    \"Step 6 - Handle Edge Cases\": \"Consider edge cases such as matrices with no `0`s, matrices entirely filled with `0`s, or matrices with only one row or one column.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            1,\n            1,\n            1\n          ],\n          [\n            1,\n            0,\n            1\n          ],\n          [\n            1,\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          1,\n          0,\n          1\n        ],\n        [\n          0,\n          0,\n          0\n        ],\n        [\n          1,\n          0,\n          1\n        ]\n      ],\n      \"explanation\": \"The `0` in the middle of the matrix causes its entire row and column to be set to `0`.\"\n    },\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            0,\n            1,\n            2,\n            0\n          ],\n          [\n            3,\n            4,\n            5,\n            2\n          ],\n          [\n            1,\n            3,\n            1,\n            5\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          0,\n          0,\n          0,\n          0\n        ],\n        [\n          0,\n          4,\n          5,\n          0\n        ],\n        [\n          0,\n          3,\n          1,\n          0\n        ]\n      ],\n      \"explanation\": \"The `0`s in the first row cause their corresponding rows and columns to be nullified.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_dimensions\": \"1 <= m, n <= 200\",\n    \"element_range\": \"-2^31 <= matrix[i][j] <= 2^31 - 1\",\n    \"in_place\": \"Must use constant space for auxiliary data.\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm further to minimize the number of writes to the matrix for better performance on large datasets?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a grid with keys and locks, return the minimum moves to collect all the keys."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a grid where walls, keys, and locks are placed. The goal is to start at a given position and collect all keys while obeying the constraints that you can only walk into areas if you have the corresponding key for any lock.\",\n  \"objective\": \"Calculate the minimum number of moves required to collect all the keys in the grid while adhering to the rules about walls, keys, and locks. Return -1 if it's impossible to collect all the keys.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The grid represents a map where you start at a specific point, and you need to collect all keys, but some paths are blocked by locks that can only be opened after picking up corresponding keys. The challenge is to find the minimum number of moves required to collect all keys or determine if it's impossible.\",\n    \"Step 2 - Approach\": \"Breadth-first search (BFS) is a suitable approach for this problem since it ensures the shortest path. You can treat the problem as a state space exploration where each state is defined by the current position, the keys collected so far, and the number of moves taken.\",\n    \"Step 3 - Output Format\": \"Return the lowest number of moves required to collect all keys. If it is not possible to collect all the keys, return -1.\",\n    \"Step 4 - Code Efficiency and Edge Cases\": \"Make sure to account for cases where walls block paths, when no keys are available, or when the grid is too small to reach all keys. Optimizing BFS with a state representation for positions and collected keys is crucial for performance.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          \"@.a..\",\n          \"###.#\",\n          \"b.A.B\"\n        ]\n      },\n      \"output\": 8,\n      \"explanation\": \"The minimum number of moves required to collect all keys is 8.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          \"@..aA\",\n          \"..B#.\",\n          \"....b\"\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"The minimum number of moves required to collect all keys is 6.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          \"@Aa\"\n        ]\n      },\n      \"output\": -1,\n      \"explanation\": \"It's impossible to collect all keys because the key and its corresponding lock are blocked.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_size\": \"1 <= m, n <= 30\",\n    \"characters_in_grid\": \"grid[i][j] is either a key, lock, wall, or empty space\",\n    \"key_count\": \"1 <= k <= 6\",\n    \"unique_keys\": \"Each key is unique, and every key has a matching lock.\"\n  },\n  \"follow_up\": \"Can you implement the solution with an optimized BFS approach using bitmasking to track the keys collected?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Do an inorder traversal of a tree and return the nodes."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary tree, return the inorder traversal of its nodes' values. Inorder traversal visits the left subtree, then the root node, and finally the right subtree.\",\n  \"objective\": \"Design an algorithm to perform inorder traversal, ensuring both recursive and iterative implementations are considered.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that inorder traversal involves visiting nodes in the order: left subtree -> root -> right subtree.\",\n    \"Step 2 - Recursive Approach\": \"Design a recursive function that traverses the left subtree, appends the root, and then traverses the right subtree.\",\n    \"Step 3 - Iterative Approach\": \"Use a stack to mimic recursion by pushing nodes to the stack as you traverse left. Pop nodes to visit them, then traverse their right subtrees.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle edge cases such as an empty tree, a tree with one node, or skewed trees (all left or all right).\",\n    \"Step 5 - Optimize\": \"Ensure iterative solutions are space-efficient, using a single stack and minimizing redundant operations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          null,\n          2,\n          3\n        ]\n      },\n      \"output\": [\n        1,\n        3,\n        2\n      ],\n      \"explanation\": \"Inorder traversal visits 1, then 3, and finally 2.\"\n    },\n    {\n      \"input\": {\n        \"root\": []\n      },\n      \"output\": [],\n      \"explanation\": \"An empty tree results in an empty traversal.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1\n        ]\n      },\n      \"output\": [\n        1\n      ],\n      \"explanation\": \"A single-node tree results in a traversal with that node.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 100\",\n    \"node_values\": \"-100 <= Node.val <= 100\"\n  },\n  \"follow_up\": \"Can you implement the traversal iteratively and optimize for memory usage?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Rotate a linked list to the right by `k` places."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `head` of a linked list, rotate the list to the right by `k` places. The rotation involves moving the last `k` elements to the front of the list.\",\n  \"objective\": \"Design an efficient algorithm to rotate a linked list by `k` places while handling edge cases like large values of `k` and empty lists.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that rotating a list to the right by `k` places involves rearranging the last `k` elements of the list to the front. For `k` values greater than the list's length, only `k % length` rotations are needed.\",\n    \"Step 2 - Compute List Length\": \"Calculate the length of the linked list to determine the effective number of rotations (`k % length`). If `k` is 0 or equal to the list's length, no rotation is needed.\",\n    \"Step 3 - Identify Rotation Point\": \"Find the `(length - k % length)`th node to split the list into two parts. Update the links to perform the rotation.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution handles constraints such as `0 <= k <= 2 * 10^9` efficiently without unnecessary iterations.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider edge cases like an empty list, single-node lists, or `k = 0`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2,\n          3,\n          4,\n          5\n        ],\n        \"k\": 2\n      },\n      \"output\": [\n        4,\n        5,\n        1,\n        2,\n        3\n      ],\n      \"explanation\": \"Rotating the list by 2 places moves the last 2 nodes [4, 5] to the front.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          0,\n          1,\n          2\n        ],\n        \"k\": 4\n      },\n      \"output\": [\n        2,\n        0,\n        1\n      ],\n      \"explanation\": \"Since `k % 3 = 1`, rotating the list by 1 place moves [2] to the front.\"\n    }\n  ],\n  \"constraints\": {\n    \"list_length\": \"0 <= number of nodes <= 500\",\n    \"node_values\": \"-100 <= Node.val <= 100\",\n    \"rotation_count\": \"0 <= k <= 2 * 10^9\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm for extremely large `k` values while maintaining linear time complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given a list of emails. Return the number of different email addresses after applying some transformations to the local name part."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an array of email addresses, each consisting of a local name and a domain name, separated by an '@' sign. The local name part of an email may contain dots and a plus sign, with specific rules for how they affect the email address. The task is to return the number of distinct email addresses after applying the normalization rules for the local name. Specifically, dots are ignored in the local name, and everything after the first plus sign is discarded in the local name. The domain name is not affected by these rules. You need to count how many different email addresses will actually receive emails after these transformations.\",\n  \"objective\": \"Return the number of distinct email addresses after applying the normalization rules to the given list of emails.\",\n  \"meta_prompt\": {\n    \"Step 1 - Input Understanding\": \"Each email consists of a local name and a domain name, separated by an '@' sign. The local name may contain dots ('.') and a plus sign ('+'). Only the local name is subject to the transformations, not the domain name.\",\n    \"Step 2 - Rules Explanation\": \"1. Dots in the local name are ignored. 2. Everything after the first plus sign in the local name is ignored.\",\n    \"Step 3 - Approach\": \"For each email address, normalize the local name by removing dots and truncating everything after the first plus sign. Keep the domain name as it is. Then, add the normalized email to a set to ensure uniqueness. The result will be the size of the set.\",\n    \"Step 4 - Edge Case Considerations\": \"Make sure to handle emails with no dots or plus signs, emails with multiple dots or plus signs, and emails that are the same after normalization. The domain name should remain unchanged.\",\n    \"Step 5 - Output Format\": \"The output should be an integer representing the number of distinct email addresses after applying the normalization rules.\",\n    \"Step 6 - Code Efficiency\": \"The solution should efficiently handle up to 100 emails, each with a length of up to 100 characters.\"\n  },\n  \"examples\": [\n    {\n      \"input\": [\n        \"test.email+alex@leetcode.com\",\n        \"test.e.mail+bob.cathy@leetcode.com\",\n        \"testemail+david@lee.tcode.com\"\n      ],\n      \"output\": 2,\n      \"explanation\": \"After normalizing the emails, only two unique email addresses receive mail: 'testemail@leetcode.com' and 'testemail@lee.tcode.com'.\"\n    },\n    {\n      \"input\": [\n        \"a@leetcode.com\",\n        \"b@leetcode.com\",\n        \"c@leetcode.com\"\n      ],\n      \"output\": 3,\n      \"explanation\": \"Each email is unique, so three different emails will receive mail.\"\n    }\n  ],\n  \"constraints\": {\n    \"email_count\": \"1 <= emails.length <= 100\",\n    \"email_length\": \"1 <= emails[i].length <= 100\",\n    \"characters\": \"Each email consists of lowercase English letters, '+', '.', and '@'.\",\n    \"domain_name_format\": \"Each email contains exactly one '@' and ends with '.com'.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle a larger number of emails more efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find if the number looks the same upside down."}, {"role": "assistant", "content": "{\n  \"description\": \"Generate all strobogrammatic numbers of a specified length.\",\n  \"objective\": \"Return a list of all strobogrammatic numbers of length `n` in any order.\",\n  \"steps\": [\n    \"Define the strobogrammatic digit pairs ('6', '9'), ('9', '6'), ('0', '0'), ('1', '1'), and ('8', '8').\",\n    \"Use recursion or iterative methods to generate numbers by building valid pairs at both ends of the string.\",\n    \"Exclude numbers that start with '0' unless the number's length is 1.\"\n  ],\n  \"examples\": [\n    {\n      \"input\": 2,\n      \"output\": [\n        \"11\",\n        \"69\",\n        \"88\",\n        \"96\"\n      ]\n    },\n    {\n      \"input\": 1,\n      \"output\": [\n        \"0\",\n        \"1\",\n        \"8\"\n      ]\n    }\n  ],\n  \"constraints\": [\n    \"The value of `n` is between 1 and 14.\",\n    \"Numbers must be valid strobogrammatic numbers.\"\n  ],\n  \"follow_up\": \"How can you handle cases where the range is very large or `n` is close to its upper limit?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number of triplets in an array that have a sum less than a target."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `nums` of `n` integers and an integer `target`, find the number of index triplets `i`, `j`, `k` (with `0 <= i < j < k < n`) such that the sum of the elements at these indices is less than `target`.\",\n  \"objective\": \"Design an efficient algorithm to count the number of valid triplets, optimizing for large input sizes with a time complexity better than `O(n^3)`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the task of finding triplets whose sum is less than `target`. Sorting the array allows leveraging two-pointer techniques to efficiently count valid triplets.\",\n    \"Step 2 - Initial Approach\": \"Use three nested loops to iterate over all triplets and count the valid ones. However, this approach has a time complexity of `O(n^3)` and is inefficient for large inputs.\",\n    \"Step 3 - Optimized Two-Pointer Technique\": \"Sort the array first. For each element at index `i`, use two pointers (`j` and `k`) to find triplets. Fix `i`, then let `j` point to `i+1` and `k` point to the last element. Move pointers inward based on the sum comparison with `target`.\",\n    \"Step 4 - Handling Edge Cases\": \"Handle edge cases such as empty arrays, arrays with fewer than three elements, and arrays with all negative or all positive numbers.\",\n    \"Step 5 - Output\": \"Return the total count of valid triplets as an integer.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          -2,\n          0,\n          1,\n          3\n        ],\n        \"target\": 2\n      },\n      \"output\": 2,\n      \"explanation\": \"The valid triplets are `[-2, 0, 1]` and `[-2, 0, 3]`.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [],\n        \"target\": 0\n      },\n      \"output\": 0,\n      \"explanation\": \"An empty array has no triplets.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0\n        ],\n        \"target\": 0\n      },\n      \"output\": 0,\n      \"explanation\": \"An array with fewer than three elements has no triplets.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"0 <= n <= 3500\",\n    \"element_range\": \"-100 <= nums[i] <= 100\",\n    \"target_range\": \"-100 <= target <= 100\"\n  },\n  \"follow_up\": \"Can you improve the algorithm to use minimal additional space while maintaining efficient time complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the intersection node of two linked lists."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the heads of two singly linked lists, `headA` and `headB`, return the node where the two lists intersect. If the two linked lists do not intersect, return `null`. The function must not modify the structure of the linked lists.\",\n  \"objective\": \"Design an algorithm to find the intersection node of two singly linked lists efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves finding the first common node between two linked lists by reference, not value.\",\n    \"Step 2 - Use Two Pointers\": \"Traverse both lists using two pointers. Adjust the pointers to switch to the other list when reaching the end of one list to align their traversal lengths.\",\n    \"Step 3 - Optimize for Memory\": \"Ensure the solution runs in O(m + n) time and uses O(1) space.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider cases where one or both lists are empty or where the lists do not intersect.\",\n    \"Step 5 - Return Result\": \"Return the intersecting node or `null` if no intersection exists.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"intersectVal\": 8,\n        \"listA\": [\n          4,\n          1,\n          8,\n          4,\n          5\n        ],\n        \"listB\": [\n          5,\n          6,\n          1,\n          8,\n          4,\n          5\n        ],\n        \"skipA\": 2,\n        \"skipB\": 3\n      },\n      \"output\": \"Intersected at '8'\",\n      \"explanation\": \"The two lists intersect at the node with value 8. Their structures are merged from that node onwards.\"\n    },\n    {\n      \"input\": {\n        \"intersectVal\": 0,\n        \"listA\": [\n          2,\n          6,\n          4\n        ],\n        \"listB\": [\n          1,\n          5\n        ],\n        \"skipA\": 3,\n        \"skipB\": 2\n      },\n      \"output\": \"No intersection\",\n      \"explanation\": \"The two lists do not intersect, so the function returns `null`.\"\n    }\n  ],\n  \"constraints\": {\n    \"list_length\": \"1 <= m, n <= 3 * 10^4\",\n    \"node_value\": \"1 <= Node.val <= 10^5\",\n    \"intersect_conditions\": \"The test cases ensure no cycles and consistent memory references for intersection.\"\n  },\n  \"follow_up\": \"Can you ensure that your solution uses only O(1) memory?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the right interval index for each interval in the input array. Return -1 if no right interval exists."}, {"role": "assistant", "content": "{\n  \"title\": \"Find Right Interval Indices\",\n  \"description\": \"Given an array of intervals, where each interval is represented as `[start, end]` and all start points are unique, return an array of indices representing the **right intervals** for each interval. A right interval for interval `i` is another interval `j` such that `start[j] >= end[i]` and `start[j]` is minimized. If no right interval exists for interval `i`, output `-1` at index `i`.\",\n  \"input\": {\n    \"name\": \"intervals\",\n    \"type\": \"array\",\n    \"description\": \"A list of intervals represented as `[start, end]`.\",\n    \"constraints\": \"1 <= intervals.length <= 2 * 10^4, intervals[i].length == 2, -10^6 <= start[i] <= end[i] <= 10^6. All `start[i]` values are unique.\"\n  },\n  \"output\": {\n    \"type\": \"array\",\n    \"description\": \"An array where each element is the index of the right interval or `-1` if no right interval exists.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"intervals\": [\n          [\n            1,\n            2\n          ]\n        ]\n      },\n      \"output\": [\n        -1\n      ],\n      \"explanation\": \"There is only one interval, so no right interval exists.\"\n    },\n    {\n      \"input\": {\n        \"intervals\": [\n          [\n            3,\n            4\n          ],\n          [\n            2,\n            3\n          ],\n          [\n            1,\n            2\n          ]\n        ]\n      },\n      \"output\": [\n        -1,\n        0,\n        1\n      ],\n      \"explanation\": \"Right intervals: [3,4] has none, [2,3]'s right interval is [3,4], [1,2]'s right interval is [2,3].\"\n    },\n    {\n      \"input\": {\n        \"intervals\": [\n          [\n            1,\n            4\n          ],\n          [\n            2,\n            3\n          ],\n          [\n            3,\n            4\n          ]\n        ]\n      },\n      \"output\": [\n        -1,\n        2,\n        -1\n      ],\n      \"explanation\": \"Right intervals: [1,4] has none, [2,3]'s right interval is [3,4], [3,4] has none.\"\n    }\n  ],\n  \"hints\": [\n    \"Sort intervals by their starting points and use binary search for efficient lookups.\",\n    \"Pair intervals with their original indices for easy reconstruction of the result.\",\n    \"Use a data structure to allow O(log n) lookups for finding the smallest start that is >= a given end.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(n log n) time complexity by sorting the intervals and performing binary searches.\",\n    \"constraints\": \"Avoid O(n^2) brute force approaches.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Implement a string iterator for a compressed string."}, {"role": "assistant", "content": "{\n  \"description\": \"Design and implement a `StringIterator` class for iterating over a compressed string. Each letter in the string is followed by a positive integer representing the number of its occurrences in the original uncompressed string.\",\n  \"objective\": \"Efficiently implement methods to retrieve the next character (`next`) and check if any characters remain to be uncompressed (`hasNext`). The iterator should handle large counts efficiently without precomputing the uncompressed string.\",\n  \"meta_prompt\": {\n    \"Step 1 - Parse Input\": \"Initialize a global pointer (`ptr`) to track the current position in the compressed string. Use a variable (`num`) to store the remaining occurrences of the current character.\",\n    \"Step 2 - Implement `next`\": \"If `num > 0`, return the current character and decrement `num`. Otherwise, parse the next character and count from the compressed string, update `num`, and return the new character. If no characters remain, return a whitespace `' '`.\",\n    \"Step 3 - Implement `hasNext`\": \"Return `true` if `num > 0` or there are more characters to process in the compressed string (based on `ptr`). Otherwise, return `false`.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the implementation handles constraints where counts can be up to `10^9` and operations are efficient with at most 100 calls to `next` or `hasNext`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"operations\": [\n          \"StringIterator\",\n          \"next\",\n          \"next\",\n          \"next\",\n          \"next\",\n          \"next\",\n          \"next\",\n          \"hasNext\",\n          \"next\",\n          \"hasNext\"\n        ],\n        \"arguments\": [\n          [\n            \"L1e2t1C1o1d1e1\"\n          ],\n          [],\n          [],\n          [],\n          [],\n          [],\n          [],\n          [],\n          [],\n          []\n        ]\n      },\n      \"output\": [\n        null,\n        \"L\",\n        \"e\",\n        \"e\",\n        \"t\",\n        \"C\",\n        \"o\",\n        true,\n        \"d\",\n        true\n      ],\n      \"explanation\": \"The iterator processes the compressed string in order, returning characters as they are 'uncompressed'.\"\n    },\n    {\n      \"input\": {\n        \"operations\": [\n          \"StringIterator\",\n          \"next\",\n          \"hasNext\",\n          \"next\",\n          \"next\"\n        ],\n        \"arguments\": [\n          [\n            \"A1000000000B1\"\n          ],\n          [],\n          [],\n          [],\n          []\n        ]\n      },\n      \"output\": [\n        null,\n        \"A\",\n        true,\n        \"A\",\n        \"A\"\n      ],\n      \"explanation\": \"The iterator efficiently handles large counts without precomputing the uncompressed string.\"\n    }\n  ],\n  \"constraints\": {\n    \"compressedString_length\": \"1 <= compressedString.length <= 1000\",\n    \"character_repetitions\": \"1 <= count <= 10^9\",\n    \"operation_limit\": \"At most 100 calls to `next` and `hasNext`.\"\n  },\n  \"follow_up\": \"Optimize further for edge cases where counts are extremely large and analyze memory usage if additional state tracking is introduced.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the latest valid 24-hour time that can be made from four digits."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of four digits, your task is to find the latest valid 24-hour time that can be formed using each digit exactly once. A valid 24-hour time must be in the format 'HH:MM', where 'HH' is between 00 and 23 and 'MM' is between 00 and 59. You need to return the latest time possible or an empty string if no valid time can be made.\",\n  \"objective\": \"Design an algorithm that finds the latest valid 24-hour time from a set of four digits, ensuring each digit is used exactly once. If no valid time can be formed, return an empty string.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The input consists of an array of 4 digits. The goal is to generate all possible valid 24-hour times using these digits, formatted as 'HH:MM', where HH must be between 00 and 23, and MM between 00 and 59.\",\n    \"Step 2 - Initial Approach\": \"Start by generating all possible permutations of the four digits. For each permutation, check if it forms a valid time by ensuring the first two digits represent a valid hour (0-23) and the last two digits represent a valid minute (0-59).\",\n    \"Step 3 - Validating Time\": \"For each permutation, convert the first two digits to an integer for the hour and the last two digits for the minute. Ensure that the hour is between 00 and 23, and the minute is between 00 and 59.\",\n    \"Step 4 - Output Format\": \"Return the latest valid time in the format 'HH:MM', or an empty string if no valid time can be formed.\",\n    \"Step 5 - Efficiency Consideration\": \"Given that there are only 24 possible permutations of the 4 digits, it is feasible to generate and check each permutation in a straightforward manner. The solution will handle all possible inputs efficiently.\",\n    \"Final Check - Edge Cases\": \"Ensure that the algorithm handles edge cases, such as when all digits are the same or when no valid time can be made.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"arr\": [\n          1,\n          2,\n          3,\n          4\n        ]\n      },\n      \"output\": \"23:41 \",\n      \"explanation\": \"The valid 24-hour times are '12:34', '12:43', '13:24', '13:42', '14:23', '14:32', '21:34', '21:43', '23:14', and '23:41'. The latest time is '23:41'.\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          5,\n          5,\n          5,\n          5\n        ]\n      },\n      \"output\": \" \",\n      \"explanation\": \"There are no valid 24-hour times that can be formed as '55:55' is not a valid time.\"\n    }\n  ],\n  \"constraints\": {\n    \"arr_length\": \"arr.length == 4\",\n    \"arr_elements_range\": \"0 <= arr[i] <= 9\"\n  },\n  \"follow_up\": \"Can you optimize the time complexity of generating valid times?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find two numbers that appear only once in an array where all other numbers appear twice."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums`, in which exactly two elements appear only once and all other elements appear exactly twice, find the two elements that appear only once. The output can be returned in any order.\",\n  \"objective\": \"Design an efficient algorithm to identify the two unique elements in `nums` with a time complexity of `O(n)` and constant space complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that all elements except two appear exactly twice, meaning XOR operations can be used to cancel out duplicate values.\",\n    \"Step 2 - XOR Technique\": \"First, XOR all numbers in the array to obtain the XOR of the two unique numbers (`xor = num1 ^ num2`). Then, use the lowest differing bit in `xor` to partition the numbers into two groups: one group containing `num1` and the other containing `num2`.\",\n    \"Step 3 - Partitioning and Identification\": \"Identify the lowest set bit in the XOR result (`xor & -xor`) and partition the numbers based on whether this bit is set or not. XOR each group to isolate `num1` and `num2`.\",\n    \"Step 4 - Edge Cases\": \"Handle cases where `nums` contains negative numbers, zero, or the smallest possible array size of 2.\",\n    \"Step 5 - Output\": \"Return the two unique numbers in any order as a list.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          1,\n          3,\n          2,\n          5\n        ]\n      },\n      \"output\": [\n        3,\n        5\n      ],\n      \"explanation\": \"The two unique numbers are `3` and `5`. Order does not matter, so `[5, 3]` is also valid.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          -1,\n          0\n        ]\n      },\n      \"output\": [\n        -1,\n        0\n      ],\n      \"explanation\": \"The two unique numbers are `-1` and `0`.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          1\n        ]\n      },\n      \"output\": [\n        0,\n        1\n      ],\n      \"explanation\": \"The two unique numbers are `0` and `1`.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"2 <= nums.length <= 3 * 10^4\",\n    \"element_range\": \"-2^31 <= nums[i] <= 2^31 - 1\",\n    \"properties\": \"All integers appear exactly twice except two unique integers.\"\n  },\n  \"follow_up\": \"Can you explain why the XOR approach guarantees an `O(n)` runtime with constant space complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Reverse a section of a linked list between two given positions."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `head` of a singly linked list and two integers `left` and `right`, reverse the nodes of the list from position `left` to position `right` (1-based index) and return the modified linked list.\",\n  \"objective\": \"Design an efficient algorithm to reverse a sublist of a singly linked list while maintaining the overall structure of the list.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves reversing a sublist of nodes between positions `left` and `right`. The relative order of nodes outside this range should remain unchanged.\",\n    \"Step 2 - Locate Sublist Boundaries\": \"Traverse the list to identify the `left-1` and `right+1` positions (nodes just before and after the sublist to be reversed).\",\n    \"Step 3 - Reverse the Sublist\": \"Reverse the nodes in the specified range by iteratively adjusting their `next` pointers. Use a `prev` pointer to keep track of the previous node during the reversal.\",\n    \"Step 4 - Reconnect the Sublist\": \"Reconnect the reversed sublist to the rest of the list by updating the `next` pointers of the nodes just before and after the reversed sublist.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider edge cases such as reversing the entire list, reversing a single node, or lists with only one node.\",\n    \"Step 6 - Optimize for One Pass\": \"Optimize the traversal and reversal process to complete the task in a single pass through the list.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2,\n          3,\n          4,\n          5\n        ],\n        \"left\": 2,\n        \"right\": 4\n      },\n      \"output\": [\n        1,\n        4,\n        3,\n        2,\n        5\n      ],\n      \"explanation\": \"The sublist [2, 3, 4] is reversed, resulting in [4, 3, 2].\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          5\n        ],\n        \"left\": 1,\n        \"right\": 1\n      },\n      \"output\": [\n        5\n      ],\n      \"explanation\": \"Since `left` and `right` are the same, the list remains unchanged.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"1 <= n <= 500\",\n    \"node_value\": \"-500 <= Node.val <= 500\",\n    \"position_range\": \"1 <= left <= right <= n\"\n  },\n  \"follow_up\": \"Can you reverse the sublist in a single traversal of the list to achieve O(n) time complexity with O(1) space complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum width of a binary tree, considering null nodes in the width calculation."}, {"role": "assistant", "content": "{\n  \"description\": \"Calculate the maximum width of a binary tree, where the width of a level is the length between the leftmost and rightmost non-null nodes at that level, including null nodes.\",\n  \"objective\": \"Use DFS traversal to record the first index of each level and calculate the maximum width by comparing indices at each level.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Table\": \"Create a table (e.g., a dictionary) to store the first index for each depth level. Initialize the maximum width as 0.\",\n    \"Step 2 - Implement DFS Traversal\": \"Define a recursive DFS function that takes the current node, depth, and index. For each node, update the table with the first index for the current depth if it does not exist.\",\n    \"Step 3 - Calculate Width\": \"For each node, compute the width of the current level as the difference between the current index and the first index of the level plus one. Update the maximum width if necessary.\",\n    \"Step 4 - Traverse All Levels\": \"Perform a DFS traversal of the tree, ensuring that left child nodes are visited before right child nodes to maintain the correct order for indices.\",\n    \"Step 5 - Return Result\": \"After completing the traversal, return the maximum width calculated.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          3,\n          2,\n          5,\n          3,\n          null,\n          9\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"The maximum width is on the third level: [5, 3, null, 9], with a width of 4.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          3,\n          2,\n          5,\n          null,\n          null,\n          9,\n          6,\n          null,\n          7\n        ]\n      },\n      \"output\": 7,\n      \"explanation\": \"The maximum width is on the fourth level: [6, null, null, null, null, null, 7], with a width of 7.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          3,\n          2,\n          5\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The maximum width is on the second level: [3, 2], with a width of 2.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_range\": \"1 <= number of nodes <= 3000\",\n    \"node_value_range\": \"-100 <= Node.val <= 100\"\n  },\n  \"follow_up\": \"Analyze the time complexity of the DFS approach and discuss its advantages over BFS for this problem.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create full binary trees with n nodes, where each node has value 0."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer n, your task is to return a list of all possible full binary trees with n nodes. Each node in each tree must have a value of 0. A full binary tree is defined as a tree where each node has exactly 0 or 2 children. The trees can be returned in any order, and each element in the output list should represent the root node of a valid tree.\",\n  \"objective\": \"Design an efficient approach to generate all possible full binary trees with exactly n nodes, ensuring that each node in the tree has 0 or 2 children. The output should be a list of root nodes, with each root representing a full binary tree.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Start by understanding the properties of a full binary tree. For each node, it must either have 0 or exactly 2 children, which significantly affects the structure of the tree. This is a recursive problem, where the number of nodes in the left and right subtrees must sum to n-1, as one node is used for the root.\",\n    \"Step 2 - Recursive Approach\": \"Use recursion to construct trees. For a given n, recursively generate all possible left and right subtrees, ensuring that the total number of nodes in both subtrees adds up to n-1. Then, combine these subtrees by attaching one to the left child and the other to the right child of the root.\",\n    \"Step 3 - Optimizing for Efficiency\": \"Avoid redundant calculations by storing already computed results for smaller values of n, using dynamic programming or memoization techniques. This can reduce unnecessary recalculations when encountering the same value of n.\",\n    \"Step 4 - Output Format\": \"Return a list of root nodes, where each node represents the root of a valid full binary tree. Each tree's nodes must be structured as '0's with the correct binary tree representation in the form of nested lists.\",\n    \"Step 5 - Handling Constraints\": \"Ensure that the solution works for n values from 1 to 20, as specified in the problem. Given these constraints, ensure that the solution is both correct and efficient.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 7\n      },\n      \"output\": [\n        [\n          0,\n          0,\n          0,\n          null,\n          null,\n          0,\n          0,\n          null,\n          null,\n          0,\n          0\n        ],\n        [\n          0,\n          0,\n          0,\n          null,\n          null,\n          0,\n          0,\n          0,\n          0\n        ],\n        [\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0\n        ],\n        [\n          0,\n          0,\n          0,\n          0,\n          0,\n          null,\n          null,\n          null,\n          null,\n          0,\n          0\n        ],\n        [\n          0,\n          0,\n          0,\n          0,\n          0,\n          null,\n          null,\n          0,\n          0\n        ]\n      ],\n      \"explanation\": \"These are all possible full binary trees with 7 nodes.\"\n    },\n    {\n      \"input\": {\n        \"n\": 3\n      },\n      \"output\": [\n        [\n          0,\n          0,\n          0\n        ]\n      ],\n      \"explanation\": \"For n=3, the only possible tree is a full binary tree with one root and two children.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 20\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Combine two binary trees into one by summing their nodes."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two binary trees `root1` and `root2`, merge them into a new tree by summing overlapping nodes. If a node exists in only one tree, use it in the merged tree.\",\n  \"objective\": \"Efficiently merge two binary trees using an iterative approach.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Stack\": \"Start with a stack containing the root nodes of `root1` and `root2` as a pair.\",\n    \"Step 2 - Process Current Nodes\": \"Pop a pair of nodes from the stack. If both nodes are non-null, sum their values and update the node in `root1`.\",\n    \"Step 3 - Handle Left Child\": \"If the left child of `root1` is null, assign the left child of `root2` to `root1`. Otherwise, push the left children of both nodes onto the stack.\",\n    \"Step 4 - Handle Right Child\": \"If the right child of `root1` is null, assign the right child of `root2` to `root1`. Otherwise, push the right children of both nodes onto the stack.\",\n    \"Step 5 - Repeat Until Stack is Empty\": \"Continue processing nodes until the stack is empty.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root1\": [\n          1,\n          3,\n          2,\n          5\n        ],\n        \"root2\": [\n          2,\n          1,\n          3,\n          null,\n          4,\n          null,\n          7\n        ]\n      },\n      \"output\": [\n        3,\n        4,\n        5,\n        5,\n        4,\n        null,\n        7\n      ],\n      \"explanation\": \"Overlapping nodes are summed, and non-overlapping nodes are preserved in the merged tree.\"\n    },\n    {\n      \"input\": {\n        \"root1\": [\n          1\n        ],\n        \"root2\": [\n          1,\n          2\n        ]\n      },\n      \"output\": [\n        2,\n        2\n      ],\n      \"explanation\": \"Root values are summed, and the left child from `root2` is added to the merged tree.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 2000\",\n    \"value_range\": \"-10^4 <= Node.val <= 10^4\"\n  },\n  \"follow_up\": \"Explore space efficiency by comparing iterative and recursive approaches for merging trees.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Remove all subtrees with only zero values."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of a binary tree where each node\\u2019s value is either 0 or 1, remove all subtrees that do not contain any nodes with the value 1. The output should be the same tree with pruned nodes removed. If a node and all its descendants have a value of 0, then that node should be removed from the tree.\",\n  \"objective\": \"Write a function that traverses the tree, checking each subtree to determine whether it contains a 1. For any subtree that does not, remove it from the tree structure.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Given a binary tree of nodes with values 0 or 1, prune all subtrees where no nodes contain the value 1.\",\n    \"Step 2 - Recursive Solution with Pruning\": \"Use a recursive approach to traverse the tree. At each node, check the left and right subtrees recursively, removing those that contain only 0s. If both subtrees of a node are pruned and the node itself is 0, prune the node as well.\",\n    \"Step 3 - Base Case and Recursive Pruning\": \"Implement a base case where a null node returns null immediately. For non-null nodes, recursively prune each subtree, and then decide if the current node itself should be pruned based on the values of its subtrees and itself.\",\n    \"Step 4 - Return the Pruned Tree\": \"After completing the traversal, return the modified tree from the root node, with only subtrees containing at least one '1' preserved.\",\n    \"Step 5 - Efficiency and Edge Cases\": \"Handle edge cases such as a single-node tree with a value of 0 (should return null) and trees with all 1s (should return the tree unmodified).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          null,\n          0,\n          0,\n          1\n        ]\n      },\n      \"output\": [\n        1,\n        null,\n        0,\n        null,\n        1\n      ],\n      \"explanation\": \"The left child subtree is pruned as it contains only nodes with value 0.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          0,\n          1,\n          0,\n          0,\n          0,\n          1\n        ]\n      },\n      \"output\": [\n        1,\n        null,\n        1,\n        null,\n        1\n      ],\n      \"explanation\": \"All subtrees containing only 0s are pruned, preserving nodes with at least one descendant containing a 1.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          1,\n          0,\n          1,\n          1,\n          0,\n          1,\n          0\n        ]\n      },\n      \"output\": [\n        1,\n        1,\n        0,\n        1,\n        1,\n        null,\n        1\n      ],\n      \"explanation\": \"The subtree of the node with value 0 on the left is pruned, as it contains no 1s.\"\n    }\n  ],\n  \"constraints\": {\n    \"tree_size\": \"1 <= nodes <= 200\",\n    \"node_values\": \"Node values are either 0 or 1.\"\n  },\n  \"follow_up\": \"Can you solve this problem without modifying the input tree by marking nodes as 'to be pruned' first and only removing them after traversal?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the longest word in an array of strings that can be built from other words in the array."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the longest word in a given array of strings `words` that can be built one character at a time using other words from the array. If multiple answers exist, return the lexicographically smallest one.\",\n  \"objective\": \"Use a Trie (prefix tree) and Depth-First Search (DFS) to efficiently find the longest word that meets the requirements.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Insert all the words into a Trie, marking nodes where words end.\",\n    \"Step 2\": \"Perform a DFS traversal on the Trie, visiting only nodes that represent complete words.\",\n    \"Step 3\": \"During traversal, track the longest word that can be formed. If two words have the same length, choose the lexicographically smallest one.\",\n    \"Step 4\": \"If no valid word can be formed, return an empty string.\",\n    \"Step 5\": \"Return the longest word that satisfies the conditions.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"words\": [\n          \"w\",\n          \"wo\",\n          \"wor\",\n          \"worl\",\n          \"world\"\n        ]\n      },\n      \"output\": \"world\",\n      \"explanation\": \"The word 'world' can be built one character at a time using 'w', 'wo', 'wor', and 'worl'.\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"a\",\n          \"banana\",\n          \"app\",\n          \"appl\",\n          \"ap\",\n          \"apply\",\n          \"apple\"\n        ]\n      },\n      \"output\": \"apple\",\n      \"explanation\": \"Both 'apply' and 'apple' can be built, but 'apple' is lexicographically smaller.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= words.length <= 1000\",\n    \"word_length\": \"1 <= words[i].length <= 30\",\n    \"characters\": \"words[i] consists of lowercase English letters\"\n  },\n  \"follow_up\": \"Discuss alternative approaches such as sorting and using a hash set to verify prefix conditions, and compare their time and space complexity with the Trie-based approach.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Simplify a Unix-style file path to its canonical form."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `path`, which represents an absolute Unix-style file path, simplify it to its **canonical path** by resolving redundant components like `'.'`, `'..'`, and multiple slashes.\",\n  \"objective\": \"Design an efficient algorithm to compute the canonical path by maintaining a stack to resolve valid directory changes and ignoring invalid or redundant parts of the path.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves processing a Unix-style path string to resolve `'.'` (current directory), `'..'` (parent directory), and redundant slashes while maintaining valid directory names.\",\n    \"Step 2 - Tokenize the Path\": \"Split the path string by the slash `'/'` to identify its components. Ignore empty strings or components that represent the current directory (`'.'`).\",\n    \"Step 3 - Use a Stack\": \"Use a stack to process valid directory names. Push valid names onto the stack, and pop the stack when encountering `'..'` (if the stack is not empty).\",\n    \"Step 4 - Reconstruct the Canonical Path\": \"Rebuild the simplified path by joining the elements in the stack with single slashes. Ensure the path starts with a single slash and does not end with one.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider cases such as `path = '/../'` (output is `'/'`), `path = '/home//foo/'` (output is `'/home/foo'`), or paths with redundant periods like `'...'` (treated as file names).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"path\": \"/home/\"\n      },\n      \"output\": \"/home\",\n      \"explanation\": \"The canonical path is simplified to `/home` without trailing slashes.\"\n    },\n    {\n      \"input\": {\n        \"path\": \"/../\"\n      },\n      \"output\": \"/\",\n      \"explanation\": \"Going up from the root directory results in staying at the root, so the output is `/`.\"\n    },\n    {\n      \"input\": {\n        \"path\": \"/home//foo/\"\n      },\n      \"output\": \"/home/foo\",\n      \"explanation\": \"Multiple consecutive slashes are simplified to a single slash.\"\n    }\n  ],\n  \"constraints\": {\n    \"path_length\": \"1 <= path.length <= 3000\",\n    \"valid_characters\": \"`path` consists of letters, digits, '.', '/', and '_'\",\n    \"valid_path\": \"`path` is a valid absolute Unix-style path.\"\n  },\n  \"follow_up\": \"Can you extend the algorithm to handle relative paths or paths with symbolic links?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Design a doubly linked list with basic operations."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a doubly linked list implementation with methods to get, add, and delete nodes at specific positions.\",\n  \"objective\": \"Implement a doubly linked list class `MyLinkedList` with efficient operations for accessing and modifying the list, ensuring proper node connections for each operation.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Define the Node class with attributes `val`, `prev`, and `next` to represent a doubly linked list node.\",\n    \"Step 2\": \"Initialize the `MyLinkedList` class with a `size` attribute to track the number of nodes and two sentinel nodes `head` and `tail` for easy insertion and deletion.\",\n    \"Step 3\": \"Implement the `get(int index)` method by checking index validity, and traverse the list from the closer end (head or tail) to return the value at the specified index.\",\n    \"Step 4\": \"Implement the `addAtHead(int val)` method by creating a new node with value `val` and inserting it between the `head` sentinel and the first node.\",\n    \"Step 5\": \"Implement the `addAtTail(int val)` method by creating a new node with value `val` and inserting it between the `tail` sentinel and the last node.\",\n    \"Step 6\": \"Implement the `addAtIndex(int index, int val)` method by checking index validity, finding the appropriate predecessor and successor nodes using bidirectional traversal, and inserting the new node between them.\",\n    \"Step 7\": \"Implement the `deleteAtIndex(int index)` method by checking index validity, finding the node at the specified index, and updating the `prev` and `next` links of the surrounding nodes to remove the target node.\"\n  },\n  \"examples\": [\n    {\n      \"input\": [\n        [\n          \"MyLinkedList\",\n          \"addAtHead\",\n          \"addAtTail\",\n          \"addAtIndex\",\n          \"get\",\n          \"deleteAtIndex\",\n          \"get\"\n        ],\n        [\n          [],\n          [\n            1\n          ],\n          [\n            3\n          ],\n          [\n            1,\n            2\n          ],\n          [\n            1\n          ],\n          [\n            1\n          ],\n          [\n            1\n          ]\n        ]\n      ],\n      \"output\": [\n        null,\n        null,\n        null,\n        null,\n        2,\n        null,\n        3\n      ],\n      \"explanation\": \"After adding 1 at the head, the list is [1]. Adding 3 at the tail makes it [1,3]. Adding 2 at index 1 makes it [1,2,3]. Retrieving value at index 1 gives 2. Deleting index 1 updates the list to [1,3], and retrieving index 1 now returns 3.\"\n    }\n  ],\n  \"constraints\": {\n    \"index_and_val_range\": \"0 <= index, val <= 1000\",\n    \"method_calls\": \"At most 2000 calls will be made to `get`, `addAtHead`, `addAtTail`, `addAtIndex`, and `deleteAtIndex`.\"\n  },\n  \"follow_up\": \"Discuss the trade-offs between using a doubly linked list versus a singly linked list in terms of memory usage and performance for each operation.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "We are given an array of domains with visit counts. For each domain, we need to calculate the visits for its subdomains and return the result."}, {"role": "assistant", "content": "{\n  \"description\": \"In this problem, we are given an array of **count-paired domains**, where each domain consists of a count (number of visits) and a domain name. The task is to calculate the number of visits for each subdomain of the input domain, considering the hierarchical structure of domains. A domain with subdomains includes its parent domains as well, and we need to return the number of visits for each subdomain.\",\n  \"objective\": \"Return an array of count-paired domains for each subdomain in the input. The number of visits for each subdomain includes the visits to its parent domains. The answer may be returned in any order.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Given an array `cpdomains` where each element contains a visit count and a domain name, our task is to compute the total number of visits for all subdomains. Each domain and its subdomains need to be visited the same number of times, which is the count associated with that domain.\",\n    \"Step 2 - Key Concepts\": \"The key challenge is parsing the domain names and calculating the number of visits for both the domain itself and its subdomains. A subdomain is a part of a larger domain, and visiting a subdomain also counts for the parent domains.\",\n    \"Step 3 - Approach\": \"We can split the domain names into their parts (e.g., 'discuss.leetcode.com' becomes ['discuss', 'leetcode', 'com']) and sum the visits for each subdomain by iterating through all levels of the domain hierarchy.\",\n    \"Step 4 - Solution Strategy\": \"For each count-paired domain, extract the domain and split it into its components. Then, for each subdomain in the domain hierarchy, keep track of the total visits in a dictionary. Return the count-paired domains for each subdomain as the result.\",\n    \"Step 5 - Optimizations\": \"We can use a hash map (or dictionary) to efficiently keep track of the visit counts for all subdomains, reducing the complexity of summing visits for each subdomain.\",\n    \"Step 6 - Final Solution\": \"Iterate over each domain in the input array, split it into its components, and update the visit count for each subdomain in a dictionary. Finally, format the result as the desired output format.\",\n    \"Step 7 - Edge Case Handling\": \"Handle edge cases where there are multiple subdomains, and make sure to correctly aggregate visits for each level of the domain hierarchy.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"cpdomains\": [\n          \"9001 discuss.leetcode.com\"\n        ]\n      },\n      \"output\": [\n        \"9001 leetcode.com\",\n        \"9001 discuss.leetcode.com\",\n        \"9001 com\"\n      ],\n      \"explanation\": \"From 'discuss.leetcode.com' with 9001 visits, the subdomains 'leetcode.com' and 'com' should also receive 9001 visits.\"\n    },\n    {\n      \"input\": {\n        \"cpdomains\": [\n          \"900 google.mail.com\",\n          \"50 yahoo.com\",\n          \"1 intel.mail.com\",\n          \"5 wiki.org\"\n        ]\n      },\n      \"output\": [\n        \"901 mail.com\",\n        \"50 yahoo.com\",\n        \"900 google.mail.com\",\n        \"5 wiki.org\",\n        \"5 org\",\n        \"1 intel.mail.com\",\n        \"951 com\"\n      ],\n      \"explanation\": \"The visits are aggregated for the subdomains 'mail.com' (900 + 1), 'com' (900 + 50 + 1), and 'org' (5).\"\n    }\n  ],\n  \"constraints\": {\n    \"cpdomain_length\": \"1 <= cpdomain.length <= 100\",\n    \"cpdomain_values\": \"1 <= cpdomain[i].length <= 100\",\n    \"repi\": \"1 <= rep <= 10^4\",\n    \"d1i, d2i, d3i\": \"Lowercase English letters only.\"\n  },\n  \"follow_up\": \"What if the input contains domains with more than three levels of hierarchy? How would you modify your approach?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Combine digits from two arrays to create the largest number of size `k`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two integer arrays `nums1` and `nums2`, representing the digits of two numbers, and an integer `k`, generate the lexicographically largest number of length `k` from the digits of `nums1` and `nums2`. The digits' relative order in their respective arrays must be preserved.\",\n  \"objective\": \"Design an efficient algorithm to merge the digits of `nums1` and `nums2` to create the maximum number of length `k` while maintaining the relative order of digits in both arrays.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the goal is to create the maximum lexicographical number of length `k` by combining elements from two arrays while preserving their relative order.\",\n    \"Step 2 - Generating Maximum Subsequences\": \"Create a helper function to generate the largest subsequence of a given length from a single array.\",\n    \"Step 3 - Merging Two Subsequences\": \"Write a merge function to combine two subsequences into the lexicographically largest possible order.\",\n    \"Step 4 - Iterating Over Possible Splits\": \"Iterate through all valid splits where `i + j = k`, where `i` is the number of digits chosen from `nums1` and `j` from `nums2`. Combine the results of the subsequences and keep track of the largest result.\",\n    \"Step 5 - Final Output\": \"Ensure the output is the largest number possible, with edge cases like empty arrays or arrays with a single element handled correctly.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums1\": [\n          3,\n          4,\n          6,\n          5\n        ],\n        \"nums2\": [\n          9,\n          1,\n          2,\n          5,\n          8,\n          3\n        ],\n        \"k\": 5\n      },\n      \"output\": [\n        9,\n        8,\n        6,\n        5,\n        3\n      ],\n      \"explanation\": \"Choose 2 digits [6, 5] from `nums1` and 3 digits [9, 8, 3] from `nums2`, then merge them to form [9, 8, 6, 5, 3].\"\n    },\n    {\n      \"input\": {\n        \"nums1\": [\n          6,\n          7\n        ],\n        \"nums2\": [\n          6,\n          0,\n          4\n        ],\n        \"k\": 5\n      },\n      \"output\": [\n        6,\n        7,\n        6,\n        0,\n        4\n      ],\n      \"explanation\": \"Choose all digits from `nums1` and all digits from `nums2`, then merge them to form the maximum number.\"\n    },\n    {\n      \"input\": {\n        \"nums1\": [\n          3,\n          9\n        ],\n        \"nums2\": [\n          8,\n          9\n        ],\n        \"k\": 3\n      },\n      \"output\": [\n        9,\n        8,\n        9\n      ],\n      \"explanation\": \"Choose 1 digit [9] from `nums1` and 2 digits [8, 9] from `nums2`, then merge them to form the maximum number.\"\n    }\n  ],\n  \"constraints\": {\n    \"lengths\": \"1 <= nums1.length, nums2.length <= 500\",\n    \"values\": \"0 <= nums1[i], nums2[i] <= 9\",\n    \"k_range\": \"1 <= k <= nums1.length + nums2.length\"\n  },\n  \"follow_up\": \"Can you optimize the solution to run efficiently for larger inputs where `nums1` and `nums2` have maximum lengths?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find how long it will take to get a warmer temperature."}, {"role": "assistant", "content": "{\n  \"description\": \"Calculate the number of days until a warmer temperature for each day in the array.\",\n  \"objective\": \"Use a backward iteration approach to efficiently calculate the days until the next warmer temperature for each day using information from a precomputed answer array.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Initialize an array `answer` of the same size as `temperatures` with all values set to 0. Initialize a variable `hottest` to 0 to track the hottest temperature seen so far.\",\n    \"Step 2\": \"Iterate through the `temperatures` array from right to left.\",\n    \"Step 3\": \"For each day `currDay`, check if the temperature is greater than `hottest`. If true, update `hottest` and set `answer[currDay]` to 0.\",\n    \"Step 4\": \"If the temperature is not the hottest, initialize a variable `days = 1` to track days until a warmer temperature.\",\n    \"Step 5\": \"While `temperatures[currDay + days] <= temperatures[currDay]`, add `answer[currDay + days]` to `days` to efficiently skip over non-warmer days.\",\n    \"Step 6\": \"Set `answer[currDay] = days` once the next warmer day is identified.\",\n    \"Step 7\": \"Return the `answer` array after completing the iteration.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"temperatures\": [\n          73,\n          74,\n          75,\n          71,\n          69,\n          72,\n          76,\n          73\n        ]\n      },\n      \"output\": [\n        1,\n        1,\n        4,\n        2,\n        1,\n        1,\n        0,\n        0\n      ],\n      \"explanation\": \"Day 0 waits 1 day for a warmer day (74). Day 2 waits 4 days for 76. Days 6 and 7 do not have a warmer day.\"\n    },\n    {\n      \"input\": {\n        \"temperatures\": [\n          30,\n          40,\n          50,\n          60\n        ]\n      },\n      \"output\": [\n        1,\n        1,\n        1,\n        0\n      ],\n      \"explanation\": \"Each day waits exactly 1 day for a warmer day, except the last day.\"\n    },\n    {\n      \"input\": {\n        \"temperatures\": [\n          30,\n          60,\n          90\n        ]\n      },\n      \"output\": [\n        1,\n        1,\n        0\n      ],\n      \"explanation\": \"Each day has exactly one future warmer day, except the last day.\"\n    }\n  ],\n  \"constraints\": {\n    \"range\": \"1 <= temperatures.length <= 10^5\",\n    \"values\": \"30 <= temperatures[i] <= 100\"\n  },\n  \"follow_up\": \"Analyze the time complexity of the algorithm and compare its efficiency with a monotonic stack-based approach.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Merge two sorted arrays into one, storing the result in-place in `nums1`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two sorted integer arrays `nums1` and `nums2`, merge them into a single sorted array in non-decreasing order. The merged result should be stored directly in `nums1`, which has sufficient space to accommodate the elements of both arrays.\",\n  \"objective\": \"Design an efficient algorithm to merge two sorted arrays in-place while maintaining the sorted order and minimizing the number of operations.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task is to merge `nums2` into `nums1` in non-decreasing order. Since `nums1` has extra space at the end to hold all elements, the solution must modify `nums1` in-place.\",\n    \"Step 2 - Two-Pointer Technique\": \"Use two pointers starting from the ends of the non-zero parts of `nums1` and `nums2`. Place the larger element at the end of the available space in `nums1`, and move the pointers accordingly.\",\n    \"Step 3 - Handle Edge Cases\": \"Consider cases where one array is empty, all elements of `nums2` are smaller or larger than `nums1`, or the arrays have overlapping ranges.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution works efficiently for constraints such as `0 <= m, n <= 200` and handles the entire range of element values, including negative and large integers.\",\n    \"Step 5 - Follow-Up Optimization\": \"Implement the solution in O(m + n) time complexity by iterating through the arrays from back to front, ensuring minimal comparisons and swaps.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums1\": [\n          1,\n          2,\n          3,\n          0,\n          0,\n          0\n        ],\n        \"m\": 3,\n        \"nums2\": [\n          2,\n          5,\n          6\n        ],\n        \"n\": 3\n      },\n      \"output\": [\n        1,\n        2,\n        2,\n        3,\n        5,\n        6\n      ],\n      \"explanation\": \"The elements from `nums2` are merged into `nums1` in sorted order.\"\n    },\n    {\n      \"input\": {\n        \"nums1\": [\n          1\n        ],\n        \"m\": 1,\n        \"nums2\": [],\n        \"n\": 0\n      },\n      \"output\": [\n        1\n      ],\n      \"explanation\": \"Since `nums2` is empty, `nums1` remains unchanged.\"\n    },\n    {\n      \"input\": {\n        \"nums1\": [\n          0\n        ],\n        \"m\": 0,\n        \"nums2\": [\n          1\n        ],\n        \"n\": 1\n      },\n      \"output\": [\n        1\n      ],\n      \"explanation\": \"Since `nums1` initially contains no elements, the result is the elements of `nums2`.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"`nums1.length == m + n`, `nums2.length == n`\",\n    \"value_range\": \"`-10^9 <= nums1[i], nums2[j] <= 10^9`\",\n    \"sorted_order\": \"`nums1` and `nums2` are sorted in non-decreasing order.\",\n    \"time_complexity\": \"The solution should run in O(m + n) time.\"\n  },\n  \"follow_up\": \"How would you modify the algorithm if the inputs were linked lists instead of arrays?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Convert a string to lowercase."}, {"role": "assistant", "content": "{\n  \"description\": \"Convert a string by replacing every uppercase letter with its corresponding lowercase letter.\",\n  \"objective\": \"Write a function that processes a string and converts all uppercase letters to lowercase while leaving other characters unchanged.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Iterate through each character of the string.\",\n    \"Step 2\": \"Check if the character is an uppercase letter using its ASCII value or built-in string methods.\",\n    \"Step 3\": \"If the character is uppercase, replace it with its corresponding lowercase letter.\",\n    \"Step 4\": \"Leave non-uppercase characters unchanged.\",\n    \"Step 5\": \"Return the processed string.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"Hello\"\n      },\n      \"output\": \"hello\",\n      \"explanation\": \"The uppercase 'H' is converted to 'h', and the rest of the string remains unchanged.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"here\"\n      },\n      \"output\": \"here\",\n      \"explanation\": \"There are no uppercase letters in the string, so it remains the same.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"LOVELY\"\n      },\n      \"output\": \"lovely\",\n      \"explanation\": \"All uppercase letters are converted to their lowercase equivalents.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 100\",\n    \"character_set\": \"s consists of printable ASCII characters.\"\n  },\n  \"follow_up\": \"Discuss the time complexity of the solution, considering both character-by-character iteration and potential use of built-in string methods.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count how many times a sentence can fit on a screen."}, {"role": "assistant", "content": "{\n  \"title\": \"Sentence Fitting on a Screen\",\n  \"description\": \"Given a `rows x cols` screen and a sentence represented as a list of strings, calculate how many times the entire sentence can be displayed on the screen, adhering to the rules about word spacing and wrapping.\",\n  \"objective\": \"Fit the sentence repeatedly on the screen, ensuring that words remain intact and are separated by single spaces, and count the total number of complete sentences displayed.\",\n  \"input\": {\n    \"sentence\": {\n      \"type\": \"list of strings\",\n      \"description\": \"A list of words representing the sentence.\",\n      \"constraints\": \"1 <= sentence.length <= 100; 1 <= sentence[i].length <= 10; All words consist of lowercase English letters.\"\n    },\n    \"rows\": {\n      \"type\": \"integer\",\n      \"description\": \"The number of rows on the screen.\",\n      \"constraints\": \"1 <= rows <= 2 * 10^4\"\n    },\n    \"cols\": {\n      \"type\": \"integer\",\n      \"description\": \"The number of columns on the screen.\",\n      \"constraints\": \"1 <= cols <= 2 * 10^4\"\n    }\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The number of times the entire sentence can be fitted on the screen.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"sentence\": [\n          \"hello\",\n          \"world\"\n        ],\n        \"rows\": 2,\n        \"cols\": 8\n      },\n      \"output\": 1,\n      \"explanation\": \"The sentence fits once on the screen: 'hello---' and 'world---'.\"\n    },\n    {\n      \"input\": {\n        \"sentence\": [\n          \"a\",\n          \"bcd\",\n          \"e\"\n        ],\n        \"rows\": 3,\n        \"cols\": 6\n      },\n      \"output\": 2,\n      \"explanation\": \"The sentence fits twice: 'a-bcd-', 'e-a---', and 'bcd-e-'.\"\n    },\n    {\n      \"input\": {\n        \"sentence\": [\n          \"i\",\n          \"had\",\n          \"apple\",\n          \"pie\"\n        ],\n        \"rows\": 4,\n        \"cols\": 5\n      },\n      \"output\": 1,\n      \"explanation\": \"The sentence fits once: 'i-had', 'apple', 'pie-i', and 'had--'.\"\n    }\n  ],\n  \"hints\": [\n    \"Precompute the total length of the sentence (including spaces) for efficient calculation.\",\n    \"Track the starting position of each row on the concatenated sentence string.\",\n    \"Utilize modular arithmetic to handle word wrapping and looping.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Optimize the solution to run in O(rows + sentence_length) by avoiding line-by-line simulation.\",\n    \"constraints\": \"Avoid recalculating word positions unnecessarily by leveraging precomputed sentence lengths.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count the number of palindromic substrings in a string."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s`, calculate the total number of palindromic substrings present in the string.\",\n  \"objective\": \"Efficiently count all palindromic substrings by expanding around potential centers.\",\n  \"meta_prompt\": {\n    \"Step 1 - Define Palindromic Centers\": \"Treat every character as a center for odd-length palindromes and every pair of consecutive characters as a center for even-length palindromes.\",\n    \"Step 2 - Expand Around Centers\": \"For each center, expand outward as long as the characters at the left and right indices are equal and within bounds.\",\n    \"Step 3 - Count Palindromes\": \"Increment a counter for every successful expansion where a palindrome is found.\",\n    \"Step 4 - Return Count\": \"After processing all potential centers, return the total count of palindromic substrings.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"abc\"\n      },\n      \"output\": 3,\n      \"explanation\": \"The palindromic substrings are 'a', 'b', and 'c'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"aaa\"\n      },\n      \"output\": 6,\n      \"explanation\": \"The palindromic substrings are 'a', 'a', 'a', 'aa', 'aa', and 'aaa'.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 1000\",\n    \"characters\": \"s consists of lowercase English letters.\"\n  },\n  \"follow_up\": \"Analyze the time complexity of expanding around centers compared to other methods like dynamic programming for counting palindromic substrings.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number of unique paths a robot can take to the bottom-right corner of a grid with obstacles."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `m x n` integer array `obstacleGrid`, where `0` represents open space and `1` represents obstacles, determine the number of unique paths a robot can take to reach the bottom-right corner from the top-left corner. The robot can only move down or right, and cannot pass through obstacles.\",\n  \"objective\": \"Design an efficient algorithm to compute the number of unique paths avoiding obstacles, using dynamic programming.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves navigating a grid while avoiding obstacles (`1`) and counting unique paths to the bottom-right corner.\",\n    \"Step 2 - Dynamic Programming Table\": \"Use a DP table where `dp[i][j]` represents the number of paths to reach cell `(i, j)`. Initialize `dp[0][0] = 1` if `grid[0][0]` is `0`, otherwise `0`. Update paths only for cells with no obstacles (`grid[i][j] = 0`).\",\n    \"Step 3 - Update Rules\": \"For each cell `(i, j)`, calculate `dp[i][j]` as the sum of paths from the top and left cells (`dp[i][j] = dp[i-1][j] + dp[i][j-1]`) if no obstacle is present.\",\n    \"Step 4 - Space Optimization\": \"Reduce the space complexity by using a single row or column to store the intermediate results instead of a full DP table.\",\n    \"Step 5 - Handle Edge Cases\": \"Handle edge cases like a grid completely filled with obstacles, a single row/column, or the start or end cell being an obstacle.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"obstacleGrid\": [\n          [\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            1,\n            0\n          ],\n          [\n            0,\n            0,\n            0\n          ]\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"There are two unique paths to reach the bottom-right corner while avoiding the obstacle.\"\n    },\n    {\n      \"input\": {\n        \"obstacleGrid\": [\n          [\n            0,\n            1\n          ],\n          [\n            0,\n            0\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"There is only one unique path to reach the bottom-right corner while avoiding the obstacle.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_size\": \"1 <= m, n <= 100\",\n    \"grid_values\": \"`obstacleGrid[i][j]` is `0` or `1`.\",\n    \"result_range\": \"The result will be less than or equal to `2 * 10^9`.\"\n  },\n  \"follow_up\": \"Can you further optimize the space complexity to handle larger grids more efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a graph is a valid tree."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a graph with `n` nodes labeled from `0` to `n-1` and a list of undirected edges. Determine if the graph is a valid tree. A valid tree satisfies the conditions: 1) The graph is connected (all nodes are reachable), and 2) The graph has no cycles.\",\n  \"objective\": \"Design an efficient algorithm to verify if the graph is a valid tree. Use BFS, DFS, or Union-Find to check for connectivity and cycles while ensuring the solution is optimized for large graphs.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that a valid tree requires exactly `n-1` edges for `n` nodes. If the edge count is not `n-1`, the graph cannot be a tree.\",\n    \"Step 2 - Connectivity Check\": \"Use BFS or DFS to traverse the graph starting from any node. If all nodes are visited and the edge count is `n-1`, the graph is connected.\",\n    \"Step 3 - Cycle Detection\": \"During traversal, ensure no node is revisited except its parent (in BFS/DFS). Alternatively, use a Union-Find approach to detect cycles.\",\n    \"Step 4 - Edge Count Validation\": \"Check if the number of edges is exactly `n-1` before performing traversal or cycle detection.\",\n    \"Step 5 - Edge Cases\": \"Handle cases such as a single node with no edges (valid tree) and a graph with more than `n-1` edges (not a tree).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 5,\n        \"edges\": [\n          [\n            0,\n            1\n          ],\n          [\n            0,\n            2\n          ],\n          [\n            0,\n            3\n          ],\n          [\n            1,\n            4\n          ]\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The graph is connected and contains no cycles, making it a valid tree.\"\n    },\n    {\n      \"input\": {\n        \"n\": 5,\n        \"edges\": [\n          [\n            0,\n            1\n          ],\n          [\n            1,\n            2\n          ],\n          [\n            2,\n            3\n          ],\n          [\n            1,\n            3\n          ],\n          [\n            1,\n            4\n          ]\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The graph contains a cycle and is not a valid tree.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1,\n        \"edges\": []\n      },\n      \"output\": true,\n      \"explanation\": \"A single node with no edges is a valid tree.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"1 <= n <= 2000\",\n    \"edge_count\": \"0 <= edges.length <= 5000\",\n    \"edge_structure\": \"Each edge connects two distinct nodes with no self-loops or repeated edges.\"\n  },\n  \"follow_up\": \"Can you implement the solution using Union-Find to achieve near constant-time operations for edge validation and cycle detection?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find where one string appears in another."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two strings `needle` and `haystack`, return the index of the first occurrence of `needle` in `haystack`, or `-1` if `needle` is not part of `haystack`. The search must be case-sensitive and must find exact matches of `needle` within `haystack`.\",\n  \"objective\": \"Design an efficient algorithm to find the first occurrence of `needle` in `haystack`, ensuring the solution handles large input sizes and adheres to constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The task requires finding the first position where the substring `needle` appears in `haystack`. If `needle` is not found, return -1.\",\n    \"Step 2 - Sliding Window Approach\": \"Use a sliding window technique to iterate through `haystack` and check each substring of the same length as `needle`.\",\n    \"Step 3 - Optimization with String Matching\": \"Consider optimized string-matching algorithms like KMP (Knuth-Morris-Pratt) or Rabin-Karp for better performance on large inputs.\",\n    \"Step 4 - Edge Cases\": \"Handle cases such as an empty `needle`, a `needle` longer than `haystack`, or multiple occurrences of `needle` in `haystack`.\",\n    \"Step 5 - Constraints Compliance\": \"Ensure the solution works within the constraints: `1 <= haystack.length, needle.length <= 10^4` and both strings contain only lowercase English characters.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"haystack\": \"sadbutsad\",\n        \"needle\": \"sad\"\n      },\n      \"output\": 0,\n      \"explanation\": \"`needle` ('sad') appears at index 0 in `haystack` ('sadbutsad').\"\n    },\n    {\n      \"input\": {\n        \"haystack\": \"leetcode\",\n        \"needle\": \"leeto\"\n      },\n      \"output\": -1,\n      \"explanation\": \"`needle` ('leeto') does not appear in `haystack` ('leetcode').\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= haystack.length, needle.length <= 10^4\",\n    \"characters\": \"Both `haystack` and `needle` consist of only lowercase English letters.\"\n  },\n  \"follow_up\": \"Can you implement the solution using the KMP algorithm to achieve `O(n + m)` time complexity where `n` is the length of `haystack` and `m` is the length of `needle`?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find all combinations of numbers that sum to a target."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of **distinct** integers `candidates` and a target integer `target`, return all **unique combinations** of `candidates` where the chosen numbers sum to `target`. A number from `candidates` can be used an **unlimited number of times**. Combinations are considered unique if their frequency of at least one number differs. The output can be in any order.\",\n  \"objective\": \"Design an efficient backtracking algorithm to find all unique combinations of `candidates` that sum to `target`, ensuring compliance with the constraints and test case requirements.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task requires generating combinations where numbers from `candidates` are chosen multiple times, and the sum equals `target`. Duplicate combinations must be avoided.\",\n    \"Step 2 - Backtracking Approach\": \"Use backtracking to explore all possible combinations of numbers. Maintain a running sum and a list of chosen numbers. If the sum equals `target`, store the combination. If it exceeds `target`, backtrack.\",\n    \"Step 3 - Optimization\": \"Sort the `candidates` array to simplify pruning during backtracking. Skip further recursion for numbers that would exceed the target.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the algorithm handles constraints such as `1 <= candidates.length <= 30` and `1 <= target <= 40` efficiently.\",\n    \"Step 5 - Edge Cases\": \"Consider edge cases such as `candidates` containing only one number, or no combinations summing to `target`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"candidates\": [\n          2,\n          3,\n          6,\n          7\n        ],\n        \"target\": 7\n      },\n      \"output\": [\n        [\n          2,\n          2,\n          3\n        ],\n        [\n          7\n        ]\n      ],\n      \"explanation\": \"The only combinations summing to 7 are [2, 2, 3] and [7].\"\n    },\n    {\n      \"input\": {\n        \"candidates\": [\n          2,\n          3,\n          5\n        ],\n        \"target\": 8\n      },\n      \"output\": [\n        [\n          2,\n          2,\n          2,\n          2\n        ],\n        [\n          2,\n          3,\n          3\n        ],\n        [\n          3,\n          5\n        ]\n      ],\n      \"explanation\": \"The combinations summing to 8 are [2, 2, 2, 2], [2, 3, 3], and [3, 5].\"\n    },\n    {\n      \"input\": {\n        \"candidates\": [\n          2\n        ],\n        \"target\": 1\n      },\n      \"output\": [],\n      \"explanation\": \"No combination of [2] can sum to 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= candidates.length <= 30\",\n    \"candidate_range\": \"2 <= candidates[i] <= 40\",\n    \"target_range\": \"1 <= target <= 40\",\n    \"distinct_values\": \"All elements of `candidates` are distinct.\"\n  },\n  \"follow_up\": \"Can you optimize the solution further to handle larger `target` values or reduce redundant recursive calls?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find how many steps it takes to make a number 1."}, {"role": "assistant", "content": "{\n  \"title\": \"Minimum Operations to Reduce Integer to 1\",\n  \"description\": \"Given a positive integer `n`, determine the minimum number of operations required to reduce `n` to 1. You can perform the following operations:\\n1. If `n` is even, replace `n` with `n / 2`.\\n2. If `n` is odd, replace `n` with either `n + 1` or `n - 1`.\",\n  \"objective\": \"Implement an efficient algorithm to find the minimum number of operations using greedy and/or dynamic programming techniques.\",\n  \"input\": {\n    \"name\": \"n\",\n    \"type\": \"integer\",\n    \"description\": \"The positive integer to reduce.\",\n    \"constraints\": \"1 <= n <= 2^31 - 1\"\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The minimum number of operations required to reduce `n` to 1.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 8\n      },\n      \"output\": 3,\n      \"explanation\": \"Steps: 8 -> 4 -> 2 -> 1\"\n    },\n    {\n      \"input\": {\n        \"n\": 7\n      },\n      \"output\": 4,\n      \"explanation\": \"Steps: 7 -> 8 -> 4 -> 2 -> 1 or 7 -> 6 -> 3 -> 2 -> 1\"\n    },\n    {\n      \"input\": {\n        \"n\": 4\n      },\n      \"output\": 2,\n      \"explanation\": \"Steps: 4 -> 2 -> 1\"\n    }\n  ],\n  \"hints\": [\n    \"Use recursion or iteration to determine the minimum operations for odd numbers.\",\n    \"When `n` is odd, consider both `n + 1` and `n - 1` to determine the optimal path.\",\n    \"A greedy approach may work well for large values of `n`.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve a time complexity of `O(log n)` by reducing the problem size by half with each operation.\",\n    \"constraints\": \"Minimize unnecessary recursive or iterative calls to avoid exponential time complexity.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given an integer array. From any index, you can jump forward in the array. Odd-numbered jumps should go to smaller values, and even-numbered jumps should go to larger values. Return the number of good starting indices."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an integer array `arr`. From any starting index in the array, you can make a series of jumps. Odd-numbered jumps (1st, 3rd, 5th, ...) require you to jump to the smallest index where the value is greater than or equal to the current index's value. Even-numbered jumps (2nd, 4th, 6th, ...) require you to jump to the largest index where the value is smaller than or equal to the current index's value. A starting index is considered 'good' if you can reach the end of the array by following the rules of the jumps. Your task is to return the number of good starting indices.\",\n  \"objective\": \"Design an algorithm to count the number of good starting indices. A good starting index allows you to reach the end of the array by making jumps according to the described rules.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"You need to identify which indices in the array can eventually reach the last index based on a sequence of alternating jumps. The nature of the jumps depends on whether the jump number is odd or even, which influences the jump conditions.\",\n    \"Step 2 - Clarify Jumping Rules\": \"Odd-numbered jumps go to the smallest possible index with a value greater than or equal to the current index's value. Even-numbered jumps go to the largest possible index with a value smaller than or equal to the current index's value.\",\n    \"Step 3 - Key Insight for Solution\": \"You can solve this problem efficiently by working backward from the end of the array. Track for each index whether it's possible to reach the last index by alternating between odd and even jumps.\",\n    \"Step 4 - Approach\": \"Use dynamic programming to track which indices can reach the end of the array. Starting from the end, for each index, simulate the jump rules and update whether you can reach the last index.\",\n    \"Step 5 - Output Format\": \"Return the total count of good starting indices. A good starting index means that following the jump sequence leads to the end of the array.\",\n    \"Step 6 - Time Complexity Consideration\": \"Ensure that your solution is optimized to run in O(n log n) or O(n) time for large arrays, as the array can be up to 20,000 elements in size.\",\n    \"Final Check - Edge Cases\": \"Consider edge cases like arrays of length 1, where the only starting index is trivially good, or arrays with repeated elements.\",\n    \"Final Check - Constraints Verification\": \"The solution must handle arrays up to 20,000 elements and integers from 0 to 100,000 efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"arr\": [\n          10,\n          13,\n          12,\n          14,\n          15\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"From indices 3 and 4, we can directly reach the end. Other indices either get stuck or can't reach the end.\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          2,\n          3,\n          1,\n          1,\n          4\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"Indices 1, 3, and 4 can reach the end, as shown through alternating odd and even jumps.\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          5,\n          1,\n          3,\n          4,\n          2\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"Indices 1, 2, and 4 can reach the end after following the jump rules.\"\n    }\n  ],\n  \"constraints\": {\n    \"arr_length\": \"1 <= arr.length <= 20,000\",\n    \"arr_values\": \"0 <= arr[i] < 105\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle the largest inputs efficiently, given that the array length can be as large as 20,000?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the length of the longest continuous increasing subsequence in an unsorted array of integers."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the length of the longest continuous increasing subsequence (subarray) in an unsorted array of integers.\",\n  \"objective\": \"Use a sliding window approach to determine the boundaries of increasing subsequences and calculate their lengths dynamically.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Variables\": \"Set `anchor` to 0 to mark the start of the current increasing subsequence and `max_length` to 1 to store the length of the longest subsequence found.\",\n    \"Step 2 - Traverse the Array\": \"Iterate through the array from index 1. For each index `i`, check if `nums[i] > nums[i-1]`.\",\n    \"Step 3 - Update Boundaries\": \"If `nums[i] > nums[i-1]`, continue the current subsequence and calculate its length as `i - anchor + 1`. Update `max_length` if this length is greater.\",\n    \"Step 4 - Reset Start Point\": \"If `nums[i] <= nums[i-1]`, reset `anchor` to `i` as the start of a new subsequence.\",\n    \"Step 5 - Return Result\": \"After traversing the array, return `max_length` as the length of the longest continuous increasing subsequence.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          3,\n          5,\n          4,\n          7\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The longest continuous increasing subsequence is [1, 3, 5] with a length of 3.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          2,\n          2,\n          2,\n          2\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The longest continuous increasing subsequence is [2] with a length of 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10^4\",\n    \"value_range\": \"-10^9 <= nums[i] <= 10^9\"\n  },\n  \"follow_up\": \"Discuss the time complexity of this sliding window approach and compare it to other possible methods, such as a dynamic programming solution.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Calculate the Fibonacci number `F(n)` for a given integer `n`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `n`, calculate the Fibonacci number `F(n)`, where the Fibonacci sequence is defined as `F(0) = 0`, `F(1) = 1`, and for `n > 1`, `F(n) = F(n - 1) + F(n - 2)`.\",\n  \"objective\": \"Implement an efficient algorithm to calculate Fibonacci numbers iteratively using a bottom-up approach with O(1) space complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Identify that Fibonacci numbers are generated by adding the previous two numbers in the sequence, starting with F(0) = 0 and F(1) = 1.\",\n    \"Step 2 - Optimizing with Iterative Approach\": \"Instead of recursive calculation or a large storage array, use an iterative approach that only requires storing the two most recent values, reducing space complexity to O(1).\",\n    \"Step 3 - Initializing Variables\": \"Initialize three variables: `current` to hold F(n), `prev1` to store F(n-1), and `prev2` to store F(n-2). Set `prev1 = 1` and `prev2 = 0` initially.\",\n    \"Step 4 - Iterative Calculation\": \"Iterate from 2 up to `n`. At each step, calculate the current Fibonacci number as `prev1 + prev2`, then update `prev2` to `prev1` and `prev1` to `current`. Continue until reaching `n`.\",\n    \"Step 5 - Edge Case Handling\": \"Handle cases where `n` is 0 or 1 directly by returning `n`, as these are base cases of the sequence.\",\n    \"Final Check - Constraints Verification\": \"Verify that the algorithm operates within the constraint `0 <= n <= 30`, ensuring the solution is efficient and produces correct results for each input.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 2\n      },\n      \"output\": 1,\n      \"explanation\": \"F(2) = F(1) + F(0) = 1 + 0 = 1.\"\n    },\n    {\n      \"input\": {\n        \"n\": 3\n      },\n      \"output\": 2,\n      \"explanation\": \"F(3) = F(2) + F(1) = 1 + 1 = 2.\"\n    },\n    {\n      \"input\": {\n        \"n\": 4\n      },\n      \"output\": 3,\n      \"explanation\": \"F(4) = F(3) + F(2) = 2 + 1 = 3.\"\n    }\n  ],\n  \"constraints\": {\n    \"number_range\": \"0 <= n <= 30\"\n  },\n  \"follow_up\": \"Could you further optimize the solution for cases where `n` might be very large by exploring matrix exponentiation or closed-form solutions?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the `k` closest values in a binary search tree to a target."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary search tree (BST), a `target` value, and an integer `k`, find the `k` values in the BST that are closest to the `target`. Return the values in any order. It is guaranteed that only one unique set of `k` values satisfies this condition.\",\n  \"objective\": \"Design an efficient algorithm to traverse the BST and identify the `k` values closest to the target. Optimize the solution to leverage the BST structure for faster access, especially when the BST is balanced.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the BST allows for ordered traversal, which can help efficiently find the closest values to the target. Focus on minimizing the number of nodes visited.\",\n    \"Step 2 - Inorder Traversal\": \"Perform an inorder traversal to visit nodes in sorted order. Maintain a sliding window or priority queue of size `k` to track the closest values.\",\n    \"Step 3 - Sliding Window\": \"While traversing, add values to a queue or array. If the queue size exceeds `k`, remove the value that is farthest from the target. Continue this process until the traversal is complete.\",\n    \"Step 4 - Optimization for Balanced BST\": \"Use binary search-like traversal to skip irrelevant branches of the tree. Focus on the subtree closest to the target and backtrack only as needed.\",\n    \"Step 5 - Edge Cases\": \"Handle cases such as a single-node tree (`k=1`), target values outside the range of the BST, and trees with duplicate values.\",\n    \"Step 6 - Output\": \"Return the final `k` values in any order.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          4,\n          2,\n          5,\n          1,\n          3\n        ],\n        \"target\": 3.714286,\n        \"k\": 2\n      },\n      \"output\": [\n        4,\n        3\n      ],\n      \"explanation\": \"The closest values to 3.714286 are 4 and 3.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1\n        ],\n        \"target\": 0.0,\n        \"k\": 1\n      },\n      \"output\": [\n        1\n      ],\n      \"explanation\": \"The tree has only one node, which is the closest to the target.\"\n    }\n  ],\n  \"constraints\": {\n    \"tree_size\": \"1 <= k <= n <= 10^4\",\n    \"node_value_range\": \"0 <= Node.val <= 10^9\",\n    \"target_range\": \"-10^9 <= target <= 10^9\"\n  },\n  \"follow_up\": \"Assume the BST is balanced. Can you solve the problem in `O(k + log n)` time by traversing only the relevant portions of the tree?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum number of operations to display `target` starting from `startValue` using a broken calculator that can multiply by 2 or subtract 1."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a broken calculator that can either multiply the current number by 2 or subtract 1 from it, and starting with `startValue`, determine the minimum number of operations required to reach `target`.\",\n  \"objective\": \"Design an efficient algorithm to find the minimum number of operations needed to display `target` on the calculator, starting from `startValue`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the operations: Multiplying by 2 and subtracting 1. The goal is to reach `target` from `startValue` using the minimum number of these operations.\",\n    \"Step 2 - Initial Approach\": \"Consider a brute-force approach with Breadth-First Search (BFS) to explore all possible sequences of operations. However, this may not be efficient for large values.\",\n    \"Step 3 - Optimized Approach\": \"Work backwards from `target` to `startValue`: If `target` is even, divide it by 2; if `target` is odd, increment it by 1. Continue until `target` is less than or equal to `startValue`, then subtract the difference. This leverages the fact that dividing or incrementing reduces the number faster.\",\n    \"Step 4 - Algorithm Steps\": \"1. Initialize `steps` to 0. 2. While `target` is greater than `startValue`: a. If `target` is even, divide by 2. b. If `target` is odd, increment by 1. c. Increment `steps` by 1 each time. 3. Once `target` is less than or equal to `startValue`, add the difference `startValue - target` to `steps`.\",\n    \"Step 5 - Output Format\": \"Return the value of `steps` as the minimum number of operations required.\",\n    \"Step 6 - Code Efficiency and Edge Cases\": \"Focus on achieving linear time complexity, O(log target), leveraging arithmetic operations. Handle edge cases such as `startValue` equal to `target` or when `target` is much larger than `startValue`.\",\n    \"Final Check - Constraints Verification\": \"Verify the solution operates within the constraints: `1 <= startValue, target <= 10^9`. Ensure the algorithm is robust and handles large inputs efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"startValue\": 2,\n        \"target\": 3\n      },\n      \"output\": 2,\n      \"explanation\": \"Use double operation and then decrement operation {2 -> 4 -> 3}.\"\n    },\n    {\n      \"input\": {\n        \"startValue\": 5,\n        \"target\": 8\n      },\n      \"output\": 2,\n      \"explanation\": \"Use decrement and then double {5 -> 4 -> 8}.\"\n    },\n    {\n      \"input\": {\n        \"startValue\": 3,\n        \"target\": 10\n      },\n      \"output\": 3,\n      \"explanation\": \"Use double, decrement and double {3 -> 6 -> 5 -> 10}.\"\n    }\n  ],\n  \"constraints\": {\n    \"value_range\": \"1 <= startValue, target <= 10^9\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle even larger values efficiently, ensuring the algorithm scales well with input size and maintains correctness?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a city grid, return the maximum possible sum that the height of the buildings can be increased."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a city represented as an `n x n` grid where each cell contains the height of a building. The task is to calculate the maximum possible total increase in the building heights such that the skyline of the city from any cardinal direction (north, south, east, west) remains unchanged. You are allowed to increase the height of any building without affecting the city\\u2019s skyline.\",\n  \"objective\": \"Design a function that calculates the maximum sum by which the building heights can be increased while maintaining the skyline unchanged from all directions.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We need to ensure that the skyline from all four cardinal directions is unchanged while increasing the building heights in the grid. This means that for any building, its height cannot exceed the maximum height of the buildings in its row (when viewed from the east/west direction) or in its column (when viewed from the north/south direction).\",\n    \"Step 2 - Key Concepts\": \"The skyline is determined by the maximum height in each row and each column. When increasing building heights, we can only increase them up to the minimum of the maximum heights of their respective row and column.\",\n    \"Step 3 - Approach\": \"We need to first compute the maximum height for each row and each column. Then, for each building, the maximum increase in height is determined by the minimum of the maximum row height and the maximum column height. The sum of all these increases is the desired result.\",\n    \"Step 4 - Solution Strategy\": \"1. Find the maximum building heights in each row and each column. 2. For each building, compute the potential increase in height as the difference between the minimum of its row\\u2019s maximum height and its column\\u2019s maximum height and its current height. 3. Sum up all these increases for the total possible height increase.\",\n    \"Step 5 - Optimizations\": \"This approach works in O(n^2) time complexity due to iterating over the grid to compute the row and column maximums and then iterating through the grid again to calculate the sum of height increases.\",\n    \"Step 6 - Final Solution\": \"The function will compute the row and column maximums, then iterate through each building to calculate the height increase, summing them up and returning the result.\",\n    \"Step 7 - Edge Case Handling\": \"The grid may contain buildings of zero height, or buildings that cannot be increased due to constraints from the skyline. These edge cases should be naturally handled by the algorithm as it calculates the possible increases for each building based on the minimum of row and column heights.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            3,\n            0,\n            8,\n            4\n          ],\n          [\n            2,\n            4,\n            5,\n            7\n          ],\n          [\n            9,\n            2,\n            6,\n            3\n          ],\n          [\n            0,\n            3,\n            1,\n            0\n          ]\n        ]\n      },\n      \"output\": 35,\n      \"explanation\": \"The original grid's skyline can be represented by the maximum heights in each row and column. After increasing the heights of some buildings, the maximum sum increase is 35 without changing the skyline.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0\n          ]\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"Since all the buildings are of zero height, increasing any building will change the skyline. Therefore, no building can be increased, and the result is 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"2 <= n <= 50\",\n    \"height_range\": \"0 <= grid[r][c] <= 100\"\n  },\n  \"follow_up\": \"How would you approach this problem if the city was represented by a 3D grid, where each block could contain multiple buildings stacked on top of each other?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find out if the first player can win the Flip Game."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if the starting player in the Flip Game can guarantee a win, given the initial `currentState`. The game involves flipping any two consecutive `++` into `--`. The player who cannot make a move loses.\",\n  \"objective\": \"Design an algorithm to simulate all possible game outcomes using recursion and backtracking. Identify if the starting player has at least one winning strategy by forcing the opponent into a losing position.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the rules:\\n1. A move is valid if two consecutive `++` can be flipped to `--`.\\n2. The game ends when no valid moves are available.\\n3. The starting player must guarantee a win by strategically choosing moves to force the opponent into a losing position.\",\n    \"Step 2 - Recursive Simulation\": \"Use a recursive function to simulate the game:\\n- For each valid move in `currentState`, flip the `++` to `--` and simulate the opponent's moves.\\n- If the opponent cannot win in any resulting state, the starting player wins.\",\n    \"Step 3 - Pruning\": \"If the starting player finds at least one move that guarantees a win, stop further exploration and return `true`. This avoids unnecessary computation.\",\n    \"Step 4 - Complexity Analysis\": \"Since the game state reduces by two `+` for each move, the depth of recursion is limited to approximately `n/2`. Each state can have up to `O(n)` valid moves. Hence, the complexity is approximately `O(n!)` in the worst case, but practical pruning reduces this significantly.\",\n    \"Step 5 - Edge Cases\": \"Handle scenarios such as:\\n- Strings with no `++`.\\n- Strings where every move leads to a loss for the starting player.\",\n    \"Step 6 - Output\": \"Return `true` if the starting player can guarantee a win, otherwise return `false`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"currentState\": \"++++\"\n      },\n      \"output\": true,\n      \"explanation\": \"The starting player flips the middle `++` to `+--+`, forcing the opponent into a losing position.\"\n    },\n    {\n      \"input\": {\n        \"currentState\": \"+\"\n      },\n      \"output\": false,\n      \"explanation\": \"There are no valid moves, so the starting player loses immediately.\"\n    },\n    {\n      \"input\": {\n        \"currentState\": \"++--++\"\n      },\n      \"output\": true,\n      \"explanation\": \"The starting player can guarantee a win by flipping either pair of `++`.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= currentState.length <= 60\",\n    \"valid_characters\": \"`currentState` contains only `+` and `-`.\"\n  },\n  \"follow_up\": \"Analyze the runtime complexity of your solution and discuss strategies to optimize the simulation using memoization or iterative approaches.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Write a class to find sums of subarrays and update elements in an array."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an integer array `nums` and need to handle multiple queries to either update an element or calculate the sum of a subarray. Implement a class `NumArray` that supports efficient range sum queries and element updates.\",\n  \"objective\": \"Design an efficient data structure to handle dynamic updates and range sum queries, ensuring optimal performance for large arrays and frequent queries.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialization\": \"Initialize the `NumArray` class with the given integer array `nums`. Precompute or structure the data to enable efficient range queries and updates.\",\n    \"Step 2 - Update Operation\": \"Implement the `update` method to change the value at a specific index in `nums` while ensuring that any precomputed structures remain consistent.\",\n    \"Step 3 - Range Sum Query\": \"Implement the `sumRange` method to calculate the sum of elements between two indices `left` and `right` efficiently.\",\n    \"Step 4 - Optimization\": \"Consider using advanced data structures such as segment trees or binary indexed trees to achieve efficient `O(log n)` or better time complexity for both operations.\",\n    \"Step 5 - Edge Cases\": \"Handle edge cases such as queries on single-element ranges, updates to indices at the boundaries, and frequent updates interleaved with queries.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"operations\": [\n          \"NumArray\",\n          \"sumRange\",\n          \"update\",\n          \"sumRange\"\n        ],\n        \"parameters\": [\n          [\n            [\n              1,\n              3,\n              5\n            ]\n          ],\n          [\n            0,\n            2\n          ],\n          [\n            1,\n            2\n          ],\n          [\n            0,\n            2\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        9,\n        null,\n        8\n      ],\n      \"explanation\": \"The initial array is [1, 3, 5].\\n- `sumRange(0, 2)` returns 1 + 3 + 5 = 9.\\n- `update(1, 2)` changes the array to [1, 2, 5].\\n- `sumRange(0, 2)` returns 1 + 2 + 5 = 8.\"\n    },\n    {\n      \"input\": {\n        \"operations\": [\n          \"NumArray\",\n          \"update\",\n          \"sumRange\"\n        ],\n        \"parameters\": [\n          [\n            [\n              10,\n              -5,\n              6\n            ]\n          ],\n          [\n            1,\n            3\n          ],\n          [\n            0,\n            2\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        null,\n        19\n      ],\n      \"explanation\": \"The initial array is [10, -5, 6].\\n- `update(1, 3)` changes the array to [10, 3, 6].\\n- `sumRange(0, 2)` returns 10 + 3 + 6 = 19.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"1 <= nums.length <= 3 * 10^4\",\n    \"element_range\": \"-100 <= nums[i] <= 100\",\n    \"query_count\": \"At most 3 * 10^4 calls will be made to `update` and `sumRange`.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle updates and range sum queries in `O(log n)` time complexity using advanced data structures like segment trees or binary indexed trees?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Sort an array with values 0, 1, and 2 so that similar values are grouped together in the order 0, 1, 2."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `nums` of size `n` with elements representing three colors (red, white, blue) as integers `0`, `1`, and `2`, sort the array **in-place** so that objects of the same color are adjacent in the order red, white, blue. The solution must not use the library's sort function.\",\n  \"objective\": \"Design an efficient algorithm to sort the array using either a counting approach or a one-pass two-pointer method with constant extra space.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the array contains only three distinct values (`0`, `1`, `2`), representing the colors. The task is to reorder these values in-place to achieve the desired order.\",\n    \"Step 2 - Counting Approach\": \"Use a counting sort approach by counting the occurrences of `0`, `1`, and `2`. Then overwrite the array with the appropriate counts.\",\n    \"Step 3 - Dutch National Flag Algorithm\": \"Implement a one-pass solution using three pointers: one to track the position of `0`s, another for `2`s, and the third to traverse the array. Swap elements as necessary to ensure all `0`s, `1`s, and `2`s are grouped in the correct order.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the algorithm works efficiently for constraints `1 <= n <= 300` and uses only constant extra space.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider edge cases such as arrays containing only one color, arrays with all elements already sorted, or arrays of minimum length.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          0,\n          2,\n          1,\n          1,\n          0\n        ]\n      },\n      \"output\": [\n        0,\n        0,\n        1,\n        1,\n        2,\n        2\n      ],\n      \"explanation\": \"The array is sorted in-place to group the colors in the order red (0), white (1), blue (2).\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          0,\n          1\n        ]\n      },\n      \"output\": [\n        0,\n        1,\n        2\n      ],\n      \"explanation\": \"The array is sorted in a single pass to achieve the desired order.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= n <= 300\",\n    \"valid_values\": \"`nums[i]` is one of `0`, `1`, or `2`.\",\n    \"space_complexity\": \"Constant extra space\"\n  },\n  \"follow_up\": \"Can you adapt this algorithm to handle arrays with more than three distinct values efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the common ancestor of two nodes in a BST."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the lowest common ancestor (LCA) of two given nodes in a binary search tree (BST).\",\n  \"objective\": \"Return the LCA node of the two input nodes.\",\n  \"steps\": [\n    \"Start from the root of the BST.\",\n    \"Compare the values of the root node, `p`, and `q`.\",\n    \"If both `p` and `q` are smaller than the root, move to the left subtree.\",\n    \"If both `p` and `q` are larger than the root, move to the right subtree.\",\n    \"Return the root when one value is smaller and the other larger (LCA).\"\n  ],\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          6,\n          2,\n          8,\n          0,\n          4,\n          7,\n          9\n        ],\n        \"p\": 2,\n        \"q\": 8\n      },\n      \"output\": 6\n    },\n    {\n      \"input\": {\n        \"root\": [\n          6,\n          2,\n          8,\n          0,\n          4,\n          7,\n          9\n        ],\n        \"p\": 2,\n        \"q\": 4\n      },\n      \"output\": 2\n    },\n    {\n      \"input\": {\n        \"root\": [\n          2,\n          1\n        ],\n        \"p\": 2,\n        \"q\": 1\n      },\n      \"output\": 2\n    }\n  ],\n  \"constraints\": \"The BST is valid, and both `p` and `q` exist in the tree.\",\n  \"follow_up\": \"How would you optimize for a BST that is frequently updated with insertions and deletions?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find if there's a cycle in the array where you keep jumping indices based on the values in the array."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a **circular** array `nums` where each element indicates the number of indices to move forward (if positive) or backward (if negative). Your task is to determine whether there exists a **cycle** in `nums` such that:\\n1. The cycle involves more than one index (`k > 1`).\\n2. The movement in the cycle is consistent (either all forward or all backward).\\n3. The indices in the cycle repeat infinitely due to the circular nature of the array.\\nReturn `true` if such a cycle exists; otherwise, return `false`.\",\n  \"objective\": \"Design an efficient algorithm to detect a cycle in a circular array while adhering to the rules. Aim to achieve `O(n)` time complexity and `O(1)` space complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the input array `nums` is circular, and each element determines the jump direction and size. The goal is to detect cycles that meet the conditions: consistent direction (all positive or all negative), involve more than one index, and repeat infinitely.\",\n    \"Step 2 - Naive Approach\": \"A naive solution might involve simulating the movement for each index to check if it forms a valid cycle. This would result in `O(n^2)` time complexity, which is inefficient for large inputs.\",\n    \"Step 3 - Optimized Approach Using Two Pointers\": \"Use a fast and slow pointer technique to detect cycles. For each index:\\n- Start from the index and check the direction consistency of the movement.\\n- Use a fast pointer to jump twice as fast as a slow pointer to detect potential cycles.\\n- If a cycle is detected, ensure it involves more than one index and follows the direction consistency.\",\n    \"Step 4 - Implementation Details\": \"Mark visited indices during traversal to avoid redundant checks. This reduces unnecessary computations and ensures each index is processed only once.\",\n    \"Step 5 - Edge Cases\": \"Handle cases where:\\n- `nums` contains only positive or only negative values.\\n- The cycle involves only one element (`k = 1`).\\n- Large values cause jumps that wrap around the array multiple times.\\nEnsure the solution is robust for `nums` of varying lengths and values.\",\n    \"Final Check - Complexity Analysis\": \"Verify that the algorithm runs in `O(n)` time by ensuring each index is processed at most once and uses constant extra space for marking visited indices.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          -1,\n          1,\n          2,\n          2\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The sequence `0 --> 2 --> 3 --> 0` forms a valid cycle of size > 1 with consistent forward movement.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          -1,\n          -2,\n          -3,\n          -4,\n          -5,\n          6\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The only cycle is of size 1, which is invalid as `k <= 1`.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          -1,\n          5,\n          1,\n          4\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The cycle `3 --> 4 --> 3` is valid with consistent forward movement, while the cycle `0 --> 1 --> 0` is invalid due to mixed directions.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 5000\",\n    \"element_range\": \"-1000 <= nums[i] <= 1000\",\n    \"non_zero_elements\": \"All elements of `nums` are non-zero.\",\n    \"cycle_conditions\": \"A valid cycle must involve `k > 1` indices and have consistent direction (all positive or all negative).\"\n  },\n  \"follow_up\": \"Can you modify the algorithm to detect cycles in dynamic inputs where `nums` can change frequently? Ensure the solution maintains `O(n)` time complexity and `O(1)` space complexity.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count how many subarray sums fall in the range."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums` and two integers `lower` and `upper`, determine how many range sums in the array lie within the range `[lower, upper]`. A range sum is defined as the sum of elements from index `i` to `j` inclusive.\",\n  \"objective\": \"Write an efficient algorithm to count the number of range sums in `nums` that fall within `[lower, upper]`. Ensure the solution works for large input sizes by optimizing for time complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Prefix Sum Array\": \"Compute a prefix sum array to efficiently calculate the sum of any subarray in constant time.\",\n    \"Step 2 - Efficient Search\": \"Use a divide-and-conquer approach (similar to merge sort) to count range sums. Alternatively, use a binary indexed tree or balanced binary search tree to handle dynamic range queries.\",\n    \"Step 3 - Handle Large Inputs\": \"Optimize to O(n log n) by avoiding brute force, which can lead to O(n^2) complexity.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          -2,\n          5,\n          -1\n        ],\n        \"lower\": -2,\n        \"upper\": 2\n      },\n      \"output\": 3,\n      \"explanation\": \"The valid ranges are: [0,0] with sum -2, [2,2] with sum -1, and [0,2] with sum 2.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0\n        ],\n        \"lower\": 0,\n        \"upper\": 0\n      },\n      \"output\": 1,\n      \"explanation\": \"The only valid range is [0,0] with sum 0.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3\n        ],\n        \"lower\": 3,\n        \"upper\": 4\n      },\n      \"output\": 3,\n      \"explanation\": \"Valid ranges are [0,1] with sum 3, [1,2] with sum 5 (valid for lower but not upper), and [0,2] with sum 6.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"1 <= nums.length <= 10^5\",\n    \"value_range\": \"-2^31 <= nums[i] <= 2^31 - 1\",\n    \"range_limits\": \"-10^5 <= lower <= upper <= 10^5\"\n  },\n  \"follow_up\": \"Can you solve this problem using a combination of prefix sums and divide-and-conquer to achieve O(n log n) complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Reorder a linked list as specified."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the head of a singly linked list, reorder the list such that it follows the order: L0 -> Ln -> L1 -> Ln-1 -> L2 -> Ln-2 -> .... The values in the nodes may not be modified, and only the structure of the list can be changed.\",\n  \"objective\": \"Design an efficient algorithm to reorder the list in-place.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves rearranging the linked list nodes while preserving their values and structure.\",\n    \"Step 2 - Split the List\": \"Use two pointers to find the middle of the list and split it into two halves.\",\n    \"Step 3 - Reverse the Second Half\": \"Reverse the second half of the list to facilitate merging.\",\n    \"Step 4 - Merge the Halves\": \"Merge the two halves alternately to achieve the required order.\",\n    \"Step 5 - Handle Edge Cases\": \"Handle cases such as a single node or very large lists.\",\n    \"Step 6 - Optimize\": \"Ensure the solution runs in O(n) time and uses O(1) space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2,\n          3,\n          4\n        ]\n      },\n      \"output\": [\n        1,\n        4,\n        2,\n        3\n      ],\n      \"explanation\": \"The reordered list alternates between the first and last elements.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2,\n          3,\n          4,\n          5\n        ]\n      },\n      \"output\": [\n        1,\n        5,\n        2,\n        4,\n        3\n      ],\n      \"explanation\": \"The reordered list alternates between the first and last elements.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"1 <= number of nodes <= 5 * 10^4\",\n    \"node_values\": \"1 <= Node.val <= 1000\"\n  },\n  \"follow_up\": \"Can you implement the solution without additional memory for intermediate lists?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Rearrange a binary search tree so that the leftmost node becomes the root, and all nodes have only one right child."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of a binary search tree (BST), rearrange the tree in **in-order** so that the leftmost node becomes the root of the tree. In this transformed tree, each node should have no left child and only one right child, maintaining the in-order traversal sequence.\",\n  \"objective\": \"Rearrange a binary search tree into a linked list-like structure following the in-order traversal, where the leftmost node becomes the root, and each node only has a right child, no left child.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Identify the need for an in-order traversal of the binary search tree. In-order traversal processes nodes in the sequence: left subtree, root, right subtree. The goal is to transform the BST so that it forms a right-skewed tree where every node has only a right child, keeping the in-order sequence intact.\",\n    \"Step 2 - Initial Approach\": \"Perform an in-order traversal of the binary search tree and store the nodes in a list. Once the list is obtained, reconstruct the tree such that the left child of each node is null and each node points to the next node in the list through its right child.\",\n    \"Step 3 - Optimized Approach\": \"Use an iterative in-order traversal, using a stack to keep track of nodes as you traverse the tree. While traversing, keep a reference to the previous node and attach it as the right child of the current node. Continue this until all nodes have been processed.\",\n    \"Step 4 - Output Format\": \"The output tree should have a structure where each node has only a right child and no left child. The nodes should follow the in-order traversal order of the original binary search tree.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure that the solution is efficient in terms of time complexity, ideally O(n), where n is the number of nodes in the tree. Handle edge cases, such as a tree with only one node.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution works efficiently with the constraints, where the number of nodes is between 1 and 100 and the node values are in the range [0, 1000].\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          5,\n          3,\n          6,\n          2,\n          4,\n          null,\n          8,\n          1,\n          null,\n          null,\n          null,\n          7,\n          9\n        ]\n      },\n      \"output\": [\n        1,\n        null,\n        2,\n        null,\n        3,\n        null,\n        4,\n        null,\n        5,\n        null,\n        6,\n        null,\n        7,\n        null,\n        8,\n        null,\n        9\n      ],\n      \"explanation\": \"The in-order traversal of the BST is [1, 2, 3, 4, 5, 6, 7, 8, 9], and the transformed tree is a linked list where each node has only a right child.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          5,\n          1,\n          7\n        ]\n      },\n      \"output\": [\n        1,\n        null,\n        5,\n        null,\n        7\n      ],\n      \"explanation\": \"The in-order traversal of the BST is [1, 5, 7], and the transformed tree is a linked list following this order.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"1 <= number of nodes <= 100\",\n    \"node_value_range\": \"0 <= Node.val <= 1000\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the common strings between two lists with the smallest index sum."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two arrays of strings, `list1` and `list2`, find the common strings between the lists that have the smallest sum of their indices across both lists. If multiple strings share the same minimum index sum, return all of them.\",\n  \"objective\": \"Identify and return all common strings with the least index sum between `list1` and `list2` using a hashmap for efficient lookup.\",\n  \"meta_prompt\": {\n    \"Step 1 - Map `list1` Indices\": \"Create a hashmap to store each string in `list1` as a key and its index as the corresponding value.\",\n    \"Step 2 - Traverse `list2` for Common Strings\": \"Iterate through `list2` and check if each string exists in the hashmap. If a match is found, calculate the index sum for the matched string from both lists.\",\n    \"Step 3 - Track Minimum Index Sum\": \"Maintain a minimum sum tracker. For each common string, compare the index sum with the current minimum. If it's smaller, update the result list to include only this string; if it's equal, add it to the result list.\",\n    \"Final Step - Return Result\": \"Return all common strings in the result list with the smallest index sum.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"list1\": [\n          \"Shogun\",\n          \"Tapioca Express\",\n          \"Burger King\",\n          \"KFC\"\n        ],\n        \"list2\": [\n          \"Piatti\",\n          \"The Grill at Torrey Pines\",\n          \"Hungry Hunter Steakhouse\",\n          \"Shogun\"\n        ]\n      },\n      \"output\": [\n        \"Shogun\"\n      ],\n      \"explanation\": \"Only 'Shogun' is common with the smallest index sum of 3 (0 in `list1` and 3 in `list2`).\"\n    },\n    {\n      \"input\": {\n        \"list1\": [\n          \"happy\",\n          \"sad\",\n          \"good\"\n        ],\n        \"list2\": [\n          \"sad\",\n          \"happy\",\n          \"good\"\n        ]\n      },\n      \"output\": [\n        \"sad\",\n        \"happy\"\n      ],\n      \"explanation\": \"'sad' and 'happy' have the smallest index sum of 1, so both are returned.\"\n    }\n  ],\n  \"constraints\": {\n    \"length_limits\": \"1 <= list1.length, list2.length <= 1000\",\n    \"string_constraints\": \"1 <= list1[i].length, list2[i].length <= 30, with unique strings in each list\",\n    \"validity\": \"At least one common string exists between `list1` and `list2`.\"\n  },\n  \"follow_up\": \"Consider optimizing further if lists contain many similar elements or are very large, possibly by sorting and using binary search on one of the lists.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum profit by buying and selling stocks multiple times."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `prices` where `prices[i]` is the price of a stock on the `i`th day, return the maximum profit you can achieve with at most two transactions. You cannot engage in multiple transactions simultaneously (i.e., you must sell before buying again).\",\n  \"objective\": \"Design an efficient algorithm to compute the maximum profit achievable with at most two transactions.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task requires dividing the array into two subarrays and calculating the maximum profit in each, then combining the results.\",\n    \"Step 2 - Use Two Passes\": \"Compute the maximum profit for one transaction from left to right, and for one transaction from right to left.\",\n    \"Step 3 - Combine Results\": \"For each day, combine the maximum profit of the left and right parts to find the overall maximum profit.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as arrays with a single element or non-increasing prices.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(n) time and O(n) space, or O(1) space using constant variables.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"prices\": [\n          3,\n          3,\n          5,\n          0,\n          0,\n          3,\n          1,\n          4\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"Buy on day 4 (price = 0), sell on day 6 (price = 3), profit = 3. Then buy on day 7 (price = 1), sell on day 8 (price = 4), profit = 3. Total profit = 3 + 3 = 6.\"\n    },\n    {\n      \"input\": {\n        \"prices\": [\n          1,\n          2,\n          3,\n          4,\n          5\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"Buy on day 1 (price = 1), sell on day 5 (price = 5), profit = 4. Only one transaction is needed.\"\n    },\n    {\n      \"input\": {\n        \"prices\": [\n          7,\n          6,\n          4,\n          3,\n          1\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"No profit can be achieved as prices are non-increasing.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= prices.length <= 10^5\",\n    \"price_range\": \"0 <= prices[i] <= 10^5\"\n  },\n  \"follow_up\": \"Can you extend this solution to allow for k transactions with O(n * k) or O(n) complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "In a string `s` of lowercase letters, return the intervals of the large groups of consecutive characters."}, {"role": "assistant", "content": "{\n  \"description\": \"In a string `s` of lowercase letters, consecutive groups of the same character form intervals. A group is considered **large** if it has 3 or more characters. The task is to find all such large groups in the string and return the intervals `[start, end]` for each group sorted by their start index.\",\n  \"objective\": \"Write a function to find the intervals of large groups in a string, where each large group consists of 3 or more consecutive characters of the same letter.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The problem involves finding groups of consecutive characters in the string, and identifying those groups that are 'large', meaning they contain 3 or more characters.\",\n    \"Step 2 - Approach\": \"To solve the problem, iterate through the string, track the length of each group of consecutive characters, and when the length of a group reaches 3 or more, record its start and end index. The groups should be returned sorted by the start index.\",\n    \"Step 3 - Algorithm\": \"Traverse the string while maintaining the start of each group of consecutive characters. When a new character starts or the string ends, check if the current group is large (length >= 3) and add its interval to the result.\",\n    \"Step 4 - Output\": \"Return the list of intervals for large groups, sorted by the start index of each group.\",\n    \"Step 5 - Constraints\": \"The length of the string can be up to 1000, so an O(n) solution is optimal, where n is the length of the string.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"abbxxxxzzy\"\n      },\n      \"output\": [\n        [\n          3,\n          6\n        ]\n      ],\n      \"explanation\": \"The only large group is 'xxxx', which spans from index 3 to 6.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"abc\"\n      },\n      \"output\": [],\n      \"explanation\": \"There are no large groups because all groups have a length of 1.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"abcdddeeeeaabbbcd\"\n      },\n      \"output\": [\n        [\n          3,\n          5\n        ],\n        [\n          6,\n          9\n        ],\n        [\n          12,\n          14\n        ]\n      ],\n      \"explanation\": \"The large groups are 'ddd', 'eeee', and 'bbb', with their respective intervals.\"\n    }\n  ],\n  \"constraints\": {\n    \"s.length\": \"1 <= s.length <= 1000\",\n    \"s\": \"s contains lowercase English letters only\"\n  },\n  \"follow_up\": \"How can you optimize your approach further if the input string is very large? Could you take advantage of early exits if the group length is less than 3?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the celebrity at a party or determine if none exists using the `knows` function."}, {"role": "assistant", "content": "{\n  \"description\": \"You are tasked with finding the celebrity at a party of `n` people or determining that no celebrity exists. A celebrity is defined as someone who is known by everyone but does not know anyone else. You are allowed to use a helper function `knows(a, b)` to determine if person `a` knows person `b`. Implement a function `findCelebrity(n)` that minimizes the number of calls to `knows`.\",\n  \"objective\": \"Design an efficient algorithm to determine the celebrity using at most `3 * n` calls to the `knows` API. Ensure the solution is asymptotically optimal.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the `knows(a, b)` function provides information on the relationship between two individuals, which can be used to rule out non-celebrities.\",\n    \"Step 2 - Candidate Identification\": \"Use a two-pass approach. First, identify a potential celebrity by iterating through the people and checking relationships. If `knows(a, b)` is true, `a` cannot be the celebrity; otherwise, `b` cannot be the celebrity.\",\n    \"Step 3 - Validation\": \"Once a potential celebrity is identified, validate the candidate by ensuring all other people know the candidate and that the candidate does not know anyone else.\",\n    \"Step 4 - Edge Cases\": \"Handle cases like `n = 2` (smallest possible party size) and situations where no valid celebrity exists.\",\n    \"Step 5 - Output\": \"Return the label of the celebrity if one exists, or `-1` if no celebrity is found.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"graph\": [\n          [\n            1,\n            1,\n            0\n          ],\n          [\n            0,\n            1,\n            0\n          ],\n          [\n            1,\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"Person 1 is the celebrity since everyone knows them, and they know no one else.\"\n    },\n    {\n      \"input\": {\n        \"graph\": [\n          [\n            1,\n            0,\n            1\n          ],\n          [\n            1,\n            1,\n            0\n          ],\n          [\n            0,\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": -1,\n      \"explanation\": \"No celebrity exists as there is no person who satisfies the criteria.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size\": \"2 <= n <= 100\",\n    \"matrix_values\": \"graph[i][j] is either 0 or 1, and graph[i][i] == 1\",\n    \"API_usage_limit\": \"Use the `knows` API at most `3 * n` times.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to use a constant amount of space while adhering to the `3 * n` API call limit?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the leftmost value in the last row of a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of a binary tree, return the leftmost value in the last row of the tree. The leftmost value is defined as the value of the first node encountered on the deepest level of the tree.\",\n  \"objective\": \"Design an algorithm to traverse the tree and locate the leftmost value at the deepest level. This can be efficiently achieved using a depth-first search (DFS) with tracking of the maximum depth and the leftmost value at that depth.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the goal is to identify the leftmost node on the deepest level of the binary tree. This node is encountered by traversing the leftmost path first at each level.\",\n    \"Step 2 - Using Depth-First Search (DFS)\": \"Use a DFS approach to traverse the tree, visiting left children before right children at each level. This allows us to encounter the leftmost node at each depth before any right nodes.\",\n    \"Step 3 - Tracking Depth and Leftmost Value\": \"Maintain two variables: `maxDepth` to store the maximum depth encountered and `bottomLeftValue` to store the leftmost value at that depth. Update these variables whenever a new maximum depth is reached.\",\n    \"Step 4 - Recursive DFS Implementation\": \"Implement a recursive function `dfs` that accepts the current node and its depth. For each node, check if the depth exceeds `maxDepth`. If so, update `maxDepth` and set `bottomLeftValue` to the current node's value. Traverse the left subtree first to ensure leftmost traversal, followed by the right subtree.\",\n    \"Step 5 - Complexity and Constraints\": \"Ensure that the algorithm efficiently handles up to `10^4` nodes within the given value range by visiting each node once (O(n) complexity).\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution works within the constraints `1 <= number of nodes <= 10^4` and `-2^31 <= Node.val <= 2^31 - 1`, handling large trees and integer values correctly.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          2,\n          1,\n          3\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The last row is [1, 3], and the leftmost value in that row is 1.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3,\n          4,\n          null,\n          5,\n          6,\n          null,\n          null,\n          7\n        ]\n      },\n      \"output\": 7,\n      \"explanation\": \"The last row is [4, 5, 6, 7], and the leftmost value in that row is 7.\"\n    }\n  ],\n  \"constraints\": {\n    \"tree_node_range\": \"1 <= number of nodes <= 10^4\",\n    \"node_value_range\": \"-2^31 <= Node.val <= 2^31 - 1\"\n  },\n  \"follow_up\": \"Could you implement this solution iteratively, using a queue for level-order traversal to identify the last row directly?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Generate all combinations of `k` numbers from `1` to `n`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two integers `n` and `k`, generate all possible combinations of `k` numbers chosen from the range `[1, n]`. Return the combinations in any order.\",\n  \"objective\": \"Design an efficient backtracking algorithm to generate all unique combinations, ensuring that combinations are unordered.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves generating all combinations of `k` numbers from `1` to `n`. The order of numbers within each combination does not matter.\",\n    \"Step 2 - Backtracking Approach\": \"Use a recursive backtracking approach to build combinations incrementally. Start with an empty combination and add numbers sequentially, ensuring no duplicate combinations.\",\n    \"Step 3 - Pruning\": \"Stop the recursion early if the remaining numbers are insufficient to complete a combination. This reduces unnecessary computations.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution handles constraints efficiently for `1 <= n <= 20` and `1 <= k <= n`. Aim for a solution with time complexity proportional to the number of generated combinations.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider edge cases such as `n = k` (one combination containing all numbers) or `k = 1` (each number is its own combination).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 4,\n        \"k\": 2\n      },\n      \"output\": [\n        [\n          1,\n          2\n        ],\n        [\n          1,\n          3\n        ],\n        [\n          1,\n          4\n        ],\n        [\n          2,\n          3\n        ],\n        [\n          2,\n          4\n        ],\n        [\n          3,\n          4\n        ]\n      ],\n      \"explanation\": \"All 4 choose 2 = 6 combinations are generated.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1,\n        \"k\": 1\n      },\n      \"output\": [\n        [\n          1\n        ]\n      ],\n      \"explanation\": \"There is only one combination: [1].\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 20\",\n    \"k_range\": \"1 <= k <= n\",\n    \"output_order\": \"Combinations can be returned in any order.\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm to handle cases where `n` and `k` are at their maximum values efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create a calendar to track overlapping events."}, {"role": "assistant", "content": "{\n  \"description\": \"Implement a calendar that tracks the maximum k-booking by keeping track of overlaps in events.\",\n  \"objective\": \"Use a map to track event start and end points and compute the maximum overlap of events dynamically.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Initialize a map `bookingCount` to track the count of event starts (+1) and ends (-1) at specific time points. Maintain a variable `maxK` initialized to 0 to store the maximum overlap of events.\",\n    \"Step 2\": \"For every `book(start, end)` operation, increment the count of `start` and decrement the count of `end` in `bookingCount` to simulate the addition of the new event.\",\n    \"Step 3\": \"Traverse the sorted keys of `bookingCount` to calculate a prefix sum `activeBookings`, representing the number of active events at any time point.\",\n    \"Step 4\": \"During traversal, update `maxK` to the maximum value of `activeBookings` observed so far.\",\n    \"Step 5\": \"Return `maxK` as the result of the `book` operation, representing the maximum k-booking after processing the new event.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"operations\": [\n          \"MyCalendarThree\",\n          \"book\",\n          \"book\",\n          \"book\",\n          \"book\",\n          \"book\",\n          \"book\"\n        ],\n        \"arguments\": [\n          [],\n          [\n            10,\n            20\n          ],\n          [\n            50,\n            60\n          ],\n          [\n            10,\n            40\n          ],\n          [\n            5,\n            15\n          ],\n          [\n            5,\n            10\n          ],\n          [\n            25,\n            55\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        1,\n        1,\n        2,\n        3,\n        3,\n        3\n      ],\n      \"explanation\": [\n        \"Event [10, 20) is booked successfully. Maximum k-booking is 1.\",\n        \"Event [50, 60) is booked successfully. Maximum k-booking remains 1.\",\n        \"Event [10, 40) overlaps partially with [10, 20), increasing k-booking to 2.\",\n        \"Event [5, 15) overlaps with two events, increasing k-booking to 3.\",\n        \"Event [5, 10) overlaps with two events but does not exceed current max k-booking of 3.\",\n        \"Event [25, 55) overlaps partially with other events but does not exceed current max k-booking of 3.\"\n      ]\n    }\n  ],\n  \"constraints\": {\n    \"time_range\": \"0 <= start < end <= 10^9\",\n    \"calls\": \"At most 400 calls to `book`.\",\n    \"description\": \"Efficiently track the maximum number of overlapping events without triple booking constraints.\"\n  },\n  \"follow_up\": \"Analyze the time complexity of the approach. Discuss alternative data structures such as segment trees or interval trees for optimizing overlapping calculations when event ranges become large or book calls exceed the given constraint.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find combinations of numbers that sum to a target."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a collection of candidate numbers (`candidates`) and a target number (`target`), find all unique combinations in `candidates` where the numbers sum to `target`. Each number in `candidates` can only be used **once** in a combination. The solution set must not contain duplicate combinations.\",\n  \"objective\": \"Design an efficient algorithm using backtracking to find all unique combinations that sum to `target`, ensuring each number in `candidates` is used at most once per combination and duplicate combinations are avoided.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves finding unique combinations of numbers from `candidates` that sum to `target`. Each number can only be used once in a combination, and duplicates must be avoided.\",\n    \"Step 2 - Backtracking Approach\": \"Sort the `candidates` array to simplify handling duplicates. Use backtracking to explore combinations. Skip duplicate elements during recursion to avoid duplicate combinations.\",\n    \"Step 3 - Pruning for Efficiency\": \"If the sum of the current combination exceeds `target`, backtrack to avoid unnecessary recursion.\",\n    \"Step 4 - Handle Constraints\": \"Ensure the solution adheres to constraints, such as `1 <= candidates.length <= 100` and `1 <= target <= 30`.\",\n    \"Step 5 - Edge Cases\": \"Handle edge cases such as an empty `candidates` array, all numbers being greater than `target`, or multiple duplicate numbers in `candidates`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"candidates\": [\n          10,\n          1,\n          2,\n          7,\n          6,\n          1,\n          5\n        ],\n        \"target\": 8\n      },\n      \"output\": [\n        [\n          1,\n          1,\n          6\n        ],\n        [\n          1,\n          2,\n          5\n        ],\n        [\n          1,\n          7\n        ],\n        [\n          2,\n          6\n        ]\n      ],\n      \"explanation\": \"All unique combinations that sum to 8 are [1, 1, 6], [1, 2, 5], [1, 7], and [2, 6].\"\n    },\n    {\n      \"input\": {\n        \"candidates\": [\n          2,\n          5,\n          2,\n          1,\n          2\n        ],\n        \"target\": 5\n      },\n      \"output\": [\n        [\n          1,\n          2,\n          2\n        ],\n        [\n          5\n        ]\n      ],\n      \"explanation\": \"All unique combinations that sum to 5 are [1, 2, 2] and [5].\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= candidates.length <= 100\",\n    \"candidate_range\": \"1 <= candidates[i] <= 50\",\n    \"target_range\": \"1 <= target <= 30\",\n    \"unique_values\": \"Each combination must be unique and sorted.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle larger arrays or avoid excessive recursion while maintaining correctness?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a string `s`, return a list of integers representing the size of the parts."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s`, partition it into as many parts as possible so that each letter appears in at most one part. The resultant string should be `s` after concatenating all the parts. Return a list of integers representing the sizes of these parts.\",\n  \"objective\": \"Partition the string `s` into the maximum number of parts such that no letter appears in more than one part, and return the list of the sizes of those parts.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The task is to partition the string such that each character appears in at most one part. This means that the partitioning should be done such that no character occurs again after it has been included in a part.\",\n    \"Step 2 - Strategy\": \"We need to determine the last occurrence of each character in the string `s` and then partition the string at positions where we can ensure that every character before that position appears only in the current part.\",\n    \"Step 3 - Approach\": \"We can use a greedy approach by iterating over the string, tracking the farthest last occurrence of any character in the current part. Once we reach this position, we record the part size and continue from the next position.\",\n    \"Step 4 - Efficient Solution Approach\": \"By iterating through the string only once and using a dictionary to store the last occurrence of each character, we can determine the partition sizes efficiently. This approach ensures the solution is computed in linear time.\",\n    \"Step 5 - Edge Cases\": \"Consider cases with a string where all characters are the same, strings with only one character, or strings where no characters repeat. These cases should still be handled correctly by the solution.\",\n    \"Step 6 - Output Explanation\": \"The output should be a list of integers, where each integer represents the length of a part in the partitioning of the string. This list is the optimal partition for the string.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"ababcbacadefegdehijhklij\"\n      },\n      \"output\": [\n        9,\n        7,\n        8\n      ],\n      \"explanation\": \"The partition is ['ababcbaca', 'defegde', 'hijhklij'], where each part includes distinct characters.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"eccbbbbdec\"\n      },\n      \"output\": [\n        10\n      ],\n      \"explanation\": \"The string 'eccbbbbdec' only has one valid partition, which is the entire string.\"\n    }\n  ],\n  \"constraints\": {\n    \"length\": \"1 <= s.length <= 500\",\n    \"characters\": \"s consists of lowercase English letters.\"\n  },\n  \"follow_up\": \"How would the solution change if `s` was a much larger string, say with a length in the order of millions?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create a class `ValidWordAbbr` to check if a word's abbreviation is unique."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a class `ValidWordAbbr` that validates the uniqueness of a word's abbreviation in a given dictionary. A word's abbreviation is formed by taking the first letter, the count of letters between the first and last letters, and the last letter. If a word has only two characters, its abbreviation is the word itself. The class should support checking whether a given word's abbreviation is unique based on the following rules:\\n1. The abbreviation does not match any word in the dictionary.\\n2. If the abbreviation matches, the word itself must be the same as the dictionary entry with the abbreviation.\",\n  \"objective\": \"Implement the `ValidWordAbbr` class efficiently using a dictionary or hash map to store abbreviations and their corresponding words, ensuring scalability for up to `5000` calls to `isUnique`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the requirements for abbreviations and uniqueness:\\n- For abbreviations, use the format: `<first_letter><number_of_middle_characters><last_letter>`.\\n- Handle two-letter words by using the word itself as its abbreviation.\",\n    \"Step 2 - Data Structure Design\": \"Use a hash map where:\\n- Keys are abbreviations.\\n- Values are sets of words from the dictionary sharing that abbreviation.\",\n    \"Step 3 - Initialization\": \"During `ValidWordAbbr` initialization, populate the hash map by processing each word in the dictionary.\",\n    \"Step 4 - Uniqueness Check\": \"For `isUnique(word)`, check the abbreviation of `word`:\\n- If the abbreviation does not exist in the map, return `true`.\\n- If it exists, ensure the map contains only `word` as its entry.\",\n    \"Step 5 - Edge Cases\": \"Handle edge cases like:\\n- Empty dictionaries.\\n- Words not present in the dictionary.\\n- Words with conflicting abbreviations.\",\n    \"Step 6 - Output\": \"Return `true` if the word's abbreviation is unique; otherwise, return `false`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"operations\": [\n          \"ValidWordAbbr\",\n          \"isUnique\",\n          \"isUnique\",\n          \"isUnique\",\n          \"isUnique\",\n          \"isUnique\"\n        ],\n        \"arguments\": [\n          [\n            \"deer\",\n            \"door\",\n            \"cake\",\n            \"card\"\n          ],\n          [\n            \"dear\"\n          ],\n          [\n            \"cart\"\n          ],\n          [\n            \"cane\"\n          ],\n          [\n            \"make\"\n          ],\n          [\n            \"cake\"\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        false,\n        true,\n        false,\n        true,\n        true\n      ],\n      \"explanation\": [\n        \"Abbreviation 'd2r' for 'dear' conflicts with 'deer' in the dictionary.\",\n        \"Abbreviation 'c2t' for 'cart' is unique.\",\n        \"Abbreviation 'c2e' for 'cane' conflicts with 'cake'.\",\n        \"Abbreviation 'm2e' for 'make' is unique.\",\n        \"Word 'cake' matches its dictionary entry.\"\n      ]\n    }\n  ],\n  \"constraints\": {\n    \"dictionary_length\": \"1 <= dictionary.length <= 3 * 10^4\",\n    \"word_length\": \"1 <= dictionary[i].length, word.length <= 20\",\n    \"character_set\": \"Words consist of lowercase English letters.\",\n    \"api_calls\": \"At most 5000 calls to `isUnique`.\"\n  },\n  \"follow_up\": \"How would you extend the design to handle updates to the dictionary efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the longest palindrome in a string."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s`, your task is to find the longest palindromic substring contained within `s`. A palindrome is defined as a sequence of characters that reads the same backward as forward. The solution should aim for optimal efficiency, avoiding brute force approaches wherever possible. The output should be the longest palindromic substring found in `s`. If there are multiple solutions, any one of them is acceptable.\",\n  \"objective\": \"Develop an efficient algorithm to identify the longest palindromic substring in the given string `s`, aiming for a runtime complexity better than `O(n^3)` (ideally `O(n^2)` or better). Ensure the solution handles edge cases effectively.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the input `s` consists of digits and English letters, and the goal is to find the longest contiguous substring that is a palindrome.\",\n    \"Step 2 - Initial Approach\": \"Consider a brute force approach to generate all substrings of `s` and verify each for the palindrome property. This naive approach would have a time complexity of `O(n^3)` and is not efficient for larger input sizes.\",\n    \"Step 3 - Optimal Approach with Center Expansion\": \"Use an efficient method that involves expanding around potential centers (characters or gaps between characters) to identify palindromes. This approach limits unnecessary checks, achieving `O(n^2)` complexity.\",\n    \"Step 4 - Edge Cases\": \"Handle edge cases such as single-character strings, strings with no repeating characters, or strings where all characters are identical.\",\n    \"Step 5 - Output Format\": \"Return the longest palindromic substring as a string. Ensure the output is correct even for small input sizes.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"babad\"\n      },\n      \"output\": \"bab\",\n      \"explanation\": \"The answer is \\\"bab\\\", but \\\"aba\\\" is also a valid answer.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"cbbd\"\n      },\n      \"output\": \"bb\",\n      \"explanation\": \"The longest palindromic substring is \\\"bb\\\".\"\n    },\n    {\n      \"input\": {\n        \"s\": \"a\"\n      },\n      \"output\": \"a\",\n      \"explanation\": \"The single character \\\"a\\\" is itself a palindrome.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"ac\"\n      },\n      \"output\": \"a\",\n      \"explanation\": \"Both \\\"a\\\" and \\\"c\\\" are valid outputs as single-character palindromes.\"\n    }\n  ],\n  \"constraints\": {\n    \"s_length\": \"1 <= s.length <= 1000\",\n    \"s_content\": \"The string consists of only digits and English letters.\"\n  },\n  \"follow_up\": \"Can you optimize the solution further to achieve `O(n)` time complexity using Manacher's Algorithm?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a string can be broken into dictionary words."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s` and a dictionary of strings `wordDict`, determine if `s` can be segmented into a space-separated sequence of one or more dictionary words. The same word in the dictionary may be reused multiple times in the segmentation.\",\n  \"objective\": \"Design an efficient algorithm to determine if the string can be segmented using the given dictionary.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves checking whether `s` can be broken down into substrings, each of which exists in `wordDict`.\",\n    \"Step 2 - Dynamic Programming\": \"Use a DP array where `dp[i]` is true if the substring `s[0:i]` can be segmented using `wordDict`.\",\n    \"Step 3 - Word Matching\": \"Iterate over all possible substrings and check for matches in `wordDict`.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as empty strings, strings with no matches, or strings with repeated dictionary words.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(n * m) time, where `n` is the length of `s` and `m` is the average length of words in `wordDict`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"leetcode\",\n        \"wordDict\": [\n          \"leet\",\n          \"code\"\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The string 'leetcode' can be segmented as 'leet code'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"applepenapple\",\n        \"wordDict\": [\n          \"apple\",\n          \"pen\"\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The string 'applepenapple' can be segmented as 'apple pen apple'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"catsandog\",\n        \"wordDict\": [\n          \"cats\",\n          \"dog\",\n          \"sand\",\n          \"and\",\n          \"cat\"\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"No segmentation of 'catsandog' matches all the words in the dictionary.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 300\",\n    \"dictionary_size\": \"1 <= wordDict.length <= 1000\",\n    \"word_length\": \"1 <= wordDict[i].length <= 20\"\n  },\n  \"follow_up\": \"Can you optimize the space complexity by using a sliding window instead of a full DP array?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Calculate the power of a number."}, {"role": "assistant", "content": "{\n  \"description\": \"Implement the function `pow(x, n)` which calculates `x` raised to the power `n` (i.e., `x^n`). The implementation must handle both positive and negative powers and compute the result efficiently.\",\n  \"objective\": \"Design an efficient algorithm to compute `pow(x, n)` using an iterative or recursive approach with optimal time complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that `x^n` involves multiplying `x` by itself `n` times if `n > 0`, and dividing 1 by `x^|n|` if `n < 0`. Handle edge cases such as `n = 0` (result is 1) or `x = 0`.\",\n    \"Step 2 - Exponentiation by Squaring\": \"Use the exponentiation by squaring method to optimize computation for large values of `n`. Recursively or iteratively divide the exponent in half and square the base.\",\n    \"Step 3 - Handle Negative Exponents\": \"If `n` is negative, compute the result as `1 / pow(x, -n)` while ensuring no overflow occurs for edge cases like `n = Integer.MIN_VALUE`.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the algorithm handles constraints such as `-100.0 < x < 100.0` and `-2^31 <= n <= 2^31-1` efficiently without overflow or precision loss.\",\n    \"Step 5 - Edge Cases\": \"Consider cases where `x` is a fractional number, `x = 1` or `-1`, and large values of `n` or `-n`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"x\": 2.0,\n        \"n\": 10\n      },\n      \"output\": 1024.0,\n      \"explanation\": \"2^10 = 1024.\"\n    },\n    {\n      \"input\": {\n        \"x\": 2.1,\n        \"n\": 3\n      },\n      \"output\": 9.261,\n      \"explanation\": \"2.1^3 = 9.261.\"\n    },\n    {\n      \"input\": {\n        \"x\": 2.0,\n        \"n\": -2\n      },\n      \"output\": 0.25,\n      \"explanation\": \"2^-2 = 1 / 2^2 = 0.25.\"\n    }\n  ],\n  \"constraints\": {\n    \"x_range\": \"-100.0 < x < 100.0\",\n    \"n_range\": \"-2^31 <= n <= 2^31-1\",\n    \"result_range\": \"-10^4 <= x^n <= 10^4\"\n  },\n  \"follow_up\": \"Can you further optimize the solution for precision and efficiency when handling very large or very small values of `x` and `n`?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a bunch of envelopes, find how many you can nest inside each other."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the maximum number of envelopes that can be Russian-dolled, given a 2D array of envelope dimensions where one envelope can fit inside another only if both its width and height are greater.\",\n  \"objective\": \"Sort and apply a variation of the Longest Increasing Subsequence (LIS) algorithm for an efficient solution.\",\n  \"meta_prompt\": {\n    \"Step 1 - Sorting\": \"Sort the envelopes by width in ascending order. If two envelopes have the same width, sort them by height in descending order.\",\n    \"Step 2 - LIS on Heights\": \"Extract the heights and find the LIS based on heights to determine the maximum number of envelopes that can be nested.\",\n    \"Step 3 - Optimized LIS\": \"Use a binary search approach to achieve O(n log n) complexity for the LIS step.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"envelopes\": [\n          [\n            5,\n            4\n          ],\n          [\n            6,\n            4\n          ],\n          [\n            6,\n            7\n          ],\n          [\n            2,\n            3\n          ]\n        ]\n      },\n      \"output\": 3\n    },\n    {\n      \"input\": {\n        \"envelopes\": [\n          [\n            1,\n            1\n          ],\n          [\n            1,\n            1\n          ],\n          [\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": 1\n    }\n  ],\n  \"constraints\": {\n    \"envelopes.length\": \"1 <= envelopes.length <= 10^5\",\n    \"envelopes[i]\": \"Each envelope dimension is between 1 and 10^5.\"\n  },\n  \"follow_up\": {\n    \"optimization\": \"Explore methods to handle extremely large datasets and evaluate runtime complexity.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Take out all the leaves in a binary tree step by step."}, {"role": "assistant", "content": "{\n  \"title\": \"Remove Leaves in Binary Tree Iteratively\",\n  \"description\": \"Given the `root` of a binary tree, repeatedly collect and remove all leaf nodes until the tree is empty, returning the collected leaf nodes at each step.\",\n  \"input\": {\n    \"name\": \"root\",\n    \"type\": \"TreeNode\",\n    \"description\": \"The root of the binary tree.\",\n    \"constraints\": \"The number of nodes is in the range [1, 100], and `-100 <= Node.val <= 100`.\"\n  },\n  \"output\": {\n    \"type\": \"array of arrays\",\n    \"description\": \"A list of lists, where each inner list contains the values of the nodes collected as leaves at each step.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3,\n          4,\n          5\n        ]\n      },\n      \"output\": [\n        [\n          4,\n          5,\n          3\n        ],\n        [\n          2\n        ],\n        [\n          1\n        ]\n      ],\n      \"explanation\": \"First, collect the leaves [4, 5, 3]. After removing these, the tree reduces to [1, 2]. Then, collect the leaf [2], leaving only the root [1]. Finally, collect the root [1].\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1\n        ]\n      },\n      \"output\": [\n        [\n          1\n        ]\n      ],\n      \"explanation\": \"The tree consists of a single node, so the output is [[1]].\"\n    }\n  ],\n  \"hints\": [\n    \"Use a recursive function to identify and collect the leaves at each level.\",\n    \"Modify the tree to remove the leaves after each collection step.\",\n    \"Store the collected leaves in a list for each iteration.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(n^2) complexity for a tree with a skewed structure or O(n) complexity for balanced trees.\",\n    \"constraints\": \"Avoid reconstructing the tree for each level of the leaf removal process.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given a set of cars and need to find out how many fleets will reach the destination. Each car has a position and speed, and they cannot pass each other."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given `n` cars going to the same destination along a one-lane road. The destination is `target` miles away. You are provided with two integer arrays `position` and `speed`, where each element `position[i]` represents the position of the `i`th car, and `speed[i]` represents the speed of the `i`th car. A car cannot pass another car ahead of it, but it can catch up and drive bumper-to-bumper, matching the slower car's speed. The problem requires calculating the number of car fleets that will arrive at the destination.\",\n  \"objective\": \"Design an algorithm to calculate the number of car fleets that will arrive at the destination. A car fleet is a set of cars that reach the destination at the same time. Cars that meet on the way and drive at the same speed form a fleet. Your goal is to determine how many such fleets exist at the destination.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"You are given the starting positions and speeds of cars on a one-lane road, along with the destination distance. The key observation is that cars cannot pass each other, and thus some cars may group into fleets if one catches up to another.\",\n    \"Step 2 - Initial Approach\": \"Start by calculating the time it takes each car to reach the destination. The time for a car to reach the destination is given by (target - position[i]) / speed[i]. After sorting the cars based on their starting positions, simulate the movement of each car. If a car can catch up to a previous car, they form a fleet and should be considered as one unit for future calculations.\",\n    \"Step 3 - Fleet Formation\": \"To efficiently determine fleets, track the lead car's time and compare it with the current car's time. If the current car takes longer to reach the destination than the lead car, it will not catch up, and thus forms a new fleet. If the current car can catch up to the lead car, they form a fleet and move together.\",\n    \"Step 4 - Output Format\": \"Return the total number of car fleets that reach the destination. A fleet is defined as one or more cars that reach the destination at the same time. The final answer is the number of such fleets.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Optimize the code to handle up to 100,000 cars with positions and speeds varying within large ranges. Focus on sorting the cars by position and efficiently grouping cars into fleets based on their travel times. Handle edge cases such as a single car or cars that never catch up to one another.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the algorithm works efficiently within the constraints: n <= 10^5 cars, target <= 10^6 miles, and speed[i] <= 10^6. The sorting and fleet merging should be done with optimal time complexity.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"target\": 12,\n        \"position\": [\n          10,\n          8,\n          0,\n          5,\n          3\n        ],\n        \"speed\": [\n          2,\n          4,\n          1,\n          1,\n          3\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The cars starting at 10 (speed 2) and 8 (speed 4) will become a fleet at the destination. The car starting at 0 does not catch up to anyone. The cars starting at 5 and 3 will form another fleet.\"\n    },\n    {\n      \"input\": {\n        \"target\": 10,\n        \"position\": [\n          3\n        ],\n        \"speed\": [\n          3\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"There is only one car, so it forms one fleet by itself.\"\n    },\n    {\n      \"input\": {\n        \"target\": 100,\n        \"position\": [\n          0,\n          2,\n          4\n        ],\n        \"speed\": [\n          4,\n          2,\n          1\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The cars starting at positions 0 and 2 will form a fleet. Then, this fleet will merge with the car starting at position 4.\"\n    }\n  ],\n  \"constraints\": {\n    \"n\": \"1 <= n <= 10^5\",\n    \"target\": \"0 < target <= 10^6\",\n    \"positions\": \"0 <= position[i] < target\",\n    \"speed\": \"0 < speed[i] <= 10^6\",\n    \"unique_positions\": \"All the values of position are unique\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle very large inputs (e.g., 100,000 cars) efficiently with O(n log n) time complexity, ensuring the solution works within the given constraints?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Determine if a string can become a palindrome by deleting at most one character."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if a string can become a palindrome after deleting at most one character.\",\n  \"objective\": \"Use a two-pointer approach to check for mismatches and utilize a helper function to validate substrings for palindrome properties.\",\n  \"meta_prompt\": {\n    \"Step 1 - Define Palindrome Check\": \"Create a helper function `checkPalindrome(s, i, j)` that checks if the substring `s[i:j+1]` is a palindrome using two pointers.\",\n    \"Step 2 - Initialize Two Pointers\": \"Set two pointers, `i` at the start of the string and `j` at the end.\",\n    \"Step 3 - Traverse the String\": \"Move the pointers towards each other, comparing the characters at `s[i]` and `s[j]`.\",\n    \"Step 4 - Handle Mismatch\": \"If a mismatch is found, use the helper function to check if either `s[i+1:j+1]` or `s[i:j]` is a palindrome. Return true if either is valid.\",\n    \"Step 5 - Return Result\": \"If no mismatches are found, return true as the string is already a palindrome. Otherwise, return false.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"aba\"\n      },\n      \"output\": true,\n      \"explanation\": \"The string 'aba' is already a palindrome.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"abca\"\n      },\n      \"output\": true,\n      \"explanation\": \"Deleting 'c' results in the palindrome 'aba'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"abc\"\n      },\n      \"output\": false,\n      \"explanation\": \"No single deletion can make 'abc' a palindrome.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 10^5\",\n    \"valid_characters\": \"s consists of lowercase English letters\"\n  },\n  \"follow_up\": \"Discuss how the two-pointer approach ensures linear time complexity and the benefits of early termination when mismatches are resolved.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Insert operators into a string of digits to match a target value."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `num` containing only digits and an integer `target`, generate all possible expressions by inserting binary operators (`'+'`, `'-'`, and `'*'`) between the digits such that the resulting expression evaluates to the given `target`. Ensure that operands do not have leading zeros.\",\n  \"objective\": \"Implement a backtracking algorithm to explore all possible operator insertions and filter valid expressions that match the target.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the problem requires generating all valid expressions by inserting operators into a string of digits and evaluating them to check against the target.\",\n    \"Step 2 - Recursive Backtracking\": \"Use a recursive function to try every possible split of the string and insert operators between splits. Track the running total of the current expression, considering operator precedence.\",\n    \"Step 3 - Operand Validation\": \"Ensure that operands do not have leading zeros (e.g., '05' is invalid). Validate substrings before converting them to integers.\",\n    \"Step 4 - Operator Handling\": \"Handle the precedence of operators correctly by maintaining the intermediate results of multiplication separately to ensure accurate evaluation.\",\n    \"Step 5 - Edge Cases\": \"Handle cases like a single-digit input (no operators required), large target values, and strings with no valid expressions.\",\n    \"Step 6 - Output\": \"Return all valid expressions as a list of strings. If no valid expressions exist, return an empty list.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"num\": \"123\",\n        \"target\": 6\n      },\n      \"output\": [\n        \"1*2*3\",\n        \"1+2+3\"\n      ],\n      \"explanation\": \"Both expressions evaluate to the target value 6.\"\n    },\n    {\n      \"input\": {\n        \"num\": \"232\",\n        \"target\": 8\n      },\n      \"output\": [\n        \"2*3+2\",\n        \"2+3*2\"\n      ],\n      \"explanation\": \"Both expressions evaluate to the target value 8.\"\n    },\n    {\n      \"input\": {\n        \"num\": \"3456237490\",\n        \"target\": 9191\n      },\n      \"output\": [],\n      \"explanation\": \"No valid expressions evaluate to the target.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= num.length <= 10\",\n    \"valid_digits\": \"num consists of only digits.\",\n    \"target_range\": \"-2^31 <= target <= 2^31 - 1\"\n  },\n  \"follow_up\": \"Can you optimize the solution to reduce unnecessary computation and evaluate expressions efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You have two strings. Find the letter in one string that is not in the other."}, {"role": "assistant", "content": "{\n  \"title\": \"Find the Extra Letter\",\n  \"description\": \"Determine the extra letter that was added to string `t` after shuffling string `s` and appending one additional character.\",\n  \"objective\": \"Efficiently identify the added letter by leveraging properties of strings and their characters.\",\n  \"input\": {\n    \"parameters\": [\n      {\n        \"name\": \"s\",\n        \"type\": \"string\",\n        \"description\": \"The original string consisting of lowercase English letters.\",\n        \"constraints\": \"0 <= s.length <= 1000\"\n      },\n      {\n        \"name\": \"t\",\n        \"type\": \"string\",\n        \"description\": \"The modified string after shuffling `s` and appending one character.\",\n        \"constraints\": \"t.length == s.length + 1\"\n      }\n    ]\n  },\n  \"output\": {\n    \"type\": \"character\",\n    \"description\": \"The extra character that was added to `t`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"abcd\",\n        \"t\": \"abcde\"\n      },\n      \"output\": \"e\",\n      \"explanation\": \"The extra letter is 'e', which is the additional character in `t`.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"\",\n        \"t\": \"y\"\n      },\n      \"output\": \"y\",\n      \"explanation\": \"The extra letter is 'y', as `s` is empty and `t` contains one character.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"xxyyzz\",\n        \"t\": \"xxyzzyz\"\n      },\n      \"output\": \"z\",\n      \"explanation\": \"The extra letter is 'z', added after shuffling `s`.\"\n    }\n  ],\n  \"hints\": [\n    \"Sum up the ASCII values of characters in both strings. The difference will give you the ASCII value of the extra character.\",\n    \"Alternatively, use a frequency count of characters in `t` and subtract the counts from `s` to isolate the extra character.\",\n    \"Using XOR on all characters in `s` and `t` is a space-efficient method to find the extra character.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(n) time complexity with O(1) additional space.\",\n    \"constraints\": \"Avoid using complex data structures that increase memory usage unnecessarily.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a color '#ABCDEF', return the shorthand representation of the most similar color."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a color in the format '#ABCDEF' (where each pair of characters represents the red, green, and blue color components), your task is to return the shorthand representation of the color that is most similar to the input color. The shorthand format uses one character for each color component, i.e., '#XYZ' where 'X', 'Y', and 'Z' are shorthand hexadecimal representations of the red, green, and blue values. The similarity between two colors is calculated using the formula -(AB - UV)\\u00b2 - (CD - WX)\\u00b2 - (EF - YZ)\\u00b2, where 'AB', 'CD', and 'EF' are the components of the given color and 'UV', 'WX', and 'YZ' are the components of the shorthand color.\",\n  \"objective\": \"Write an algorithm that computes the shorthand color that is most similar to the given color by comparing all possible shorthand representations and finding the one with the highest similarity score.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Understand the input format where the color is represented in the form '#ABCDEF', with 'A', 'B', 'C', 'D', 'E', and 'F' being hexadecimal digits. The output should be the shorthand form '#XYZ', which represents the most similar color.\",\n    \"Step 2 - Approach Consideration\": \"You need to calculate the similarity between the given color and each shorthand color representation. The shorthand format consists of a single character for each color component, and we need to compare all valid shorthand representations for similarity.\",\n    \"Step 3 - Optimization\": \"Since the input format is fixed, a brute-force approach could work where you check each possible shorthand color for its similarity. However, aim to optimize the solution to avoid redundant calculations.\",\n    \"Step 4 - Output Format\": \"Return the shorthand color as a string, e.g., '#XYZ'. Ensure that the algorithm can handle all valid input values, and output a color with the highest similarity.\",\n    \"Step 5 - Edge Case Handling\": \"Handle edge cases where the input color has extreme values (e.g., very low or high red, green, and blue components).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"color\": \"#09f166\"\n      },\n      \"output\": \"#11ee66\",\n      \"explanation\": \"The similarity between '#09f166' and '#11ee66' is -64 -9 -0 = -73, which is the highest similarity among any shorthand color.\"\n    },\n    {\n      \"input\": {\n        \"color\": \"#4e3fe1\"\n      },\n      \"output\": \"#5544dd\",\n      \"explanation\": \"The shorthand color '#5544dd' has the highest similarity to '#4e3fe1'.\"\n    }\n  ],\n  \"constraints\": {\n    \"color_length\": \"color.length == 7\",\n    \"color_format\": \"color[0] == '#' and color[i] is either digit or a character in the range ['a', 'f'] for i > 0.\"\n  },\n  \"follow_up\": \"How can you optimize the solution to avoid checking all possible shorthand colors repeatedly?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the shortest path for a ball to roll into a hole in a maze, or return 'impossible' if it can't reach the hole."}, {"role": "assistant", "content": "{\n  \"description\": \"You are tasked with navigating a ball in a maze to drop it into a hole. The maze consists of empty spaces (`0`) and walls (`1`). The ball rolls until it hits a wall or the hole. Given the maze's layout, the starting position of the ball, and the position of the hole, return the shortest path instructions for the ball to drop into the hole. If multiple shortest paths exist, return the lexicographically smallest one. If it is not possible to reach the hole, return 'impossible'.\",\n  \"objective\": \"Design an efficient algorithm to find the shortest path in terms of distance for the ball to reach the hole, using breadth-first search (BFS) or Dijkstra's algorithm to account for both distance and lexicographical order.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the problem of finding the shortest path in a grid-based maze where the ball can only stop at walls or the hole. Take into account that the ball rolls continuously until it encounters an obstacle.\",\n    \"Step 2 - Input and Output Details\": \"Input: A maze represented as a 2D binary matrix, starting coordinates of the ball, and coordinates of the hole. Output: A string of instructions ('u', 'd', 'l', 'r') for the shortest path or 'impossible' if the hole is unreachable.\",\n    \"Step 3 - Algorithm Choice\": \"Use Dijkstra's algorithm to determine the shortest distance to the hole while prioritizing lexicographical order for paths of equal length. BFS can also be adapted with a priority queue for lexicographical order.\",\n    \"Step 4 - Data Structures\": \"Use a priority queue to manage exploration of paths by both distance and lexicographical order. Maintain a visited set to track explored nodes and avoid cycles.\",\n    \"Step 5 - Edge Cases\": \"Consider scenarios such as unreachable holes, the ball starting near the hole but not being able to stop directly, and large mazes with many walls.\",\n    \"Step 6 - Complexity Analysis\": \"Ensure the solution is efficient for grid sizes up to 100x100 by optimizing the traversal algorithm to handle continuous rolling and prioritizing lexicographical order efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"maze\": [\n          [\n            0,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            1,\n            1,\n            0,\n            0,\n            1\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            1,\n            0,\n            0,\n            1\n          ],\n          [\n            0,\n            1,\n            0,\n            0,\n            0\n          ]\n        ],\n        \"ball\": [\n          4,\n          3\n        ],\n        \"hole\": [\n          0,\n          1\n        ]\n      },\n      \"output\": \"lul\",\n      \"explanation\": \"The shortest path is left -> up -> left with distance 6. Other valid shortest paths are lexicographically larger.\"\n    },\n    {\n      \"input\": {\n        \"maze\": [\n          [\n            0,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            1,\n            1,\n            0,\n            0,\n            1\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            1,\n            0,\n            0,\n            1\n          ],\n          [\n            0,\n            1,\n            0,\n            0,\n            0\n          ]\n        ],\n        \"ball\": [\n          4,\n          3\n        ],\n        \"hole\": [\n          3,\n          0\n        ]\n      },\n      \"output\": \"impossible\",\n      \"explanation\": \"The ball cannot reach the hole as there is no valid path.\"\n    },\n    {\n      \"input\": {\n        \"maze\": [\n          [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            1,\n            0,\n            0,\n            1,\n            0\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            1,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1\n          ]\n        ],\n        \"ball\": [\n          0,\n          4\n        ],\n        \"hole\": [\n          3,\n          5\n        ]\n      },\n      \"output\": \"dldr\",\n      \"explanation\": \"The shortest path is down -> left -> down -> right with a distance of 6.\"\n    }\n  ],\n  \"constraints\": {\n    \"maze_dimensions\": \"1 <= m, n <= 100\",\n    \"valid_positions\": \"Both ball and hole are in empty spaces (`0`)\",\n    \"movement_rules\": \"The ball rolls until it hits a wall or the hole. Multiple shortest paths should consider lexicographical order.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"How would the solution change if the maze were larger than 100x100?\",\n    \"question_2\": \"What modifications would be needed to handle multiple holes or obstacles with weights?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a grid of cubes, calculate the total area of their projections."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a 2D grid where each cell contains a tower of cubes. The height of the tower is represented by the value at each cell in the grid. You are asked to calculate the total area of projections of these towers onto the xy, yz, and zx planes. Each projection represents a shadow of the 3D structure when viewed from the top, front, and side. Your task is to return the total area of all three projections combined.\",\n  \"objective\": \"Design an algorithm that computes the total area of the projections of cubes on the xy, yz, and zx planes, given an n x n grid where each cell represents a tower of cubes. The solution should efficiently calculate these projections without redundant computations.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Start by analyzing the 3D structure formed by the cubes in the grid. The projections onto the xy, yz, and zx planes are essentially the maximum heights for each row, column, and depth respectively.\",\n    \"Step 2 - Approach for xy Projection\": \"To calculate the xy projection, sum the maximum value from each column in the grid. This represents the view of the cubes when looking from the top.\",\n    \"Step 3 - Approach for yz Projection\": \"For the yz projection, sum the maximum value from each row in the grid. This represents the view of the cubes from the front.\",\n    \"Step 4 - Approach for zx Projection\": \"For the zx projection, sum the maximum value from each depth (column across all rows). This represents the view of the cubes from the side.\",\n    \"Step 5 - Combine Projections\": \"Combine the results from all three projections to obtain the total area of the projections.\",\n    \"Final Check - Constraints Verification\": \"Verify that the grid has the required constraints: n must be between 1 and 50, and the grid values should be within the range 0 to 50.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            2\n          ],\n          [\n            3,\n            4\n          ]\n        ]\n      },\n      \"output\": 17,\n      \"explanation\": \"The three projections add up to a total area of 17. The projections from the top, front, and side sum to this value.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            2\n          ]\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"The single cube's projections contribute a total area of 5.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            0\n          ],\n          [\n            0,\n            2\n          ]\n        ]\n      },\n      \"output\": 8,\n      \"explanation\": \"The projections from the top, front, and side result in a total area of 8.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_size\": \"1 <= n <= 50\",\n    \"grid_elements_range\": \"0 <= grid[i][j] <= 50\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm for large grid sizes, ensuring it works within the given constraints efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a string is a valid tree preorder traversal."}, {"role": "assistant", "content": "{\n  \"description\": \"Verify if a given string `preorder` represents a valid preorder traversal serialization of a binary tree, where `#` represents a null node. The input string consists of integers and `#` separated by commas, and no tree reconstruction is allowed.\",\n  \"objective\": \"Determine the validity of the serialization by analyzing the relationship between available slots and nodes in the string.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the structure of a valid preorder traversal serialization, where each non-null node provides 2 child slots, and each `#` (null) node fills one slot.\",\n    \"Step 2 - Slot Management\": \"Track the number of available slots as you parse the string. Start with one slot for the root node. Decrement the slot count for each parsed node and add 2 slots for each non-null node.\",\n    \"Step 3 - Validation\": \"Ensure that slots never drop below zero during traversal, and at the end of parsing, the slot count must be exactly zero for the serialization to be valid.\",\n    \"Step 4 - Edge Cases\": \"Handle edge cases like a single null node (`#`), strings with excess or insufficient nodes, and invalid orderings.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"preorder\": \"9,3,4,#,#,1,#,#,2,#,6,#,#\"\n      },\n      \"output\": true,\n      \"explanation\": \"The serialization represents a valid preorder traversal of a binary tree.\"\n    },\n    {\n      \"input\": {\n        \"preorder\": \"1,#\"\n      },\n      \"output\": false,\n      \"explanation\": \"The serialization ends prematurely, making it invalid.\"\n    },\n    {\n      \"input\": {\n        \"preorder\": \"9,#,#,1\"\n      },\n      \"output\": false,\n      \"explanation\": \"The string represents an invalid order where extra nodes appear after a complete subtree.\"\n    }\n  ],\n  \"constraints\": {\n    \"preorder_length\": \"1 <= preorder.length <= 10^4\",\n    \"node_values\": \"`preorder` contains integers in the range [0, 100] or `#`.\",\n    \"format\": \"The input format is guaranteed to be valid.\"\n  },\n  \"follow_up\": \"How would you optimize your solution to handle very large inputs efficiently? Can you solve it in O(n) time complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the longest file path in a directory structure."}, {"role": "assistant", "content": "{\n  \"title\": \"Longest Absolute Path to a File\",\n  \"description\": \"Calculate the longest absolute path to a file in a simulated file system represented as a string.\",\n  \"objective\": \"Efficiently parse the input string and compute the maximum path length to any file, handling nested directories and files.\",\n  \"input\": {\n    \"name\": \"input\",\n    \"type\": \"string\",\n    \"description\": \"A formatted string representing the file system, using '\\\\n' for new lines and '\\\\t' for indentation.\",\n    \"constraints\": [\n      \"1 <= input.length <= 10^4\",\n      \"input contains valid file and directory names.\"\n    ]\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The length of the longest absolute path to a file, or 0 if no files are present.\"\n  },\n  \"examples\": [\n    {\n      \"input\": \"input = 'dir\\\\n\\\\tsubdir1\\\\n\\\\tsubdir2\\\\n\\\\t\\\\tfile.ext'\",\n      \"output\": \"20\",\n      \"explanation\": \"The file system has one file 'file.ext' with the path 'dir/subdir2/file.ext', whose length is 20.\"\n    },\n    {\n      \"input\": \"input = 'dir\\\\n\\\\tsubdir1\\\\n\\\\t\\\\tfile1.ext\\\\n\\\\t\\\\tsubsubdir1\\\\n\\\\tsubdir2\\\\n\\\\t\\\\tsubsubdir2\\\\n\\\\t\\\\t\\\\tfile2.ext'\",\n      \"output\": \"32\",\n      \"explanation\": \"The longest path is 'dir/subdir2/subsubdir2/file2.ext' with a length of 32.\"\n    },\n    {\n      \"input\": \"input = 'a'\",\n      \"output\": \"0\",\n      \"explanation\": \"No files are present in the file system.\"\n    }\n  ],\n  \"hints\": [\n    \"Use a stack or similar data structure to keep track of directory depths and their cumulative path lengths.\",\n    \"Identify files by checking for the presence of a '.' in the name.\",\n    \"Update the maximum path length whenever a file is found.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(n) time complexity by processing the input string in a single pass.\",\n    \"constraints\": \"Minimize extra memory usage while maintaining efficient parsing and path length calculations.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given an integer `k`, return the number of non-negative integers `x` such that `f(x) = k`, where `f(x)` is the number of trailing zeroes in `x!`."}, {"role": "assistant", "content": "{\n  \"description\": \"The function `f(x)` computes the number of trailing zeroes at the end of `x!`, the factorial of `x`. You are given an integer `k`, and your task is to find how many non-negative integers `x` have the property that `f(x) = k`, i.e., how many values of `x` such that the factorial `x!` ends with exactly `k` zeroes.\",\n  \"objective\": \"Return the number of integers `x` for which `f(x) = k`, where `f(x)` represents the number of trailing zeroes in the factorial of `x`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We need to compute the number of trailing zeroes at the end of `x!`, and for a given `k`, determine how many non-negative integers `x` have exactly `k` trailing zeroes in `x!`.\",\n    \"Step 2 - Approach\": \"The trailing zeroes in a factorial are determined by how many times the number `10` divides into `x!`. Since `10` is the product of `2` and `5`, and there are generally more factors of `2` than factors of `5`, the number of trailing zeroes in `x!` is determined by how many times `5` divides into `x!`. We can count these occurrences of `5` by considering how many multiples of 5, 25, 125, etc., are less than or equal to `x`.\",\n    \"Step 3 - Plan\": \"1. Implement a function to calculate the number of trailing zeroes in `x!` using the factors of 5. 2. For each possible value of `k`, determine the range of `x` that satisfies `f(x) = k`. 3. Use binary search or an efficient iteration strategy to count the number of such `x` values for the given `k`.\",\n    \"Step 4 - Edge Cases\": \"Handle edge cases such as very large `k` values (where no factorial will have that many trailing zeroes), and cases where `k = 0` (i.e., the factorials of small numbers).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"k\": 0\n      },\n      \"output\": 5,\n      \"explanation\": \"The factorials of 0!, 1!, 2!, 3!, and 4! have exactly 0 trailing zeroes.\"\n    },\n    {\n      \"input\": {\n        \"k\": 5\n      },\n      \"output\": 0,\n      \"explanation\": \"There is no `x` such that `x!` ends with exactly 5 trailing zeroes.\"\n    },\n    {\n      \"input\": {\n        \"k\": 3\n      },\n      \"output\": 5,\n      \"explanation\": \"There are five values of `x` where `f(x) = 3`: 15!, 16!, 17!, 18!, and 19!.\"\n    }\n  ],\n  \"constraints\": {\n    \"k_range\": \"0 <= k <= 10^9\",\n    \"x_range\": \"We expect that for values of `k` close to the upper bound, no solutions will exist, as factorials grow rapidly.\"\n  },\n  \"follow_up\": \"What would the approach look like if we had to compute this for very large values of `k` or for extremely large factorials (up to `x = 10^9`)?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a polygon given by a list of points is convex."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `points` representing the vertices of a polygon in sequential order, determine whether the polygon is convex. A polygon is convex if all its internal angles are less than 180 degrees, which implies that the cross product of edges at each vertex should maintain a consistent sign.\",\n  \"objective\": \"Efficiently determine whether the polygon represented by the given points is convex, ensuring the solution is scalable for large input sizes while considering edge cases such as collinear points.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand the Problem\": \"A convex polygon has no internal angle exceeding 180 degrees, and the cross product of consecutive edges determines the orientation. Consistent cross product signs indicate convexity.\",\n    \"Step 2 - Approach\": \"Iterate through all vertices and compute the cross product for consecutive edges. Ensure the sign of the cross product remains the same (either all positive or all negative) throughout the iteration.\",\n    \"Step 3 - Implementation Steps\": \"1. Handle edge cases (e.g., minimum of 3 points). 2. Iterate over all edges using modular arithmetic to account for the cyclic nature of the polygon. 3. Compute the cross product for each triplet of points and check the sign consistency.\",\n    \"Step 4 - Edge Case Handling\": \"Ensure collinear points and polygons with extreme coordinates are handled correctly. Validate that the input represents a simple polygon as guaranteed by the constraints.\",\n    \"Step 5 - Output\": \"Return `true` if the polygon is convex and `false` otherwise.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"points\": [\n          [\n            0,\n            0\n          ],\n          [\n            0,\n            5\n          ],\n          [\n            5,\n            5\n          ],\n          [\n            5,\n            0\n          ]\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The polygon is a rectangle, which is convex since all internal angles are 90 degrees.\"\n    },\n    {\n      \"input\": {\n        \"points\": [\n          [\n            0,\n            0\n          ],\n          [\n            0,\n            10\n          ],\n          [\n            10,\n            10\n          ],\n          [\n            10,\n            0\n          ],\n          [\n            5,\n            5\n          ]\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The polygon is not convex because the point [5, 5] forms an internal angle exceeding 180 degrees.\"\n    },\n    {\n      \"input\": {\n        \"points\": [\n          [\n            0,\n            0\n          ],\n          [\n            1,\n            1\n          ],\n          [\n            2,\n            0\n          ]\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"This is a triangle, which is always convex.\"\n    }\n  ],\n  \"constraints\": {\n    \"minimum_points\": \"The polygon must have at least 3 points.\",\n    \"unique_points\": \"All points are unique.\",\n    \"coordinate_range\": \"Each coordinate is in the range [-10^4, 10^4].\"\n  },\n  \"follow_up\": \"Can you optimize the solution for scenarios with extremely large inputs, ensuring low memory overhead and fast execution?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a binary tree can be split into two subtrees with equal sums by removing one edge."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if it is possible to partition a binary tree into two subtrees with equal sums by removing exactly one edge.\",\n  \"objective\": \"Use depth-first search (DFS) to calculate subtree sums and check if any subtree's sum equals half the total sum of the tree.\",\n  \"meta_prompt\": {\n    \"Step 1 - Compute Total Tree Sum\": \"Perform a DFS traversal to calculate the total sum of all node values in the tree.\",\n    \"Step 2 - Record Subtree Sums\": \"During the DFS traversal, calculate and store the sum of each subtree in a set or list for later comparison.\",\n    \"Step 3 - Check for Equal Partition\": \"Verify if half the total sum exists in the recorded subtree sums. Exclude the total tree sum itself from consideration to ensure a valid partition.\",\n    \"Step 4 - Handle Edge Cases\": \"If the total sum of the tree is odd, return false immediately since it cannot be divided into two equal parts.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          5,\n          10,\n          10,\n          null,\n          null,\n          2,\n          3\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"By removing the edge between the root and one of its subtrees, the tree can be partitioned into two subtrees with equal sums.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          10,\n          null,\n          null,\n          2,\n          20\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"No subtree's sum equals half the total sum of the tree, so it cannot be partitioned into two equal parts.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_range\": \"1 <= number of nodes <= 10^4\",\n    \"node_value_range\": \"-10^5 <= Node.val <= 10^5\"\n  },\n  \"follow_up\": \"Discuss the time complexity of the DFS approach and potential optimizations for very large trees.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Sort an array using pancake flips."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of integers `arr`, the task is to sort the array using a sequence of pancake flips. In each flip, you choose an integer `k` where `1 <= k <= arr.length`, and reverse the sub-array `arr[0...k-1]`. The goal is to determine the sequence of `k`-values that sorts the array in the minimum number of flips.\",\n  \"objective\": \"Design an algorithm to sort the array using a sequence of pancake flips, where each flip reverses a sub-array from the beginning up to a given index `k`. Return the sequence of flip indices that sorts the array. The solution must work within `10 * arr.length` flips and is judged based on the correctness and efficiency of the solution.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The array `arr` is a permutation of integers from `1` to `arr.length`. Sorting must be achieved by performing pancake flips where each flip reverses a sub-array of the first `k` elements.\",\n    \"Step 2 - Initial Approach\": \"Consider iterating through the array and identifying the largest unsorted element, then bringing it to the front by performing a flip. After that, flip it into its correct position.\",\n    \"Step 3 - Efficient Algorithm\": \"Try to minimize the number of flips by selecting the optimal `k` values. The number of flips should be within `10 * arr.length`, and you should try to avoid unnecessary flips that don't contribute to sorting.\",\n    \"Step 4 - Output Format\": \"The output should be a list of integers representing the sequence of `k` values used for the flips. If the array is already sorted, return an empty list.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Focus on creating an algorithm that works efficiently within the problem's constraints, handling arrays of length up to 100 and ensuring that no unnecessary flips are made.\",\n    \"Final Check - Constraints Verification\": \"Make sure that your solution respects the constraint `1 <= arr.length <= 100`, and that the solution is efficient in terms of both time complexity and the number of flips.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"arr\": [\n          3,\n          2,\n          4,\n          1\n        ]\n      },\n      \"output\": [\n        4,\n        2,\n        4,\n        3\n      ],\n      \"explanation\": \"The pancake flips proceed as follows: Starting with [3, 2, 4, 1], flip at k = 4 gives [1, 4, 2, 3], flip at k = 2 gives [4, 1, 2, 3], flip at k = 4 gives [3, 2, 1, 4], and finally flip at k = 3 gives [1, 2, 3, 4].\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": [],\n      \"explanation\": \"The input is already sorted, so no flips are needed.\"\n    }\n  ],\n  \"constraints\": {\n    \"arr_length\": \"1 <= arr.length <= 100\",\n    \"arr_elements_range\": \"1 <= arr[i] <= arr.length\",\n    \"unique_elements\": \"All integers in `arr` are unique (i.e., `arr` is a permutation of integers from 1 to `arr.length`).\"\n  },\n  \"follow_up\": \"Can you improve the solution further in terms of the number of flips? Consider approaches that can optimize the pancake flip process.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a binary tree is symmetric around its center."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary tree, determine whether it is symmetric (i.e., a mirror image of itself around its center).\",\n  \"objective\": \"Design an algorithm to check whether a binary tree is symmetric.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that a tree is symmetric if the left subtree is a mirror image of the right subtree.\",\n    \"Step 2 - Recursive Approach\": \"Recursively compare corresponding nodes in the left and right subtrees for symmetry.\",\n    \"Step 3 - Iterative Approach\": \"Use a queue to iteratively compare nodes in the left and right subtrees for symmetry.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider cases such as an empty tree, a single-node tree, or trees with null nodes.\",\n    \"Step 5 - Optimize\": \"Ensure the solution is efficient in both time (O(n)) and space (O(h)), where `h` is the height of the tree.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          2,\n          3,\n          4,\n          4,\n          3\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The tree is symmetric as its left and right subtrees are mirror images of each other.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          2,\n          null,\n          3,\n          null,\n          3\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The tree is not symmetric because the left and right subtrees do not match.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"1 <= number of nodes <= 1000\",\n    \"node_values\": \"-100 <= Node.val <= 100\"\n  },\n  \"follow_up\": \"Can you implement both recursive and iterative solutions?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a string with tags is valid."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a tag validator to parse a code snippet and verify its validity based on specific rules for tags, CDATA, and nesting.\",\n  \"objective\": \"Validate whether the given string adheres to the rules for a valid XML-like structure, including matching tags, valid CDATA, and correct nesting.\",\n  \"meta_prompt\": {\n    \"Step 1 - Validate Structure\": \"Ensure the entire string is wrapped in a single valid closed tag with matching start and end tags. Check for unmatched `<`, `</`, or unclosed tags.\",\n    \"Step 2 - Validate TAG_NAME\": \"Confirm that all `TAG_NAME` values consist only of uppercase letters and have lengths between 1 and 9 inclusive. Use regex to match `<TAG_NAME>`.\",\n    \"Step 3 - Handle CDATA\": \"Properly parse CDATA blocks starting with `<![CDATA[` and ending with `]]>`. Treat CDATA_CONTENT as plain text.\",\n    \"Step 4 - Parse TAG_CONTENT\": \"Recursively verify that TAG_CONTENT can include nested tags, CDATA, or other valid characters while ensuring proper nesting and no unmatched symbols.\",\n    \"Step 5 - Maintain Nesting\": \"Use a stack to ensure start and end tags are balanced and nested correctly. Push start tags to the stack and pop when encountering matching end tags.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the code string is between 1 and 500 characters, with valid characters defined in the problem constraints.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"code\": \"<A> This is the first line <![CDATA[ Some unparsed content ]]> </A>\"\n      },\n      \"output\": true,\n      \"explanation\": \"The code is wrapped in valid start `<A>` and end `</A>` tags. TAG_NAME and TAG_CONTENT are valid, and CDATA_CONTENT is correctly ignored for validation.\"\n    },\n    {\n      \"input\": {\n        \"code\": \"<DIV> <B>hello</B> <![CDATA[<data>]]></DIV>\"\n      },\n      \"output\": true,\n      \"explanation\": \"The code includes nested tags `<B>` inside `<DIV>`, both properly closed. CDATA is treated as plain text.\"\n    },\n    {\n      \"input\": {\n        \"code\": \"<A> <B> </A> </B>\"\n      },\n      \"output\": false,\n      \"explanation\": \"Tags `<B>` and `</B>` are improperly nested, violating the rules of valid XML-like structure.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= code.length <= 500\",\n    \"valid_characters\": \"code consists of English letters, digits, `<`, `>`, `/`, `!`, `[`, `]`, `.`, and spaces\",\n    \"CDATA_handling\": \"CDATA_CONTENT may contain any characters.\"\n  },\n  \"follow_up\": \"Optimize parsing performance for longer strings or complex nesting by using an efficient regex-based approach combined with stack-based traversal.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Multiply two numbers given as strings."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two non-negative integers `num1` and `num2` represented as strings, return their product as a string. You must not use any built-in BigInteger library or convert the inputs directly to integers.\",\n  \"objective\": \"Design an algorithm to multiply two large numbers represented as strings, ensuring efficient handling of input sizes up to 200 digits.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves multiplying two numbers digit by digit. Emulate the manual multiplication process used for base-10 numbers to handle large inputs represented as strings.\",\n    \"Step 2 - Emulate Multiplication\": \"Use nested loops to multiply each digit of `num1` with each digit of `num2`. Store intermediate results in an array representing the product at each position.\",\n    \"Step 3 - Handle Carries\": \"After the multiplication step, process carries to ensure that each position in the result array contains a single digit.\",\n    \"Step 4 - Convert Result to String\": \"Convert the array containing the result into a string, ensuring no leading zeros are present.\",\n    \"Step 5 - Edge Cases\": \"Handle edge cases such as one or both numbers being '0' or numbers with varying lengths.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"num1\": \"2\",\n        \"num2\": \"3\"\n      },\n      \"output\": \"6\",\n      \"explanation\": \"Multiplying 2 and 3 gives 6.\"\n    },\n    {\n      \"input\": {\n        \"num1\": \"123\",\n        \"num2\": \"456\"\n      },\n      \"output\": \"56088\",\n      \"explanation\": \"Multiplying 123 and 456 gives 56088.\"\n    }\n  ],\n  \"constraints\": {\n    \"length_constraint\": \"1 <= num1.length, num2.length <= 200\",\n    \"character_constraint\": \"Both strings consist of digits only.\",\n    \"leading_zero_constraint\": \"Neither string contains leading zeros, except for '0' itself.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to improve space efficiency or reduce unnecessary computations?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum depth of an n-ary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of an n-ary tree, find its maximum depth, which is the number of nodes along the longest path from the root node down to the farthest leaf node.\",\n  \"objective\": \"Implement an iterative solution that uses Depth-First Search (DFS) with a stack to track and update the maximum depth at each level.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Stack\": \"Create a stack to store tuples of nodes and their corresponding depth. Start by pushing the root node with a depth of 1 onto the stack.\",\n    \"Step 2 - Iterate Through Stack\": \"While the stack is not empty, pop the top element from the stack, which represents the current node and its depth.\",\n    \"Step 3 - Update Maximum Depth\": \"Keep track of the maximum depth encountered by comparing it to the current node's depth.\",\n    \"Step 4 - Push Children to Stack\": \"For each child of the current node, push it onto the stack along with the updated depth (current depth + 1).\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution handles cases where the tree is empty (`root == null`) by returning 0 for such cases. Confirm that the solution meets constraints with a maximum node count of 10^4 and tree depth up to 1000.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          null,\n          3,\n          2,\n          4,\n          null,\n          5,\n          6\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The longest path from root (1) to a leaf is 3 nodes (1 -> 3 -> 5 or 1 -> 3 -> 6), so the maximum depth is 3.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          null,\n          2,\n          3,\n          4,\n          5,\n          null,\n          null,\n          6,\n          7,\n          null,\n          8,\n          null,\n          9,\n          10,\n          null,\n          null,\n          11,\n          null,\n          12,\n          null,\n          13,\n          null,\n          null,\n          14\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"The longest path has 5 nodes from root to a leaf (1 -> 3 -> 6 -> 9 -> 14), giving a maximum depth of 5.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"The total number of nodes is in the range [0, 10^4]\",\n    \"tree_depth\": \"The maximum depth of the n-ary tree is 1000\"\n  },\n  \"follow_up\": \"Consider alternative traversal methods (such as Breadth-First Search) to compare efficiency in finding the maximum depth. Also, explore if recursive depth computation would offer comparable performance for trees with smaller depths.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given a binary search tree root node and two integers `low` and `high`. Return the sum of values of the nodes within the range [low, high]."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given the root node of a binary search tree (BST) and two integers `low` and `high`. Your task is to return the sum of values of all nodes whose values are in the inclusive range `[low, high]` in the BST.\",\n  \"objective\": \"Find and return the sum of values for all nodes that fall within the range `[low, high]` in a given binary search tree.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understanding the Binary Search Tree\": \"A binary search tree is a tree where each node has a value greater than all nodes in its left subtree and smaller than all nodes in its right subtree. This property can help us efficiently find and sum the values of nodes within the given range.\",\n    \"Step 2 - Problem Constraints\": \"We are given the root of the tree and two integers `low` and `high` where `low <= high`. We need to sum the values of all nodes where the node's value lies within this range.\",\n    \"Step 3 - Plan\": \"To solve this, we will traverse the tree and check each node\\u2019s value. If it is within the range `[low, high]`, we add it to the sum. If it\\u2019s less than `low`, we can skip the left subtree, and if it\\u2019s greater than `high`, we can skip the right subtree. This ensures an efficient traversal of the tree.\",\n    \"Step 4 - Constraints Consideration\": \"The tree may contain up to 20,000 nodes, so the solution should be optimized for large inputs. We should aim for a time complexity of O(N), where N is the number of nodes in the tree, as each node needs to be visited at least once in the worst case.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          10,\n          5,\n          15,\n          3,\n          7,\n          null,\n          18\n        ],\n        \"low\": 7,\n        \"high\": 15\n      },\n      \"output\": 32,\n      \"explanation\": \"Nodes with values 7, 10, and 15 are in the range [7, 15]. Summing these values gives 7 + 10 + 15 = 32.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          10,\n          5,\n          15,\n          3,\n          7,\n          13,\n          18,\n          1,\n          null,\n          6\n        ],\n        \"low\": 6,\n        \"high\": 10\n      },\n      \"output\": 23,\n      \"explanation\": \"Nodes with values 6, 7, and 10 are in the range [6, 10]. Summing these values gives 6 + 7 + 10 = 23.\"\n    }\n  ],\n  \"constraints\": {\n    \"tree_size_range\": \"1 <= number of nodes <= 20,000\",\n    \"node_value_range\": \"1 <= Node.val <= 100,000\",\n    \"value_constraints\": \"1 <= low <= high <= 100,000\",\n    \"unique_values\": \"All Node.val are unique.\"\n  },\n  \"follow_up\": \"How would you optimize the solution if the tree is very large or if the range `[low, high]` is very narrow? Consider edge cases such as when the tree contains only one node or when no nodes are in the range.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the fewest transfers needed to settle money owed between people in a list of transactions."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `transactions` where each transaction specifies the transfer of money between two individuals (`from`, `to`, and `amount`), determine the **minimum number of transactions** needed to settle all debts such that no person owes or is owed any money. Each person has a unique ID, and the transactions may involve several people owing money to or receiving money from others.\",\n  \"objective\": \"Design an algorithm that calculates the smallest number of debt-clearing transactions by consolidating and optimizing settlements between individuals.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that each transaction represents a transfer of money, and the goal is to minimize the number of transfers needed to settle all net debts.\",\n    \"Step 2 - Calculate Net Balances\": \"For each person, compute their net balance by summing all money received and subtracting all money given.\",\n    \"Step 3 - Optimal Settlement\": \"Identify people with positive balances (creditors) and negative balances (debtors). Attempt to pair these balances to reduce the overall number of transactions. Explore recursive backtracking to simulate all possible pairings and minimize the transactions.\",\n    \"Step 4 - Prune Inefficient Paths\": \"Use pruning techniques during recursion by skipping redundant settlements (e.g., settling zero balances) and ensuring only valid pairings are attempted.\",\n    \"Step 5 - Output\": \"Return the minimum number of transactions needed to achieve a zero net balance for all participants.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"transactions\": [\n          [\n            0,\n            1,\n            10\n          ],\n          [\n            2,\n            0,\n            5\n          ]\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"Person #1 pays $5 to both Person #0 and Person #2 to settle all debts with the minimum transactions.\"\n    },\n    {\n      \"input\": {\n        \"transactions\": [\n          [\n            0,\n            1,\n            10\n          ],\n          [\n            1,\n            0,\n            1\n          ],\n          [\n            1,\n            2,\n            5\n          ],\n          [\n            2,\n            0,\n            5\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"Person #1 pays $4 to Person #0 to settle all debts in a single transaction.\"\n    }\n  ],\n  \"constraints\": {\n    \"transactions_length\": \"1 <= transactions.length <= 8\",\n    \"transactions_elements\": \"transactions[i].length == 3\",\n    \"id_range\": \"0 <= fromi, toi < 12\",\n    \"amount_range\": \"1 <= amounti <= 100\",\n    \"validity\": \"`fromi` cannot equal `toi`.\"\n  },\n  \"follow_up\": \"Can you generalize the solution for larger numbers of transactions or participants using optimization techniques to reduce computational complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the length of the longest increasing subsequence in an array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums`, find the length of the longest strictly increasing subsequence. A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements.\",\n  \"objective\": \"Design an algorithm to find the length of the longest strictly increasing subsequence in `nums`. Aim for efficiency, ideally achieving O(n log n) time complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task is to identify the longest sequence of numbers in `nums` where each number is greater than the one before it. The subsequence does not need to be contiguous.\",\n    \"Step 2 - Dynamic Programming (O(n^2))\": \"Use a dynamic programming (DP) array where `dp[i]` represents the length of the longest increasing subsequence ending at index `i`. Update `dp` for every element by comparing it with all previous elements.\",\n    \"Step 3 - Binary Search (O(n log n))\": \"Use a list to maintain the smallest possible ending value for increasing subsequences of different lengths. Use binary search to find the correct position to replace or extend the list.\",\n    \"Step 4 - Edge Cases\": \"Handle scenarios such as:\\n- All elements being the same.\\n- A strictly decreasing sequence.\\n- A single-element array.\",\n    \"Step 5 - Output\": \"Return the length of the longest strictly increasing subsequence as an integer.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          10,\n          9,\n          2,\n          5,\n          3,\n          7,\n          101,\n          18\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"The longest increasing subsequence is [2, 3, 7, 101].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          1,\n          0,\n          3,\n          2,\n          3\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"The longest increasing subsequence is [0, 1, 2, 3].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          7,\n          7,\n          7,\n          7,\n          7,\n          7,\n          7\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The longest increasing subsequence is [7].\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 2500\",\n    \"element_range\": \"-10^4 <= nums[i] <= 10^4\"\n  },\n  \"follow_up\": \"Can you implement an O(n log n) solution using binary search or a segment tree?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given an integer `n`, return a **beautiful** array `nums` of length `n`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `n`, you are tasked with returning any **beautiful** array `nums` of length `n`. An array is considered beautiful if it meets two conditions: 1. It is a permutation of the integers from `1` to `n`. 2. For every pair of indices `i` and `j` where `0 <= i < j < n`, there is no index `k` such that `i < k < j` and `2 * nums[k] == nums[i] + nums[j]`.\",\n  \"objective\": \"Return any valid permutation of the integers from `1` to `n` that satisfies the condition mentioned above.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understanding the problem\": \"The problem asks for an array of integers of length `n` where no middle element `nums[k]` lies between two elements `nums[i]` and `nums[j]` such that `2 * nums[k] == nums[i] + nums[j]`.\",\n    \"Step 2 - Input format\": \"You are given an integer `n` representing the length of the desired array.\",\n    \"Step 3 - Approach\": \"The task requires constructing a permutation that satisfies the beautiful condition. One potential approach is to use a specific ordering of numbers that avoids violating the condition, such as grouping the numbers in a way that no valid `k` can exist between `i` and `j`.\",\n    \"Step 4 - Output format\": \"Return a permutation of the integers from `1` to `n` that is beautiful.\",\n    \"Step 5 - Edge case considerations\": \"The smallest value for `n` is `1`, where the only valid permutation is `[1]`. The solution should work efficiently even for larger values of `n`, up to `1000`.\",\n    \"Step 6 - Optimized approach\": \"Think about the structure of the array. Is there a pattern or structure that inherently avoids the condition for large values of `n`?\"\n  },\n  \"examples\": [\n    {\n      \"input\": 4,\n      \"output\": [\n        2,\n        1,\n        4,\n        3\n      ],\n      \"explanation\": \"This is one valid permutation of length 4 where no element satisfies the forbidden condition.\"\n    },\n    {\n      \"input\": 5,\n      \"output\": [\n        3,\n        1,\n        2,\n        5,\n        4\n      ],\n      \"explanation\": \"This permutation of length 5 avoids the condition `2 * nums[k] == nums[i] + nums[j]` for all valid pairs of indices `i` and `j`.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 1000\"\n  },\n  \"follow_up\": \"Can you find a more efficient way to construct a beautiful array?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Implement a cache where the least frequently used keys are evicted when full. If keys have the same frequency, evict the least recently used key."}, {"role": "assistant", "content": "{\n  \"description\": \"Design and implement a Least Frequently Used (LFU) cache. This data structure should efficiently handle two operations: retrieving a value for a key (`get`) and updating/inserting a key-value pair (`put`). When the cache reaches its maximum capacity, the least frequently used key must be evicted. If there is a tie in frequency, the least recently used key should be evicted. Both operations must run in O(1) average time complexity.\",\n  \"objective\": \"Develop an LFU cache that manages keys based on their usage frequency and handles tiebreakers using the least recently used policy. Focus on optimizing for O(1) operations by leveraging appropriate data structures.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the requirements for managing the cache: (1) Maintain a count of how frequently each key is accessed, and (2) Manage eviction based on both frequency and recency when the capacity is reached.\",\n    \"Step 2 - Data Structures\": \"Use a combination of hash maps and linked lists: (1) A hash map to store key-value pairs and their frequencies, and (2) a structure (e.g., another hash map of doubly linked lists) to group keys by frequency for efficient eviction.\",\n    \"Step 3 - Implementation Plan\": [\n      \"1. Maintain a `freq_map` where each frequency maps to a doubly linked list of keys with that frequency.\",\n      \"2. Maintain a `key_map` for direct access to key-value pairs and their associated frequency.\",\n      \"3. Update frequencies on every `get` and `put` operation, and handle evictions efficiently by accessing the least frequent list.\",\n      \"4. Handle ties in frequency using the order in the doubly linked list.\"\n    ],\n    \"Step 4 - Code Optimization\": \"Ensure `get` and `put` operations run in O(1) by using hash maps and linked lists in a structured manner. Avoid unnecessary iterations by directly accessing relevant keys and frequencies.\",\n    \"Step 5 - Edge Cases\": \"Handle scenarios such as: (1) Capacity = 0, (2) Repeated `get` calls, (3) Updates to existing keys, (4) Ties in frequency requiring LRU resolution.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"operations\": [\n          \"LFUCache\",\n          \"put\",\n          \"put\",\n          \"get\",\n          \"put\",\n          \"get\",\n          \"get\",\n          \"put\",\n          \"get\",\n          \"get\",\n          \"get\"\n        ],\n        \"arguments\": [\n          [\n            2\n          ],\n          [\n            1,\n            1\n          ],\n          [\n            2,\n            2\n          ],\n          [\n            1\n          ],\n          [\n            3,\n            3\n          ],\n          [\n            2\n          ],\n          [\n            3\n          ],\n          [\n            4,\n            4\n          ],\n          [\n            1\n          ],\n          [\n            3\n          ],\n          [\n            4\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        null,\n        null,\n        1,\n        null,\n        -1,\n        3,\n        null,\n        -1,\n        3,\n        4\n      ],\n      \"explanation\": \"The operations and their effects on the cache are detailed in the example. The cache manages frequencies and resolves ties using the least recently used policy.\"\n    },\n    {\n      \"input\": {\n        \"operations\": [\n          \"LFUCache\",\n          \"put\",\n          \"put\",\n          \"put\",\n          \"get\",\n          \"get\",\n          \"get\",\n          \"put\",\n          \"get\"\n        ],\n        \"arguments\": [\n          [\n            1\n          ],\n          [\n            1,\n            10\n          ],\n          [\n            2,\n            20\n          ],\n          [\n            3,\n            30\n          ],\n          [\n            1\n          ],\n          [\n            2\n          ],\n          [\n            3\n          ],\n          [\n            4,\n            40\n          ],\n          [\n            4\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        null,\n        null,\n        null,\n        -1,\n        -1,\n        -1,\n        null,\n        40\n      ],\n      \"explanation\": \"The cache has a capacity of 1. Each insertion evicts the least frequently used key. All previous keys are evicted to make room for new keys.\"\n    }\n  ],\n  \"constraints\": {\n    \"capacity\": \"1 <= capacity <= 10^4\",\n    \"key_range\": \"0 <= key <= 10^5\",\n    \"value_range\": \"0 <= value <= 10^9\",\n    \"operations_count\": \"At most 2 * 10^5 calls will be made to `get` and `put`.\"\n  },\n  \"follow_up\": \"Can you implement the LFU cache to handle cases with millions of keys efficiently, possibly using disk storage or distributed systems for large-scale scenarios?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Rearrange the characters of the string so that no two adjacent characters are the same."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string s, your task is to rearrange its characters such that no two adjacent characters are the same. If it is not possible to rearrange the string in this way, return an empty string. If a valid rearrangement is possible, return any rearrangement that satisfies the condition.\",\n  \"objective\": \"Design an algorithm that rearranges the characters in a string so that no two adjacent characters are identical. If such a rearrangement is impossible, return an empty string.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The goal is to rearrange the characters of a string such that no two adjacent characters are the same. If a rearrangement is impossible (for instance, if any character occurs more than half the length of the string rounded up), return an empty string.\",\n    \"Step 2 - Initial Approach\": \"One approach is to count the frequency of each character. If any character appears more than ceil(len(s) / 2), it is impossible to rearrange the string in the desired manner, and the function should return an empty string. Otherwise, proceed with constructing the rearranged string.\",\n    \"Step 3 - Efficient Solution Using Heaps\": \"To efficiently rearrange the string, you can use a max heap (priority queue) to store the characters based on their frequencies. The idea is to repeatedly extract the most frequent character and append it to the result string, making sure it does not match the last added character.\",\n    \"Step 4 - Output Format\": \"Return the rearranged string if possible. If not, return an empty string.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Consider edge cases where the input string contains only one character or all characters are the same. Ensure that the algorithm is efficient enough to handle strings with lengths up to 500 characters.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution works within the constraints: 1 <= s.length <= 500 and s consists of lowercase English letters. Ensure the solution is optimal for larger inputs.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"aab\"\n      },\n      \"output\": \"aba\",\n      \"explanation\": \"A valid rearrangement is 'aba' where no two adjacent characters are the same.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"aaab\"\n      },\n      \"output\": \"\",\n      \"explanation\": \"It is not possible to rearrange 'aaab' such that no two adjacent characters are the same.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 500\",\n    \"string_characters\": \"The string consists of lowercase English letters.\"\n  },\n  \"follow_up\": \"Can you come up with an algorithm that rearranges the string in less than O(n log n) time complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create a data structure to add numbers and check for pairs that sum to a value."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a data structure that supports adding numbers to a stream and finding if any pair of numbers sum to a given value.\",\n  \"objective\": \"Implement the `TwoSum` class with efficient methods for `add` and `find` operations.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that `add` inserts a number into the data structure, and `find` checks for any pair of numbers summing to the target value.\",\n    \"Step 2 - Choose an Efficient Representation\": \"Use a hash map to store the frequency of numbers for efficient lookups.\",\n    \"Step 3 - Implement `add`\": \"Update the hash map with the new number, incrementing its count.\",\n    \"Step 4 - Implement `find`\": \"Iterate through the hash map and check if the complement (target - current number) exists.\",\n    \"Step 5 - Handle Edge Cases\": \"Ensure that `find` does not use the same element twice for the sum and handles negative numbers, duplicates, and large inputs.\",\n    \"Step 6 - Optimize for Space and Time\": \"Optimize `add` to O(1) and `find` to O(n) in average cases.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"operations\": [\n          \"TwoSum\",\n          \"add\",\n          \"add\",\n          \"add\",\n          \"find\",\n          \"find\"\n        ],\n        \"values\": [\n          [],\n          [\n            1\n          ],\n          [\n            3\n          ],\n          [\n            5\n          ],\n          [\n            4\n          ],\n          [\n            7\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        null,\n        null,\n        null,\n        true,\n        false\n      ],\n      \"explanation\": \"`find(4)` returns true because 1 + 3 = 4. `find(7)` returns false as no such pair exists.\"\n    }\n  ],\n  \"constraints\": {\n    \"number_range\": \"-10^5 <= number <= 10^5\",\n    \"value_range\": \"-2^31 <= value <= 2^31 - 1\",\n    \"call_limits\": \"At most 10^4 calls to `add` and `find`.\"\n  },\n  \"follow_up\": \"Can you optimize the data structure for scenarios with frequent `find` calls?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum deletions required to make two strings the same."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two strings `word1` and `word2`, determine the minimum number of deletions needed to make the two strings identical by removing characters from either string.\",\n  \"objective\": \"Use a dynamic programming approach to count deletions directly instead of relying on LCS. Use a 2D DP table where each entry represents the deletions needed up to certain indices of the strings.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize DP Array\": \"Create a 2D array `dp` with dimensions `(len(word1) + 1) x (len(word2) + 1)`, where `dp[i][j]` will store the minimum deletions required to equalize `word1` up to index `i-1` and `word2` up to index `j-1`.\",\n    \"Step 2 - Set Base Cases\": \"Fill the first row and first column of `dp`. If `i=0`, then `dp[i][j]` represents deletions of all characters up to `j` in `word2`, and similarly, `dp[i][j]` when `j=0` represents deletions in `word1` up to `i`.\",\n    \"Step 3 - Fill DP Array\": \"Iterate over each character pair `word1[i-1]` and `word2[j-1]`. If they match, `dp[i][j] = dp[i-1][j-1]` since no deletion is needed. If they don\\u2019t match, set `dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])` to account for deleting from either `word1` or `word2`.\",\n    \"Step 4 - Retrieve Result\": \"After completing the DP table, `dp[len(word1)][len(word2)]` will store the minimum deletions required to make `word1` and `word2` identical.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution meets the constraints where both `word1` and `word2` are up to 500 characters, ensuring the solution has an `O(m * n)` time complexity.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"word1\": \"sea\",\n        \"word2\": \"eat\"\n      },\n      \"output\": 2,\n      \"explanation\": \"To equalize 'sea' and 'eat', delete 's' from `word1` and 't' from `word2`.\"\n    },\n    {\n      \"input\": {\n        \"word1\": \"leetcode\",\n        \"word2\": \"etco\"\n      },\n      \"output\": 4,\n      \"explanation\": \"Deleting 'l', 'd', and 'e' from `word1`, and 'e' from `word2` results in the same string.\"\n    }\n  ],\n  \"constraints\": {\n    \"word_lengths\": \"1 <= word1.length, word2.length <= 500\",\n    \"character_set\": \"Both strings consist of lowercase English letters.\"\n  },\n  \"follow_up\": \"Consider optimizing space complexity to `O(n)` by only storing the previous row of the DP array, which would reduce memory usage significantly.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count the number of distinct islands in a binary grid."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the number of distinct islands in a binary matrix `grid` where islands are considered the same if they have identical shapes after applying rotations (90, 180, or 270 degrees) or reflections.\",\n  \"objective\": \"Use depth-first search (DFS) to collect island shapes, apply transformations (rotations and reflections), and store normalized shapes in a set to count unique islands.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Traverse the matrix and identify unvisited land cells (value 1) to start DFS for island discovery.\",\n    \"Step 2\": \"Run DFS from each unvisited land cell to collect the absolute coordinates of the current island.\",\n    \"Step 3\": \"Generate 8 transformations of the island shape, including 4 rotations (90, 180, 270, and 360 degrees) and 4 reflections (left/right and up/down).\",\n    \"Step 4\": \"Normalize each transformed shape by aligning it to the top-left corner (relative coordinates).\",\n    \"Step 5\": \"Store all normalized shapes in a set to automatically filter out duplicates.\",\n    \"Step 6\": \"After processing all cells, return the size of the set as the number of distinct islands.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            1,\n            0,\n            0,\n            0\n          ],\n          [\n            1,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            1\n          ],\n          [\n            0,\n            0,\n            0,\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"Both islands are considered the same because a 180-degree rotation of the first island matches the second.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            1,\n            0,\n            0,\n            0\n          ],\n          [\n            1,\n            1,\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0,\n            1,\n            1\n          ],\n          [\n            0,\n            0,\n            0,\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"Both islands are identical without requiring transformations.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_dimensions\": \"1 <= m, n <= 50\",\n    \"cell_values\": \"`grid[i][j]` is either 0 or 1\"\n  },\n  \"follow_up\": \"Discuss the time complexity of this approach, which involves DFS (O(m * n)) and transformations (O(8 * l), where l is the number of cells in an island). Consider potential optimizations for larger matrices or frequent updates.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a number is a perfect number by verifying if it equals the sum of its divisors, excluding itself."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a positive integer `n`, determine if it is a perfect number. A perfect number is one that equals the sum of its positive divisors, excluding itself.\",\n  \"objective\": \"Design an algorithm that checks if an integer is a perfect number by evaluating the sum of its divisors or leveraging properties of known perfect numbers based on the Euclid-Euler theorem.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that a perfect number is a positive integer that is the sum of its divisors, excluding itself. For example, 28 is perfect because 1 + 2 + 4 + 7 + 14 = 28.\",\n    \"Step 2 - Euclid-Euler Theorem\": \"Use the Euclid-Euler theorem, which states that numbers of the form 2^(p-1) * (2^p - 1) are perfect if 2^p - 1 is a Mersenne prime (with `p` as a prime). Known values of `p` (like 2, 3, 5, 7, 13, 17, 19, 31) generate perfect numbers up to values that fit within 64-bit integers.\",\n    \"Step 3 - Checking Perfect Numbers Efficiently\": \"Create a list of known perfect numbers (6, 28, 496, 8128, etc.) up to the maximum constraint. Simply check if `n` is in this list to determine if it is a perfect number, providing a fast, lookup-based solution.\",\n    \"Step 4 - Efficient Divisor Sum Calculation\": \"If calculating the divisors directly, iterate up to \\u221an to find divisors and accumulate their sum efficiently, avoiding redundant calculations for large numbers.\",\n    \"Step 5 - Edge Case Handling\": \"Handle edge cases like `n = 1`, which is not perfect, and numbers close to the maximum constraint (`10^8`).\",\n    \"Final Check - Constraints Verification\": \"Verify the algorithm operates within constraints (`1 <= num <= 10^8`) using known perfect numbers to ensure it is optimal and avoids unnecessary calculations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"num\": 28\n      },\n      \"output\": true,\n      \"explanation\": \"The divisors of 28 (excluding itself) are 1, 2, 4, 7, and 14, which sum to 28, making it a perfect number.\"\n    },\n    {\n      \"input\": {\n        \"num\": 7\n      },\n      \"output\": false,\n      \"explanation\": \"The divisors of 7 are only 1, which does not sum to 7, so it is not a perfect number.\"\n    }\n  ],\n  \"constraints\": {\n    \"number_range\": \"1 <= num <= 10^8\"\n  },\n  \"follow_up\": \"Could you implement the solution to efficiently handle larger values, leveraging mathematical properties or a precomputed list of perfect numbers?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Search for a node in a binary search tree and return the subtree."}, {"role": "assistant", "content": "{\n  \"description\": \"Search for a node with a given value in a binary search tree (BST) and return the subtree rooted at that node. If the node does not exist, return `null`.\",\n  \"objective\": \"Efficiently traverse the BST using its properties to find the node with the given value.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Initialize a pointer `current` to point to the root of the tree.\",\n    \"Step 2\": \"Iteratively traverse the tree using the BST properties: if `val < current.val`, move to the left child; if `val > current.val`, move to the right child.\",\n    \"Step 3\": \"If `val == current.val`, return the `current` node as the subtree rooted at that node.\",\n    \"Step 4\": \"If the traversal completes without finding the node, return `null` to indicate the value does not exist in the tree.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          4,\n          2,\n          7,\n          1,\n          3\n        ],\n        \"val\": 2\n      },\n      \"output\": [\n        2,\n        1,\n        3\n      ],\n      \"explanation\": \"The node with value 2 exists in the BST, and its subtree includes nodes with values 1 and 3.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          4,\n          2,\n          7,\n          1,\n          3\n        ],\n        \"val\": 5\n      },\n      \"output\": [],\n      \"explanation\": \"The value 5 does not exist in the BST, so the output is `null`.\"\n    }\n  ],\n  \"constraints\": {\n    \"tree_size\": \"1 <= number of nodes <= 5000\",\n    \"node_value_range\": \"1 <= Node.val <= 10^7\",\n    \"search_value_range\": \"1 <= val <= 10^7\",\n    \"tree_property\": \"The input tree is a valid BST.\"\n  },\n  \"follow_up\": \"Discuss how the iterative approach reduces space complexity compared to a recursive solution and the time complexity of searching in a BST.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count how many times the number 1 appears up to n."}, {"role": "assistant", "content": "{\n  \"description\": \"Count the number of digit `1` appearing in all non-negative integers less than or equal to `n`.\",\n  \"objective\": \"Given an integer `n`, return the total count of the digit `1` from 0 to `n`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Analyze Problem\": \"Recognize that the digit `1` can appear at different place values (e.g., units, tens, hundreds).\",\n    \"Step 2 - Use Mathematical Pattern\": \"Derive the frequency of digit `1` at each place value using modular arithmetic.\",\n    \"Step 3 - Optimize Iteration\": \"Iterate through place values efficiently to count occurrences.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 13\n      },\n      \"output\": 6,\n      \"explanation\": \"1 appears in 1, 10, 11, 12, and 13. Total = 6.\"\n    },\n    {\n      \"input\": {\n        \"n\": 0\n      },\n      \"output\": 0,\n      \"explanation\": \"1 does not appear in any number less than or equal to 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"range\": \"0 <= n <= 10^9\",\n    \"output_format\": \"Return the count as an integer.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the peak of a mountain array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `arr` that satisfies the mountain array properties, your task is to find the index `i` where the peak element exists. A mountain array is defined as an array with at least three elements, where there exists an index `i` such that all elements before `i` are strictly increasing, and all elements after `i` are strictly decreasing.\",\n  \"objective\": \"Design an efficient algorithm to locate the peak index `i` in the mountain array, achieving a runtime complexity of O(log(n)).\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the input is a mountain array, meaning it has a single peak element where the values first strictly increase, then strictly decrease. The goal is to find this peak index efficiently.\",\n    \"Step 2 - Initial Approach\": \"A straightforward approach involves iterating through the array to locate the peak element, but this results in O(n) time complexity. This is not optimal for large arrays.\",\n    \"Step 3 - Optimal Solution with Binary Search\": \"Use binary search to identify the peak index. Compare the middle element with its neighbors to determine if the peak lies to the left or right, and adjust the search range accordingly. Repeat until the peak is found.\",\n    \"Step 4 - Output Format\": \"Return the peak index `i` as a single integer. Ensure the algorithm works for edge cases like minimal mountain arrays (length 3) or arrays with large values.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Focus on achieving O(log(n)) time complexity by utilizing binary search. Ensure the code handles arrays where the peak is near the beginning, middle, or end.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"arr\": [\n          0,\n          1,\n          0\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The peak is at index 1, where arr[1] = 1, the highest value in the array.\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          0,\n          2,\n          1,\n          0\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The peak is at index 1, where arr[1] = 2, the highest value in the array.\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          0,\n          10,\n          5,\n          2\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The peak is at index 1, where arr[1] = 10, the highest value in the array.\"\n    }\n  ],\n  \"constraints\": {\n    \"arr_length\": \"3 <= arr.length <= 10^5\",\n    \"arr_elements_range\": \"0 <= arr[i] <= 10^6\",\n    \"mountain_property\": \"The input array is guaranteed to be a mountain array.\"\n  },\n  \"follow_up\": \"Can you implement this algorithm to operate in O(log(n)) time complexity using binary search, while minimizing memory usage and avoiding unnecessary computations?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create a URL shortener service to encode a long URL to a short URL and decode it back to the original URL. Ensure the process is consistent and reversible."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a URL shortener service class to encode a long URL to a shorter URL and decode the shortened URL back to the original URL. The encoding-decoding must be reversible and consistent for each URL.\",\n  \"objective\": \"Implement a system that assigns unique short codes to long URLs, stores these mappings, and allows decoding from short URLs back to the original URLs using random codes and a hashmap.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves mapping each long URL to a unique short URL and retrieving the original URL efficiently from the shortened version.\",\n    \"Step 2 - Use HashMap for Encoding and Decoding\": \"Use a hashmap to store mappings from each generated short code to its corresponding long URL. This ensures efficient retrieval of the original URL during decoding.\",\n    \"Step 3 - Random Code Generation\": \"Generate a random integer or alphanumeric string to serve as the unique short code for each URL. If a collision occurs (i.e., the generated code is already in use), regenerate a new code.\",\n    \"Step 4 - Construct Short URL\": \"Combine the base short URL format (e.g., `http://tinyurl.com/`) with the generated code to produce the final short URL for each long URL.\",\n    \"Step 5 - Complexity and Constraints\": \"Ensure O(1) time complexity for both encoding and decoding by using a hashmap and pre-defined base URL. Consider up to `10^4` URL entries.\",\n    \"Final Check - Constraints Verification\": \"Ensure the system can handle URLs up to `10^4` characters long and includes handling of random code collisions.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"url\": \"https://leetcode.com/problems/design-tinyurl\"\n      },\n      \"output\": \"http://tinyurl.com/<uniqueCode>\",\n      \"explanation\": \"A unique short URL is generated for the given long URL and can be decoded back to the original.\"\n    },\n    {\n      \"input\": {\n        \"shortUrl\": \"http://tinyurl.com/<uniqueCode>\"\n      },\n      \"output\": \"https://leetcode.com/problems/design-tinyurl\",\n      \"explanation\": \"The short URL is decoded back to the original long URL.\"\n    }\n  ],\n  \"constraints\": {\n    \"url_length\": \"1 <= url.length <= 10^4\",\n    \"valid_url\": \"The given URL is guaranteed to be valid.\",\n    \"collision_handling\": \"If a generated short code already exists, regenerate a new code to ensure unique encoding.\"\n  },\n  \"follow_up\": \"Could you implement an alternative encoding system, such as a hash-based approach or base conversion, to minimize potential collisions and ensure more compact short URLs?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Return `k` smallest sum pairs from two sorted arrays."}, {"role": "assistant", "content": "{\n  \"title\": \"Find K Pairs with Smallest Sums\",\n  \"description\": \"Given two sorted arrays `nums1` and `nums2`, find the `k` pairs `(u, v)` with the smallest sums where `u` is from `nums1` and `v` is from `nums2`.\",\n  \"objective\": \"Efficiently identify the smallest sum pairs using sorted properties and heap-based techniques.\",\n  \"input\": {\n    \"parameters\": [\n      {\n        \"name\": \"nums1\",\n        \"type\": \"array of integers\",\n        \"description\": \"First sorted array in ascending order.\",\n        \"constraints\": \"1 <= nums1.length <= 10^5, -10^9 <= nums1[i] <= 10^9\"\n      },\n      {\n        \"name\": \"nums2\",\n        \"type\": \"array of integers\",\n        \"description\": \"Second sorted array in ascending order.\",\n        \"constraints\": \"1 <= nums2.length <= 10^5, -10^9 <= nums2[i] <= 10^9\"\n      },\n      {\n        \"name\": \"k\",\n        \"type\": \"integer\",\n        \"description\": \"Number of pairs to return with the smallest sums.\",\n        \"constraints\": \"1 <= k <= 10^4\"\n      }\n    ]\n  },\n  \"output\": {\n    \"type\": \"array of arrays\",\n    \"description\": \"An array containing `k` pairs with the smallest sums, each pair represented as `[u, v]`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums1\": [\n          1,\n          7,\n          11\n        ],\n        \"nums2\": [\n          2,\n          4,\n          6\n        ],\n        \"k\": 3\n      },\n      \"output\": [\n        [\n          1,\n          2\n        ],\n        [\n          1,\n          4\n        ],\n        [\n          1,\n          6\n        ]\n      ],\n      \"explanation\": \"The smallest sum pairs are selected in order: [1,2], [1,4], and [1,6].\"\n    },\n    {\n      \"input\": {\n        \"nums1\": [\n          1,\n          1,\n          2\n        ],\n        \"nums2\": [\n          1,\n          2,\n          3\n        ],\n        \"k\": 2\n      },\n      \"output\": [\n        [\n          1,\n          1\n        ],\n        [\n          1,\n          1\n        ]\n      ],\n      \"explanation\": \"The smallest sums are achieved by selecting [1,1] twice from nums1 and nums2.\"\n    },\n    {\n      \"input\": {\n        \"nums1\": [\n          1,\n          2\n        ],\n        \"nums2\": [\n          3\n        ],\n        \"k\": 3\n      },\n      \"output\": [\n        [\n          1,\n          3\n        ],\n        [\n          2,\n          3\n        ]\n      ],\n      \"explanation\": \"Only two pairs are possible with nums1 and nums2: [1,3] and [2,3].\"\n    }\n  ],\n  \"hints\": [\n    \"Use a min-heap to keep track of the smallest sum pairs.\",\n    \"Start with the smallest pairs formed by the first element of `nums1` and all elements of `nums2`.\",\n    \"Iteratively replace and push the next smallest pair into the heap while ensuring not to exceed `k` pairs.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve an efficient runtime of O(k log k) by utilizing heap data structures.\",\n    \"constraints\": \"Avoid generating all possible pairs to prevent excessive memory usage and slow computation.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number of provinces in a city graph represented by an adjacency matrix."}, {"role": "assistant", "content": "{\n  \"description\": \"Given `n` cities and an `n x n` matrix `isConnected` that shows which cities are directly connected, find the number of provinces (groups of directly or indirectly connected cities). Each province is a set of cities connected directly or through other cities in a transitive manner.\",\n  \"objective\": \"Implement an efficient solution using BFS to count the number of connected components (provinces) in the graph represented by the `isConnected` matrix. Use a queue to perform BFS and track visited nodes to ensure each province is counted only once.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Tracking Variables\": \"Define a variable `n` to represent the number of cities (length of `isConnected`). Initialize an array `visited` of length `n` to keep track of visited cities and set all elements to `False`. Also, initialize `province_count` to 0, which will keep track of the number of provinces.\",\n    \"Step 2 - Traverse Cities to Identify Provinces\": \"Iterate over each city `i` in the range [0, n). For each city `i` that has not been visited, treat it as the start of a new province. Increment `province_count` by 1, and initiate a BFS from city `i` to mark all connected cities within the same province as visited.\",\n    \"Step 3 - Implement BFS Traversal\": \"For each unvisited city `i`, initiate a BFS. Create a queue `q`, add city `i` to it, and mark it as visited. Continue BFS by dequeuing a city, then checking its neighbors (other cities in the `isConnected` row for the city). For each neighbor, if they are directly connected and not yet visited, mark them as visited and enqueue them.\",\n    \"Step 4 - Update and Return Results\": \"After BFS completes for each unvisited city (i.e., each province), update `province_count`. Continue iterating through the cities until all provinces are identified. Return `province_count` as the result.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution runs efficiently for the maximum constraint (n = 200) and handles cases where cities are isolated (no connections) or fully connected.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"isConnected\": [\n          [\n            1,\n            1,\n            0\n          ],\n          [\n            1,\n            1,\n            0\n          ],\n          [\n            0,\n            0,\n            1\n          ]\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"There are two provinces: the first includes cities 0 and 1, and the second includes city 2.\"\n    },\n    {\n      \"input\": {\n        \"isConnected\": [\n          [\n            1,\n            0,\n            0\n          ],\n          [\n            0,\n            1,\n            0\n          ],\n          [\n            0,\n            0,\n            1\n          ]\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"Each city is isolated, resulting in 3 provinces.\"\n    }\n  ],\n  \"constraints\": {\n    \"city_count\": \"1 <= n <= 200\",\n    \"matrix_format\": \"`isConnected` is an `n x n` binary matrix where `isConnected[i][i] == 1` and `isConnected[i][j] == isConnected[j][i]`.\"\n  },\n  \"follow_up\": \"Consider implementing the solution using DFS or Union-Find to explore alternative approaches to connected component counting.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the nth integer in a sequence that skips numbers containing the digit '9'."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the nth (1-indexed) integer in a sequence that excludes numbers containing the digit '9'.\",\n  \"objective\": \"Use the mathematical observation that the sequence is equivalent to all base-9 numbers, converted to decimal, to efficiently compute the nth number.\",\n  \"meta_prompt\": {\n    \"Step 1 - Convert n to Base-9\": \"Interpret the given integer n as a base-9 number, where each digit represents a valid number in the sequence.\",\n    \"Step 2 - Convert Base-9 to Decimal\": \"Transform the base-9 representation of n into its decimal equivalent, as this matches the sequence's numbering system.\",\n    \"Step 3 - Return Result\": \"Return the decimal equivalent of the nth base-9 number, which corresponds to the nth number in the sequence.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 9\n      },\n      \"output\": 10,\n      \"explanation\": \"The 9th number in the sequence corresponds to the base-9 representation '10', which equals 10 in decimal.\"\n    },\n    {\n      \"input\": {\n        \"n\": 10\n      },\n      \"output\": 11,\n      \"explanation\": \"The 10th number in the sequence corresponds to the base-9 representation '11', which equals 11 in decimal.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 8 * 10^8\"\n  },\n  \"follow_up\": \"Discuss the efficiency of the base-9 conversion approach and its feasibility for very large values of n.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Change the order of numbers in an array to make it go up and down."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of integers `nums`, rearrange the elements such that it satisfies the condition `nums[0] < nums[1] > nums[2] < nums[3] ...`. This arrangement creates a 'wiggle' pattern in the array. The input guarantees a valid solution.\",\n  \"objective\": \"Develop an efficient algorithm to rearrange the array to achieve the desired pattern, optimizing for time complexity (preferably `O(n)`) and space usage (`O(1)` extra space if possible).\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Identify the required alternating inequality pattern `nums[0] < nums[1] > nums[2] < nums[3]...`.\",\n    \"Step 2 - Sort-Based Solution\": \"Sort the array, then rearrange the elements from the sorted array to create the wiggle pattern. This approach has `O(n log n)` complexity.\",\n    \"Step 3 - In-Place Linear Solution\": \"Use partitioning and rearrangement techniques to achieve the wiggle pattern directly in `O(n)` time, leveraging quick select or virtual indexing.\",\n    \"Step 4 - Verify Results\": \"Ensure the output array satisfies the alternating inequality condition for all indices.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          5,\n          1,\n          1,\n          6,\n          4\n        ]\n      },\n      \"output\": [\n        1,\n        6,\n        1,\n        5,\n        1,\n        4\n      ],\n      \"explanation\": \"Rearrange the numbers to satisfy `nums[0] < nums[1] > nums[2] < nums[3] ...`. Other valid outputs include [1, 4, 1, 5, 1, 6].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          3,\n          2,\n          2,\n          3,\n          1\n        ]\n      },\n      \"output\": [\n        2,\n        3,\n        1,\n        3,\n        1,\n        2\n      ],\n      \"explanation\": \"Rearrange the numbers to meet the condition. Other valid outputs are [1, 3, 1, 3, 1, 2].\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 50,000\",\n    \"element_value\": \"0 <= nums[i] <= 5000\",\n    \"guarantee\": \"Input always has a valid solution.\"\n  },\n  \"follow_up\": \"Can you achieve the rearrangement in `O(n)` time complexity and `O(1)` extra space using in-place operations?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Determine the order of letters in an alien language based on a sorted list of words."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a list of words from an alien language's dictionary, determine the order of the letters in the alien language. The words are sorted lexicographically based on the alien language's rules. Return the string of unique letters in sorted order according to the alien language, or return an empty string (`\\\"\\\"`) if the order is invalid.\",\n  \"objective\": \"Design an algorithm to reconstruct the order of letters in the alien language using topological sorting, ensuring that cycles in the order are detected and handled appropriately.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves reconstructing the order of letters based on the provided lexicographical sorting. Identify constraints like unique characters and invalid orders.\",\n    \"Step 2 - Graph Construction\": \"Build a directed graph where each node is a letter, and edges represent the order between letters based on adjacent words in the list.\",\n    \"Step 3 - Topological Sorting\": \"Perform topological sorting using algorithms like Kahn's algorithm or DFS. Detect cycles in the graph to determine if the order is invalid.\",\n    \"Step 4 - Output Conditions\": \"Return the topologically sorted order of letters if valid. If a cycle is detected or the graph is incomplete, return an empty string.\",\n    \"Step 5 - Edge Cases\": \"Handle cases such as single-word inputs, words with shared prefixes, and invalid orderings where cycles exist.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"words\": [\n          \"wrt\",\n          \"wrf\",\n          \"er\",\n          \"ett\",\n          \"rftt\"\n        ]\n      },\n      \"output\": \"wertf\",\n      \"explanation\": \"The order of letters is determined by comparing adjacent words: 'w' < 'e', 'e' < 'r', 'r' < 't', and 't' < 'f'.\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"z\",\n          \"x\"\n        ]\n      },\n      \"output\": \"zx\",\n      \"explanation\": \"The order is 'z' < 'x'.\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"z\",\n          \"x\",\n          \"z\"\n        ]\n      },\n      \"output\": \"\",\n      \"explanation\": \"A cycle exists in the order, so no valid solution exists.\"\n    }\n  ],\n  \"constraints\": {\n    \"words_length\": \"1 <= words.length <= 100\",\n    \"word_length\": \"1 <= words[i].length <= 100\",\n    \"character_set\": \"Each word consists only of lowercase English letters.\"\n  },\n  \"follow_up\": \"Can you improve the solution to handle large inputs by optimizing the graph construction and sorting process?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You have a list of stones placed at various coordinates on a grid. Find out how many stones can be removed if they share rows or columns."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an array of `n` stones, each represented by a coordinate on a 2D plane. A stone can be removed if it shares the same row or column as another stone that has not been removed. Your task is to determine the largest possible number of stones that can be removed.\",\n  \"objective\": \"Design an algorithm that finds the maximum number of stones that can be removed by repeatedly removing stones that share a row or column with an unremoved stone.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"You need to focus on how stones that are connected by rows and columns can be grouped. The problem essentially asks for the largest set of connected stones, where stones in a group can be removed, and the number of stones removed is maximized.\",\n    \"Step 2 - Approach\": \"The problem can be mapped to a graph problem where stones are nodes and edges exist between stones in the same row or column. The largest group of connected stones will correspond to the largest connected component in the graph.\",\n    \"Step 3 - Efficient Solution\": \"You can use Depth-First Search (DFS) or Breadth-First Search (BFS) to find all the connected components in the graph formed by stones sharing the same row or column. Once you identify the components, you can determine how many stones can be removed.\",\n    \"Step 4 - Output Format\": \"Return the maximum number of stones that can be removed.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure your solution handles the maximum constraints efficiently (e.g., when there are 1000 stones or when stone coordinates are large). Consider optimizing the space complexity when storing the graph.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"stones\": [\n          [\n            0,\n            0\n          ],\n          [\n            0,\n            1\n          ],\n          [\n            1,\n            0\n          ],\n          [\n            1,\n            2\n          ],\n          [\n            2,\n            1\n          ],\n          [\n            2,\n            2\n          ]\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"One way to remove 5 stones: 1. Remove stone [2, 2], then [2, 1], then [1, 2], and so on, leaving stone [0, 0] which cannot be removed.\"\n    },\n    {\n      \"input\": {\n        \"stones\": [\n          [\n            0,\n            0\n          ],\n          [\n            0,\n            2\n          ],\n          [\n            1,\n            1\n          ],\n          [\n            2,\n            0\n          ],\n          [\n            2,\n            2\n          ]\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"Remove stones [2, 2], [2, 0], and [0, 2], leaving [0, 0] and [1, 1] which cannot be removed.\"\n    },\n    {\n      \"input\": {\n        \"stones\": [\n          [\n            0,\n            0\n          ]\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"With only one stone, no removal is possible.\"\n    }\n  ],\n  \"constraints\": {\n    \"stones_length\": \"1 <= stones.length <= 1000\",\n    \"coordinates_range\": \"0 <= xi, yi <= 10^4\",\n    \"unique_coordinates\": \"No two stones share the same coordinate.\"\n  },\n  \"follow_up\": \"Can you improve the efficiency of your solution for larger inputs? Are there any alternate ways to represent the stones' connections more compactly?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Connect all next right pointers in a perfect binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a perfect binary tree, populate each node's `next` pointer to point to its next right node. If there is no next right node, the `next` pointer should be set to `NULL`. A perfect binary tree is a tree where all leaves are at the same level, and every parent has two children.\",\n  \"objective\": \"Design an algorithm to populate the `next` pointers for all nodes in a perfect binary tree.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves connecting nodes at the same level using their `next` pointers.\",\n    \"Step 2 - Level Order Traversal\": \"Use level order traversal with a queue to connect nodes at the same level.\",\n    \"Step 3 - Constant Space Optimization\": \"For a perfect binary tree, use the `next` pointers already established in the parent level to connect the children directly.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as an empty tree or a single-node tree.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(n) time with O(1) extra space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7\n        ]\n      },\n      \"output\": [\n        1,\n        \"#\",\n        2,\n        3,\n        \"#\",\n        4,\n        5,\n        6,\n        7,\n        \"#\"\n      ],\n      \"explanation\": \"Each node's `next` pointer is connected to its next right node.\"\n    },\n    {\n      \"input\": {\n        \"root\": []\n      },\n      \"output\": [],\n      \"explanation\": \"An empty tree results in no connections.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 2^12 - 1\",\n    \"node_values\": \"-1000 <= Node.val <= 1000\",\n    \"space_complexity\": \"Follow-up: Solve using constant extra space.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Add one to the number in the linked list."}, {"role": "assistant", "content": "{\n  \"title\": \"Increment a Linked List by One\",\n  \"description\": \"Given a non-negative integer represented as a linked list, increment the integer by one. The digits are stored with the most significant digit at the head of the list.\",\n  \"input\": {\n    \"name\": \"head\",\n    \"type\": \"linked list of integers\",\n    \"description\": \"Each node represents a single digit, where the head contains the most significant digit.\",\n    \"constraints\": \"1 <= number of nodes <= 100, 0 <= Node.val <= 9\"\n  },\n  \"output\": {\n    \"type\": \"linked list of integers\",\n    \"description\": \"The resulting linked list representing the incremented integer.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": [\n        1,\n        2,\n        4\n      ],\n      \"explanation\": \"123 incremented by 1 results in 124.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          9,\n          9,\n          9\n        ]\n      },\n      \"output\": [\n        1,\n        0,\n        0,\n        0\n      ],\n      \"explanation\": \"999 incremented by 1 results in 1000.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          0\n        ]\n      },\n      \"output\": [\n        1\n      ],\n      \"explanation\": \"0 incremented by 1 results in 1.\"\n    }\n  ],\n  \"hints\": [\n    \"Reverse the linked list to simplify the addition operation and handle carry propagation.\",\n    \"Traverse the list to add one, considering any carry over.\",\n    \"Reverse the linked list again to restore the original order.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Process the linked list in O(n) time with O(1) extra space.\",\n    \"constraints\": \"Avoid creating additional lists or arrays.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Format a license key string so it looks better."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a string `s` representing a license key, which contains alphanumeric characters and dashes. Your task is to reformat the string such that it is divided into groups of size `k`, separated by dashes. The first group may have fewer characters but must contain at least one character. Additionally, all characters must be converted to uppercase, and any extra dashes in `s` must be removed.\",\n  \"objective\": \"Reformat the given license key string `s` by cleaning and dividing it into properly sized groups separated by dashes while meeting the required constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Clean Input\": \"Remove all dashes from the string `s` and convert all lowercase letters to uppercase.\",\n    \"Step 2 - Calculate First Group Size\": \"Determine the size of the first group based on the total length of the cleaned string modulo `k`.\",\n    \"Step 3 - Divide into Groups\": \"Iteratively divide the cleaned string into groups of size `k`, ensuring that the first group may be shorter if needed.\",\n    \"Step 4 - Add Dashes\": \"Insert dashes between groups to form the final formatted string.\",\n    \"Step 5 - Return Reformatted String\": \"Combine the groups into the final string and return it.\",\n    \"Final Check\": \"Ensure the formatted string meets all constraints, including character conversion and group size compliance.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"5F3Z-2e-9-w\",\n        \"k\": 4\n      },\n      \"output\": \"5F3Z-2E9W\",\n      \"explanation\": \"After cleaning the input, the string becomes '5F3Z2E9W'. Dividing into groups of size 4 results in '5F3Z-2E9W'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"2-5g-3-J\",\n        \"k\": 2\n      },\n      \"output\": \"2-5G-3J\",\n      \"explanation\": \"After cleaning the input, the string becomes '25G3J'. Dividing into groups of size 2 results in '2-5G-3J'.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 10^5\",\n    \"group_size\": \"1 <= k <= 10^4\",\n    \"valid_characters\": \"s consists only of alphanumeric characters and dashes.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"How would the solution change if the string `s` contains leading or trailing spaces?\",\n    \"question_2\": \"Could you optimize the algorithm for better memory usage when `s` is extremely large?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Reverse a linked list."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the head of a singly linked list, reverse the list in place and return the updated head.\",\n  \"objective\": \"Develop an algorithm to reverse a singly linked list efficiently, both iteratively and recursively.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Understand that reversing a list involves reversing the `next` pointers of each node.\",\n    \"Step 2 - Iterative Approach\": \"Use a loop to traverse the list and adjust pointers as you go, keeping track of the previous node.\",\n    \"Step 3 - Recursive Approach\": \"Reverse the list by recursively processing the rest of the list, then updating pointers on the way back.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider cases with empty lists (`head == null`) or lists with only one node.\",\n    \"Step 5 - Complexity\": \"Ensure both iterative and recursive solutions run in O(n) time with O(1) space for the iterative version.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2,\n          3,\n          4,\n          5\n        ]\n      },\n      \"output\": [\n        5,\n        4,\n        3,\n        2,\n        1\n      ],\n      \"explanation\": \"Reversing the list produces the sequence 5 -> 4 -> 3 -> 2 -> 1.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2\n        ]\n      },\n      \"output\": [\n        2,\n        1\n      ],\n      \"explanation\": \"Reversing the list produces 2 -> 1.\"\n    },\n    {\n      \"input\": {\n        \"head\": []\n      },\n      \"output\": [],\n      \"explanation\": \"An empty list remains unchanged.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 5000\",\n    \"value_range\": \"-5000 <= Node.val <= 5000\"\n  },\n  \"follow_up\": \"Could you implement both iterative and recursive solutions efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You need to find the sequence of instructions for a car to reach a target."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a target position, and your car starts at position 0 with a speed of +1 on an infinite number line. The car follows a sequence of instructions where 'A' accelerates and 'R' reverses. You need to find the shortest sequence of instructions that will move the car to the target position.\",\n  \"objective\": \"Write a function to return the shortest sequence of instructions that will drive the car to the target position.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Your car follows a series of instructions, and you need to find the shortest sequence that leads to the target position. The instructions involve accelerating or reversing, which affects both the car's position and speed.\",\n    \"Step 2 - Constraints\": \"The target is guaranteed to be between 1 and 10,000, and the position of the car starts at 0. The car moves based on a set of instructions that either accelerate or reverse, affecting its speed and position.\",\n    \"Step 3 - Approach\": \"You can use a breadth-first search (BFS) approach where each state represents a position and speed. From each state, you can either accelerate or reverse and transition to a new state. Keep track of visited states to avoid cycles.\",\n    \"Step 4 - Optimization\": \"Since the target is relatively small, an iterative approach with BFS should efficiently find the shortest sequence. Focus on ensuring that each possible state is explored in the fewest number of steps.\",\n    \"Step 5 - Implementation Details\": \"Each state should be represented by a tuple of position and speed. The BFS should explore all possible sequences of accelerating and reversing, and stop once the target position is reached.\",\n    \"Step 6 - Return the Result\": \"Once the target position is reached, the length of the sequence can be returned, representing the shortest number of instructions.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"target\": 3\n      },\n      \"output\": 2,\n      \"explanation\": \"The shortest instruction sequence is 'AA'. The position goes from 0 --> 1 --> 3.\"\n    },\n    {\n      \"input\": {\n        \"target\": 6\n      },\n      \"output\": 5,\n      \"explanation\": \"The shortest instruction sequence is 'AAARA'. The position goes from 0 --> 1 --> 3 --> 7 --> 7 --> 6.\"\n    }\n  ],\n  \"constraints\": {\n    \"target_range\": \"1 <= target <= 10^4\"\n  },\n  \"follow_up\": \"How would you optimize this solution if the target position was much larger, say up to 10^6?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find how many rows you can fully build with `n` coins."}, {"role": "assistant", "content": "{\n  \"title\": \"Find Complete Rows of Coin Staircase\",\n  \"description\": \"You have `n` coins and you want to build a staircase with these coins. The staircase consists of `k` rows where the `ith` row has exactly `i` coins. The last row of the staircase may be incomplete. Return the number of complete rows of the staircase.\",\n  \"input\": {\n    \"n\": {\n      \"type\": \"integer\",\n      \"description\": \"The total number of coins available to build the staircase.\",\n      \"constraints\": {\n        \"range\": \"[1, 2^31 - 1]\"\n      }\n    }\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The number of complete rows of the staircase that can be built.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 5\n      },\n      \"output\": 2,\n      \"explanation\": \"The staircase built with 5 coins has 2 complete rows (1 coin in the 1st row, 2 coins in the 2nd row). The 3rd row is incomplete.\"\n    },\n    {\n      \"input\": {\n        \"n\": 8\n      },\n      \"output\": 3,\n      \"explanation\": \"The staircase built with 8 coins has 3 complete rows (1 coin in the 1st row, 2 coins in the 2nd row, 3 coins in the 3rd row). The 4th row is incomplete.\"\n    }\n  ],\n  \"hints\": [\n    \"The problem can be reduced to finding the largest integer `k` such that the sum of the first `k` integers `(k * (k + 1)) / 2` is less than or equal to `n`.\",\n    \"Consider using a binary search to efficiently find `k` when `n` is large.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(log(n)) time complexity using binary search or mathematical formulas.\",\n    \"constraints\": \"Avoid iterating through all rows explicitly for large `n` to maintain efficiency.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum path sum in a triangle."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a `triangle` array, return the minimum path sum from the top to the bottom of the triangle. At each step, you may move to adjacent numbers in the row below. For a number at index `i`, you can move to either index `i` or `i + 1` in the next row.\",\n  \"objective\": \"Design an efficient algorithm to calculate the minimum path sum from top to bottom of the triangle.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the problem involves finding a path with the minimum sum, moving through adjacent values row by row.\",\n    \"Step 2 - Dynamic Programming\": \"Use a bottom-up DP approach to compute the minimum path sum for each row.\",\n    \"Step 3 - Space Optimization\": \"Store the minimum sums in-place or use a single array to reduce space complexity to O(n), where `n` is the number of rows.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as a triangle with a single row or negative values.\",\n    \"Step 5 - Optimize\": \"Ensure the solution runs in O(n^2) time, where `n` is the number of rows.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"triangle\": [\n          [\n            2\n          ],\n          [\n            3,\n            4\n          ],\n          [\n            6,\n            5,\n            7\n          ],\n          [\n            4,\n            1,\n            8,\n            3\n          ]\n        ]\n      },\n      \"output\": 11,\n      \"explanation\": \"The minimum path is 2 -> 3 -> 5 -> 1, with a sum of 11.\"\n    },\n    {\n      \"input\": {\n        \"triangle\": [\n          [\n            -10\n          ]\n        ]\n      },\n      \"output\": -10,\n      \"explanation\": \"A triangle with a single row results in the value of the only element.\"\n    }\n  ],\n  \"constraints\": {\n    \"triangle_rows\": \"1 <= triangle.length <= 200\",\n    \"triangle_values\": \"-10^4 <= triangle[i][j] <= 10^4\",\n    \"space_complexity\": \"Follow-up: Achieve O(n) space complexity.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Generate all unique permutations of an array of numbers, which may include duplicates."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a collection of integers `nums`, which may contain duplicates, return all possible **unique permutations** of the integers. The result can be returned in any order.\",\n  \"objective\": \"Design an efficient backtracking algorithm to generate all unique permutations of the array `nums`, ensuring duplicates are avoided.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves generating all permutations of `nums` while avoiding duplicate permutations caused by repeated elements.\",\n    \"Step 2 - Sort and Backtracking\": \"Sort the array to group duplicates together. Use a backtracking algorithm with a boolean `used` array to track visited elements. Skip duplicate elements during recursion.\",\n    \"Step 3 - Skip Duplicates\": \"Ensure that duplicates are skipped by checking whether a previously used element is adjacent to the current element and has already been used in this recursion level.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the algorithm adheres to constraints such as `1 <= nums.length <= 8` and efficient handling of duplicates.\",\n    \"Step 5 - Handle Edge Cases\": \"Handle cases like arrays with all identical elements, arrays with no duplicates, or arrays of length 1.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          1,\n          2\n        ]\n      },\n      \"output\": [\n        [\n          1,\n          1,\n          2\n        ],\n        [\n          1,\n          2,\n          1\n        ],\n        [\n          2,\n          1,\n          1\n        ]\n      ],\n      \"explanation\": \"All unique permutations of [1, 1, 2] are generated.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": [\n        [\n          1,\n          2,\n          3\n        ],\n        [\n          1,\n          3,\n          2\n        ],\n        [\n          2,\n          1,\n          3\n        ],\n        [\n          2,\n          3,\n          1\n        ],\n        [\n          3,\n          1,\n          2\n        ],\n        [\n          3,\n          2,\n          1\n        ]\n      ],\n      \"explanation\": \"All permutations of [1, 2, 3] are generated as there are no duplicates.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 8\",\n    \"element_range\": \"-10 <= nums[i] <= 10\",\n    \"unique_permutations\": \"Avoid duplicate permutations caused by repeated elements.\"\n  },\n  \"follow_up\": \"Can you implement the algorithm iteratively or optimize it for larger arrays with frequent duplicates?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count how many groups of similar words there are in a list."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a list of strings, each being an anagram of every other string in the list, your task is to determine the number of groups that can be formed based on similarity. Two strings are considered similar if they can be made equal by swapping exactly two letters in different positions or if they are identical. Each group consists of words that are similar to at least one other word in the group. Find how many distinct groups can be formed by this similarity criterion.\",\n  \"objective\": \"Design an efficient algorithm that determines the number of similarity groups in the given list of strings, where two strings are similar if they can be transformed into each other by swapping exactly two letters or are already identical.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Start by understanding the problem: You are given a list of strings, and two strings are similar if we can swap exactly two characters in one to get the other. The goal is to find how many distinct groups of similar strings exist.\",\n    \"Step 2 - Initial Approach\": \"Consider using a union-find (disjoint-set) approach to group the strings. As we check each string, we try to find whether it belongs to an existing group or if it should form a new group based on the similarity condition.\",\n    \"Step 3 - Efficient Grouping Strategy\": \"For each string, compare it with other strings in the list to determine if they are similar. If they are, group them together using union-find. This way, you can efficiently track groups of similar strings.\",\n    \"Step 4 - Output Format\": \"Return the number of distinct groups. Ensure the solution works even for the upper constraint, with 300 strings of up to 300 characters each.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Write an efficient solution that handles the edge cases such as very small inputs or when no strings are similar to each other. Ensure the algorithm works within the given constraints.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"strs\": [\n          \"tars\",\n          \"rats\",\n          \"arts\",\n          \"star\"\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The two groups are { 'tars', 'rats', 'arts' } and { 'star' }, as 'tars' and 'arts' are similar by swapping letters, and 'rats' and 'arts' are also similar.\"\n    },\n    {\n      \"input\": {\n        \"strs\": [\n          \"omv\",\n          \"ovm\"\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"Both 'omv' and 'ovm' are similar by swapping the first and second letters.\"\n    }\n  ],\n  \"constraints\": {\n    \"strs_length\": \"1 <= strs.length <= 300\",\n    \"strs_elements_length\": \"1 <= strs[i].length <= 300\",\n    \"lowercase_letters_only\": \"strs[i] consists of lowercase letters only\",\n    \"anagrams_condition\": \"All words in strs have the same length and are anagrams of each other.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Identify and remove the redundant edge in a graph to make the graph a tree with `n` nodes."}, {"role": "assistant", "content": "{\n  \"description\": \"Identify the redundant edge in a directed graph to ensure the resulting graph forms a valid rooted tree with `n` nodes.\",\n  \"objective\": \"Determine the redundant edge by handling two scenarios: nodes with multiple parents or cycles, and remove the edge to restore the tree structure.\",\n  \"meta_prompt\": {\n    \"Step 1 - Analyze Parent Relationships\": \"Construct the graph while identifying nodes with multiple parents and tracking edges leading to them.\",\n    \"Step 2 - Detect Cycles\": \"Use depth-first search (DFS) or Union-Find to detect cycles in the graph.\",\n    \"Step 3 - Handle Two Parent Node\": \"If a node has two parents, consider removing either of the incoming edges and validate the resulting tree structure.\",\n    \"Step 4 - Handle Cycles\": \"If a cycle is detected, remove the last edge in the cycle to restore the tree.\",\n    \"Step 5 - Return Result\": \"Return the last redundant edge based on the detected issue (multiple parents or cycle).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"edges\": [\n          [\n            1,\n            2\n          ],\n          [\n            1,\n            3\n          ],\n          [\n            2,\n            3\n          ]\n        ]\n      },\n      \"output\": [\n        2,\n        3\n      ],\n      \"explanation\": \"Node 3 has two parents, [1, 3] and [2, 3]. Removing [2, 3] ensures the graph forms a valid rooted tree.\"\n    },\n    {\n      \"input\": {\n        \"edges\": [\n          [\n            1,\n            2\n          ],\n          [\n            2,\n            3\n          ],\n          [\n            3,\n            4\n          ],\n          [\n            4,\n            1\n          ],\n          [\n            1,\n            5\n          ]\n        ]\n      },\n      \"output\": [\n        4,\n        1\n      ],\n      \"explanation\": \"A cycle is formed by edges [4, 1]. Removing [4, 1] restores the tree structure.\"\n    }\n  ],\n  \"constraints\": {\n    \"graph_size\": \"n == edges.length\",\n    \"node_range\": \"1 <= ui, vi <= n\",\n    \"validity\": \"No repeated edges, and input is always connected.\"\n  },\n  \"follow_up\": \"Discuss the efficiency of the solution and the implications of using Union-Find with path compression versus DFS for cycle detection in larger graphs.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the correct spelling for each query from a list of words."}, {"role": "assistant", "content": "{\n  \"description\": \"Implement a spellchecker that converts a query word into the correct word from a given wordlist, considering two types of spelling mistakes: capitalization and vowel errors. The spellchecker should return the correctly spelled word based on specific precedence rules.\",\n  \"objective\": \"Given a `wordlist` and a list of `queries`, implement a spellchecker that returns the correct word for each query based on the following rules: exact match (case-sensitive), capitalization match (case-insensitive), and vowel error match (with vowels replaced by any vowel).\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The task is to implement a spellchecker that handles capitalization and vowel errors. The wordlist contains words, and for each query, we need to return the first match based on case-sensitivity, capitalization, and vowel errors.\",\n    \"Step 2 - Strategy Outline\": \"1. Check for exact matches first. 2. If no exact match, check for capitalization-based matches. 3. If still no match, check for vowel-error matches by replacing vowels in the query. 4. Return the result based on the first match or an empty string if no match is found.\",\n    \"Step 3 - Handling Capitalization\": \"Ensure the query matches any word from the wordlist ignoring case for capitalization, but return the correct case based on the wordlist.\",\n    \"Step 4 - Handling Vowel Errors\": \"Replace the vowels in the query with any vowel and check if the modified query matches any word in the wordlist.\",\n    \"Step 5 - Edge Cases\": \"Handle cases where no matches are found, and ensure that all types of matches are checked in the correct precedence order.\",\n    \"Step 6 - Output Format\": \"For each query, output the correctly matched word or an empty string if no match exists.\",\n    \"Step 7 - Code Efficiency\": \"Ensure that the solution handles the constraints effectively, with up to 5000 words and queries, and that checking for vowel errors is efficient.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"wordlist\": [\n          \"KiTe\",\n          \"kite\",\n          \"hare\",\n          \"Hare\"\n        ],\n        \"queries\": [\n          \"kite\",\n          \"Kite\",\n          \"KiTe\",\n          \"Hare\",\n          \"HARE\",\n          \"Hear\",\n          \"hear\",\n          \"keti\",\n          \"keet\",\n          \"keto\"\n        ]\n      },\n      \"output\": [\n        \"kite\",\n        \"KiTe\",\n        \"KiTe\",\n        \"Hare\",\n        \"hare\",\n        \"\",\n        \"\",\n        \"KiTe\",\n        \"\",\n        \"KiTe\"\n      ],\n      \"explanation\": \"The spellchecker works based on exact matches, capitalization, and vowel errors in that order of precedence.\"\n    },\n    {\n      \"input\": {\n        \"wordlist\": [\n          \"yellow\"\n        ],\n        \"queries\": [\n          \"YellOw\"\n        ]\n      },\n      \"output\": [\n        \"yellow\"\n      ],\n      \"explanation\": \"The query 'YellOw' matches 'yellow' based on capitalization.\"\n    }\n  ],\n  \"constraints\": {\n    \"wordlist_length_range\": \"1 <= wordlist.length <= 5000\",\n    \"queries_length_range\": \"1 <= queries.length <= 5000\",\n    \"word_and_query_length_range\": \"1 <= wordlist[i].length, queries[i].length <= 7\",\n    \"character_restrictions\": \"wordlist[i] and queries[i] consist only of English letters\"\n  },\n  \"follow_up\": \"Can you optimize the solution for larger wordlists or queries while keeping the matching process efficient, especially when considering vowel replacements?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find out if the matrix is Toeplitz."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a matrix of size m x n, your task is to determine if the matrix is Toeplitz. A matrix is considered Toeplitz if every diagonal from top-left to bottom-right contains the same elements. Your solution should efficiently check the diagonals to verify this condition for the entire matrix.\",\n  \"objective\": \"Design an algorithm that checks whether a given matrix is Toeplitz. The solution should iterate through the matrix efficiently and return 'true' if all diagonals have the same elements, otherwise return 'false'.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The problem asks to verify if every diagonal from top-left to bottom-right in the matrix has the same elements. A Toeplitz matrix satisfies the condition that for any matrix element at position (i, j), it must be equal to the element at position (i+1, j+1).\",\n    \"Step 2 - Initial Approach\": \"Start by iterating over each element in the matrix, but only check elements that have a neighbor diagonally below and to the right. For each of these elements, check if it matches the element diagonally below and to the right (i.e., matrix[i][j] == matrix[i+1][j+1]). If a mismatch is found, return false.\",\n    \"Step 3 - Optimized Solution\": \"You can iterate over the matrix starting from the second row and second column, comparing each element with its diagonal neighbor (element at position (i+1, j+1)). If any mismatch occurs, return false immediately. If no mismatches are found after checking all elements, return true.\",\n    \"Step 4 - Output Format\": \"The output should be a boolean value, either 'true' if the matrix is Toeplitz, or 'false' if it is not. Ensure that the solution handles edge cases, such as very small matrices or matrices with uniform elements.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure that the solution handles the matrix size efficiently, within the given constraints (1 <= m, n <= 20). Also, handle edge cases such as matrices with only one row or one column.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution works within the constraints: 1 <= m, n <= 20, and the matrix elements are within the range of 0 to 99. Ensure the algorithm is optimal for small matrices as well as matrices at the upper constraint size.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            1,\n            2,\n            3,\n            4\n          ],\n          [\n            5,\n            1,\n            2,\n            3\n          ],\n          [\n            9,\n            5,\n            1,\n            2\n          ]\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"In this case, all diagonals in the matrix have the same elements, so the output is true.\"\n    },\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            1,\n            2\n          ],\n          [\n            2,\n            2\n          ]\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The diagonal [1, 2] has different elements, so the matrix is not Toeplitz.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size\": \"1 <= m, n <= 20\",\n    \"matrix_value_range\": \"0 <= matrix[i][j] <= 99\"\n  },\n  \"follow_up\": \"What if the matrix is too large to load entirely into memory, and you can only load a row at a time? How can you optimize the solution for such a scenario?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find where p's anagrams start in s."}, {"role": "assistant", "content": "{\n  \"title\": \"Find All Anagrams in a String\",\n  \"description\": \"Given two strings `s` and `p`, return an array of all the start indices of `p`'s anagrams in `s`. An **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once.\",\n  \"input\": {\n    \"s\": {\n      \"type\": \"string\",\n      \"description\": \"The source string in which to find anagrams of `p`.\"\n    },\n    \"p\": {\n      \"type\": \"string\",\n      \"description\": \"The pattern string whose anagrams need to be found in `s`.\"\n    },\n    \"constraints\": {\n      \"s_length\": \"[1, 30000]\",\n      \"p_length\": \"[1, 30000]\",\n      \"characters\": \"Both strings consist of lowercase English letters.\"\n    }\n  },\n  \"output\": {\n    \"type\": \"array\",\n    \"description\": \"An array of integers representing the start indices of substrings in `s` that are anagrams of `p`. Indices may be returned in any order.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"cbaebabacd\",\n        \"p\": \"abc\"\n      },\n      \"output\": [\n        0,\n        6\n      ],\n      \"explanation\": \"Substrings 'cba' (starting at index 0) and 'bac' (starting at index 6) are anagrams of 'abc'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"abab\",\n        \"p\": \"ab\"\n      },\n      \"output\": [\n        0,\n        1,\n        2\n      ],\n      \"explanation\": \"Substrings 'ab' (starting at index 0), 'ba' (starting at index 1), and 'ab' (starting at index 2) are anagrams of 'ab'.\"\n    }\n  ],\n  \"hints\": [\n    \"Use a sliding window approach to keep track of the frequency of characters in the current substring of length `p.length`.\",\n    \"Compare the frequency count of the current window in `s` with the frequency count of `p` to identify anagrams.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(n) time complexity by using a sliding window with a fixed size of `p.length` and a hash map or array for frequency counts.\",\n    \"constraints\": \"Minimize extra memory usage while maintaining clarity and efficiency.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the median of two sorted arrays."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two sorted arrays `nums1` and `nums2` of sizes `m` and `n` respectively, your task is to find the median of the two arrays combined. The solution should achieve an overall runtime complexity of `O(log (m+n))`. The median is defined as the middle value in an odd-length merged array or the average of the two middle values in an even-length merged array.\",\n  \"objective\": \"Design an efficient algorithm to find the median of two sorted arrays using a binary search approach, ensuring a runtime complexity of `O(log (m+n))`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The two arrays `nums1` and `nums2` are sorted, and their lengths can vary. The goal is to find the median of the combined data without explicitly merging the arrays, as that would result in a suboptimal solution with higher complexity.\",\n    \"Step 2 - Initial Approach\": \"Consider merging the two arrays and finding the median directly. However, this approach has a time complexity of `O(m+n)` and is not optimal for this problem.\",\n    \"Step 3 - Optimal Solution with Binary Search\": \"Perform binary search on the smaller array to partition it and `nums2` such that the left half contains the smaller elements and the right half contains the larger elements. Use this partition to calculate the median efficiently.\",\n    \"Step 4 - Edge Cases\": \"Handle edge cases such as one array being empty, both arrays having the same values, and arrays of significantly different lengths.\",\n    \"Step 5 - Output Format\": \"Return the median as a floating-point number. Ensure the solution adheres to the constraints and performs optimally for the largest input sizes.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums1\": [\n          1,\n          3\n        ],\n        \"nums2\": [\n          2\n        ]\n      },\n      \"output\": 2.0,\n      \"explanation\": \"The merged array is [1, 2, 3], and the median is 2.\"\n    },\n    {\n      \"input\": {\n        \"nums1\": [\n          1,\n          2\n        ],\n        \"nums2\": [\n          3,\n          4\n        ]\n      },\n      \"output\": 2.5,\n      \"explanation\": \"The merged array is [1, 2, 3, 4], and the median is (2 + 3) / 2 = 2.5.\"\n    },\n    {\n      \"input\": {\n        \"nums1\": [\n          0,\n          0\n        ],\n        \"nums2\": [\n          0,\n          0\n        ]\n      },\n      \"output\": 0.0,\n      \"explanation\": \"The merged array is [0, 0, 0, 0], and the median is (0 + 0) / 2 = 0.\"\n    },\n    {\n      \"input\": {\n        \"nums1\": [],\n        \"nums2\": [\n          1\n        ]\n      },\n      \"output\": 1.0,\n      \"explanation\": \"The merged array is [1], and the median is 1.\"\n    },\n    {\n      \"input\": {\n        \"nums1\": [\n          2\n        ],\n        \"nums2\": []\n      },\n      \"output\": 2.0,\n      \"explanation\": \"The merged array is [2], and the median is 2.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums1_length\": \"0 <= nums1.length <= 1000\",\n    \"nums2_length\": \"0 <= nums2.length <= 1000\",\n    \"total_length\": \"1 <= nums1.length + nums2.length <= 2000\",\n    \"nums_values_range\": \"-10^6 <= nums1[i], nums2[i] <= 10^6\"\n  },\n  \"follow_up\": \"Can you further optimize the solution by minimizing space complexity while maintaining the required time complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a target value exists in a matrix where rows are sorted and the first element of each row is greater than the last element of the previous row."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `m x n` integer matrix `matrix` with rows sorted in non-decreasing order and the first element of each row greater than the last element of the previous row, determine if a given integer `target` is present in the matrix. The solution must run in `O(log(m * n))` time complexity.\",\n  \"objective\": \"Design an efficient binary search algorithm to locate the target value in the matrix while treating the matrix as a single sorted array.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the matrix can be treated as a single sorted array due to its properties. The task involves performing binary search to find the target efficiently.\",\n    \"Step 2 - Map 2D Indices to 1D\": \"Use binary search on the virtual 1D representation of the matrix. The element at index `mid` corresponds to `matrix[mid / n][mid % n]`.\",\n    \"Step 3 - Binary Search Implementation\": \"Initialize `low = 0` and `high = m * n - 1`. Calculate `mid` as `(low + high) // 2`, retrieve the matrix element using the 2D mapping formula, and compare it with the target. Adjust `low` and `high` accordingly.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution handles constraints such as `1 <= m, n <= 100` efficiently, with time complexity `O(log(m * n))`.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider edge cases such as a single-row matrix, a single-column matrix, or matrices where the target is outside the range of values.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            1,\n            3,\n            5,\n            7\n          ],\n          [\n            10,\n            11,\n            16,\n            20\n          ],\n          [\n            23,\n            30,\n            34,\n            60\n          ]\n        ],\n        \"target\": 3\n      },\n      \"output\": true,\n      \"explanation\": \"The target 3 is present in the matrix at `matrix[0][1]`.\"\n    },\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            1,\n            3,\n            5,\n            7\n          ],\n          [\n            10,\n            11,\n            16,\n            20\n          ],\n          [\n            23,\n            30,\n            34,\n            60\n          ]\n        ],\n        \"target\": 13\n      },\n      \"output\": false,\n      \"explanation\": \"The target 13 is not present in the matrix.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_dimensions\": \"1 <= m, n <= 100\",\n    \"value_range\": \"-10^4 <= matrix[i][j], target <= 10^4\",\n    \"time_complexity\": \"O(log(m * n))\"\n  },\n  \"follow_up\": \"Can you modify the algorithm to work with matrices where rows are sorted independently and there is no guarantee about the inter-row relationship?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a graph, return the safe nodes."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a directed graph represented by a 0-indexed 2D integer array `graph`. Each node in the graph is labeled from 0 to n - 1, and each `graph[i]` contains the nodes adjacent to node `i`. A node is a terminal node if it has no outgoing edges. A node is considered a safe node if every possible path starting from that node leads to a terminal node or another safe node. Your task is to return a sorted array containing all the safe nodes in the graph.\",\n  \"objective\": \"Design an efficient algorithm that returns all the safe nodes in the graph in ascending order. A safe node is one that ensures all paths starting from it eventually lead to a terminal node or another safe node.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The problem asks to identify safe nodes in a directed graph. Safe nodes are those that can only lead to terminal nodes or other safe nodes, and any path starting from them will eventually reach a terminal node.\",\n    \"Step 2 - Approach\": \"Use Depth-First Search (DFS) to explore each node. Track the state of each node: unvisited, visiting, and safe. A node is safe if all the nodes it points to eventually lead to a terminal node or another safe node.\",\n    \"Step 3 - DFS Traversal\": \"Use a DFS-based approach to traverse the graph and identify the safe nodes. During traversal, mark nodes that are part of cycles or lead to unsafe nodes as unsafe, and mark nodes that lead to terminal nodes or other safe nodes as safe.\",\n    \"Step 4 - Optimization\": \"Since the graph can be large (up to 10^4 nodes and 4 * 10^4 edges), aim for an O(n + e) time complexity, where n is the number of nodes and e is the number of edges.\",\n    \"Step 5 - Final Solution\": \"Return a sorted list of all the safe nodes. These nodes must have been determined as safe during the DFS traversal.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"graph\": [\n          [\n            1,\n            2\n          ],\n          [\n            2,\n            3\n          ],\n          [\n            5\n          ],\n          [\n            0\n          ],\n          [\n            5\n          ],\n          [],\n          []\n        ]\n      },\n      \"output\": [\n        2,\n        4,\n        5,\n        6\n      ],\n      \"explanation\": \"The nodes 5 and 6 are terminal nodes as there are no outgoing edges. Nodes 2, 4, 5, and 6 are safe because every path starting from them leads to node 5 or 6.\"\n    },\n    {\n      \"input\": {\n        \"graph\": [\n          [\n            1,\n            2,\n            3,\n            4\n          ],\n          [\n            1,\n            2\n          ],\n          [\n            3,\n            4\n          ],\n          [\n            0,\n            4\n          ],\n          []\n        ]\n      },\n      \"output\": [\n        4\n      ],\n      \"explanation\": \"Node 4 is a terminal node, and any path starting at node 4 leads to node 4 itself.\"\n    }\n  ],\n  \"constraints\": {\n    \"graph_length\": \"1 <= n <= 10^4\",\n    \"edges_count\": \"1 <= number of edges <= 4 * 10^4\",\n    \"graph_properties\": \"graph[i] is sorted in strictly increasing order\"\n  },\n  \"follow_up\": \"How can you optimize your solution further to reduce memory usage while keeping the time complexity the same?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given an integer array and an integer `k`. Change each element by adding or subtracting `k` and find the minimum score of the array."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an integer array `nums` and an integer `k`. For each index `i` in the array `nums`, you can either increase or decrease the value at index `i` by `k`. The **score** of the array is defined as the difference between the maximum and minimum elements in the array after modifying each element. Your task is to return the minimum possible score that can be achieved after applying the changes at each index.\",\n  \"objective\": \"Develop an efficient algorithm that calculates the minimum score of the array after modifying each element either by adding or subtracting `k`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"This problem asks for the minimum possible difference between the maximum and minimum elements in the array after making the allowed modifications. We need to explore how the possible changes (adding or subtracting `k` for each element) affect the overall score.\",\n    \"Step 2 - Initial Approach\": \"One approach is to sort the array, then evaluate the effect of each modification (either adding `k` or subtracting `k`) on the array\\u2019s maximum and minimum values. By focusing on minimizing the difference between the highest and lowest values, we can calculate the minimum possible score.\",\n    \"Step 3 - Efficient Solution\": \"First, sort the array. Then, we consider three possible outcomes for the minimum and maximum values: the original minimum and maximum, the minimum plus `k` and maximum minus `k`, and vice versa. The result is the smallest possible difference among these outcomes.\",\n    \"Step 4 - Output Format\": \"The result should be a single integer representing the minimum score after all changes.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure that your solution works for arrays with up to 10,000 elements and handles edge cases such as when `k` is 0 or when all elements in the array are the same.\",\n    \"Final Check - Constraints Verification\": \"Verify that the code runs efficiently for large arrays (up to 10^4 elements) and large values of `k` (up to 10^4).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1\n        ],\n        \"k\": 0\n      },\n      \"output\": 0,\n      \"explanation\": \"The only element is 1, and with k=0, no change can be made. Thus, the score is 1 - 1 = 0.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          10\n        ],\n        \"k\": 2\n      },\n      \"output\": 6,\n      \"explanation\": \"After changing the first element to 2 and the second element to 8, the score is max(2, 8) - min(2, 8) = 8 - 2 = 6.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          3,\n          6\n        ],\n        \"k\": 3\n      },\n      \"output\": 3,\n      \"explanation\": \"After changing the first element to 4, the second element stays 3, and the third element is changed to 3, the score is max(4, 6, 3) - min(4, 6, 3) = 6 - 3 = 3.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 104\",\n    \"nums_values\": \"0 <= nums[i] <= 104\",\n    \"k_values\": \"0 <= k <= 104\"\n  },\n  \"follow_up\": \"Can you improve the algorithm\\u2019s efficiency for larger inputs by considering how changes to specific elements affect the array\\u2019s overall range?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find all subsets of an array, including duplicates."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums` that may contain duplicates, generate all unique subsets (the power set) of the array. Ensure that no duplicate subsets are included in the result, and return the subsets in any order.\",\n  \"objective\": \"Design an algorithm to compute the power set of `nums`, ensuring that duplicate subsets are not included. Utilize a backtracking approach or iterative method to systematically generate all unique subsets.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves generating all subsets of the array, including handling duplicate elements to avoid duplicate subsets.\",\n    \"Step 2 - Sorting and Deduplication\": \"Sort the input array to ensure duplicates are adjacent. This helps skip over duplicates during subset generation.\",\n    \"Step 3 - Backtracking Approach\": \"Use a backtracking algorithm to explore all possible subsets. At each recursion step, decide whether to include the current element. Skip duplicates by only including the first occurrence of a duplicate element in each recursion branch.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution works efficiently within the constraints of `nums` length (up to 10) and handles negative and duplicate values correctly.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider edge cases such as an empty array, all elements being the same, or a single unique element.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          2\n        ]\n      },\n      \"output\": [\n        [],\n        [\n          1\n        ],\n        [\n          1,\n          2\n        ],\n        [\n          1,\n          2,\n          2\n        ],\n        [\n          2\n        ],\n        [\n          2,\n          2\n        ]\n      ],\n      \"explanation\": \"The subsets include all unique combinations of elements, avoiding duplicates.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0\n        ]\n      },\n      \"output\": [\n        [],\n        [\n          0\n        ]\n      ],\n      \"explanation\": \"The subsets are the empty subset and the subset containing 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10\",\n    \"value_range\": \"-10 <= nums[i] <= 10\",\n    \"valid_output\": \"The solution must not contain duplicate subsets.\"\n  },\n  \"follow_up\": \"How can you optimize the algorithm for larger input sizes beyond the given constraints?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Decide which party wins in a voting procedure based on a given string."}, {"role": "assistant", "content": "{\n  \"description\": \"Predict which party ('Radiant' or 'Dire') will announce victory in a round-based voting procedure in the Dota2 senate given a voting string.\",\n  \"objective\": \"Simulate the voting process using a greedy approach with a single queue to handle bans and reordering of turns, while keeping track of active senators.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Counts\": \"Count the number of senators from each party and initialize floating ban counts to zero for both parties.\",\n    \"Step 2 - Simulate Voting Rounds\": \"Process the senators in a queue, floating bans on opposing parties or skipping banned senators while decrementing the respective counts.\",\n    \"Step 3 - Determine Winner\": \"Stop the simulation when one party runs out of eligible senators, and declare the remaining party as the winner.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"senate\": \"RD\"\n      },\n      \"output\": \"Radiant\",\n      \"explanation\": \"The Radiant senator bans the Dire senator in round 1, leaving only the Radiant senator eligible to declare victory in round 2.\"\n    },\n    {\n      \"input\": {\n        \"senate\": \"RDD\"\n      },\n      \"output\": \"Dire\",\n      \"explanation\": \"The Radiant senator bans one Dire senator, but the remaining Dire senator bans the Radiant senator in round 1. The Dire senator then declares victory in round 2.\"\n    }\n  ],\n  \"constraints\": {\n    \"senate_length\": \"1 <= senate.length <= 10^4\",\n    \"senate_characters\": \"senate[i] is either 'R' or 'D'.\"\n  },\n  \"follow_up\": \"Analyze the time complexity and space efficiency of the queue-based simulation approach for large input sizes.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create an iterator that supports peeking at the next element."}, {"role": "assistant", "content": "{\n  \"description\": \"Design an iterator `PeekingIterator` that supports the `peek` operation on top of the standard `next` and `hasNext` operations of an existing iterator. The `peek` operation should allow viewing the next element without moving the iterator's position.\",\n  \"objective\": \"Implement the `PeekingIterator` class to handle the `peek`, `next`, and `hasNext` operations efficiently, ensuring minimal additional space usage and adherence to constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that `peek` requires holding the next element in memory to allow viewing it without advancing the iterator. The iterator's behavior must remain consistent for subsequent `next` and `hasNext` calls.\",\n    \"Step 2 - Data Structure Design\": \"Use a cached variable to store the next element when `peek` or `next` is called. If the cache is empty, fetch the next element from the iterator. Update the cache accordingly after each operation.\",\n    \"Step 3 - Implementation Details\": \"Implement the following methods:\\n- `next()`: Return the cached element and update the cache with the next iterator value.\\n- `peek()`: Return the cached element without modifying the iterator.\\n- `hasNext()`: Check if the cache is non-empty or the underlying iterator has more elements.\",\n    \"Step 4 - Edge Cases\": \"Handle cases such as an empty iterator, consecutive `peek` calls, and scenarios where `next` is called after the iterator is exhausted.\",\n    \"Step 5 - Output\": \"Ensure the class methods adhere to the constraints and produce the correct output for all operations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"operations\": [\n          \"PeekingIterator\",\n          \"next\",\n          \"peek\",\n          \"next\",\n          \"next\",\n          \"hasNext\"\n        ],\n        \"arguments\": [\n          [\n            [\n              1,\n              2,\n              3\n            ]\n          ],\n          [],\n          [],\n          [],\n          [],\n          []\n        ]\n      },\n      \"output\": [\n        null,\n        1,\n        2,\n        2,\n        3,\n        false\n      ],\n      \"explanation\": \"The `peek` operation views the next element without advancing, while `next` moves the pointer.\"\n    },\n    {\n      \"input\": {\n        \"operations\": [\n          \"PeekingIterator\",\n          \"peek\",\n          \"next\",\n          \"hasNext\"\n        ],\n        \"arguments\": [\n          [\n            [\n              10\n            ]\n          ],\n          [],\n          [],\n          []\n        ]\n      },\n      \"output\": [\n        null,\n        10,\n        10,\n        false\n      ],\n      \"explanation\": \"With one element, `peek` and `next` both return the same value, and `hasNext` returns false after the last element.\"\n    }\n  ],\n  \"constraints\": {\n    \"iterator_length\": \"1 <= nums.length <= 1000\",\n    \"value_range\": \"1 <= nums[i] <= 1000\",\n    \"method_calls\": \"At most 1000 calls to `next`, `hasNext`, and `peek`.\",\n    \"valid_calls\": \"All calls to `next` and `peek` are valid (i.e., `hasNext` is true).\"\n  },\n  \"follow_up\": \"How can you extend this design to support generic types beyond integers while maintaining type safety and performance?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find repeated 10-character DNA sequences in the string."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s` representing a DNA sequence, find all 10-letter-long substrings that occur more than once.\",\n  \"objective\": \"Design an efficient algorithm to identify repeated 10-character substrings in the DNA sequence.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the DNA sequence contains characters 'A', 'C', 'G', and 'T', and repetitions of substrings need to be identified.\",\n    \"Step 2 - Use Hashing\": \"Use a sliding window to extract substrings of length 10 and store them in a hash table to track occurrences.\",\n    \"Step 3 - Identify Repeats\": \"Filter substrings that occur more than once in the hash table.\",\n    \"Step 4 - Optimize Space\": \"Use integer encoding for substrings to reduce memory usage.\",\n    \"Step 5 - Handle Edge Cases\": \"Ensure the solution handles strings shorter than 10 or large inputs efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\n      },\n      \"output\": [\n        \"AAAAACCCCC\",\n        \"CCCCCAAAAA\"\n      ],\n      \"explanation\": \"Substrings 'AAAAACCCCC' and 'CCCCCAAAAA' appear more than once.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"AAAAAAAAAAAAA\"\n      },\n      \"output\": [\n        \"AAAAAAAAAA\"\n      ],\n      \"explanation\": \"The substring 'AAAAAAAAAA' is repeated.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 10^5\",\n    \"character_set\": \"s[i] is 'A', 'C', 'G', or 'T'.\"\n  },\n  \"follow_up\": \"Can you optimize the space usage to handle very large inputs?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given an array `answers`. Find the minimum number of rabbits in the forest."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an array `answers` where each element `answers[i]` represents the number of rabbits that the `i`-th rabbit thinks are the same color as it. Your task is to determine the minimum number of rabbits in the forest that could result in the given answers being valid.\",\n  \"objective\": \"Find the minimum number of rabbits in the forest based on the answers provided by the rabbits in the `answers` array.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Each rabbit provides a number in `answers[i]`, which indicates how many other rabbits are the same color as it. A valid scenario must satisfy the constraints imposed by these answers, and the goal is to find the smallest possible number of total rabbits that satisfy these conditions.\",\n    \"Step 2 - Observations\": \"If a rabbit answers `x`, it indicates that there are `x + 1` rabbits of the same color (including itself). If multiple rabbits give the same answer, they could potentially belong to the same color group.\",\n    \"Step 3 - Strategy\": \"The key observation is that rabbits who give the same answer must belong to groups that can be filled completely based on their answers. For example, if three rabbits say '1', they must form a group of 2 other rabbits plus themselves, requiring 3 total rabbits of the same color.\",\n    \"Step 4 - Approach\": \"To calculate the minimum number of rabbits, we can iterate through the `answers` array and group rabbits that gave the same answer. For each unique answer, we calculate how many full groups can be formed and then add the necessary number of rabbits for each group.\",\n    \"Step 5 - Constraints Consideration\": \"We must handle up to 1000 rabbits, so the solution should efficiently calculate the minimum number of rabbits by grouping and counting the answers. A frequency map will help track how many rabbits gave the same answer.\",\n    \"Step 6 - Optimizing\": \"We can optimize by using a frequency map (dictionary) to track the occurrences of each answer. For each answer `x`, the number of rabbits that answered `x` must be divided into groups of size `x + 1`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"answers\": [\n          1,\n          1,\n          2\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"Two rabbits answered '1', and they can form a group of 2 with one more rabbit of the same color. The rabbit that answered '2' must form a group of 3 rabbits of the same color, including itself and two others.\"\n    },\n    {\n      \"input\": {\n        \"answers\": [\n          10,\n          10,\n          10\n        ]\n      },\n      \"output\": 11,\n      \"explanation\": \"Three rabbits answered '10'. They must form 1 group of 11 rabbits of the same color.\"\n    }\n  ],\n  \"constraints\": {\n    \"answers_length_range\": \"1 <= answers.length <= 1000\",\n    \"answers_value_range\": \"0 <= answers[i] < 1000\"\n  },\n  \"follow_up\": \"How would the solution change if the rabbits gave their answers in a different order or if the answers were more varied?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given an integer `n`, return the number of ways to write `n` as a sum of consecutive integers."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `n`, return the number of ways to write `n` as the sum of consecutive positive integers. A valid sum consists of at least two consecutive positive integers. For example, `n = 5` can be written as the sum `2 + 3`, which is a valid solution. The task is to find all such valid sequences for any given `n`.\",\n  \"objective\": \"Write a function that computes the number of ways to express `n` as the sum of consecutive positive integers.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We need to find how many ways we can represent the integer `n` as the sum of at least two consecutive positive integers. Each sum consists of a series of numbers, where the first number in the series is greater than zero and the series continues for at least two terms.\",\n    \"Step 2 - Approach\": \"The main observation here is that the sum of `k` consecutive integers starting from `x` can be expressed as `x + (x+1) + ... + (x+k-1)`. This sum can be simplified to `k * x + (k * (k - 1)) / 2`, and we want this to equal `n`. The task reduces to finding all possible `k` and `x` that satisfy this equation.\",\n    \"Step 3 - Algorithm\": \"Start by iterating over possible values of `k` (the length of the consecutive sequence) and compute the corresponding value of `x` (the starting integer of the sequence). Check if the sum equals `n` and count the valid sequences.\",\n    \"Step 4 - Output\": \"Return the number of valid sequences where the sum of `k` consecutive integers equals `n`.\",\n    \"Step 5 - Constraints\": \"The problem can be solved efficiently by iterating over possible values of `k` up to the square root of `2 * n`, since the sum grows quadratically with `k`. This ensures that the solution will work within the given constraint of `n <= 10^9`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 5\n      },\n      \"output\": 2,\n      \"explanation\": \"5 can be written as `2 + 3`, so there are 2 ways to express 5 as a sum of consecutive integers.\"\n    },\n    {\n      \"input\": {\n        \"n\": 9\n      },\n      \"output\": 3,\n      \"explanation\": \"9 can be written as `4 + 5` and `2 + 3 + 4`, so there are 3 ways to express 9 as a sum of consecutive integers.\"\n    },\n    {\n      \"input\": {\n        \"n\": 15\n      },\n      \"output\": 4,\n      \"explanation\": \"15 can be written as `8 + 7`, `4 + 5 + 6`, and `1 + 2 + 3 + 4 + 5`, so there are 4 ways to express 15 as a sum of consecutive integers.\"\n    }\n  ],\n  \"constraints\": {\n    \"n\": \"1 <= n <= 10^9\"\n  },\n  \"follow_up\": \"Can you optimize the solution to run in time complexity less than O(n)? Consider using mathematical properties of consecutive sums to find a more efficient approach.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum cost to reach the top of a staircase where each step has a cost, and you can climb either one or two steps."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine the minimum cost to reach the top of a staircase where each step has an associated cost, and you can climb either one or two steps at a time.\",\n  \"objective\": \"Implement a dynamic programming solution to calculate the minimum cost to reach the top by recursively or iteratively computing the minimum cost to reach each step.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Define a function `minimumCost` that computes the minimum cost to reach the top of the staircase using memoization or a bottom-up DP table.\",\n    \"Step 2\": \"Handle base cases where reaching the 0th or 1st step has no cost.\",\n    \"Step 3\": \"For each step, compute the cost as the minimum of the cost to reach the previous step or two steps back plus the current step's cost.\",\n    \"Step 4\": \"Return the minimum value between reaching the last step or the second-to-last step since you can start at either index 0 or index 1.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"cost\": [\n          10,\n          15,\n          20\n        ]\n      },\n      \"output\": 15,\n      \"explanation\": \"Start at index 1, pay 15, and jump directly to the top for a total cost of 15.\"\n    },\n    {\n      \"input\": {\n        \"cost\": [\n          1,\n          100,\n          1,\n          1,\n          1,\n          100,\n          1,\n          1,\n          100,\n          1\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"Alternate between jumping one and two steps to minimize cost, resulting in a total cost of 6.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"2 <= cost.length <= 1000\",\n    \"cost_values\": \"0 <= cost[i] <= 999\"\n  },\n  \"follow_up\": \"Discuss the space optimization potential by reducing the DP table to just two variables for the previous two steps. Analyze the time and space complexity.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the largest rectangle in a binary matrix with only `1`s."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a `rows x cols` binary matrix filled with `0`s and `1`s, find the largest rectangle containing only `1`s and return its area.\",\n  \"objective\": \"Design an efficient algorithm to find the maximal rectangle area by leveraging histogram logic for each row of the matrix, ensuring the solution runs efficiently for larger inputs.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves treating each row of the binary matrix as a histogram and computing the maximal rectangle for each row using a stack-based method.\",\n    \"Step 2 - Histogram Transformation\": \"Transform the matrix into a histogram representation where each element in a row represents the height of consecutive `1`s above it.\",\n    \"Step 3 - Stack-Based Histogram Approach\": \"Use a stack-based approach to compute the maximal rectangle area for the histogram of each row.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution handles constraints such as `1 <= rows, cols <= 200` efficiently and avoids unnecessary computations.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider edge cases such as a matrix filled with all `0`s, all `1`s, a single row or column matrix, and matrices with no rectangles of `1`s.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            \"1\",\n            \"0\",\n            \"1\",\n            \"0\",\n            \"0\"\n          ],\n          [\n            \"1\",\n            \"0\",\n            \"1\",\n            \"1\",\n            \"1\"\n          ],\n          [\n            \"1\",\n            \"1\",\n            \"1\",\n            \"1\",\n            \"1\"\n          ],\n          [\n            \"1\",\n            \"0\",\n            \"0\",\n            \"1\",\n            \"0\"\n          ]\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"The maximal rectangle is formed in rows 2 and 3, with an area of 6.\"\n    },\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            \"0\"\n          ]\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"The matrix has no `1`s, so the maximal rectangle area is 0.\"\n    },\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            \"1\"\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The matrix has a single `1`, so the maximal rectangle area is 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_dimensions\": \"1 <= rows, cols <= 200\",\n    \"values\": \"Each element in the matrix is either '0' or '1'.\",\n    \"time_complexity\": \"Ensure the solution is efficient and scales with the size of the matrix.\"\n  },\n  \"follow_up\": \"Can you modify the algorithm to handle 3D matrices where the goal is to find the largest cuboid of `1`s?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count the number of islands in a binary matrix where an island is a group of connected 1's."}, {"role": "assistant", "content": "{\n  \"description\": \"Count the number of distinct islands in a binary matrix where an island is a group of 1's connected 4-directionally, and two islands are considered the same if one can be translated to match the other.\",\n  \"objective\": \"Use depth-first search (DFS) and hash the path signatures of islands to determine the number of distinct islands.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Data Structures\": \"Create a set `distinct_islands` to store unique path signatures and a helper function `dfs` for depth-first search.\",\n    \"Step 2 - Traverse the Grid\": \"Iterate through each cell in the matrix. When a cell with value `1` is found, initiate a DFS to explore the island.\",\n    \"Step 3 - Record Path Signature\": \"During the DFS, construct a path signature by appending the directions ('U', 'D', 'L', 'R') as you move through the island, starting with an initial 'start' marker.\",\n    \"Step 4 - Mark Visited Cells\": \"Mark each cell visited during the DFS by setting its value to `0` to avoid revisiting.\",\n    \"Step 5 - Hash Path Signatures\": \"Once the DFS completes for an island, add the path signature to the `distinct_islands` set.\",\n    \"Step 6 - Return Result\": \"After traversing the entire grid, return the size of the `distinct_islands` set as the count of unique islands.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            1,\n            0,\n            0,\n            0\n          ],\n          [\n            1,\n            1,\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0,\n            1,\n            1\n          ],\n          [\n            0,\n            0,\n            0,\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"There is one unique island that appears twice but is identical in shape and translation.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            1,\n            0,\n            1,\n            1\n          ],\n          [\n            1,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            1\n          ],\n          [\n            1,\n            1,\n            0,\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"There are three unique islands of different shapes and translations.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size\": \"1 <= m, n <= 50\",\n    \"cell_values\": \"`grid[i][j]` is either 0 or 1\",\n    \"connectivity\": \"Islands are connected 4-directionally\"\n  },\n  \"follow_up\": \"Discuss the time complexity of O(m * n) for the traversal and space complexity of O(m * n) for storing path signatures, and how this approach scales for larger grids.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Get the kth smallest node from a BST."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the kth smallest value in a binary search tree (BST).\",\n  \"objective\": \"Return the kth smallest value (1-indexed) by performing an in-order traversal of the BST.\",\n  \"meta_prompt\": {\n    \"Step 1 - In-Order Traversal\": \"Understand that an in-order traversal of a BST yields sorted values.\",\n    \"Step 2 - Count Nodes\": \"Traverse the tree while keeping track of the number of nodes visited.\",\n    \"Step 3 - Return Result\": \"Stop traversal once the kth smallest element is found.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          1,\n          4,\n          null,\n          2\n        ],\n        \"k\": 1\n      },\n      \"output\": 1,\n      \"explanation\": \"In-order traversal yields [1, 2, 3, 4]. The 1st smallest element is 1.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          5,\n          3,\n          6,\n          2,\n          4,\n          null,\n          null,\n          1\n        ],\n        \"k\": 3\n      },\n      \"output\": 3,\n      \"explanation\": \"In-order traversal yields [1, 2, 3, 4, 5, 6]. The 3rd smallest element is 3.\"\n    }\n  ],\n  \"constraints\": {\n    \"tree_size\": \"1 <= n <= 10^4\",\n    \"node_value_range\": \"0 <= Node.val <= 10^4\",\n    \"valid_input\": \"The BST is valid, and 1 <= k <= n.\"\n  },\n  \"follow_up\": \"How would you handle frequent modifications to the BST (e.g., insertions and deletions)?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Make a queue using two stacks."}, {"role": "assistant", "content": "{\n  \"description\": \"Implement a first-in-first-out (FIFO) queue using only two stacks.\",\n  \"objective\": \"Create a class `MyQueue` with methods to push, pop, peek, and check if the queue is empty.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand Stack and Queue Operations\": \"Recognize that stacks operate in LIFO order and queues in FIFO order.\",\n    \"Step 2 - Implement Push Operation\": \"Use one stack to push elements onto the queue.\",\n    \"Step 3 - Implement Pop and Peek\": \"Use the second stack to reverse the order for FIFO behavior when popping or peeking.\",\n    \"Step 4 - Optimize\": \"Ensure that each operation is amortized O(1).\"\n  },\n  \"examples\": [\n    {\n      \"input\": [\n        \"MyQueue\",\n        \"push\",\n        \"push\",\n        \"peek\",\n        \"pop\",\n        \"empty\"\n      ],\n      \"operations\": [\n        [],\n        [\n          1\n        ],\n        [\n          2\n        ],\n        [],\n        [],\n        []\n      ],\n      \"output\": [\n        null,\n        null,\n        null,\n        1,\n        1,\n        false\n      ],\n      \"explanation\": [\n        \"Push 1: Queue becomes [1]\",\n        \"Push 2: Queue becomes [1, 2]\",\n        \"Peek: Returns 1 (front of the queue)\",\n        \"Pop: Returns 1 and queue becomes [2]\",\n        \"Empty: Returns false as the queue is not empty.\"\n      ]\n    }\n  ],\n  \"constraints\": {\n    \"range\": \"1 <= x <= 9\",\n    \"max_calls\": \"At most 100 calls to `push`, `pop`, `peek`, and `empty`.\",\n    \"follow_up\": \"Implement with amortized O(1) operations.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Fix a tree where two nodes were swapped."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary search tree (BST) where exactly two nodes have been swapped by mistake, recover the tree without changing its structure. The resulting tree must satisfy BST properties.\",\n  \"objective\": \"Design an algorithm to identify and correct the swapped nodes efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that swapping two nodes violates the BST property, and the goal is to restore it by identifying and swapping the misplaced nodes.\",\n    \"Step 2 - Inorder Traversal\": \"Perform an inorder traversal to identify two nodes that are out of order in the sequence.\",\n    \"Step 3 - Correct Swapped Nodes\": \"Swap the values of the identified nodes to restore the BST property.\",\n    \"Step 4 - Optimize Space\": \"Implement a Morris Traversal to achieve O(1) space complexity if required.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider cases where the swapped nodes are adjacent or in different subtrees.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          3,\n          null,\n          null,\n          2\n        ]\n      },\n      \"output\": [\n        3,\n        1,\n        null,\n        null,\n        2\n      ],\n      \"explanation\": \"Swapping 1 and 3 restores the BST property.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          1,\n          4,\n          null,\n          null,\n          2\n        ]\n      },\n      \"output\": [\n        2,\n        1,\n        4,\n        null,\n        null,\n        3\n      ],\n      \"explanation\": \"Swapping 2 and 3 restores the BST property.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"2 <= number of nodes <= 1000\",\n    \"node_values\": \"-2^31 <= Node.val <= 2^31 - 1\"\n  },\n  \"follow_up\": \"Can you solve this using O(1) additional space with Morris Traversal?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Sort the array `nums` in ascending order."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an array of integers `nums`. The task is to sort the array in ascending order without using any built-in functions. Your solution should have a time complexity of `O(n log n)` and minimal space complexity.\",\n  \"objective\": \"Design a sorting algorithm that sorts the array in ascending order. Ensure that the time complexity of the algorithm is `O(n log n)` and the space complexity is minimized (preferably `O(1)` extra space). Do not use any built-in sorting functions.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We need to implement a sorting algorithm without using built-in functions. The algorithm should have a time complexity of `O(n log n)` and should aim for minimal space usage.\",\n    \"Step 2 - Algorithm Choice\": \"Consider algorithms like Merge Sort or Heap Sort, both of which have an average time complexity of `O(n log n)` and are well-suited for the task. Ensure that the space complexity is minimal by implementing in-place sorting methods where possible.\",\n    \"Step 3 - Space Complexity Consideration\": \"The space complexity should be minimized. This can be achieved by using an in-place sorting algorithm like Quick Sort or Heap Sort, which requires only constant extra space.\",\n    \"Step 4 - Implementing the Algorithm\": \"Implement the sorting algorithm. Make sure it meets the time complexity and space complexity requirements.\",\n    \"Step 5 - Edge Case Handling\": \"Ensure that the solution works for various edge cases, such as arrays of length 1, arrays with duplicate values, and negative integers.\",\n    \"Final Check - Constraints Verification\": \"Verify that the algorithm performs efficiently within the provided constraints, where the length of `nums` can be as large as 50,000 and the values can range from -50,000 to 50,000.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          5,\n          2,\n          3,\n          1\n        ]\n      },\n      \"output\": [\n        1,\n        2,\n        3,\n        5\n      ],\n      \"explanation\": \"After sorting, the array becomes [1, 2, 3, 5].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          5,\n          1,\n          1,\n          2,\n          0,\n          0\n        ]\n      },\n      \"output\": [\n        0,\n        0,\n        1,\n        1,\n        2,\n        5\n      ],\n      \"explanation\": \"The array becomes [0, 0, 1, 1, 2, 5] after sorting.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 5 * 10^4\",\n    \"nums_range\": \"-5 * 10^4 <= nums[i] <= 5 * 10^4\"\n  },\n  \"follow_up\": \"Can you optimize the solution for different input sizes? Consider the time complexity in terms of the input size and how the algorithm can handle larger datasets.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given a board and must get from square 1 to square n2. You can move by rolling a die. Some squares have snakes or ladders, and you must follow them if you land on them. Return the least number of moves to reach square n2."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an n x n integer matrix board, where the cells are labeled in Boustrophedon style starting from the bottom left of the board (board[n - 1][0]). Each square can either be empty (indicated by -1) or have a ladder or snake (indicated by a positive integer which is the destination). Starting from square 1, the goal is to reach square n2 with the least number of moves. In each move, you can roll a 6-sided die and move up to 6 squares ahead. If you land on a square with a ladder or snake, you must move to the destination of that ladder or snake. The task is to return the least number of moves required to reach square n2, or -1 if it is not possible.\",\n  \"objective\": \"Develop an efficient algorithm to determine the minimum number of moves needed to reach square n2. Consider that at each move, you can move from the current square to any square between curr+1 and min(curr+6, n2). If you land on a ladder or snake, you must take it, but if that square has a ladder or snake pointing to another square, you do not follow it further.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The problem is essentially about finding the shortest path in a graph, where each square can be thought of as a node, and the moves you can make simulate edges in the graph. The board can be treated as a directed graph with nodes connected to one another by edges representing valid dice rolls. Snakes and ladders introduce directed edges between squares.\",\n    \"Step 2 - Initial Approach\": \"A breadth-first search (BFS) is a natural choice for this problem because it explores all possible moves level by level, guaranteeing that the first time you reach square n2, you will have used the minimum number of moves.\",\n    \"Step 3 - Efficient Solution\": \"You can perform a BFS starting from square 1, exploring each possible destination within the valid range of the dice roll (curr+1 to min(curr+6, n2)). For each destination, check if it has a ladder or snake, and if it does, move to the target of the ladder or snake. Keep track of visited squares to prevent revisiting them.\",\n    \"Step 4 - Output Format\": \"The result should be the minimum number of moves required to reach square n2, or -1 if it is not possible.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Make sure your solution works efficiently within the problem's constraints (2 <= n <= 20). Edge cases to consider include a board with no ladders or snakes, boards where you cannot reach square n2, and the smallest board (n=2).\",\n    \"Final Check - Constraints Verification\": \"Verify that your code handles boards up to size 20 x 20, where squares can have values between -1 and n2, and that your BFS implementation runs within time limits for the largest inputs.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"board\": [\n          [\n            -1,\n            -1,\n            -1,\n            -1,\n            -1,\n            -1\n          ],\n          [\n            -1,\n            -1,\n            -1,\n            -1,\n            -1,\n            -1\n          ],\n          [\n            -1,\n            -1,\n            -1,\n            -1,\n            -1,\n            -1\n          ],\n          [\n            -1,\n            35,\n            -1,\n            -1,\n            13,\n            -1\n          ],\n          [\n            -1,\n            -1,\n            -1,\n            -1,\n            -1,\n            -1\n          ],\n          [\n            -1,\n            15,\n            -1,\n            -1,\n            -1,\n            -1\n          ]\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"Starting from square 1, you move to square 2, take the ladder to square 15, then move to square 17, take the snake to square 13, move to square 14, take the ladder to square 35, and finally move to square 36.\"\n    },\n    {\n      \"input\": {\n        \"board\": [\n          [\n            -1,\n            -1\n          ],\n          [\n            -1,\n            3\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"You can move from square 1 to square 2, then take the ladder to square 3, which is the last square.\"\n    }\n  ],\n  \"constraints\": {\n    \"board_size\": \"2 <= n <= 20\",\n    \"board_values\": \"-1 or in the range [1, n2]\",\n    \"n2_square_condition\": \"Squares 1 and n2 do not have ladders or snakes.\"\n  },\n  \"follow_up\": \"Can you develop an optimized version of BFS using a queue to track the positions and avoid revisiting squares unnecessarily?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if the string is a valid IPv4 or IPv6 address."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `queryIP`, determine if it represents a valid IPv4 or IPv6 address, or neither. An IPv4 address is in the form `x1.x2.x3.x4` where `0 <= xi <= 255` and cannot have leading zeros. An IPv6 address is in the form `x1:x2:x3:x4:x5:x6:x7:x8` where `xi` is a hexadecimal string of 1-4 characters. Return 'IPv4' if the input is a valid IPv4 address, 'IPv6' if it is a valid IPv6 address, and 'Neither' otherwise.\",\n  \"objective\": \"Write an efficient function to validate whether `queryIP` matches the format and constraints of IPv4 or IPv6 addresses.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand IPv4 Rules\": \"An IPv4 address must consist of four segments separated by periods. Each segment must be a decimal number between 0 and 255 with no leading zeros. Ensure that non-numeric or out-of-range segments are rejected.\",\n    \"Step 2 - Understand IPv6 Rules\": \"An IPv6 address must consist of eight groups separated by colons. Each group must be a hexadecimal string containing 1-4 characters (letters 'a'-'f', 'A'-'F', or digits). Ensure empty segments, overly long segments, or invalid characters are rejected.\",\n    \"Step 3 - Develop a Plan\": \"First, identify whether `queryIP` contains '.' (indicating IPv4) or ':' (indicating IPv6). Validate the format based on the rules of the detected type. If neither separator is present, or the format does not meet the criteria, return 'Neither'.\",\n    \"Step 4 - Implement and Optimize\": \"Use string parsing and regular expressions or efficient validation loops to check for valid segments. Focus on readability and edge case handling.\",\n    \"Step 5 - Handle Edge Cases\": \"Test edge cases such as empty strings, leading zeros, extra separators, or segments out of range. Ensure robustness against invalid inputs like '192.168..1' or '2001:db8::85a3:'.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"queryIP\": \"172.16.254.1\"\n      },\n      \"output\": \"IPv4\",\n      \"explanation\": \"This is a valid IPv4 address because all segments are in the range [0, 255] and do not contain leading zeros.\"\n    },\n    {\n      \"input\": {\n        \"queryIP\": \"2001:0db8:85a3:0:0:8A2E:0370:7334\"\n      },\n      \"output\": \"IPv6\",\n      \"explanation\": \"This is a valid IPv6 address because it consists of 8 segments of valid hexadecimal strings with lengths between 1-4.\"\n    },\n    {\n      \"input\": {\n        \"queryIP\": \"256.256.256.256\"\n      },\n      \"output\": \"Neither\",\n      \"explanation\": \"This is not a valid IPv4 address because the segments exceed the allowed range [0, 255].\"\n    },\n    {\n      \"input\": {\n        \"queryIP\": \"02001:0db8:85a3:0000:0000:8a2e:0370:7334\"\n      },\n      \"output\": \"Neither\",\n      \"explanation\": \"This is not a valid IPv6 address because one of the segments contains leading zeros.\"\n    }\n  ],\n  \"constraints\": {\n    \"input_format\": \"The input string consists only of English letters, digits, '.', and ':'.\",\n    \"valid_range\": \"IPv4 segments must be in [0, 255]; IPv6 segments must be 1-4 characters of hexadecimal.\"\n  },\n  \"follow_up\": \"Can you enhance your function to provide detailed error messages for invalid inputs, such as identifying which part of the input is malformed?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Calculate the probability that a knight remains on an `n x n` chessboard after making exactly `k` moves starting from a given position."}, {"role": "assistant", "content": "{\n  \"description\": \"Calculate the probability that a knight remains on an `n x n` chessboard after making exactly `k` moves starting from a given position `(row, column)`.\",\n  \"objective\": \"Use bottom-up dynamic programming with space optimization to calculate the probability of the knight remaining on the chessboard after `k` moves.\",\n  \"meta_prompt\": {\n    \"Step 1 - Define Directions\": \"List all possible knight moves as a set of direction pairs for vertical and horizontal displacements.\",\n    \"Step 2 - Initialize DP Tables\": \"Create two 2D arrays `prev_dp` and `curr_dp` of size `n x n` to store probabilities for the current and previous move. Initialize `prev_dp[row][column]` to 1 as the starting position.\",\n    \"Step 3 - Perform K Iterations\": \"Iterate through `k` moves to calculate probabilities for each square on the board using values from the previous move.\",\n    \"Step 4 - Update Current DP Table\": \"For each cell `(i, j)` on the board, calculate the probability using all valid knight moves from the previous move and store it in `curr_dp[i][j]`.\",\n    \"Step 5 - Swap DP Tables\": \"After processing each move, swap `prev_dp` and `curr_dp` to reuse memory for the next iteration.\",\n    \"Step 6 - Sum Probabilities\": \"After completing all moves, calculate the total probability by summing all values in `prev_dp`.\",\n    \"Step 7 - Return Result\": \"Return the total probability as the result.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 3,\n        \"k\": 2,\n        \"row\": 0,\n        \"column\": 0\n      },\n      \"output\": 0.0625,\n      \"explanation\": \"Starting at (0, 0), the knight can move to (1, 2) or (2, 1). From these positions, only certain moves keep it on the board. The total probability is 0.0625.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1,\n        \"k\": 0,\n        \"row\": 0,\n        \"column\": 0\n      },\n      \"output\": 1.0,\n      \"explanation\": \"Since no moves are made, the knight remains on the board with probability 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"board_size\": \"1 <= n <= 25\",\n    \"moves\": \"0 <= k <= 100\",\n    \"position\": \"0 <= row, column < n\"\n  },\n  \"follow_up\": \"Analyze the time complexity O(k\\u22c5n^2) and space complexity O(n^2) of this optimized approach and discuss potential improvements for larger chessboards or higher values of `k`.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given two strings `stamp` and `target`. Initially, `s` is a string of '?' and the length is equal to `target`. Place the `stamp` on `s` to convert it into `target`. Return the indices of where `stamp` is placed."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given two strings, `stamp` and `target`. Initially, there is a string `s` of length equal to `target.length`, with all characters set to '?'. In one move, you can place the `stamp` over `s` and replace every letter in `s` with the corresponding letter from `stamp`. The goal is to transform `s` into `target` in at most `10 * target.length` moves, and return an array of the indices where the left-most letter of `stamp` is placed at each turn. If it's not possible to convert `s` into `target` within these moves, return an empty array.\",\n  \"objective\": \"Implement an algorithm to transform `s` into `target` using the minimum number of moves, where each move corresponds to placing the `stamp` at a valid index. Return the sequence of the left-most indices where `stamp` was placed in each move.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand the problem setup\": \"Initially, `s` is filled with '?'. The `stamp` can be placed at various indices of `s`, and the goal is to match the `target` by replacing `?` with characters from `stamp` in each step.\",\n    \"Step 2 - Constraints\": \"The number of moves cannot exceed `10 * target.length`, and `stamp` must be fully contained in `s` at each turn. The challenge is to perform the transformation efficiently and return the sequence of indices where `stamp` is placed.\",\n    \"Step 3 - Approach\": \"The problem requires finding a way to efficiently match `stamp` to `target`. You can use a greedy approach to try to match parts of `target` with `stamp`, or use a backtracking algorithm to track valid placements and explore multiple ways to achieve the transformation.\",\n    \"Step 4 - Edge cases\": \"Consider edge cases where `stamp` is already equal to `target`, where no moves are needed. Also, consider cases where the transformation is impossible due to mismatched characters or insufficient moves.\",\n    \"Step 5 - Expected Output\": \"Return an array of indices where `stamp` was placed, in the order they were placed. If transformation is impossible, return an empty array.\",\n    \"Step 6 - Optimization\": \"Since `stamp.length` and `target.length` can be up to 1000, you need to ensure that the solution handles these constraints efficiently, possibly with a greedy or backtracking approach.\"\n  },\n  \"examples\": [\n    {\n      \"input\": [\n        \"abc\",\n        \"ababc\"\n      ],\n      \"output\": [\n        0,\n        2\n      ],\n      \"explanation\": \"Initially, s = '?????'. First, place 'abc' at index 0, resulting in 'abc??'. Then, place 'abc' at index 2, resulting in 'ababc'.\"\n    },\n    {\n      \"input\": [\n        \"abca\",\n        \"aabcaca\"\n      ],\n      \"output\": [\n        3,\n        0,\n        1\n      ],\n      \"explanation\": \"Initially, s = '???????'. First, place 'abca' at index 3, resulting in '???abca'. Then, place 'abca' at index 0, resulting in 'abcabca'. Finally, place 'abca' at index 1 to get 'aabcaca'.\"\n    }\n  ],\n  \"constraints\": {\n    \"length_range\": \"1 <= stamp.length <= target.length <= 1000\",\n    \"string_characters\": \"Both `stamp` and `target` consist of lowercase English letters.\"\n  },\n  \"follow_up\": \"Can you optimize the approach to handle edge cases and larger inputs efficiently, potentially using dynamic programming or a greedy algorithm?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count the number of patterns for an Android lock screen with some conditions."}, {"role": "assistant", "content": "{\n  \"description\": \"Given integers `m` and `n`, compute the number of unique and valid unlock patterns for the Android lock screen consisting of at least `m` keys and at most `n` keys.\",\n  \"objective\": \"Design an efficient algorithm to explore all valid patterns using backtracking while adhering to the rules of the Android lock screen.\",\n  \"meta_prompt\": {\n    \"Step 1 - Setup\": \"Represent the 3x3 grid with an adjacency matrix to check if a move is valid.\",\n    \"Step 2 - Recursive Backtracking\": \"Use a recursive function to explore all patterns starting from each dot, maintaining a visited array to ensure dots are used only once per pattern.\",\n    \"Step 3 - Center Dot Rule\": \"Incorporate a rule to check if moving between two dots requires visiting a middle dot that must have already been visited.\",\n    \"Step 4 - Count Patterns\": \"Iterate through all starting dots and sum the counts for patterns of lengths `m` to `n`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"m\": 1,\n        \"n\": 1\n      },\n      \"output\": 9,\n      \"explanation\": \"Each of the 9 dots forms a single-key pattern.\"\n    },\n    {\n      \"input\": {\n        \"m\": 1,\n        \"n\": 2\n      },\n      \"output\": 65,\n      \"explanation\": \"This includes 9 single-key patterns and 56 two-key patterns.\"\n    }\n  ],\n  \"constraints\": {\n    \"key_limits\": \"1 <= m, n <= 9\",\n    \"grid_structure\": \"3x3 grid with dots indexed 1 to 9.\"\n  },\n  \"follow_up\": {\n    \"optimization\": \"Consider symmetry to reduce computation. For example, patterns starting from symmetric dots (1, 3, 7, 9) can be multiplied by their count.\",\n    \"complexity\": \"Ensure the algorithm scales efficiently with `m` and `n`.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Generate abbreviations of a word by replacing parts with their lengths."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `word`, generate all valid generalized abbreviations of the word. A generalized abbreviation replaces non-overlapping and non-adjacent substrings with their lengths. Each abbreviation must follow these rules: 1) No two numbers can be adjacent, and 2) Substrings replaced by numbers cannot overlap. Return all possible abbreviations in any order.\",\n  \"objective\": \"Efficiently generate all valid generalized abbreviations of the word, ensuring that each result adheres to the constraints of non-overlapping and non-adjacent substrings.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that generalized abbreviations replace substrings with their lengths. Avoid adjacent numbers in abbreviations and ensure replaced substrings do not overlap.\",\n    \"Step 2 - Iterative or Recursive Generation\": \"Use bitmasking or recursion to generate all possible combinations of characters and numbers. Track consecutive character replacements to avoid adjacent numbers.\",\n    \"Step 3 - Validation and Output\": \"Validate generated abbreviations for correctness, ensuring no invalid formats. Store all unique abbreviations in a set or list.\",\n    \"Step 4 - Optimization\": \"Minimize redundant calculations by using recursive backtracking or bitmasking to directly generate valid abbreviations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"word\": \"word\"\n      },\n      \"output\": [\n        \"4\",\n        \"3d\",\n        \"2r1\",\n        \"2rd\",\n        \"1o2\",\n        \"1o1d\",\n        \"1or1\",\n        \"1ord\",\n        \"w3\",\n        \"w2d\",\n        \"w1r1\",\n        \"w1rd\",\n        \"wo2\",\n        \"wo1d\",\n        \"wor1\",\n        \"word\"\n      ],\n      \"explanation\": \"Each abbreviation represents a valid substitution of non-overlapping substrings with their lengths.\"\n    },\n    {\n      \"input\": {\n        \"word\": \"a\"\n      },\n      \"output\": [\n        \"1\",\n        \"a\"\n      ],\n      \"explanation\": \"The single character 'a' can either be abbreviated to its length '1' or remain unchanged.\"\n    }\n  ],\n  \"constraints\": {\n    \"word_length\": \"1 <= word.length <= 15\",\n    \"character_set\": \"word consists of only lowercase English letters.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to generate abbreviations directly without checking for invalid cases post-generation?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the weighted sum of numbers in a nested list based on their depth."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a nested list of integers `nestedList`, compute the sum of each integer multiplied by its depth in the nested list. A nested list can contain integers or other nested lists.\",\n  \"objective\": \"Design an algorithm to traverse the nested list and calculate the weighted sum efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Traverse the Nested List\": \"Use recursion or an iterative approach (e.g., stack) to traverse the nested list. Track the current depth during traversal.\",\n    \"Step 2 - Handle Base Cases\": \"If the element is an integer, add its value multiplied by its depth to the sum. If it's a list, recursively traverse it.\",\n    \"Step 3 - Validate Edge Cases\": \"Handle edge cases like single integers, empty nested lists, and deeply nested lists up to the maximum depth of 50.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nestedList\": [\n          [\n            1,\n            1\n          ],\n          2,\n          [\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": 10,\n      \"explanation\": \"Four 1's at depth 2 and one 2 at depth 1. Weighted sum: 1\\u00d72 + 1\\u00d72 + 2\\u00d71 + 1\\u00d72 + 1\\u00d72 = 10.\"\n    },\n    {\n      \"input\": {\n        \"nestedList\": [\n          1,\n          [\n            4,\n            [\n              6\n            ]\n          ]\n        ]\n      },\n      \"output\": 27,\n      \"explanation\": \"One 1 at depth 1, one 4 at depth 2, and one 6 at depth 3. Weighted sum: 1\\u00d71 + 4\\u00d72 + 6\\u00d73 = 27.\"\n    },\n    {\n      \"input\": {\n        \"nestedList\": [\n          0\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"One integer 0 at depth 1. Weighted sum: 0\\u00d71 = 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"nested_list_length\": \"1 <= nestedList.length <= 50\",\n    \"integer_range\": \"-100 <= value <= 100\",\n    \"maximum_depth\": \"Depth of nested list is <= 50\"\n  },\n  \"follow_up\": \"Can you implement a solution iteratively using a stack for depth tracking instead of recursion?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if the input array looks like a mountain."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of integers `arr`, your task is to determine whether it forms a valid mountain array. A mountain array is defined as an array that meets the following criteria: 1) Its length is at least 3. 2) It has a single peak such that elements strictly increase up to the peak and then strictly decrease thereafter. This means there exists some index `i` with `0 < i < arr.length - 1` such that `arr[0] < arr[1] < ... < arr[i]` and `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`.\",\n  \"objective\": \"Design an algorithm that checks whether the input array satisfies the conditions of a mountain array. Ensure the solution efficiently handles arrays of varying sizes up to the constraint limits.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the characteristics of a mountain array: the array must have a single peak, elements must strictly increase before the peak, and strictly decrease after the peak. The peak cannot be the first or last element.\",\n    \"Step 2 - Initial Approach\": \"Consider a two-pass solution where you first identify the peak by iterating through the array and checking for increasing values, followed by a separate pass to validate the decreasing sequence. While this works, it may not be optimal.\",\n    \"Step 3 - Optimal Solution with Single Pass\": \"Use a single-pass traversal approach with a pointer to check both the increasing and decreasing phases of the array in one iteration. Ensure that the peak is neither the first nor the last element.\",\n    \"Step 4 - Output Format\": \"Return a boolean value: `true` if the input satisfies the conditions of a mountain array, otherwise `false`. Consider edge cases such as arrays with repeated elements or lengths less than 3.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Write code with O(n) time complexity using a single traversal. Handle edge cases such as flat sections, arrays with insufficient length, and arrays with all elements in strictly increasing or strictly decreasing order.\",\n    \"Final Check - Constraints Verification\": \"Ensure the algorithm adheres to the constraints `1 <= arr.length <= 10^4` and `0 <= arr[i] <= 10^4`, validating its performance and correctness for large inputs.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"arr\": [\n          2,\n          1\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The array does not meet the minimum length requirement of 3.\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          3,\n          5,\n          5\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The array does not strictly increase before the peak, as elements 5 and 5 are equal.\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          0,\n          3,\n          2,\n          1\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The array has a valid mountain structure with a peak at index 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"minimum_length\": \"1 <= arr.length <= 10^4\",\n    \"element_range\": \"0 <= arr[i] <= 10^4\",\n    \"unique_peak\": \"The array must have a single peak that is neither the first nor the last element.\"\n  },\n  \"follow_up\": \"Can you modify your solution to verify the mountain array property using a single traversal, while keeping the space complexity to O(1)?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the count of maximum elements in a matrix after applying operations."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `m x n` matrix `M` initialized with zeros and an array of operations `ops`, each represented as `[a, b]`, where each operation increments all elements in the sub-matrix from the top-left corner to the position `[a, b]`, return the count of elements in the matrix that have the maximum value after all operations are applied.\",\n  \"objective\": \"Identify the number of elements in matrix `M` that have been incremented the maximum number of times, focusing only on the smallest sub-matrix affected by all operations in `ops`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Identify Minimum Ranges\": \"For each operation `[a, b]`, update the minimum row (`minRow`) and column (`minCol`) limits for the overlapping sub-matrix. `minRow` is the smallest value among all `a`, and `minCol` is the smallest value among all `b`.\",\n    \"Step 2 - Calculate Affected Area\": \"After determining `minRow` and `minCol`, the area of overlap where the increments occurred most frequently is `minRow * minCol`, which represents the number of maximum elements.\",\n    \"Final Step - Return Result\": \"Return the value of `minRow * minCol` as it represents the count of elements with the highest increment after all operations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"m\": 3,\n        \"n\": 3,\n        \"ops\": [\n          [\n            2,\n            2\n          ],\n          [\n            3,\n            3\n          ]\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"The 2x2 top-left sub-matrix is incremented the most, so it contains the maximum value. The result is 4 (2*2).\"\n    },\n    {\n      \"input\": {\n        \"m\": 3,\n        \"n\": 3,\n        \"ops\": []\n      },\n      \"output\": 9,\n      \"explanation\": \"No operations are applied, so the whole matrix contains the same maximum value 0. The result is 9 (3*3).\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size\": \"1 <= m, n <= 4 * 10^4\",\n    \"operations_count\": \"0 <= ops.length <= 10^4\",\n    \"operation_limits\": \"1 <= ai <= m and 1 <= bi <= n\"\n  },\n  \"follow_up\": \"Explore how this approach can be adapted for more complex operations, such as non-uniform increments or operations affecting disjoint sub-matrices.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Two players play a game with numbers. Decide if the first player wins."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an integer array `nums` where two players are playing a game. Players alternately pick one number from either end of the array, reducing its size by one each turn. Player 1 always starts. The number picked by a player is added to their score. Both players play optimally to maximize their scores. Return `true` if Player 1 can win or tie the game; otherwise, return `false`.\",\n  \"objective\": \"Design an efficient algorithm using dynamic programming or recursion with memoization to determine if Player 1 can secure a win or tie given that both players play optimally.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the rules of the game. Player 1 wins if their final score is greater than or equal to Player 2's score.\",\n    \"Step 2 - Approach\": \"Use dynamic programming or recursion with memoization. Define a function `dp(i, j)` that calculates the maximum score difference (Player 1's score - Player 2's score) for the subarray `nums[i...j]` assuming optimal moves from both players.\",\n    \"Step 3 - Base Cases\": \"If `i == j`, only one element remains, so the score difference is `nums[i]`.\",\n    \"Step 4 - Transition\": \"For each turn, the current player can choose `nums[i]` or `nums[j]`. Update the score difference as `nums[i] - dp(i+1, j)` or `nums[j] - dp(i, j-1)`.\",\n    \"Step 5 - Return Result\": \"After computing `dp(0, nums.length-1)`, return `true` if the result is non-negative (Player 1 wins or ties).\",\n    \"Final Check - Constraints\": \"Ensure the solution works for arrays with length up to 20 and large element values up to 10^7 by efficiently caching results and avoiding redundant computations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          5,\n          2\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"Player 1 chooses optimally but Player 2 will always have a higher final score (5 vs 3).\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          5,\n          233,\n          7\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"Player 1 chooses optimally, securing a final score of 234 vs Player 2's score of 12.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          7\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"With only one element, Player 1 wins by taking the single number.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 20\",\n    \"array_elements_range\": \"0 <= nums[i] <= 10^7\",\n    \"optimal_play\": \"Both players always play to maximize their scores.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"How would the algorithm change if the array length could go up to 10^5?\",\n    \"question_2\": \"Can you extend the algorithm to account for scenarios where there are penalties for specific picks?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the largest ramp in the given array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums`, a ramp is a pair `(i, j)` where `i < j` and `nums[i] <= nums[j]`. The width of a ramp is defined as `j - i`. The task is to find and return the maximum width of any ramp in the array `nums`. If no ramp exists, return `0`.\",\n  \"objective\": \"Given an integer array `nums`, return the maximum width of any ramp that satisfies the condition `nums[i] <= nums[j]` for `i < j`. If no such ramp exists, return `0`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We are given an array `nums`. A ramp is a pair of indices `(i, j)` such that `i < j` and `nums[i] <= nums[j]`. The goal is to find the maximum possible value of `j - i`, which represents the width of the ramp.\",\n    \"Step 2 - Approach\": \"To solve this problem efficiently, we can try to optimize the solution by leveraging the relationship between indices. We can either iterate through all pairs (i, j), or use sorting and binary search techniques to reduce the complexity.\",\n    \"Step 3 - Algorithm Design\": \"The problem can be solved by iterating over the array and comparing pairs to find the maximum ramp width. A more efficient solution might involve preprocessing the array to store possible ramp widths and finding the maximum width via optimized searching.\",\n    \"Step 4 - Code Efficiency\": \"The solution should be efficient enough to handle input sizes up to 50,000 elements, so we need to consider an O(n log n) or O(n) solution depending on the chosen approach.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          6,\n          0,\n          8,\n          2,\n          1,\n          5\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"The maximum width ramp is at (i, j) = (1, 5), where nums[1] = 0 and nums[5] = 5. The width is 5 - 1 = 4.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          9,\n          8,\n          1,\n          0,\n          1,\n          9,\n          4,\n          0,\n          4,\n          1\n        ]\n      },\n      \"output\": 7,\n      \"explanation\": \"The maximum width ramp is at (i, j) = (2, 9), where nums[2] = 1 and nums[9] = 1. The width is 9 - 2 = 7.\"\n    }\n  ],\n  \"constraints\": {\n    \"input_size\": \"2 <= nums.length <= 50000\",\n    \"value_range\": \"0 <= nums[i] <= 50000\"\n  },\n  \"follow_up\": \"Can you optimize the solution for large input sizes, perhaps by avoiding brute force pairwise comparisons?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if points are symmetric about a line."}, {"role": "assistant", "content": "{\n  \"title\": \"Check for Symmetry in Points\",\n  \"description\": \"Determine if there exists a vertical line parallel to the y-axis such that all points in a given set are symmetric about this line.\",\n  \"objective\": \"Efficiently verify symmetry in a set of 2D points by leveraging sorting or hash maps for grouping and checking.\",\n  \"meta_prompt\": {\n    \"Step 1 - Grouping Points\": \"Group points by their y-coordinates to identify potential horizontal counterparts.\",\n    \"Step 2 - Calculate Symmetry Line\": \"Determine the candidate symmetry line by computing the average of x-coordinates for each group.\",\n    \"Step 3 - Validation\": \"Check that every point has its symmetric counterpart about the identified line.\"\n  },\n  \"input\": [\n    {\n      \"name\": \"points\",\n      \"type\": \"array of arrays\",\n      \"description\": \"An array of integer pairs `[x, y]`, where each pair represents a point on the 2D plane.\",\n      \"constraints\": \"1 <= points.length <= 10^4, -10^8 <= points[i][j] <= 10^8\"\n    }\n  ],\n  \"output\": {\n    \"type\": \"boolean\",\n    \"description\": \"`true` if there exists a vertical line of symmetry, otherwise `false`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": \"points = [[1,1],[-1,1]]\",\n      \"output\": \"true\",\n      \"explanation\": \"The line x=0 is the line of symmetry.\"\n    },\n    {\n      \"input\": \"points = [[1,1],[-1,-1]]\",\n      \"output\": \"false\",\n      \"explanation\": \"No valid line of symmetry exists.\"\n    }\n  ],\n  \"hints\": [\n    \"Sort points by their y-coordinates to group points horizontally.\",\n    \"Calculate potential symmetry line based on the average of x-coordinates.\",\n    \"Use a hash map to quickly verify symmetric counterparts.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(n) or O(n log n) complexity using sorting or hash maps.\",\n    \"constraints\": \"Avoid brute-force O(n^2) pairwise comparisons.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Calculate the number of pawns a rook can capture on an `8 x 8` chessboard."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `8 x 8` chessboard with one white rook `'R'`, some white bishops `'B'`, black pawns `'p'`, and empty squares `'.'`, return the number of pawns the rook can capture. The rook moves in one of four cardinal directions and continues moving until it chooses to stop, reaches the board edge, captures a pawn, or is blocked by a bishop. The number of available captures for the rook is the number of pawns it can attack.\",\n  \"objective\": \"Design an efficient algorithm to determine the number of pawns the rook can capture on an `8 x 8` chessboard.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the requirements: The rook can move in four cardinal directions until it captures a pawn, is blocked by a bishop, or reaches the edge of the board.\",\n    \"Step 2 - Initial Approach\": \"Consider simulating the rook's movement: Start from the rook's position and move in each direction, checking if a pawn can be captured or if the movement is blocked by a bishop or the board edge.\",\n    \"Step 3 - Simulation Algorithm\": \"1. Identify the position of the rook on the board. 2. For each of the four cardinal directions (north, east, south, west), move the rook step by step until it captures a pawn, is blocked by a bishop, or reaches the edge. 3. Count the number of captured pawns.\",\n    \"Step 4 - Output Format\": \"Ensure the function returns the total number of pawns the rook can capture.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Focus on achieving efficient traversal with time complexity of O(n), where `n` is the number of cells on the board (in this case, 64). Handle edge cases such as the rook being surrounded by bishops or no pawns being present.\",\n    \"Final Check - Constraints Verification\": \"Verify the solution operates within the constraints: `board.length == 8` and `board[i].length == 8`, with valid characters 'R', '.', 'B', and 'p'. Ensure the algorithm is robust and handles various board configurations efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"board\": [\n          [\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\"\n          ],\n          [\n            \".\",\n            \".\",\n            \".\",\n            \"p\",\n            \".\",\n            \".\",\n            \".\",\n            \".\"\n          ],\n          [\n            \".\",\n            \".\",\n            \".\",\n            \"R\",\n            \".\",\n            \".\",\n            \".\",\n            \"p\"\n          ],\n          [\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\"\n          ],\n          [\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\"\n          ],\n          [\n            \".\",\n            \".\",\n            \".\",\n            \"p\",\n            \".\",\n            \".\",\n            \".\",\n            \".\"\n          ],\n          [\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\"\n          ],\n          [\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\"\n          ]\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The rook can capture all the pawns in this configuration.\"\n    },\n    {\n      \"input\": {\n        \"board\": [\n          [\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\"\n          ],\n          [\n            \".\",\n            \"p\",\n            \"p\",\n            \"p\",\n            \"p\",\n            \"p\",\n            \".\",\n            \".\"\n          ],\n          [\n            \".\",\n            \"p\",\n            \"p\",\n            \"B\",\n            \"p\",\n            \"p\",\n            \".\",\n            \".\"\n          ],\n          [\n            \".\",\n            \"p\",\n            \"B\",\n            \"R\",\n            \"B\",\n            \"p\",\n            \".\",\n            \".\"\n          ],\n          [\n            \".\",\n            \"p\",\n            \"p\",\n            \"B\",\n            \"p\",\n            \"p\",\n            \".\",\n            \".\"\n          ],\n          [\n            \".\",\n            \"p\",\n            \"p\",\n            \"p\",\n            \"p\",\n            \"p\",\n            \".\",\n            \".\"\n          ],\n          [\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\"\n          ],\n          [\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\"\n          ]\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"The bishops block the rook from capturing any pawns.\"\n    },\n    {\n      \"input\": {\n        \"board\": [\n          [\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\"\n          ],\n          [\n            \".\",\n            \".\",\n            \".\",\n            \"p\",\n            \".\",\n            \".\",\n            \".\",\n            \".\"\n          ],\n          [\n            \".\",\n            \".\",\n            \".\",\n            \"p\",\n            \".\",\n            \".\",\n            \".\",\n            \".\"\n          ],\n          [\n            \"p\",\n            \"p\",\n            \".\",\n            \"R\",\n            \".\",\n            \"p\",\n            \"B\",\n            \".\"\n          ],\n          [\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\"\n          ],\n          [\n            \".\",\n            \".\",\n            \".\",\n            \"B\",\n            \".\",\n            \".\",\n            \".\",\n            \".\"\n          ],\n          [\n            \".\",\n            \".\",\n            \".\",\n            \"p\",\n            \".\",\n            \".\",\n            \".\",\n            \".\"\n          ],\n          [\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \".\"\n          ]\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The rook can capture the pawns at positions b5, d6, and f5.\"\n    }\n  ],\n  \"constraints\": {\n    \"board_size\": \"board.length == 8\",\n    \"row_size\": \"board[i].length == 8\",\n    \"valid_characters\": \"board[i][j] is 'R', '.', 'B', or 'p'\",\n    \"single_rook\": \"There is exactly one cell with board[i][j] == 'R'\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle larger boards efficiently while maintaining the constraints and ensuring the correctness of the rook's movements?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find how many prime numbers are smaller than `n`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `n`, find the count of all prime numbers strictly less than `n`.\",\n  \"objective\": \"Design an efficient algorithm to compute the number of prime numbers below `n`, considering performance for large values.\",\n  \"meta_prompt\": {\n    \"Step 1 - Prime Numbers Definition\": \"Understand that a prime number is greater than 1 and divisible only by 1 and itself.\",\n    \"Step 2 - Brute Force Limitations\": \"Recognize that checking divisibility for all numbers less than `n` for large `n` is inefficient.\",\n    \"Step 3 - Optimized Approach\": \"Utilize the Sieve of Eratosthenes algorithm to mark non-prime numbers efficiently up to `n-1`.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider cases like `n = 0` or `n = 1`, where there are no primes.\",\n    \"Step 5 - Complexity Analysis\": \"Optimize the sieve implementation to run in `O(n log log n)` time with `O(n)` space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 10\n      },\n      \"output\": 4,\n      \"explanation\": \"Prime numbers below 10 are 2, 3, 5, and 7.\"\n    },\n    {\n      \"input\": {\n        \"n\": 0\n      },\n      \"output\": 0,\n      \"explanation\": \"There are no prime numbers less than 0.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1\n      },\n      \"output\": 0,\n      \"explanation\": \"There are no prime numbers less than 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"range\": \"0 <= n <= 5 * 10^6\"\n  },\n  \"follow_up\": \"Can you optimize memory usage for very large values of `n`?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if the capitalization in a given word is correct according to the rules: all uppercase, all lowercase, or only the first letter uppercase."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `word`, determine if the usage of capitals in the word is correct according to the following rules: 1) All letters are capitals, 2) All letters are lowercase, or 3) Only the first letter is capital. Return `true` if the word meets one of these criteria.\",\n  \"objective\": \"Design a solution to validate the capital usage in a word by using either regex pattern matching or character-by-character checks, ensuring the solution is clear and efficient.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Identify that the task is to validate the capital usage in a string, with three acceptable patterns: all uppercase, all lowercase, or first letter uppercase with the rest lowercase.\",\n    \"Step 2 - Using Regular Expressions\": \"Use a regex to check for matching patterns. Define regex cases as follows: `[A-Z]*` for all capitals, `[a-z]*` for all lowercase, and `[A-Z][a-z]*` for first letter uppercase followed by lowercase. Combine these patterns using `|` to create a single regex.\",\n    \"Step 3 - Character-by-Character Alternative\": \"Alternatively, use built-in string methods to check the cases without regex. For example, check if `word.isupper()` for all uppercase, `word.islower()` for all lowercase, or `word.istitle()` for first letter capitalized only.\",\n    \"Step 4 - Edge Case Handling\": \"Handle edge cases where the word length is 1, ensuring single letters (either uppercase or lowercase) are correctly validated as valid cases.\",\n    \"Step 5 - Complexity and Constraints\": \"Ensure the solution handles up to 100 characters efficiently, with O(n) complexity for character checking or constant time for regex matching, depending on implementation choice.\",\n    \"Final Check - Constraints Verification\": \"Verify the solution meets constraints, with words up to 100 characters and mixed-case input, ensuring correct pattern detection.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"word\": \"USA\"\n      },\n      \"output\": true,\n      \"explanation\": \"All letters are uppercase, so it meets the criteria.\"\n    },\n    {\n      \"input\": {\n        \"word\": \"FlaG\"\n      },\n      \"output\": false,\n      \"explanation\": \"Capitalization does not match any allowed pattern, as only some letters are uppercase.\"\n    }\n  ],\n  \"constraints\": {\n    \"word_length_range\": \"1 <= word.length <= 100\",\n    \"character_type\": \"word consists of only lowercase and uppercase English letters.\"\n  },\n  \"follow_up\": \"Could you implement this solution without using regular expressions, relying solely on built-in string methods for pattern matching?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a pattern matches a string."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a `pattern` string and a string `s`, determine if `s` follows the same pattern. Following the pattern means there is a bijection (one-to-one mapping) between each character in `pattern` and a distinct, non-empty word in `s`. The words in `s` are separated by single spaces.\",\n  \"objective\": \"Design an algorithm to check if `s` follows the `pattern` by ensuring both strings adhere to a one-to-one correspondence between pattern characters and words.\",\n  \"meta_prompt\": {\n    \"Step 1 - Input Parsing\": \"Split `s` into a list of words using spaces and compare its length to the length of `pattern`. If they are not equal, return `false` immediately.\",\n    \"Step 2 - Bijective Mapping\": \"Use two hash maps or dictionaries:\\n- One maps each character in `pattern` to a word in `s`.\\n- The other maps each word in `s` to a character in `pattern`.\\nEnsure that each mapping is consistent and bijective.\",\n    \"Step 3 - Iterative Comparison\": \"Iterate over the `pattern` and `s` simultaneously. For each character in `pattern` and corresponding word in `s`, check that:\\n- The character maps to the same word.\\n- The word maps back to the same character.\",\n    \"Step 4 - Output\": \"If all mappings are consistent, return `true`. Otherwise, return `false`.\",\n    \"Step 5 - Edge Cases\": \"Handle cases where:\\n- The length of `pattern` and the number of words in `s` differ.\\n- Repeated characters in `pattern` map incorrectly to different words in `s`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"pattern\": \"abba\",\n        \"s\": \"dog cat cat dog\"\n      },\n      \"output\": true,\n      \"explanation\": \"Each character in 'abba' maps consistently to a word in 'dog cat cat dog'.\"\n    },\n    {\n      \"input\": {\n        \"pattern\": \"abba\",\n        \"s\": \"dog cat cat fish\"\n      },\n      \"output\": false,\n      \"explanation\": \"The second 'a' maps incorrectly to 'fish' instead of 'dog'.\"\n    },\n    {\n      \"input\": {\n        \"pattern\": \"aaaa\",\n        \"s\": \"dog cat cat dog\"\n      },\n      \"output\": false,\n      \"explanation\": \"The repeated 'a' maps inconsistently to multiple words.\"\n    }\n  ],\n  \"constraints\": {\n    \"pattern_length\": \"1 <= pattern.length <= 300\",\n    \"string_length\": \"1 <= s.length <= 3000\",\n    \"valid_characters\": \"pattern contains only lowercase letters; `s` contains lowercase words separated by single spaces.\",\n    \"spacing\": \"`s` does not contain leading or trailing spaces.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to use only one hash map and an auxiliary set for mapping verification?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given two integers `n` and `k`, return the `k`th symbol in the `nth` row of a table where each row is generated by replacing `0` with `01` and `1` with `10` in the previous row."}, {"role": "assistant", "content": "{\n  \"description\": \"We are given a table of `n` rows, where each row is derived from the previous row by replacing each occurrence of `0` with `01` and each occurrence of `1` with `10`. For example, for `n = 3`, the rows will be: `0`, `01`, `0110`. Given two integers `n` and `k`, return the `k`th (1-indexed) symbol in the `nth` row of the table.\",\n  \"objective\": \"Find the `k`th symbol in the `nth` row of the table, following the pattern of replacing `0` with `01` and `1` with `10`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The problem involves constructing a sequence of rows, starting from `0` in the first row. Each subsequent row is generated by replacing `0` with `01` and `1` with `10` from the previous row. The goal is to determine the `k`th symbol in the `nth` row without fully constructing the row.\",\n    \"Step 2 - Observations\": \"The rows grow exponentially, with each row having a length of `2^(n-1)`. The key observation is that we can determine the symbol in the `k`th position without constructing the entire row by tracking the transformations from row `1` to row `n`.\",\n    \"Step 3 - Strategy\": \"To solve this, you can recursively trace the position `k` back through the previous rows, using the properties of the transformations. By checking whether `k` corresponds to a `0` or `1`, you can determine the symbol in the `nth` row without constructing all rows.\",\n    \"Step 4 - Approach\": \"The problem can be solved recursively by observing that each `n`th row is generated by expanding the `(n-1)`th row. Depending on the position `k`, you can determine whether to trace into the left or right half of the previous row, adjusting the index accordingly.\",\n    \"Step 5 - Constraints Consideration\": \"Since the number of rows grows exponentially, constructing the full table for large `n` (up to 30) would be computationally expensive. Therefore, an efficient recursive or iterative approach is needed to solve the problem within time limits.\",\n    \"Step 6 - Optimizing\": \"A direct recursive approach that simulates the transformations could be too slow for larger `n`. Optimizing the solution by using an iterative approach or a more efficient recursive method that avoids constructing the full row is crucial.\",\n    \"Final Check - Constraints\": \"Ensure that the solution efficiently handles the upper limit of `n = 30` where the row length can reach `2^29 - 1`. Carefully manage the index `k` while simulating the row transformations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 1,\n        \"k\": 1\n      },\n      \"output\": 0,\n      \"explanation\": \"For `n = 1`, the table is simply `0`, so the `1st` symbol is `0`.\"\n    },\n    {\n      \"input\": {\n        \"n\": 2,\n        \"k\": 1\n      },\n      \"output\": 0,\n      \"explanation\": \"For `n = 2`, the table is `0`, `01`, so the `1st` symbol in the second row is `0`.\"\n    },\n    {\n      \"input\": {\n        \"n\": 2,\n        \"k\": 2\n      },\n      \"output\": 1,\n      \"explanation\": \"For `n = 2`, the table is `0`, `01`, so the `2nd` symbol in the second row is `1`.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 30\",\n    \"k_range\": \"1 <= k <= 2^n - 1\"\n  },\n  \"follow_up\": \"Can you optimize the recursive approach to avoid constructing entire rows and instead directly compute the value of the `k`th symbol?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum profit by buying and selling stocks multiple times."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `prices` where `prices[i]` is the price of a stock on the `i`th day, return the maximum profit you can achieve by making multiple transactions. You can only hold at most one stock at a time, but you can buy and sell on the same day.\",\n  \"objective\": \"Design an efficient algorithm to compute the maximum profit from multiple buy and sell transactions.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves identifying all ascending price segments and summing their differences.\",\n    \"Step 2 - Traverse Prices\": \"Iterate through the prices array, adding the difference between consecutive increasing prices to the total profit.\",\n    \"Step 3 - Handle Edge Cases\": \"Handle cases such as arrays with a single element or arrays with non-increasing prices.\",\n    \"Step 4 - Optimize\": \"Ensure the algorithm runs in O(n) time and O(1) space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"prices\": [\n          7,\n          1,\n          5,\n          3,\n          6,\n          4\n        ]\n      },\n      \"output\": 7,\n      \"explanation\": \"Buy on day 2 (price = 1), sell on day 3 (price = 5), profit = 4. Then buy on day 4 (price = 3), sell on day 5 (price = 6), profit = 3. Total profit = 4 + 3 = 7.\"\n    },\n    {\n      \"input\": {\n        \"prices\": [\n          1,\n          2,\n          3,\n          4,\n          5\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"Buy on day 1 (price = 1), sell on day 5 (price = 5), profit = 4.\"\n    },\n    {\n      \"input\": {\n        \"prices\": [\n          7,\n          6,\n          4,\n          3,\n          1\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"No profit can be achieved as prices are non-increasing.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= prices.length <= 3 * 10^4\",\n    \"price_range\": \"0 <= prices[i] <= 10^4\"\n  },\n  \"follow_up\": \"Can you extend this solution to limit the number of transactions to a fixed value, such as 2?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum value of the rotation function."}, {"role": "assistant", "content": "{\n  \"title\": \"Maximum Value of Rotation Function\",\n  \"description\": \"Given an integer array `nums`, calculate the maximum value of the rotation function `F(k)` across all possible rotations.\",\n  \"objective\": \"Optimize the calculation of the maximum rotation function value using mathematical relationships to avoid brute force computation.\",\n  \"input\": {\n    \"name\": \"nums\",\n    \"type\": \"integer array\",\n    \"description\": \"The input array of integers.\",\n    \"constraints\": \"1 <= nums.length <= 10^5, -100 <= nums[i] <= 100\"\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The maximum value of the rotation function `F(k)`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          4,\n          3,\n          2,\n          6\n        ]\n      },\n      \"output\": 26,\n      \"explanation\": \"The maximum rotation function value occurs at F(3) = 26.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          100\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"With only one element, all rotations result in F(k) = 0.\"\n    }\n  ],\n  \"hints\": [\n    \"Observe that F(k) can be calculated iteratively by modifying the result from F(k-1).\",\n    \"Instead of recalculating F(k) from scratch, derive a relationship between F(k) and F(k-1) using the array sum and last element contributions.\",\n    \"The initial computation of F(0) can serve as a starting point to derive subsequent values efficiently.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve a time complexity of `O(n)` using a single traversal to calculate F(k) for all rotations.\",\n    \"constraints\": \"Avoid recomputing the rotation function from scratch for each k (which would result in `O(n^2)` complexity).\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find if there is a 132 pattern in the given array of integers."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `nums` of `n` integers, your task is to determine if there exists a **132 pattern** in the sequence. A **132 pattern** is a subsequence `nums[i]`, `nums[j]`, and `nums[k]` where `i < j < k` and `nums[i] < nums[k] < nums[j]`. Return `true` if such a pattern exists; otherwise, return `false`.\",\n  \"objective\": \"Design an efficient algorithm to find if there exists a **132 pattern** in the array. Aim to achieve a time complexity better than `O(n^3)` by avoiding nested loops for all possible triplets.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the structure of the input: `nums` is an array of integers, and the goal is to find indices `i, j, k` such that `i < j < k` and the subsequence `nums[i] < nums[k] < nums[j]` holds true. Consider edge cases, such as when `n < 3`.\",\n    \"Step 2 - Naive Approach\": \"A brute-force solution would involve iterating through all possible triplets (`i, j, k`) to check the pattern. However, this has `O(n^3)` time complexity, which is not feasible for large inputs.\",\n    \"Step 3 - Optimized Approach Using Stack\": \"Use a stack-based approach to efficiently track potential `nums[k]` values. Traverse the array from right to left, maintaining the largest valid `nums[k]` seen so far. For each element, check if it can act as `nums[i]` while ensuring a valid `nums[k]` exists in the stack. Update the stack for valid `nums[j]` elements.\",\n    \"Step 4 - Implementation Details\": \"Sort out the traversal logic. Traverse `nums` from the end, maintaining a `max_k` (largest valid `nums[k]`) and using the stack to track potential candidates for `nums[j]`. Return `true` as soon as a valid `nums[i] < max_k` is found.\",\n    \"Step 5 - Edge Cases\": \"Handle cases where the array length is less than 3, where the input has duplicate elements, or where all elements are increasing or decreasing. Ensure the code works efficiently for large inputs, respecting the constraint `1 <= n <= 2 * 10^5`.\",\n    \"Final Check - Complexity Analysis\": \"Verify the solution runs in `O(n)` time and `O(n)` space by ensuring the stack operations and traversal are linear.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          4\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"No valid 132 pattern exists in the sequence as all elements are in increasing order.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          1,\n          4,\n          2\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The subsequence `[1, 4, 2]` forms a valid 132 pattern with indices `i=1, j=2, k=3`.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          -1,\n          3,\n          2,\n          0\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"Multiple 132 patterns exist, such as `[-1, 3, 2]` or `[-1, 2, 0]`.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 200,000\",\n    \"element_range\": \"-10^9 <= nums[i] <= 10^9\",\n    \"output_range\": \"Return `true` if at least one valid 132 pattern exists; otherwise, return `false`.\"\n  },\n  \"follow_up\": \"Can you modify the solution to handle dynamic updates to the array while maintaining an efficient time complexity for determining the existence of the 132 pattern?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum gap in a sorted array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums`, return the maximum difference between two successive elements in its sorted form. Ensure the solution runs in linear time and uses linear extra space.\",\n  \"objective\": \"Design an efficient algorithm to find the maximum gap in a sorted array with O(n) time complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves calculating the largest difference between consecutive elements after sorting the array.\",\n    \"Step 2 - Bucket Sort\": \"Divide the range of values into buckets to efficiently calculate the maximum gap without fully sorting the array.\",\n    \"Step 3 - Fill Buckets\": \"Place each number into the appropriate bucket based on its value.\",\n    \"Step 4 - Find Maximum Gap\": \"Iterate through the buckets to find the maximum gap between the maximum value of one bucket and the minimum value of the next.\",\n    \"Step 5 - Handle Edge Cases\": \"Handle cases such as arrays with one element, arrays with duplicates, or arrays with large ranges.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          6,\n          9,\n          1\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The sorted form of the array is [1, 3, 6, 9], and the maximum gap is between 6 and 9.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          10\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"The array contains less than two elements, so the maximum gap is 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10^5\",\n    \"element_values\": \"0 <= nums[i] <= 10^9\"\n  },\n  \"follow_up\": \"Can you explain how bucket sorting ensures linear time complexity for this problem?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the largest triangle area from a list of points."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of points on the X-Y plane, where each point is represented as an array [xi, yi], find the area of the largest triangle that can be formed by any three unique points from the array. The output should be a floating-point number rounded to five decimal places. Answers within 10^-5 of the actual answer are acceptable.\",\n  \"objective\": \"Develop an efficient algorithm to find the maximum possible area of a triangle formed by any three points on a 2D plane. Ensure the solution can handle up to 50 points, each with unique coordinates, and that it outputs an area value within a precision of 10^-5.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the input structure: 'points' is an array of subarrays, each containing two integers [xi, yi] representing coordinates on the X-Y plane. Our task is to select three points that maximize the area of the triangle they form.\",\n    \"Step 2 - Geometric Approach\": \"Consider the formula for the area of a triangle formed by three points, (x1, y1), (x2, y2), and (x3, y3), which can be calculated as: |(x1(y2-y3) + x2(y3-y1) + x3(y1-y2)) / 2|. This formula allows efficient computation without requiring the use of trigonometric functions.\",\n    \"Step 3 - Iterate Through All Combinations\": \"Use three nested loops or itertools' combinations to iterate through every unique triplet of points. For each triplet, calculate the area using the formula, and track the maximum area found.\",\n    \"Step 4 - Output Format\": \"Return the maximum area rounded to five decimal places as a floating-point number.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Focus on runtime efficiency by iterating only once through each triplet and using direct computation for the area. Consider edge cases such as all points being collinear or close to the boundaries of the coordinate range.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution handles the constraints 3 <= points.length <= 50 and -50 <= xi, yi <= 50, ensuring it can compute the area within the required precision across valid input sizes.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"points\": [\n          [\n            0,\n            0\n          ],\n          [\n            0,\n            1\n          ],\n          [\n            1,\n            0\n          ],\n          [\n            0,\n            2\n          ],\n          [\n            2,\n            0\n          ]\n        ]\n      },\n      \"output\": 2.0,\n      \"explanation\": \"The largest triangle is formed by the points [0, 1], [0, 2], and [2, 0], with an area of 2.00000.\"\n    },\n    {\n      \"input\": {\n        \"points\": [\n          [\n            1,\n            0\n          ],\n          [\n            0,\n            0\n          ],\n          [\n            0,\n            1\n          ]\n        ]\n      },\n      \"output\": 0.5,\n      \"explanation\": \"The triangle formed by points [1, 0], [0, 0], and [0, 1] has an area of 0.50000.\"\n    }\n  ],\n  \"constraints\": {\n    \"points_length\": \"3 <= points.length <= 50\",\n    \"points_coordinates_range\": \"-50 <= xi, yi <= 50\",\n    \"uniqueness\": \"All given points are unique.\"\n  },\n  \"follow_up\": \"Can you come up with an algorithm that minimizes redundant calculations and handles edge cases with close-to-collinear points efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Turn a binary tree upside down."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary tree, turn the tree upside down and return the new root. In an upside-down tree, the original left child becomes the new root, the original root becomes the new right child, and the original right child becomes the new left child. This transformation is performed level by level.\",\n  \"objective\": \"Design an algorithm to transform a binary tree into its upside-down representation.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the transformation involves swapping the roles of parent and children nodes level by level.\",\n    \"Step 2 - Recursive Approach\": \"Use recursion to process the leftmost child first, updating parent and child pointers as you traverse back.\",\n    \"Step 3 - Iterative Approach\": \"Implement the transformation iteratively using a loop to update pointers.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as an empty tree, a tree with a single node, or trees with only left children.\",\n    \"Step 5 - Optimize\": \"Ensure the solution is efficient and minimizes auxiliary space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3,\n          4,\n          5\n        ]\n      },\n      \"output\": [\n        4,\n        5,\n        2,\n        null,\n        null,\n        3,\n        1\n      ],\n      \"explanation\": \"The tree is transformed such that the leftmost child becomes the new root.\"\n    },\n    {\n      \"input\": {\n        \"root\": []\n      },\n      \"output\": [],\n      \"explanation\": \"An empty tree remains unchanged.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1\n        ]\n      },\n      \"output\": [\n        1\n      ],\n      \"explanation\": \"A single-node tree remains unchanged.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 10\",\n    \"node_values\": \"1 <= Node.val <= 10\",\n    \"tree_properties\": \"Every right node has a sibling and no children.\"\n  },\n  \"follow_up\": \"Can you implement this transformation iteratively with constant space?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the next closest time using the digits from a given time, reusing them without exceeding valid time constraints."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the next closest time using the digits from the given time in 'HH:MM' format by reusing the digits without exceeding valid time constraints.\",\n  \"objective\": \"Generate all possible valid times using the given digits, calculate the time differences, and return the next closest time.\",\n  \"meta_prompt\": {\n    \"Step 1 - Extract Allowed Digits\": \"Extract the unique digits from the given time and store them in a set.\",\n    \"Step 2 - Generate All Possible Times\": \"Use the digits to generate all valid 4-digit combinations and filter out those that exceed 'HH < 24' and 'MM < 60'.\",\n    \"Step 3 - Calculate Time Difference\": \"Convert the current time and all valid times to minutes since midnight. Compute the time differences modulo 24*60, ensuring non-negative values.\",\n    \"Step 4 - Find the Next Closest Time\": \"Sort the time differences and identify the smallest positive difference. If no valid difference exists, consider the smallest time as the next day's closest time.\",\n    \"Step 5 - Return Result\": \"Convert the closest time back to 'HH:MM' format and return it.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"time\": \"19:34\"\n      },\n      \"output\": \"19:39\",\n      \"explanation\": \"The next closest time after '19:34' using digits {1, 9, 3, 4} is '19:39'.\"\n    },\n    {\n      \"input\": {\n        \"time\": \"23:59\"\n      },\n      \"output\": \"22:22\",\n      \"explanation\": \"The next closest time after '23:59' using digits {2, 3, 5, 9} is '22:22'.\"\n    }\n  ],\n  \"constraints\": {\n    \"time_format\": \"The input time is always in the valid format 'HH:MM' with leading zeros.\",\n    \"time_constraints\": \"0 <= HH < 24 and 0 <= MM < 60\",\n    \"digit_reuse\": \"There is no limit on how many times a digit can be reused.\"\n  },\n  \"follow_up\": \"Discuss the computational efficiency of generating and filtering all possible times for a 4-digit set and propose optimizations for larger constraints.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a string `s` and a character `c`, return an array of integers."}, {"role": "assistant", "content": "{\n  \"description\": \"We are given a string `s` and a character `c` that occurs at least once in `s`. The task is to return an array where each element represents the distance from each index in `s` to the closest occurrence of `c`.\",\n  \"objective\": \"Write a function to calculate the distance from each index in the string `s` to the closest occurrence of the character `c`. The function should return an array of integers where the i-th element represents this distance.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The task requires calculating the distance from each character in the string `s` to the closest occurrence of the given character `c`. We need to account for both left and right closest occurrences of `c` for each index.\",\n    \"Step 2 - Constraints\": \"The string `s` can have up to 10^4 characters. The solution needs to be efficient enough to handle the upper bound of the input size.\",\n    \"Step 3 - Approach\": \"A two-pass approach can be used: one pass from left to right and another from right to left. In each pass, we maintain the distance to the closest occurrence of `c` and update the result array.\",\n    \"Step 4 - Edge Case Handling\": \"Since we are guaranteed that `c` appears at least once in `s`, no need to handle the case where `c` is missing.\",\n    \"Step 5 - Optimization\": \"The time complexity of the solution is O(n), where n is the length of the string. This ensures that the solution works efficiently for larger inputs.\",\n    \"Step 6 - Implementation Details\": \"We will iterate over the string twice: once from left to right and once from right to left, updating the distance array based on the closest occurrences of `c` encountered in each pass.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"loveleetcode\",\n        \"c\": \"e\"\n      },\n      \"output\": [\n        3,\n        2,\n        1,\n        0,\n        1,\n        0,\n        0,\n        1,\n        2,\n        2,\n        1,\n        0\n      ],\n      \"explanation\": \"In this example, the closest occurrences of 'e' are at indices 3, 5, 6, and 11. The distance for each index in `s` is calculated by finding the closest 'e'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"aaab\",\n        \"c\": \"b\"\n      },\n      \"output\": [\n        3,\n        2,\n        1,\n        0\n      ],\n      \"explanation\": \"The closest occurrence of 'b' is at index 3. The distance for each index is calculated accordingly.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length_range\": \"1 <= s.length <= 104\",\n    \"character_constraints\": \"s[i] and c are lowercase English letters.\",\n    \"c_occurrence\": \"It is guaranteed that c occurs at least once in s.\"\n  },\n  \"follow_up\": \"How would you modify your approach if `c` could appear multiple times in `s` in varying positions?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the cheapest route from city A to city B with a limited number of stops."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a graph where each city is connected by flights, represented by an array of flights, you need to find the cheapest price to travel from a source city to a destination city, with the restriction of at most `k` stops. If no valid route exists, return -1.\",\n  \"objective\": \"Design an efficient algorithm that finds the cheapest flight route from a source city to a destination city with at most `k` stops, while considering flight prices and the structure of the graph. Optimize for runtime performance.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The problem involves finding the minimum cost path between two cities in a weighted directed graph, with a maximum number of stops. The input is a list of flights, each with a cost, and the goal is to find the shortest path based on the number of stops constraint.\",\n    \"Step 2 - Initial Approach\": \"A brute force solution would involve checking all possible paths, but this is inefficient and has a time complexity of O(n^2) or worse. Instead, consider using a modified version of Dijkstra's algorithm or a breadth-first search (BFS) that accounts for the number of stops.\",\n    \"Step 3 - Optimal Solution with BFS/Dijkstra\": \"Implement a BFS where at each step, we consider all possible next cities within the constraints of `k` stops. Alternatively, use Dijkstra's algorithm while tracking the number of stops. Ensure the algorithm stops when the destination is reached or when the number of stops exceeds `k`.\",\n    \"Step 4 - Output Format\": \"Return the cheapest price as an integer. If no path is found that satisfies the condition, return -1. Ensure that the code handles edge cases such as when no flights are available or when the destination is unreachable.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Focus on achieving a time complexity better than O(n^2), ideally O(n log n). Handle edge cases where the graph has no flights or the destination is unreachable within the allowed stops.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution works within the constraints 1 <= n <= 100, ensuring it efficiently handles large inputs, such as when there are up to 100 cities or 5000 flight connections.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 4,\n        \"flights\": [\n          [\n            0,\n            1,\n            100\n          ],\n          [\n            1,\n            2,\n            100\n          ],\n          [\n            2,\n            0,\n            100\n          ],\n          [\n            1,\n            3,\n            600\n          ],\n          [\n            2,\n            3,\n            200\n          ]\n        ],\n        \"src\": 0,\n        \"dst\": 3,\n        \"k\": 1\n      },\n      \"output\": 700,\n      \"explanation\": \"The optimal path from city 0 to 3 with at most 1 stop is 0 -> 1 -> 3, with a cost of 100 + 600 = 700.\"\n    },\n    {\n      \"input\": {\n        \"n\": 3,\n        \"flights\": [\n          [\n            0,\n            1,\n            100\n          ],\n          [\n            1,\n            2,\n            100\n          ],\n          [\n            0,\n            2,\n            500\n          ]\n        ],\n        \"src\": 0,\n        \"dst\": 2,\n        \"k\": 1\n      },\n      \"output\": 200,\n      \"explanation\": \"The optimal path from city 0 to 2 with at most 1 stop is 0 -> 1 -> 2, with a cost of 100 + 100 = 200.\"\n    },\n    {\n      \"input\": {\n        \"n\": 3,\n        \"flights\": [\n          [\n            0,\n            1,\n            100\n          ],\n          [\n            1,\n            2,\n            100\n          ],\n          [\n            0,\n            2,\n            500\n          ]\n        ],\n        \"src\": 0,\n        \"dst\": 2,\n        \"k\": 0\n      },\n      \"output\": 500,\n      \"explanation\": \"The optimal path from city 0 to 2 with no stops is just the direct flight, with a cost of 500.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 100\",\n    \"flights_length_range\": \"0 <= flights.length <= (n * (n - 1) / 2)\",\n    \"price_range\": \"1 <= pricei <= 104\",\n    \"src_dst_range\": \"0 <= src, dst, k < n\",\n    \"no_multiple_flights\": \"There will be no multiple flights between two cities.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to achieve a time complexity better than O(n^2), possibly using BFS with a priority queue or a dynamic programming approach?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Reverse the letters in the string while leaving everything else the same."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a string s. Your task is to reverse the string according to the following rules: All non-English letter characters should remain in the same position, while all English letters (both lowercase and uppercase) should be reversed. Return the string s after applying these transformations.\",\n  \"objective\": \"Design an algorithm that reverses only the English letters in the string while keeping the non-letter characters in their original positions.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the string consists of both English letters (lowercase and uppercase) and non-letter characters. The goal is to reverse only the English letters while leaving all other characters in place.\",\n    \"Step 2 - Initial Approach\": \"Consider using two pointers: one to traverse the string from the beginning and another from the end. Both pointers should move inward, swapping English letters and skipping non-letter characters.\",\n    \"Step 3 - Efficient Reversal Algorithm\": \"Implement a two-pointer technique where you move both pointers towards the center. Swap letters when both pointers point to English letters and continue moving the pointers when encountering non-letters.\",\n    \"Step 4 - Output Format\": \"Return the modified string after reversing the letters while maintaining the positions of non-letter characters.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure the algorithm runs efficiently, handling edge cases such as a string with no letters, a string with only letters, or a string with minimal length.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution handles strings of up to 100 characters and operates within the provided constraints.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"ab-cd\"\n      },\n      \"output\": \"dc-ba\",\n      \"explanation\": \"The string is reversed only for the English letters, so 'ab' becomes 'ba' and 'cd' becomes 'dc', while the '-' remains unchanged.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"a-bC-dEf-ghIj\"\n      },\n      \"output\": \"j-Ih-gfE-dCba\",\n      \"explanation\": \"The English letters are reversed as follows: 'a' becomes 'a', 'b' becomes 'b', 'C' becomes 'I', and so on, while non-letter characters like '-' and '=' remain in their original positions.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"Test1ng-Leet=code-Q!\"\n      },\n      \"output\": \"Qedo1ct-eeLg=ntse-T!\",\n      \"explanation\": \"The English letters are reversed: 'Test1ng' becomes 'Qedo1ct', 'Leet' becomes 'eeLg', and 'code' becomes 'ntse', while non-letters remain unchanged.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 100\",\n    \"ascii_values_range\": \"s consists of characters with ASCII values in the range [33, 122]\",\n    \"no_escape_characters\": \"s does not contain '\\\\' or '\\\\\\\\'.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle strings of length up to 100 efficiently? Consider how to manage the swapping of characters in-place without using additional space.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Remove all nodes with duplicate values from a sorted linked list."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `head` of a sorted linked list, remove all nodes that have duplicate values, leaving only distinct numbers in the resulting linked list. Return the modified list, which remains sorted.\",\n  \"objective\": \"Design an algorithm to traverse the sorted linked list and remove nodes with duplicate values, ensuring that the algorithm works in O(n) time complexity and does not use additional space.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves removing duplicate values from a sorted linked list. Since the list is sorted, duplicate nodes are guaranteed to appear consecutively.\",\n    \"Step 2 - Use Pointers\": \"Use two pointers: one to track the previous non-duplicate node (`prev`) and another (`current`) to traverse the list. Skip over duplicate values by adjusting the `next` pointer of `prev`.\",\n    \"Step 3 - Handle Edge Cases\": \"Handle cases where the duplicates are at the beginning or the end of the list, or the list is empty or contains only one node.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution handles constraints such as a maximum of 300 nodes and values between -100 and 100 efficiently.\",\n    \"Step 5 - Return the Result\": \"Return the updated head of the linked list after removing duplicates.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2,\n          3,\n          3,\n          4,\n          4,\n          5\n        ]\n      },\n      \"output\": [\n        1,\n        2,\n        5\n      ],\n      \"explanation\": \"The duplicate values 3 and 4 are removed, leaving the distinct numbers 1, 2, and 5.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          1,\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": [\n        2,\n        3\n      ],\n      \"explanation\": \"The value 1 is removed because it appears multiple times, leaving the distinct values 2 and 3.\"\n    },\n    {\n      \"input\": {\n        \"head\": []\n      },\n      \"output\": [],\n      \"explanation\": \"The input list is empty, so the output is also an empty list.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 300\",\n    \"value_range\": \"-100 <= Node.val <= 100\",\n    \"sorted_order\": \"The linked list is sorted in ascending order.\"\n  },\n  \"follow_up\": \"Can you optimize the solution further to minimize the number of pointer adjustments during traversal?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum money you can rob from a binary tree without alerting the police."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of a binary tree, calculate the maximum amount of money a thief can rob without triggering the police. If two directly connected houses are robbed, the police will be alerted. Use a bottom-up approach to solve the problem.\",\n  \"objective\": \"Implement an efficient algorithm to determine the maximum possible amount that can be robbed without alerting the police.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that each node represents a house with a certain amount of money. If a house is robbed, its parent and children cannot be robbed.\",\n    \"Step 2 - Recursive Strategy\": \"Use recursion to explore each subtree and compute two scenarios for each node: (1) the maximum money robbed if the current node is included and (2) the maximum if it is not.\",\n    \"Step 3 - State Definition\": \"For each node, maintain two states: `rob` (maximum amount if the node is robbed) and `not_rob` (maximum amount if the node is not robbed).\",\n    \"Step 4 - Dynamic Programming\": \"Combine the results of the left and right subtrees to compute the values for the current node, ensuring O(n) time complexity.\",\n    \"Step 5 - Edge Cases\": \"Handle cases such as trees with only one node or trees where all nodes have zero value.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          2,\n          3,\n          null,\n          3,\n          null,\n          1\n        ]\n      },\n      \"output\": 7,\n      \"explanation\": \"The maximum money is obtained by robbing the root (3), its right child (3), and its right grandchild (1).\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          4,\n          5,\n          1,\n          3,\n          null,\n          1\n        ]\n      },\n      \"output\": 9,\n      \"explanation\": \"The maximum money is obtained by robbing the left child (4) and the right child (5).\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"1 <= number of nodes <= 10^4\",\n    \"node_value\": \"0 <= Node.val <= 10^4\"\n  },\n  \"follow_up\": \"Optimize memory usage by avoiding duplicate calculations and using a bottom-up approach with constant space for each recursive call.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Calculate the minimum steps to spell a keyword by rotating a ring and pressing a button."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `ring` that represents the outer ring of a dial and a string `key` that represents a keyword, return the minimum number of steps to spell the keyword by rotating the ring and pressing a center button. The ring can be rotated clockwise or anticlockwise, and the goal is to align each character of `key` with the `12:00` position in `ring` in the fewest steps.\",\n  \"objective\": \"Design an optimized dynamic programming algorithm that calculates the minimum steps to spell `key` by rotating `ring`, using a space-optimized bottom-up approach with two 1D arrays to track the state for each position in `key` and `ring`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves aligning characters from `key` with the `12:00` position in `ring`. Each alignment requires counting the minimum rotations plus one press to select the character.\",\n    \"Step 2 - Dynamic Programming with Space Optimization\": \"Since each step depends only on the previous state, use two 1D arrays (`prev` and `curr`) to store the minimum steps for each position, reducing space usage compared to a 2D array.\",\n    \"Step 3 - Calculating Minimum Rotations\": \"Define a helper function `countSteps` to calculate the minimum steps needed to rotate between two indices in `ring`. This function accounts for both clockwise and anticlockwise rotations, selecting the shorter path.\",\n    \"Step 4 - Recurrence Relation\": \"For each character in `key`, update `curr[ringIndex]` using the relation `curr[ringIndex] = min(curr[ringIndex], 1 + countSteps(ringIndex, charIndex) + prev[charIndex])`, where `prev[charIndex]` holds the steps needed to reach the prior character in `key`.\",\n    \"Step 5 - Initialization and Base Cases\": \"Initialize `prev` with zero steps for the base case. At each stage, reset `curr` to infinity to update minimum paths and swap `prev` and `curr` arrays to propagate the calculations.\",\n    \"Final Check - Constraints Verification\": \"Ensure the solution meets constraints with `1 <= ring.length, key.length <= 100` and is optimized to handle multiple positions efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"ring\": \"godding\",\n        \"key\": \"gd\"\n      },\n      \"output\": 4,\n      \"explanation\": \"The shortest path to spell 'gd' requires rotating the ring and pressing the center button for each character, totaling 4 steps.\"\n    },\n    {\n      \"input\": {\n        \"ring\": \"godding\",\n        \"key\": \"godding\"\n      },\n      \"output\": 13,\n      \"explanation\": \"To spell 'godding', each character in the sequence requires rotation and pressing the button, totaling 13 steps.\"\n    }\n  ],\n  \"constraints\": {\n    \"ring_length_range\": \"1 <= ring.length <= 100\",\n    \"key_length_range\": \"1 <= key.length <= 100\",\n    \"characters\": \"ring and key consist of lowercase English letters only\"\n  },\n  \"follow_up\": \"Could you implement this solution without explicitly computing the entire `countSteps` function, relying instead on an incremental traversal approach to minimize rotations?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the average value of nodes at each level of a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of a binary tree, calculate the average value of the nodes on each level and return the result as an array.\",\n  \"objective\": \"Perform a level-order traversal of the binary tree using Breadth-First Search (BFS) to compute the average of nodes at each level.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Queue\": \"Start with the root node in the queue.\",\n    \"Step 2 - Traverse Levels\": \"Iterate through the tree level by level. For each level, calculate the sum of node values and count the nodes.\",\n    \"Step 3 - Compute Averages\": \"Divide the sum of the node values by the count of nodes for each level to compute the average.\",\n    \"Step 4 - Store Results\": \"Store the computed average for each level in the result array.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          9,\n          20,\n          null,\n          null,\n          15,\n          7\n        ]\n      },\n      \"output\": [\n        3.0,\n        14.5,\n        11.0\n      ],\n      \"explanation\": \"Level 0: [3] => Average: 3.00000; Level 1: [9, 20] => Average: 14.50000; Level 2: [15, 7] => Average: 11.00000.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          9,\n          20,\n          15,\n          7\n        ]\n      },\n      \"output\": [\n        3.0,\n        14.5,\n        11.0\n      ],\n      \"explanation\": \"Level 0: [3] => Average: 3.00000; Level 1: [9, 20] => Average: 14.50000; Level 2: [15, 7] => Average: 11.00000.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_range\": \"1 <= number of nodes <= 10^4\",\n    \"value_range\": \"-2^31 <= Node.val <= 2^31 - 1\"\n  },\n  \"follow_up\": \"Explore how to optimize memory usage for deeper trees, where the number of nodes per level increases significantly.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find missing ranges in a sorted array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a sorted unique integer array `nums` and an inclusive range `[lower, upper]`, find the smallest sorted list of ranges that cover every missing number in `[lower, upper]` exactly.\",\n  \"objective\": \"Design an efficient algorithm to find missing ranges in a sorted array within a specified range.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that a range is missing if it is in `[lower, upper]` but not in `nums`. Output ranges in the format `\\\"a\\\"` if `a == b` or `\\\"a->b\\\"` if `a != b`.\",\n    \"Step 2 - Traverse Array\": \"Iterate through the array `nums` and compare adjacent elements to find missing ranges between them.\",\n    \"Step 3 - Handle Boundaries\": \"Account for missing ranges before the first element and after the last element of `nums`.\",\n    \"Step 4 - Generate Ranges\": \"For each gap identified, generate the appropriate range string.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(n) time for the array traversal and range generation.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          1,\n          3,\n          50,\n          75\n        ],\n        \"lower\": 0,\n        \"upper\": 99\n      },\n      \"output\": [\n        \"2\",\n        \"4->49\",\n        \"51->74\",\n        \"76->99\"\n      ],\n      \"explanation\": \"The missing numbers in the range [0, 99] are grouped into ranges: [2], [4, 49], [51, 74], and [76, 99].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          -1\n        ],\n        \"lower\": -1,\n        \"upper\": -1\n      },\n      \"output\": [],\n      \"explanation\": \"There are no missing numbers in the range.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"0 <= nums.length <= 100\",\n    \"range_values\": \"-10^9 <= lower <= upper <= 10^9\",\n    \"element_values\": \"lower <= nums[i] <= upper\",\n    \"unique_elements\": \"All elements of `nums` are unique.\"\n  },\n  \"follow_up\": \"Can you optimize the solution for large values of `[lower, upper]`?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Write a program to clean all cells in a grid using a robot with APIs."}, {"role": "assistant", "content": "{\n  \"description\": \"Design an algorithm to control a robot to clean an entire room represented as a binary `m x n` grid. The grid's values are `0` for walls and `1` for accessible slots. The robot starts at an unknown position facing up and can only interact with its environment through the APIs `move()`, `turnLeft()`, `turnRight()`, and `clean()`. Your task is to ensure that every accessible cell is cleaned, avoiding revisiting already cleaned cells unnecessarily.\",\n  \"objective\": \"Implement an efficient algorithm that navigates and cleans the entire room using depth-first search (DFS) and backtracking. The solution must handle blindfolded exploration by marking visited cells and orienting the robot dynamically.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the problem constraints: the robot starts at an unknown accessible cell and must clean every accessible cell without knowing the layout of the grid. The robot interacts solely through the given APIs.\",\n    \"Step 2 - Navigating the Room\": \"Use DFS to explore all reachable cells, marking them as visited. Leverage the `move()` method to check accessibility and backtrack when hitting walls or visited cells.\",\n    \"Step 3 - Handling Orientation\": \"Maintain the robot's current direction to align its movements with the grid's directions (up, right, down, left). Use `turnLeft()` and `turnRight()` to adjust orientation as needed.\",\n    \"Step 4 - Backtracking\": \"If the robot cannot proceed in a direction, backtrack to a previously visited cell using the reverse of the last movement. This ensures complete exploration of all reachable cells.\",\n    \"Step 5 - Efficiency Considerations\": \"Optimize by avoiding revisiting already cleaned cells and minimizing redundant movements. Use a set to store visited cells for constant-time checks.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"room\": [\n          [\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            1,\n            1\n          ],\n          [\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            1,\n            1\n          ],\n          [\n            1,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1\n          ],\n          [\n            0,\n            0,\n            0,\n            1,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1\n          ]\n        ],\n        \"row\": 1,\n        \"col\": 3\n      },\n      \"output\": \"Robot cleaned all rooms.\",\n      \"explanation\": \"The robot explores all accessible cells starting from (1, 3), navigating dynamically and cleaning each cell once.\"\n    },\n    {\n      \"input\": {\n        \"room\": [\n          [\n            1\n          ]\n        ],\n        \"row\": 0,\n        \"col\": 0\n      },\n      \"output\": \"Robot cleaned all rooms.\",\n      \"explanation\": \"The robot starts at the only cell (0, 0) and cleans it directly.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_dimensions\": \"1 <= m <= 100, 1 <= n <= 200\",\n    \"cell_values\": \"0 <= room[i][j] <= 1\",\n    \"starting_cell\": \"room[row][col] == 1 (always accessible)\",\n    \"robot_capabilities\": \"Robot can clean all accessible cells, starting at a random position and navigating using only APIs.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"How can the algorithm be optimized to minimize unnecessary movements while ensuring complete cleaning?\",\n    \"question_2\": \"What changes would be necessary if the robot had limited battery life or movement constraints?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create a Snake game where the snake eats food and moves on a grid."}, {"role": "assistant", "content": "{\n  \"description\": \"Implement a Snake game where the snake moves on a grid, eats food to grow in length, and ends the game when it collides with itself or goes out of bounds.\",\n  \"objective\": \"Use efficient data structures to track the snake's position, food, and grid boundaries for optimal gameplay.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialization\": \"Define the game grid size, food locations, and initialize the snake at position `(0,0)`.\",\n    \"Step 2 - Move Logic\": \"Simulate movement based on input direction (`'U'`, `'D'`, `'L'`, `'R'`). Update the snake's head position and check for collisions or food consumption.\",\n    \"Step 3 - State Updates\": \"If the snake eats food, grow the snake and update the food index. Otherwise, move the snake's head and tail.\",\n    \"Step 4 - Game Over\": \"Check if the snake's head collides with itself or goes out of bounds. If so, end the game.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"actions\": [\n          \"SnakeGame\",\n          \"move\",\n          \"move\",\n          \"move\",\n          \"move\",\n          \"move\",\n          \"move\"\n        ],\n        \"arguments\": [\n          [\n            3,\n            2,\n            [\n              [\n                1,\n                2\n              ],\n              [\n                0,\n                1\n              ]\n            ]\n          ],\n          [\n            \"R\"\n          ],\n          [\n            \"D\"\n          ],\n          [\n            \"R\"\n          ],\n          [\n            \"U\"\n          ],\n          [\n            \"L\"\n          ],\n          [\n            \"U\"\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        0,\n        0,\n        1,\n        1,\n        2,\n        -1\n      ]\n    }\n  ],\n  \"constraints\": {\n    \"grid_size\": \"1 <= width, height <= 10^4\",\n    \"food_count\": \"1 <= food.length <= 50\",\n    \"directions\": \"Direction is one of 'U', 'D', 'L', or 'R'\",\n    \"performance\": \"Efficiently handle up to 10^4 calls to the move function.\"\n  },\n  \"follow_up\": {\n    \"optimization\": \"Use a queue or deque to efficiently manage the snake's position and detect collisions in `O(1)` time per move.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find digits from a jumbled string and return them in order."}, {"role": "assistant", "content": "{\n  \"title\": \"Reconstruct Digits from English\",\n  \"description\": \"Given a string `s` containing an unordered English representation of digits (from 0 to 9), determine the digits and return them in ascending order.\",\n  \"objective\": \"Use the unique letter identifiers for specific digits to efficiently extract and count the digits, reconstructing the original sequence in sorted order.\",\n  \"input\": {\n    \"s\": {\n      \"type\": \"string\",\n      \"description\": \"A jumbled string containing English representations of digits (e.g., 'owoztneoer').\",\n      \"constraints\": \"1 <= s.length <= 10^5; s[i] is one of ['e', 'g', 'f', 'i', 'h', 'o', 'n', 's', 'r', 'u', 't', 'w', 'v', 'x', 'z'].\"\n    }\n  },\n  \"output\": {\n    \"type\": \"string\",\n    \"description\": \"The reconstructed digits in ascending order as a string (e.g., '012').\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"owoztneoer\"\n      },\n      \"output\": \"012\",\n      \"explanation\": \"The characters uniquely identify the digits: 'z' -> 0, 'w' -> 2, 'o' (after removing contributions from 0, 2) -> 1.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"fviefuro\"\n      },\n      \"output\": \"45\",\n      \"explanation\": \"The characters uniquely identify the digits: 'f' -> 4, 'v' -> 5.\"\n    }\n  ],\n  \"hints\": [\n    \"Each digit has a unique letter in its English representation (e.g., 'z' for 'zero', 'x' for 'six').\",\n    \"Process the digits in the order of their unique letters to avoid conflicts.\",\n    \"Use a frequency map to count occurrences of each letter in `s` and decode digits sequentially.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve a time complexity of O(n) by using a frequency counter and processing unique letters for decoding.\",\n    \"constraints\": \"Avoid recomputing or creating multiple copies of the string.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given two binary trees, return true if their leaf value sequences are the same. Otherwise, return false."}, {"role": "assistant", "content": "{\n  \"description\": \"We are given two binary trees, and the task is to determine if their leaf value sequences are the same. The leaf value sequence is formed by the values of all the leaves of the binary tree, traversed from left to right. Two trees are considered leaf-similar if their leaf value sequences are identical.\",\n  \"objective\": \"Return true if the leaf value sequences of the two trees are the same; otherwise, return false.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"A binary tree is defined by a root node and potentially left and right children. A leaf node is a node with no children. To solve this problem, we need to extract the leaf values from both trees and compare them.\",\n    \"Step 2 - Approach\": \"Traverse both trees and collect their leaf values. Compare the two sequences of leaf values to determine if they are the same.\",\n    \"Step 3 - Output Format\": \"Return true if the two trees have the same leaf value sequence, or false otherwise.\",\n    \"Step 4 - Code Efficiency and Edge Cases\": \"The problem should handle edge cases like a tree with only one node or trees with different structures but identical leaf sequences.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root1\": [\n          3,\n          5,\n          1,\n          6,\n          2,\n          9,\n          8,\n          null,\n          null,\n          7,\n          4\n        ],\n        \"root2\": [\n          3,\n          5,\n          1,\n          6,\n          7,\n          4,\n          2,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          9,\n          8\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"Both trees have the same leaf value sequence: [6, 7, 4, 9, 8].\"\n    },\n    {\n      \"input\": {\n        \"root1\": [\n          1,\n          2,\n          3\n        ],\n        \"root2\": [\n          1,\n          3,\n          2\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The leaf value sequence of root1 is [2, 3] and the leaf value sequence of root2 is [2, 3], but the trees themselves have different structures.\"\n    }\n  ],\n  \"constraints\": {\n    \"tree_size\": \"The number of nodes in each tree will be in the range [1, 200].\",\n    \"node_values\": \"Both trees will have values in the range [0, 200].\"\n  },\n  \"follow_up\": \"Can this problem be optimized for trees with more complex structures or for trees where some nodes are missing?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a word exists in a grid by following adjacent cells without reusing any cell."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `m x n` grid of characters `board` and a string `word`, determine if the word can be constructed by sequentially adjacent cells in the grid. Cells are considered adjacent if they are horizontally or vertically neighboring, and each cell can only be used once.\",\n  \"objective\": \"Design an efficient backtracking algorithm to search for the word in the grid, using search pruning to improve performance.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves finding the word in the grid by exploring adjacent cells recursively. The grid's dimensions and the word's length impose constraints on the number of searches.\",\n    \"Step 2 - Backtracking Algorithm\": \"Use backtracking to recursively search for the word. At each step, check if the current cell matches the corresponding character in the word. If yes, move to adjacent cells.\",\n    \"Step 3 - Pruning\": \"Prune the search by marking visited cells and stopping early if the current path cannot match the remaining characters of the word.\",\n    \"Step 4 - Restore State\": \"After exploring a cell, unmark it (backtrack) to allow other paths to use the cell. This ensures that all possibilities are explored.\",\n    \"Step 5 - Constraints Compliance\": \"Ensure the solution handles constraints such as `1 <= m, n <= 6` and `1 <= word.length <= 15` efficiently by limiting unnecessary searches.\",\n    \"Step 6 - Handle Edge Cases\": \"Consider cases where the word is longer than the total number of grid cells, contains letters not in the grid, or requires using a cell multiple times.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"board\": [\n          [\n            \"A\",\n            \"B\",\n            \"C\",\n            \"E\"\n          ],\n          [\n            \"S\",\n            \"F\",\n            \"C\",\n            \"S\"\n          ],\n          [\n            \"A\",\n            \"D\",\n            \"E\",\n            \"E\"\n          ]\n        ],\n        \"word\": \"ABCCED\"\n      },\n      \"output\": true,\n      \"explanation\": \"The word 'ABCCED' can be constructed by following the path (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (2,1).\"\n    },\n    {\n      \"input\": {\n        \"board\": [\n          [\n            \"A\",\n            \"B\",\n            \"C\",\n            \"E\"\n          ],\n          [\n            \"S\",\n            \"F\",\n            \"C\",\n            \"S\"\n          ],\n          [\n            \"A\",\n            \"D\",\n            \"E\",\n            \"E\"\n          ]\n        ],\n        \"word\": \"SEE\"\n      },\n      \"output\": true,\n      \"explanation\": \"The word 'SEE' can be constructed by following the path (2,2) -> (2,1) -> (1,1).\"\n    },\n    {\n      \"input\": {\n        \"board\": [\n          [\n            \"A\",\n            \"B\",\n            \"C\",\n            \"E\"\n          ],\n          [\n            \"S\",\n            \"F\",\n            \"C\",\n            \"S\"\n          ],\n          [\n            \"A\",\n            \"D\",\n            \"E\",\n            \"E\"\n          ]\n        ],\n        \"word\": \"ABCB\"\n      },\n      \"output\": false,\n      \"explanation\": \"The word 'ABCB' cannot be constructed because the cell (0,1) cannot be reused.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_dimensions\": \"1 <= m, n <= 6\",\n    \"word_length\": \"1 <= word.length <= 15\",\n    \"valid_characters\": \"board and word consist only of English letters.\"\n  },\n  \"follow_up\": \"Can you adapt your solution to handle larger grids efficiently by using advanced pruning techniques or iterative deepening?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Write a function to convert a number into its English words representation."}, {"role": "assistant", "content": "{\n  \"description\": \"Convert a non-negative integer `num` into its English words representation. The function should handle numbers in the range `[0, 2^31 - 1]`.\",\n  \"objective\": \"Design an efficient algorithm to convert integers into English words by breaking the number into manageable chunks (units, thousands, millions, etc.), using recursion or iteration to construct the words.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the number needs to be split into groups (e.g., hundreds, thousands, millions) and each group converted to words using predefined mappings.\",\n    \"Step 2 - Group Handling\": \"Divide the number into groups of three digits (e.g., units, thousands, millions) starting from the least significant digits. Process each group individually.\",\n    \"Step 3 - Mapping Numbers to Words\": \"Create mappings for numbers (1-19, multiples of 10, powers of 10 like 'hundred', 'thousand', 'million'). Use recursion or iteration to build the English representation for each group.\",\n    \"Step 4 - Handle Special Cases\": \"Handle edge cases like `0` (output is 'Zero') and large numbers at the edge of the range (`2^31 - 1`). Ensure proper spacing and formatting between groups.\",\n    \"Step 5 - Output\": \"Combine the processed groups to return the full English representation of the number.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"num\": 123\n      },\n      \"output\": \"One Hundred Twenty Three\",\n      \"explanation\": \"123 is split into groups, with the representation built as 'One Hundred' + 'Twenty Three'.\"\n    },\n    {\n      \"input\": {\n        \"num\": 12345\n      },\n      \"output\": \"Twelve Thousand Three Hundred Forty Five\",\n      \"explanation\": \"12 is 'Twelve Thousand' and 345 is 'Three Hundred Forty Five'.\"\n    },\n    {\n      \"input\": {\n        \"num\": 1234567\n      },\n      \"output\": \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\",\n      \"explanation\": \"The number is split into 'One Million', 'Two Hundred Thirty Four Thousand', and 'Five Hundred Sixty Seven'.\"\n    }\n  ],\n  \"constraints\": {\n    \"number_range\": \"0 <= num <= 2^31 - 1\",\n    \"output_format\": \"The words should be properly spaced and capitalized, and there should be no trailing or extra spaces.\"\n  },\n  \"follow_up\": \"Can you optimize the solution for very large numbers by minimizing repeated operations and ensuring readability of the code?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the longest chain of pairs where `b < c`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of pairs, find the length of the longest chain that can be formed where each pair follows the condition `b < c`.\",\n  \"objective\": \"Efficiently determine the maximum length of a chain of pairs using a greedy algorithm.\",\n  \"meta_prompt\": {\n    \"Step 1 - Sort Pairs\": \"Sort the array of pairs based on the second element in ascending order.\",\n    \"Step 2 - Initialize Variables\": \"Create a variable `curr` to track the end of the current chain, initializing it to a very small value, and a counter `ans` to store the length of the chain, initializing it to 0.\",\n    \"Step 3 - Iterate Over Pairs\": \"Traverse through the sorted pairs. For each pair, check if the start of the current pair is greater than `curr`.\",\n    \"Step 4 - Update Chain and Count\": \"If the condition is met, increment `ans` by 1 and update `curr` to the second element of the current pair.\",\n    \"Step 5 - Return Result\": \"After iterating through all pairs, return `ans` as the length of the longest chain.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"pairs\": [\n          [\n            1,\n            2\n          ],\n          [\n            2,\n            3\n          ],\n          [\n            3,\n            4\n          ]\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The longest chain is [1, 2] -> [3, 4].\"\n    },\n    {\n      \"input\": {\n        \"pairs\": [\n          [\n            1,\n            2\n          ],\n          [\n            7,\n            8\n          ],\n          [\n            4,\n            5\n          ]\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The longest chain is [1, 2] -> [4, 5] -> [7, 8].\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= n <= 1000\",\n    \"value_range\": \"-1000 <= lefti < righti <= 1000\"\n  },\n  \"follow_up\": \"Analyze the time complexity of this greedy approach and compare it to a dynamic programming approach for the same problem.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum number of operations to convert one string to another."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two strings `word1` and `word2`, determine the minimum number of operations (insert, delete, replace) required to convert `word1` into `word2`.\",\n  \"objective\": \"Design an efficient dynamic programming algorithm to compute the minimum edit distance between the two strings while adhering to the constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task requires minimizing the number of operations (insert, delete, replace) to transform `word1` into `word2`. This is a classic dynamic programming problem involving a 2D DP table.\",\n    \"Step 2 - Define DP State\": \"Let `dp[i][j]` represent the minimum edit distance to convert the first `i` characters of `word1` into the first `j` characters of `word2`.\",\n    \"Step 3 - Transition Formula\": \"Use the recurrence relation: `dp[i][j] = dp[i-1][j-1]` if `word1[i-1] == word2[j-1]`, else `dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])`, representing delete, insert, and replace operations.\",\n    \"Step 4 - Base Case\": \"Initialize `dp[i][0] = i` (delete all characters of `word1`) and `dp[0][j] = j` (insert all characters of `word2`).\",\n    \"Step 5 - Constraints Compliance\": \"Ensure the algorithm handles constraints efficiently for string lengths up to 500 while keeping time and space complexity manageable.\",\n    \"Step 6 - Optimization\": \"Consider space optimization by reducing the 2D DP table to a single row or two rows, depending on the current and previous states.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"word1\": \"horse\",\n        \"word2\": \"ros\"\n      },\n      \"output\": 3,\n      \"explanation\": \"Transform 'horse' to 'ros' using 3 operations: replace 'h' with 'r', delete 'r', delete 'e'.\"\n    },\n    {\n      \"input\": {\n        \"word1\": \"intention\",\n        \"word2\": \"execution\"\n      },\n      \"output\": 5,\n      \"explanation\": \"Transform 'intention' to 'execution' using 5 operations: remove 't', replace 'i' with 'e', replace 'n' with 'x', replace 'n' with 'c', insert 'u'.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"0 <= word1.length, word2.length <= 500\",\n    \"character_set\": \"Strings consist of lowercase English letters only.\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm to handle real-time string comparisons for larger datasets or extend it for weighted edit distances?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the least amount of money needed to hire k workers from the given list of workers where each worker has a quality and a wage expectation."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given two integer arrays: quality and wage, where quality[i] represents the quality of the ith worker and wage[i] represents the minimum wage expectation for the ith worker. You need to hire exactly k workers. The pay for each worker in the group should be proportional to their quality compared to the other workers, and each worker should be paid at least their minimum wage expectation. Your task is to return the least amount of money needed to form a paid group of k workers that satisfies these conditions. The answer should be within 10^-5 of the actual value.\",\n  \"objective\": \"Design an efficient algorithm to find the least amount of money required to hire a group of k workers where each worker\\u2019s pay is proportional to their quality compared to others in the group, while also meeting their minimum wage expectations.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We are given two arrays: quality, which represents the quality of each worker, and wage, which represents the minimum wage expectation of each worker. We need to hire exactly k workers and pay them according to specific rules, ensuring the least total cost while maintaining fairness in their pay.\",\n    \"Step 2 - Initial Approach\": \"Start by considering the wages of the workers relative to their quality. We can calculate the pay for each worker by scaling their quality proportionally, but we need to ensure that each worker\\u2019s pay is at least their minimum wage expectation. A brute-force solution could involve checking all possible combinations, but this would not be efficient.\",\n    \"Step 3 - Optimal Approach\": \"We can try sorting the workers based on the ratio of their wage to quality (wage[i] / quality[i]). Then, for each possible starting worker, calculate the total cost to hire a group of k workers. The goal is to find the smallest total cost possible while satisfying all constraints.\",\n    \"Step 4 - Output Format\": \"Return the least amount of money required to hire the group, formatted to five decimal places. Ensure that the output handles edge cases like when the number of workers is very small or the wage-to-quality ratio varies significantly.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Aim for an optimal solution with time complexity less than O(n^2) to handle the input size efficiently. Consider edge cases such as having workers with very high or low wage expectations and very small or large quality values.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"quality\": [\n          10,\n          20,\n          5\n        ],\n        \"wage\": [\n          70,\n          50,\n          30\n        ],\n        \"k\": 2\n      },\n      \"output\": 105.0,\n      \"explanation\": \"We pay 70 to the 0th worker and 35 to the 2nd worker.\"\n    },\n    {\n      \"input\": {\n        \"quality\": [\n          3,\n          1,\n          10,\n          10,\n          1\n        ],\n        \"wage\": [\n          4,\n          8,\n          2,\n          2,\n          7\n        ],\n        \"k\": 3\n      },\n      \"output\": 30.66667,\n      \"explanation\": \"We pay 4 to the 0th worker, 13.33333 to the 2nd and 3rd workers.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_length\": \"n == quality.length == wage.length\",\n    \"k_range\": \"1 <= k <= n <= 10^4\",\n    \"value_range\": \"1 <= quality[i], wage[i] <= 10^4\"\n  },\n  \"follow_up\": \"Can you come up with an algorithm that achieves optimal time complexity (better than O(n^2)) by sorting and using a priority queue or a similar data structure?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count the arithmetic subsequences in an array."}, {"role": "assistant", "content": "{\n  \"title\": \"Number of Arithmetic Subsequences\",\n  \"description\": \"You are given an integer array `nums`. Return the number of all **arithmetic subsequences** in `nums`.\\n\\nA sequence is considered arithmetic if it:\\n- Has **at least three elements**.\\n- Has a constant difference between any two consecutive elements.\\n\\nFor example:\\n- `[1, 3, 5, 7]` is arithmetic with a difference of 2.\\n- `[7, 7, 7]` is arithmetic with a difference of 0.\\n- `[3, -1, -5, -9]` is arithmetic with a difference of -4.\\n\\nA **subsequence** can be formed by removing some elements of the array (possibly none) while keeping the order of the remaining elements unchanged.\\n\\nThe test cases are designed to ensure the result fits in a **32-bit integer**.\",\n  \"input\": {\n    \"nums\": {\n      \"type\": \"array\",\n      \"description\": \"An array of integers representing the input sequence.\",\n      \"constraints\": {\n        \"length\": \"[1, 1000]\",\n        \"values\": \"[-2^31, 2^31 - 1]\"\n      }\n    }\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The total number of arithmetic subsequences in `nums`.\",\n    \"constraints\": {\n      \"range\": \"[0, 2^31 - 1]\"\n    }\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          4,\n          6,\n          8,\n          10\n        ]\n      },\n      \"output\": 7,\n      \"explanation\": \"The arithmetic subsequences are:\\n- [2, 4, 6]\\n- [4, 6, 8]\\n- [6, 8, 10]\\n- [2, 4, 6, 8]\\n- [4, 6, 8, 10]\\n- [2, 4, 6, 8, 10]\\n- [2, 6, 10]\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          7,\n          7,\n          7,\n          7,\n          7\n        ]\n      },\n      \"output\": 16,\n      \"explanation\": \"Any subsequence of this array is arithmetic since the difference is always 0.\"\n    }\n  ],\n  \"hints\": [\n    \"Use a dynamic programming approach to count arithmetic subsequences efficiently.\",\n    \"Consider maintaining a dictionary of differences for each index to store how many subsequences end at that index with a given difference.\",\n    \"Iterate through each pair of indices to update the count of subsequences with the given difference.\"\n  ],\n  \"constraints\": {\n    \"timeComplexity\": \"O(n^2)\",\n    \"spaceComplexity\": \"O(n^2)\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count subarrays in an array that sum up to a given number."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `nums` of integers and an integer `k`, find the total number of contiguous subarrays that sum up to `k` using a hashmap approach for efficient lookups.\",\n  \"objective\": \"Implement an algorithm that leverages a cumulative sum with a hashmap to count the occurrences of subarrays with sum `k` in O(n) time.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize HashMap and Variables\": \"Create a hashmap `prefixSumCount` to store cumulative sums as keys and their occurrence counts as values. Initialize `prefixSumCount` with `{0: 1}` to handle cases where a subarray itself equals `k`. Initialize a variable `count` to track the total number of subarrays with sum `k`, and a variable `currentSum` to store the cumulative sum as you iterate through `nums`.\",\n    \"Step 2 - Traverse Array and Track Cumulative Sum\": \"Iterate over each element in `nums`. At each index, add the element to `currentSum` to update the cumulative sum up to that point.\",\n    \"Step 3 - Check for Previous Sum that Forms k\": \"Check if `currentSum - k` exists in `prefixSumCount`. If it does, add `prefixSumCount[currentSum - k]` to `count` since it represents the number of subarrays that sum to `k` up to the current index.\",\n    \"Step 4 - Update HashMap\": \"Update `prefixSumCount` by incrementing the count of `currentSum`. If `currentSum` isn\\u2019t in the hashmap, add it with a count of 1.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution handles edge cases, such as arrays with a single element or where all elements are negative, by confirming constraints `1 <= nums.length <= 2 * 10^4`, `-1000 <= nums[i] <= 1000`, and `-10^7 <= k <= 10^7`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          1,\n          1\n        ],\n        \"k\": 2\n      },\n      \"output\": 2,\n      \"explanation\": \"The subarrays [1,1] at indices (0,1) and (1,2) both sum to 2.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3\n        ],\n        \"k\": 3\n      },\n      \"output\": 2,\n      \"explanation\": \"The subarrays [1,2] and [3] sum to 3.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 2 * 10^4\",\n    \"nums_values\": \"-1000 <= nums[i] <= 1000\",\n    \"k_range\": \"-10^7 <= k <= 10^7\"\n  },\n  \"follow_up\": \"Consider optimizing memory usage by removing entries in `prefixSumCount` that are no longer necessary after their use, especially for large input sizes. Explore an alternate solution with different data structures if `nums` contains very large values.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given a linked list and an integer array. Find the connected components in the array."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a linked list with unique integer values and an integer array `nums` which is a subset of the linked list values. Your task is to find the number of connected components in `nums`, where two values are connected if they appear consecutively in the linked list.\",\n  \"objective\": \"Write a function that counts the number of connected components in `nums` based on their consecutive appearance in the given linked list.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Given a linked list with unique integer values and a subset array `nums`, count the number of connected components in `nums` where each component consists of consecutive values from the linked list.\",\n    \"Step 2 - Constraints\": \"The linked list contains `n` nodes, and `nums` is a subset of these values. We need to identify connected components, where values are consecutive in the linked list. The values of `nums` are unique, and the size of `nums` can range from 1 to `n`.\",\n    \"Step 3 - Approach\": \"First, create a set of values from `nums` for faster lookup. Then, traverse the linked list to check if consecutive nodes appear in `nums`. Whenever two consecutive values from `nums` appear in the list, they form part of the same component.\",\n    \"Step 4 - Implementation Details\": \"We can traverse the linked list once, maintaining a flag to track whether we are currently inside a connected component. If we encounter a value in `nums` that is not connected to the previous value, we increment the component count.\",\n    \"Step 5 - Return the Result\": \"Return the total number of connected components after traversing the entire linked list.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          0,\n          1,\n          2,\n          3\n        ],\n        \"nums\": [\n          0,\n          1,\n          3\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The connected components are: [0, 1] and [3], so the result is 2.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          0,\n          1,\n          2,\n          3,\n          4\n        ],\n        \"nums\": [\n          0,\n          3,\n          1,\n          4\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The connected components are: [0, 1] and [3, 4], so the result is 2.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 10^4\",\n    \"nums_length_range\": \"1 <= nums.length <= n\",\n    \"nums_unique_values\": \"All values in `nums` are unique\",\n    \"node_val_range\": \"0 <= Node.val < n\"\n  },\n  \"follow_up\": \"Can you optimize the solution for large linked lists, considering the time complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the lexicographically smallest string from leaf to root in a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary tree where each node has a value in the range `[0, 25]` representing the letters `'a'` to `'z'`, return the **lexicographically smallest** string that starts at a leaf of this tree and ends at the root. A leaf of a node is a node that has no children. Any shorter prefix of a string is **lexicographically smaller**. For example, `'ab'` is lexicographically smaller than `'aba'`.\",\n  \"objective\": \"Design an efficient algorithm to find the lexicographically smallest string from leaf to root in the given binary tree.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the requirements: Find the lexicographically smallest string formed by paths from leaf nodes to the root in a binary tree where node values represent letters.\",\n    \"Step 2 - Initial Approach\": \"Consider using Depth-First Search (DFS) to explore all paths from leaves to the root. Track the current path and update the smallest string found so far.\",\n    \"Step 3 - DFS Algorithm\": \"Implement DFS to traverse the tree. For each node, add its character to the current path and recursively explore its children. If a leaf node is reached, compare the current path with the smallest string found so far.\",\n    \"Step 4 - String Construction\": \"Construct strings by appending characters from the current node to the root. Ensure paths are compared lexicographically to find the smallest string.\",\n    \"Step 5 - Output Format\": \"Ensure the function returns the lexicographically smallest string formed from any leaf to the root.\",\n    \"Step 6 - Code Efficiency and Edge Cases\": \"Focus on achieving an efficient traversal with time complexity of O(n), where n is the number of nodes. Handle edge cases such as a single-node tree or all node values being the same.\",\n    \"Final Check - Constraints Verification\": \"Verify the solution operates within the constraints: The number of nodes is in the range [1, 8500], and 0 <= Node.val <= 25. Ensure the algorithm is robust and handles large inputs efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          0,\n          1,\n          2,\n          3,\n          4,\n          3,\n          4\n        ]\n      },\n      \"output\": \"dba\",\n      \"explanation\": \"The lexicographically smallest string from leaf to root is 'dba'.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          25,\n          1,\n          3,\n          1,\n          3,\n          0,\n          2\n        ]\n      },\n      \"output\": \"adz\",\n      \"explanation\": \"The lexicographically smallest string from leaf to root is 'adz'.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          2,\n          2,\n          1,\n          null,\n          1,\n          0,\n          null,\n          0\n        ]\n      },\n      \"output\": \"abc\",\n      \"explanation\": \"The lexicographically smallest string from leaf to root is 'abc'.\"\n    }\n  ],\n  \"constraints\": {\n    \"number_of_nodes\": \"The number of nodes in the tree is in the range [1, 8500]\",\n    \"node_value_range\": \"0 <= Node.val <= 25\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle even larger trees efficiently while maintaining the constraints and ensuring the correctness of the lexicographical order?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given a string `s` with two coordinates joined together. Split it into valid coordinates."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a string `s` which is a concatenation of two 2-dimensional coordinates that have been stripped of commas, decimal points, and spaces. Your task is to return a list of possible valid original coordinates by reintroducing the missing separators and decimal points.\",\n  \"objective\": \"Write a function that reconstructs all possible valid pairs of coordinates from the given string `s`, ensuring that the result adheres to the specified rules. The coordinates must not have any extraneous zeroes or invalid decimal places.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Given a string `s`, which is the concatenation of two 2-dimensional coordinates, reconstruct all valid possibilities for how the original coordinates could have been formatted.\",\n    \"Step 2 - Constraints and Validations\": \"Consider the constraints that prevent leading zeroes and ensure there is at least one digit before any decimal point. Exclude invalid coordinate formats such as '00', '0.0', '1.0', etc.\",\n    \"Step 3 - Generate Possible Coordinates\": \"Loop through every possible way to split the string `s` into two parts, one representing the x-coordinate and the other representing the y-coordinate. Check all combinations of the split parts to ensure they form valid coordinates.\",\n    \"Step 4 - Implementing Validity Checks\": \"For each generated pair of coordinates, check if they are valid according to the given rules. For example, check if the x-coordinate has leading zeroes or a decimal point at an invalid position, and do the same for the y-coordinate.\",\n    \"Step 5 - Return Results\": \"Return the valid coordinate pairs in any order, formatted correctly with one space between the x and y values.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"(123)\"\n      },\n      \"output\": [\n        \"(1, 2.3)\",\n        \"(1, 23)\",\n        \"(1.2, 3)\",\n        \"(12, 3)\"\n      ],\n      \"explanation\": \"The string (123) can be split in several ways to form valid coordinates.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"(0123)\"\n      },\n      \"output\": [\n        \"(0, 1.23)\",\n        \"(0, 12.3)\",\n        \"(0, 123)\",\n        \"(0.1, 2.3)\",\n        \"(0.1, 23)\",\n        \"(0.12, 3)\"\n      ],\n      \"explanation\": \"The string (0123) has different valid splits, and the output coordinates must follow the constraints.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"(00011)\"\n      },\n      \"output\": [\n        \"(0, 0.011)\",\n        \"(0.001, 1)\"\n      ],\n      \"explanation\": \"Only two valid splits are possible from (00011).\"\n    }\n  ],\n  \"constraints\": {\n    \"s_length\": \"4 <= s.length <= 12\",\n    \"s_first_last_char\": \"s[0] == '(' and s[s.length - 1] == ')'\",\n    \"s_digits\": \"The rest of s are digits.\"\n  },\n  \"follow_up\": \"Can the algorithm be optimized further for larger strings or more complex cases?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Perform a preorder traversal of a tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of an n-ary tree, implement the preorder traversal of the tree nodes' values. Preorder traversal involves visiting the root first, followed by traversing each child subtree recursively.\",\n  \"objective\": \"Perform a preorder traversal of an n-ary tree using both recursive and iterative methods, ensuring correct order of values.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand Tree Structure\": \"Each node in the n-ary tree has a value and a list of child nodes. The tree is serialized in level-order format, with 'null' separating each node's children.\",\n    \"Step 2 - Recursive Preorder Traversal\": \"Implement a helper function that recursively visits the root and then each child node in preorder. Append the visited nodes' values to a result list.\",\n    \"Step 3 - Iterative Preorder Traversal\": \"Use a stack initialized with the root node. At each iteration, pop the top node, add its value to the result, and push its children onto the stack in reverse order to ensure left-to-right traversal.\",\n    \"Step 4 - Output Results\": \"Return the preorder traversal values as a list.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          null,\n          3,\n          2,\n          4,\n          null,\n          5,\n          6\n        ]\n      },\n      \"output\": [\n        1,\n        3,\n        5,\n        6,\n        2,\n        4\n      ],\n      \"explanation\": \"The root node (1) is visited first, followed by its children (3, 2, 4) in left-to-right order. For node 3, its children (5, 6) are visited before moving to the next sibling nodes.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          null,\n          2,\n          3,\n          4,\n          5,\n          null,\n          null,\n          6,\n          7,\n          null,\n          8,\n          null,\n          9,\n          10,\n          null,\n          null,\n          11,\n          null,\n          12,\n          null,\n          13,\n          null,\n          null,\n          14\n        ]\n      },\n      \"output\": [\n        1,\n        2,\n        3,\n        6,\n        7,\n        11,\n        14,\n        4,\n        8,\n        12,\n        5,\n        9,\n        13,\n        10\n      ],\n      \"explanation\": \"Preorder traversal visits nodes from root to leftmost child first, processing each child subtree recursively.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"The number of nodes in the tree is in the range [0, 10^4].\",\n    \"node_value_range\": \"0 <= Node.val <= 10^4\",\n    \"tree_height\": \"The height of the n-ary tree is less than or equal to 1000.\"\n  },\n  \"follow_up\": \"Optimize the iterative method to reduce memory usage by processing children in-place rather than storing them in a stack.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the next greater element for numbers in nums1 from nums2."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two distinct integer arrays `nums1` and `nums2` where `nums1` is a subset of `nums2`, find the **next greater element** for each element in `nums1` as it appears in `nums2`. For an element `x` in `nums2`, the **next greater element** is the first element to its right in `nums2` that is greater than `x`. If there is no such element, return `-1`.\",\n  \"objective\": \"Design an efficient algorithm that identifies the next greater element for each value in `nums1` by leveraging the structure of `nums2`. Aim to achieve `O(nums1.length + nums2.length)` time complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that for each element in `nums1`, we need to locate its position in `nums2` and then find the next greater element in `nums2`. Use a stack to efficiently calculate next greater elements for all elements in `nums2`.\",\n    \"Step 2 - Precomputing Next Greater Elements\": \"Iterate over `nums2` from right to left, maintaining a stack of elements for which the next greater element hasn't been found. For each element, pop from the stack until the top of the stack is greater, or the stack is empty. Map the element to its next greater value.\",\n    \"Step 3 - Lookup for `nums1`\": \"Once the next greater elements for `nums2` are precomputed and stored in a map, look up each value in `nums1` and return the corresponding next greater element.\",\n    \"Step 4 - Edge Cases\": \"Handle edge cases where `nums1` or `nums2` contains only one element, or where all elements in `nums2` have no next greater elements.\",\n    \"Step 5 - Complexity Analysis\": \"Precomputing the next greater elements for `nums2` takes linear time `O(nums2.length)` using a stack, and looking up values for `nums1` is `O(nums1.length)`. Overall time complexity is `O(nums1.length + nums2.length)`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums1\": [\n          4,\n          1,\n          2\n        ],\n        \"nums2\": [\n          1,\n          3,\n          4,\n          2\n        ]\n      },\n      \"output\": [\n        -1,\n        3,\n        -1\n      ],\n      \"explanation\": \"For `4` in `nums1`, there is no next greater element in `nums2`. For `1`, the next greater element is `3`. For `2`, there is no next greater element.\"\n    },\n    {\n      \"input\": {\n        \"nums1\": [\n          2,\n          4\n        ],\n        \"nums2\": [\n          1,\n          2,\n          3,\n          4\n        ]\n      },\n      \"output\": [\n        3,\n        -1\n      ],\n      \"explanation\": \"For `2` in `nums1`, the next greater element in `nums2` is `3`. For `4`, there is no next greater element.\"\n    },\n    {\n      \"input\": {\n        \"nums1\": [\n          5\n        ],\n        \"nums2\": [\n          5,\n          6,\n          7\n        ]\n      },\n      \"output\": [\n        6\n      ],\n      \"explanation\": \"The next greater element for `5` is `6` in `nums2`.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums1_length\": \"1 <= nums1.length <= 1000\",\n    \"nums2_length\": \"nums1.length <= nums2.length <= 1000\",\n    \"nums_values_range\": \"0 <= nums1[i], nums2[i] <= 10^4\",\n    \"uniqueness\": \"All elements in `nums1` and `nums2` are unique. Elements in `nums1` are guaranteed to appear in `nums2`.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"Can you explain how the stack-based approach ensures an `O(n)` complexity for finding next greater elements?\",\n    \"question_2\": \"How would you modify the solution to handle cases where elements in `nums1` or `nums2` can repeat?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Flatten a nested list of numbers."}, {"role": "assistant", "content": "{\n  \"description\": \"Implement a class `NestedIterator` that flattens a nested list of integers. The class should support retrieving the next integer in the flattened list and checking if more integers are available.\",\n  \"objective\": \"Design the class such that `next` and `hasNext` work efficiently for deeply nested lists. Utilize an iterative or stack-based approach to handle nested structures without unnecessary recursion.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialization\": \"Initialize the iterator with a stack that holds the nested list. Flatten elements iteratively as needed.\",\n    \"Step 2 - next() Implementation\": \"Return the next integer in the flattened list. Ensure that only integers are returned, processing nested lists as needed.\",\n    \"Step 3 - hasNext() Implementation\": \"Return `true` if there are more integers to process. Process nested elements on demand to optimize performance.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nestedList\": [\n          [\n            1,\n            1\n          ],\n          2,\n          [\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": [\n        1,\n        1,\n        2,\n        1,\n        1\n      ],\n      \"explanation\": \"The iterator flattens the nested list into [1, 1, 2, 1, 1] and returns integers in order.\"\n    },\n    {\n      \"input\": {\n        \"nestedList\": [\n          1,\n          [\n            4,\n            [\n              6\n            ]\n          ]\n        ]\n      },\n      \"output\": [\n        1,\n        4,\n        6\n      ],\n      \"explanation\": \"The iterator flattens the nested list into [1, 4, 6] and returns integers in order.\"\n    }\n  ],\n  \"constraints\": {\n    \"nestedList_length\": \"1 <= nestedList.length <= 500\",\n    \"integer_range\": \"[-10^6, 10^6]\"\n  },\n  \"follow_up\": \"Can you optimize memory usage by processing the nested list lazily instead of fully flattening it upfront?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given two images represented as binary matrices of size `n x n`. You need to translate one image and count how many positions overlap with another image."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given two binary, square matrices `img1` and `img2` of size `n x n`. You can translate one of the images in any direction (left, right, up, or down) and calculate the overlap between the two images after translation. The overlap is defined as the number of positions where both images have a `1` at the same index after the translation. The goal is to return the largest possible overlap after translating one image over the other. Translation does not involve rotation, and any `1` bits that move outside the matrix borders are erased.\",\n  \"objective\": \"Design an algorithm to compute the largest overlap after translating `img1` over `img2` and count the number of positions with `1` in both images.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"You are given two matrices of size `n x n`. Both matrices only contain `0`s and `1`s, and you need to calculate the maximum overlap after translating `img1` on top of `img2` without any rotation. The overlap is determined by the number of positions where both matrices have `1` at the same index after translation.\",\n    \"Step 2 - Approach Design\": \"To solve this, you need to consider every possible translation of `img1` over `img2`. For each translation, count the positions where both matrices have a `1` at the same index. You can slide `img1` horizontally and vertically and calculate the overlap in each case.\",\n    \"Step 3 - Efficient Strategy\": \"Since `n` is small (up to 30), a brute force solution that tries every possible translation is feasible. You can slide the matrices within the borders and compute the overlap for each shift.\",\n    \"Step 4 - Algorithm Details\": \"For each possible shift of `img1` over `img2`, calculate the number of overlapping `1`s by checking every position where both matrices have `1` after the translation. Keep track of the maximum overlap encountered during the process.\",\n    \"Step 5 - Output\": \"Return the largest overlap calculated from all possible translations.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution works efficiently within the constraints: `n` can be as large as 30.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"img1\": [\n          [\n            1,\n            1,\n            0\n          ],\n          [\n            0,\n            1,\n            0\n          ],\n          [\n            0,\n            1,\n            0\n          ]\n        ],\n        \"img2\": [\n          [\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            1,\n            1\n          ],\n          [\n            0,\n            0,\n            1\n          ]\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"By translating `img1` right by 1 unit and down by 1 unit, we get the largest overlap of 3.\"\n    },\n    {\n      \"input\": {\n        \"img1\": [\n          [\n            1\n          ]\n        ],\n        \"img2\": [\n          [\n            1\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The only possible overlap is the single `1` in both matrices, resulting in an overlap of 1.\"\n    },\n    {\n      \"input\": {\n        \"img1\": [\n          [\n            0\n          ]\n        ],\n        \"img2\": [\n          [\n            0\n          ]\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"Both matrices contain only `0`s, so there is no overlap.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size\": \"1 <= n <= 30\",\n    \"binary_matrix_values\": \"Each element of `img1` and `img2` is either `0` or `1`.\"\n  },\n  \"follow_up\": \"Can you optimize the solution for larger matrices if needed, or propose an approach to avoid brute-forcing every possible translation?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find how many subsequences of one string match another string."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two strings `s` and `t`, return the number of distinct subsequences of `s` that are equal to `t`. A subsequence is a sequence derived from another string by deleting some or no elements without changing the order of the remaining elements.\",\n  \"objective\": \"Design an efficient algorithm to compute the number of distinct subsequences of `s` that match `t`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task requires counting subsequences of `s` that equal `t`. Use a dynamic programming approach to solve the problem efficiently.\",\n    \"Step 2 - DP Table Definition\": \"Define `dp[i][j]` as the number of distinct subsequences of the first `i` characters of `s` that match the first `j` characters of `t`.\",\n    \"Step 3 - Base Case and Transitions\": \"Initialize `dp[i][0] = 1` (an empty `t` is a subsequence of any prefix of `s`). Update `dp[i][j]` based on whether the characters `s[i-1]` and `t[j-1]` match.\",\n    \"Step 4 - Optimize Space\": \"Consider using a rolling array to optimize space complexity to O(n), where `n` is the length of `t`.\",\n    \"Step 5 - Handle Edge Cases\": \"Handle cases such as `t` being empty, `s` being empty, or both strings having no matching characters.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"rabbbit\",\n        \"t\": \"rabbit\"\n      },\n      \"output\": 3,\n      \"explanation\": \"There are 3 ways to form 'rabbit' from 'rabbbit'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"babgbag\",\n        \"t\": \"bag\"\n      },\n      \"output\": 5,\n      \"explanation\": \"There are 5 ways to form 'bag' from 'babgbag'.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length, t.length <= 1000\",\n    \"character_set\": \"s and t consist of English letters only\",\n    \"result_bound\": \"The answer fits in a 32-bit signed integer\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum cost to travel on given days using 1-day, 7-day, and 30-day passes."}, {"role": "assistant", "content": "{\n  \"description\": \"You have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array `days`. Each day is an integer from `1` to `365`. Train tickets are sold in three different ways: a 1-day pass is sold for `costs[0]` dollars, a 7-day pass is sold for `costs[1]` dollars, and a 30-day pass is sold for `costs[2]` dollars. The passes allow that many days of consecutive travel. For example, if we get a 7-day pass on day `2`, then we can travel for 7 days: `2`, `3`, `4`, `5`, `6`, `7`, and `8`. Return the minimum number of dollars you need to travel every day in the given list of days.\",\n  \"objective\": \"Design an efficient algorithm to determine the minimum cost required to travel on all the given days, choosing between 1-day, 7-day, and 30-day passes optimally.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the input requirements: The `days` array contains the days of travel and the `costs` array specifies the price for each type of pass. The goal is to minimize the travel cost.\",\n    \"Step 2 - Initial Approach\": \"Consider using dynamic programming to keep track of the minimum cost for each day up to the highest day in `days`. Initialize a dp array where dp[i] represents the minimum cost to travel up to day `i`.\",\n    \"Step 3 - Dynamic Programming Solution\": \"Iterate through each day in `days`, and for each day, update the dp array by considering the costs for a 1-day, 7-day, and 30-day pass. Use a sliding window approach to update the dp array and ensure that only valid days are considered for each pass type.\",\n    \"Step 4 - Output Format\": \"Return the value at dp[365], which will contain the minimum cost to travel on all given days.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure the dynamic programming solution is efficient, ideally with a time complexity of O(n), where `n` is the number of days of travel. Handle edge cases such as when all travel days are consecutive or spaced far apart.\",\n    \"Final Check - Constraints Verification\": \"Verify the solution operates within the constraints: `1 <= days.length <= 365`, `1 <= days[i] <= 365`, `days` is in strictly increasing order, and `1 <= costs[i] <= 1000`. Ensure the algorithm is robust and handles large inputs efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"days\": [\n          1,\n          4,\n          6,\n          7,\n          8,\n          20\n        ],\n        \"costs\": [\n          2,\n          7,\n          15\n        ]\n      },\n      \"output\": 11,\n      \"explanation\": \"For example, here is one way to buy passes that lets you travel your travel plan: On day 1, you bought a 1-day pass for $2, which covered day 1. On day 3, you bought a 7-day pass for $7, which covered days 3, 4, ..., 9. On day 20, you bought a 1-day pass for $2, which covered day 20. In total, you spent $11 and covered all the days of your travel.\"\n    },\n    {\n      \"input\": {\n        \"days\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n          9,\n          10,\n          30,\n          31\n        ],\n        \"costs\": [\n          2,\n          7,\n          15\n        ]\n      },\n      \"output\": 17,\n      \"explanation\": \"For example, here is one way to buy passes that lets you travel your travel plan: On day 1, you bought a 30-day pass for $15 which covered days 1, 2, ..., 30. On day 31, you bought a 1-day pass for $2 which covered day 31. In total, you spent $17 and covered all the days of your travel.\"\n    }\n  ],\n  \"constraints\": {\n    \"days_length\": \"1 <= days.length <= 365\",\n    \"days_range\": \"1 <= days[i] <= 365\",\n    \"costs_length\": \"costs.length == 3\",\n    \"costs_range\": \"1 <= costs[i] <= 1000\",\n    \"strictly_increasing_days\": \"days is in strictly increasing order\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm further to reduce space complexity while maintaining efficient time complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create a deque with fixed size and support adding, removing, and accessing elements."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a circular double-ended queue (deque) with fixed maximum size and implement standard operations for insertion, deletion, and retrieval of elements.\",\n  \"objective\": \"Efficiently manage a circular deque using a fixed-size array or linked list, ensuring constant time operations for front and rear manipulations.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Deque\": \"Set up a circular deque with a fixed maximum size `k`. Track the front and rear pointers along with the current size.\",\n    \"Step 2 - Insert Front\": \"Add an element at the front of the deque. Update the front pointer and size. Ensure the deque is not full before inserting.\",\n    \"Step 3 - Insert Rear\": \"Add an element at the rear of the deque. Update the rear pointer and size. Ensure the deque is not full before inserting.\",\n    \"Step 4 - Delete Front\": \"Remove an element from the front of the deque. Update the front pointer and size. Ensure the deque is not empty before deleting.\",\n    \"Step 5 - Delete Rear\": \"Remove an element from the rear of the deque. Update the rear pointer and size. Ensure the deque is not empty before deleting.\",\n    \"Step 6 - Retrieve Front\": \"Return the element at the front of the deque without removing it. Return `-1` if the deque is empty.\",\n    \"Step 7 - Retrieve Rear\": \"Return the element at the rear of the deque without removing it. Return `-1` if the deque is empty.\",\n    \"Step 8 - Check Deque Status\": \"Implement methods to check if the deque is empty or full by comparing the size to its maximum capacity.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"operations\": [\n          \"MyCircularDeque\",\n          \"insertLast\",\n          \"insertLast\",\n          \"insertFront\",\n          \"insertFront\",\n          \"getRear\",\n          \"isFull\",\n          \"deleteLast\",\n          \"insertFront\",\n          \"getFront\"\n        ],\n        \"values\": [\n          [\n            3\n          ],\n          [\n            1\n          ],\n          [\n            2\n          ],\n          [\n            3\n          ],\n          [\n            4\n          ],\n          [],\n          [],\n          [],\n          [\n            4\n          ],\n          []\n        ]\n      },\n      \"output\": [\n        null,\n        true,\n        true,\n        true,\n        false,\n        2,\n        true,\n        true,\n        true,\n        4\n      ],\n      \"explanation\": \"Initialize a deque with size 3. Successfully insert elements at front and rear, check its status, and retrieve front and rear values.\"\n    },\n    {\n      \"input\": {\n        \"operations\": [\n          \"MyCircularDeque\",\n          \"insertFront\",\n          \"deleteLast\",\n          \"getFront\",\n          \"isEmpty\"\n        ],\n        \"values\": [\n          [\n            2\n          ],\n          [\n            1\n          ],\n          [],\n          [],\n          []\n        ]\n      },\n      \"output\": [\n        null,\n        true,\n        true,\n        -1,\n        true\n      ],\n      \"explanation\": \"Initialize a deque with size 2, insert an element at the front, delete it, and check the deque status.\"\n    }\n  ],\n  \"constraints\": {\n    \"max_size\": \"1 <= k <= 1000\",\n    \"value_range\": \"0 <= value <= 1000\",\n    \"calls_limit\": \"At most 2000 operations will be performed.\"\n  },\n  \"follow_up\": \"Discuss the differences between array-based and linked-list-based implementations of the circular deque in terms of memory usage and performance.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given an integer matrix `grid`, determine the least time `t` at which you can swim from the top-left to the bottom-right square."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `n x n` integer matrix `grid` where each value `grid[i][j]` represents the elevation at that point `(i, j)`, and water starts falling at time `t`, your task is to determine the least time `t` in which you can swim from the top-left square `(0, 0)` to the bottom-right square `(n - 1, n - 1)`. You can swim from one square to another if and only if the elevation of both squares is less than or equal to `t`, and the movement is allowed 4-directionally. You can swim infinite distances in zero time, but you must stay within the boundaries of the grid.\",\n  \"objective\": \"Determine the minimum time `t` at which you can reach the bottom-right corner of the matrix from the top-left corner, considering the elevations and the constraints on swimming.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The matrix represents a grid of elevations, and you need to find the least time `t` where you can move from the top-left to the bottom-right corner. At each time `t`, water depth increases, and you can only swim in squares that have elevations less than or equal to `t`.\",\n    \"Step 2 - Observations\": \"You can swim from one square to another if the elevation of both squares is within the allowed depth `t`, and you must remain within the boundaries of the grid. You are also able to move 4-directionally to adjacent squares.\",\n    \"Step 3 - Strategy\": \"The key observation here is that as the water depth increases, you can potentially swim to more squares. This is essentially a pathfinding problem where we need to find the earliest time `t` that allows for a successful path from the top-left corner to the bottom-right corner.\",\n    \"Step 4 - Approach\": \"Use a search algorithm like BFS or Dijkstra to simulate the water levels and check if a path exists from the top-left to the bottom-right for each time `t`. The goal is to find the minimum `t` for which such a path exists.\",\n    \"Step 5 - Constraints Consideration\": \"The constraints suggest that `n` can go up to 50, and the matrix values are unique and less than `n^2`. This should guide you towards choosing an efficient pathfinding algorithm, as the grid size allows for a solution that simulates increasing water depth over time.\",\n    \"Step 6 - Optimizing\": \"To optimize, you can perform a binary search on the possible values of `t` (from 0 to the largest elevation) and use a BFS or DFS to check if a path exists for each `t`. This will help minimize redundant calculations.\",\n    \"Final Check - Constraints\": \"Ensure that the solution works efficiently even for the upper limits of `n = 50`, considering the time complexity involved in pathfinding algorithms and the binary search method.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            0,\n            2\n          ],\n          [\n            1,\n            3\n          ]\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"At time 0, you cannot move because the adjacent squares have higher elevation. At time 3, you can swim anywhere inside the grid, reaching the bottom-right square.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            0,\n            1,\n            2,\n            3,\n            4\n          ],\n          [\n            24,\n            23,\n            22,\n            21,\n            5\n          ],\n          [\n            12,\n            13,\n            14,\n            15,\n            16\n          ],\n          [\n            11,\n            17,\n            18,\n            19,\n            20\n          ],\n          [\n            10,\n            9,\n            8,\n            7,\n            6\n          ]\n        ]\n      },\n      \"output\": 16,\n      \"explanation\": \"The minimum time required for the top-left and bottom-right squares to be connected is 16, after which a valid path exists.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 50\",\n    \"grid_value_range\": \"0 <= grid[i][j] < n^2\",\n    \"unique_values\": \"Each value in the grid is unique.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to find the least time `t` using a binary search on time and a BFS for pathfinding?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Place a bomb to kill the most enemies in a grid."}, {"role": "assistant", "content": "{\n  \"title\": \"Maximum Enemies Killed with One Bomb\",\n  \"description\": \"Given an `m x n` matrix `grid`, where each cell contains either a wall `'W'`, an enemy `'E'`, or is empty `'0'`, determine the maximum number of enemies that can be killed by placing one bomb in an empty cell. The bomb kills all enemies in the same row and column until it hits a wall.\",\n  \"input\": {\n    \"grid\": {\n      \"type\": \"2D array\",\n      \"description\": \"Matrix where each cell is `'W'`, `'E'`, or `'0'`.\",\n      \"constraints\": \"1 <= m, n <= 500\"\n    }\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The maximum number of enemies killed by placing a bomb in one cell.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            \"0\",\n            \"E\",\n            \"0\",\n            \"0\"\n          ],\n          [\n            \"E\",\n            \"0\",\n            \"W\",\n            \"E\"\n          ],\n          [\n            \"0\",\n            \"E\",\n            \"0\",\n            \"0\"\n          ]\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"Placing the bomb at grid[1][1] kills 3 enemies (grid[0][1], grid[1][0], grid[2][1]).\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            \"W\",\n            \"W\",\n            \"W\"\n          ],\n          [\n            \"0\",\n            \"0\",\n            \"0\"\n          ],\n          [\n            \"E\",\n            \"E\",\n            \"E\"\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"Placing the bomb at any cell in the middle row kills at most 1 enemy.\"\n    }\n  ],\n  \"hints\": [\n    \"Precompute the number of enemies in each row and column for all empty cells.\",\n    \"Use a caching approach to avoid redundant computation for walls.\",\n    \"Iterate through the grid only once for each row and column.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(m * n) time complexity by leveraging precomputation and caching for rows and columns.\",\n    \"constraints\": \"Avoid recalculating enemy counts for each empty cell to maintain efficiency.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find words that are made by joining smaller words from the list."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of unique strings `words`, identify all **concatenated words** from the array. A concatenated word is a string that can be formed entirely by concatenating two or more shorter strings from the array, which may be used multiple times.\",\n  \"objective\": \"Design an efficient algorithm to determine all concatenated words in the array, optimizing for cases with long arrays or words with many characters, while avoiding unnecessary computations.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand Input and Output\": \"The input is an array of strings `words` without duplicates. The output is a list of concatenated words from `words`. A concatenated word is formed entirely by combining two or more other words from the array.\",\n    \"Step 2 - Initial Solution\": \"Iterate through each word in `words` and check if it can be split into shorter words present in the array using dynamic programming. Use a set to quickly lookup other words.\",\n    \"Step 3 - Optimize with Efficient Lookups\": \"Store all words in a hash set for `O(1)` lookup. For each word, attempt to split it using a dynamic programming approach that tracks valid prefixes formed by shorter words.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider edge cases like words with no concatenations, arrays with only single-character words, or very long arrays where efficient computation is critical.\",\n    \"Step 5 - Verify Constraints\": \"Ensure the algorithm operates efficiently within the constraints: `1 <= words.length <= 10^4`, `1 <= words[i].length <= 30`, and `1 <= sum(words[i].length) <= 10^5`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"words\": [\n          \"cat\",\n          \"cats\",\n          \"catsdogcats\",\n          \"dog\",\n          \"dogcatsdog\",\n          \"hippopotamuses\",\n          \"rat\",\n          \"ratcatdogcat\"\n        ]\n      },\n      \"output\": [\n        \"catsdogcats\",\n        \"dogcatsdog\",\n        \"ratcatdogcat\"\n      ],\n      \"explanation\": \"The concatenated words are formed by combining shorter words like 'cats', 'dog', and 'rat' from the array.\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"cat\",\n          \"dog\",\n          \"catdog\"\n        ]\n      },\n      \"output\": [\n        \"catdog\"\n      ],\n      \"explanation\": \"The word 'catdog' is formed by concatenating 'cat' and 'dog'.\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"a\",\n          \"b\",\n          \"ab\",\n          \"abc\"\n        ]\n      },\n      \"output\": [\n        \"ab\"\n      ],\n      \"explanation\": \"The concatenated word 'ab' is formed by concatenating 'a' and 'b'.\"\n    }\n  ],\n  \"constraints\": {\n    \"words_length\": \"1 <= words.length <= 10^4\",\n    \"word_length\": \"1 <= words[i].length <= 30\",\n    \"unique_words\": \"All strings in `words` are unique.\",\n    \"total_characters\": \"1 <= sum(words[i].length) <= 10^5\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"Can you optimize the solution for cases with large arrays of short words?\",\n    \"question_2\": \"How would the solution change if words could appear multiple times in the array?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the uncommon words between two sentences."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given two sentences, s1 and s2, where each sentence is a string of lowercase words separated by single spaces. A word is considered 'uncommon' if it appears exactly once in one of the sentences and does not appear in the other sentence. Your task is to return a list of all such 'uncommon' words.\",\n  \"objective\": \"Design an algorithm that identifies and returns all the uncommon words between two sentences, s1 and s2. The solution should efficiently track word frequencies across both sentences and return the words that meet the uncommon condition.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Each sentence contains words separated by spaces. A word is uncommon if it appears exactly once in either sentence but not in both. Focus on counting the frequency of each word in both sentences.\",\n    \"Step 2 - Approach to Counting Words\": \"Use a hash map (or dictionary) to count the occurrences of each word in both sentences combined. Make sure to track the words that appear only once in each sentence and are not repeated in the other sentence.\",\n    \"Step 3 - Identifying Uncommon Words\": \"Iterate through the dictionary of word counts and identify words that are uncommon by the definition given (appear only once in one sentence and not at all in the other).\",\n    \"Step 4 - Return the Result\": \"Return the list of uncommon words. The order of the words does not matter, so any order is acceptable.\",\n    \"Final Check - Constraints Verification\": \"Ensure the solution works within the input constraints: s1 and s2 lengths between 1 and 200 characters, and all words in both sentences are lowercase letters separated by single spaces.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s1\": \"this apple is sweet\",\n        \"s2\": \"this apple is sour\"\n      },\n      \"output\": [\n        \"sweet\",\n        \"sour\"\n      ],\n      \"explanation\": \"The words 'sweet' and 'sour' are uncommon as they appear only in one of the two sentences.\"\n    },\n    {\n      \"input\": {\n        \"s1\": \"apple apple\",\n        \"s2\": \"banana\"\n      },\n      \"output\": [\n        \"banana\"\n      ],\n      \"explanation\": \"The word 'banana' is uncommon as it appears only in sentence s2.\"\n    }\n  ],\n  \"constraints\": {\n    \"sentence_length\": \"1 <= s1.length, s2.length <= 200\",\n    \"word_count\": \"All words in s1 and s2 are lowercase English letters and separated by a single space.\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm to handle edge cases like sentences with repeated words or sentences with no uncommon words?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "We pour champagne into a pyramid of glasses. After pouring `poured` cups, how full will a specific glass at position `query_glass` in row `query_row` be?"}, {"role": "assistant", "content": "{\n  \"description\": \"We stack glasses in a pyramid where each row has one more glass than the previous row. The topmost glass starts filling first, and any excess champagne pours equally into the adjacent glasses on the next row. Given the number of cups of champagne poured into the first glass, return how full a specific glass at row `i` and position `j` will be.\",\n  \"objective\": \"After pouring `poured` cups of champagne into the topmost glass, simulate the distribution of champagne down the pyramid and return how full the glass at position `query_glass` in row `query_row` is.\",\n  \"meta_prompt\": {\n    \"Step 1 - Pyramid Setup\": \"Imagine a pyramid with rows of glasses. The first row has one glass, the second row has two glasses, and so on up to 100 rows. Each glass holds one cup of champagne. When a glass is full, any excess liquid flows equally to the glasses below it on the left and right.\",\n    \"Step 2 - Champagne Overflow\": \"When the top glass overflows, its excess champagne is divided equally between the two glasses directly below it. The process continues, with any further overflow being divided equally among the two glasses directly below the overflowing glasses.\",\n    \"Step 3 - Simulation\": \"The goal is to simulate the champagne pouring process and calculate how full a specific glass will be after pouring `poured` cups of champagne.\",\n    \"Step 4 - Optimizing the Simulation\": \"Since the pyramid has a limited number of rows (100), it is feasible to simulate each pour and track the distribution of champagne in a 2D array or a list of lists, where each list represents a row of glasses.\",\n    \"Final Check - Constraints Handling\": \"Make sure to handle large numbers of poured cups (up to 1 billion) efficiently. Consider that glasses can only hold a finite amount of champagne, and any excess falls to the floor if it overflows the last row.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"poured\": 1,\n        \"query_row\": 1,\n        \"query_glass\": 1\n      },\n      \"output\": 0.0,\n      \"explanation\": \"With 1 cup poured, only the topmost glass is full. No excess liquid reaches row 1, so the glass at index (1, 1) remains empty.\"\n    },\n    {\n      \"input\": {\n        \"poured\": 2,\n        \"query_row\": 1,\n        \"query_glass\": 1\n      },\n      \"output\": 0.5,\n      \"explanation\": \"With 2 cups poured, the topmost glass is full and overflows, distributing one cup of excess equally between the two glasses in row 1. Therefore, glass (1, 1) has 0.5 cups of champagne.\"\n    },\n    {\n      \"input\": {\n        \"poured\": 100000009,\n        \"query_row\": 33,\n        \"query_glass\": 17\n      },\n      \"output\": 1.0,\n      \"explanation\": \"After pouring a large number of cups, the champagne reaches a point where the glass at (33, 17) is full.\"\n    }\n  ],\n  \"constraints\": {\n    \"poured_range\": \"0 <= poured <= 10^9\",\n    \"query_row_range\": \"0 <= query_row < 100\",\n    \"query_glass_range\": \"0 <= query_glass <= query_row\"\n  },\n  \"follow_up\": \"What would happen if the number of rows or glasses per row was increased? How would the algorithm change to handle larger pyramids efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Make a class to shuffle and reset an array."}, {"role": "assistant", "content": "{\n  \"title\": \"Random Shuffle Array\",\n  \"description\": \"Design a class to randomly shuffle an array such that all permutations are equally likely. The class should also support resetting the array to its original state.\",\n  \"objective\": \"Implement methods to shuffle and reset the array with equal probability of permutations for shuffling.\",\n  \"methods\": {\n    \"Solution\": {\n      \"description\": \"Initializes the object with an integer array `nums`.\",\n      \"parameters\": [\n        {\n          \"name\": \"nums\",\n          \"type\": \"array of integers\",\n          \"description\": \"The input array of unique integers.\"\n        }\n      ]\n    },\n    \"reset\": {\n      \"description\": \"Resets the array to its original configuration and returns it.\",\n      \"parameters\": [],\n      \"output\": {\n        \"type\": \"array of integers\",\n        \"description\": \"The original array.\"\n      }\n    },\n    \"shuffle\": {\n      \"description\": \"Returns a random permutation of the array.\",\n      \"parameters\": [],\n      \"output\": {\n        \"type\": \"array of integers\",\n        \"description\": \"A randomly shuffled version of the array.\"\n      }\n    }\n  },\n  \"examples\": [\n    {\n      \"input\": [\n        \"Solution\",\n        \"shuffle\",\n        \"reset\",\n        \"shuffle\"\n      ],\n      \"arguments\": [\n        [\n          [\n            1,\n            2,\n            3\n          ]\n        ],\n        [],\n        [],\n        []\n      ],\n      \"output\": [\n        null,\n        [\n          3,\n          1,\n          2\n        ],\n        [\n          1,\n          2,\n          3\n        ],\n        [\n          1,\n          3,\n          2\n        ]\n      ],\n      \"explanation\": [\n        \"The `shuffle` method generates a random permutation of the array.\",\n        \"`reset` restores the array to its original state.\"\n      ]\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 50\",\n    \"element_range\": \"-10^6 <= nums[i] <= 10^6\",\n    \"uniqueness\": \"All elements in `nums` are unique.\",\n    \"method_calls\": \"At most 10^4 calls to `reset` and `shuffle`.\"\n  },\n  \"hints\": [\n    \"Use the Fisher-Yates algorithm to shuffle the array in O(n) time.\",\n    \"Maintain a copy of the original array for resetting.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Ensure shuffling has uniform randomness and linear time complexity.\",\n    \"constraints\": \"Avoid additional space usage beyond the copy of the original array.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a graph is bipartite by checking if nodes can be divided into two sets."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an undirected graph, determine if the graph is bipartite. A bipartite graph can be divided into two sets such that every edge connects a node in one set to a node in the other set.\",\n  \"objective\": \"Check if a graph is bipartite, where nodes can be divided into two independent sets such that all edges connect nodes from different sets.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The problem is to determine if a graph is bipartite, which means it can be divided into two sets where each edge connects a node in one set to a node in the other. We are provided with a graph represented as an adjacency list.\",\n    \"Step 2 - Observations\": \"The graph is undirected and may not be connected, meaning there might be isolated components. To check bipartiteness, we need to color the graph such that no two adjacent nodes have the same color.\",\n    \"Step 3 - Strategy\": \"We can use a graph traversal (e.g., BFS or DFS) to attempt to color the graph with two colors. If we find a situation where two adjacent nodes have the same color, the graph is not bipartite.\",\n    \"Step 4 - Approach\": \"Start with an uncolored node and assign it a color. Then, color all its adjacent nodes with the opposite color. Continue this process for all nodes, ensuring that no two adjacent nodes have the same color. If any conflict occurs, return false. If the traversal completes without conflicts, return true.\",\n    \"Step 5 - Constraints Consideration\": \"The graph can have up to 100 nodes, which is manageable for a BFS or DFS approach. Each node can have up to n-1 adjacent nodes in the worst case, so the graph traversal should run in linear time relative to the number of edges and nodes.\",\n    \"Step 6 - Optimizing\": \"A BFS traversal is well-suited for this problem as it ensures we check all nodes level by level. We can use an array to store the color of each node, and mark unvisited nodes with a sentinel value.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"graph\": [\n          [\n            1,\n            2,\n            3\n          ],\n          [\n            0,\n            2\n          ],\n          [\n            0,\n            1,\n            3\n          ],\n          [\n            0,\n            2\n          ]\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"It is impossible to partition the nodes into two sets where all edges connect nodes in different sets.\"\n    },\n    {\n      \"input\": {\n        \"graph\": [\n          [\n            1,\n            3\n          ],\n          [\n            0,\n            2\n          ],\n          [\n            1,\n            3\n          ],\n          [\n            0,\n            2\n          ]\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The nodes can be partitioned into two sets: {0, 2} and {1, 3}, and every edge connects nodes from different sets.\"\n    }\n  ],\n  \"constraints\": {\n    \"graph_length\": \"n\",\n    \"n_range\": \"1 <= n <= 100\",\n    \"graph_adjacency_conditions\": \"0 <= graph[u].length < n, 0 <= graph[u][i] <= n - 1, graph[u] does not contain u, and if graph[u] contains v, graph[v] contains u.\"\n  },\n  \"follow_up\": \"What if the graph has more than two sets, can you generalize this solution to check for k-partite graphs?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Replace words in a sentence with their shortest roots from a dictionary."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a dictionary of root words and a sentence, replace all successors in the sentence with the shortest root word from the dictionary.\",\n  \"objective\": \"Efficiently replace all valid successors with the shortest possible root using a Trie (Prefix Tree) structure.\",\n  \"meta_prompt\": {\n    \"Step 1 - Build Trie\": \"Construct a Trie (Prefix Tree) using the words in the dictionary. Insert each word character by character, marking the end of each word.\",\n    \"Step 2 - Process Each Word in Sentence\": \"Split the sentence into individual words. For each word, traverse the Trie to find the shortest root.\",\n    \"Step 3 - Replace with Root\": \"If a root is found in the Trie, replace the word with the root. Otherwise, retain the original word.\",\n    \"Step 4 - Reconstruct Sentence\": \"Combine the transformed words back into a sentence and return the result.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"dictionary\": [\n          \"cat\",\n          \"bat\",\n          \"rat\"\n        ],\n        \"sentence\": \"the cattle was rattled by the battery\"\n      },\n      \"output\": \"the cat was rat by the bat\",\n      \"explanation\": \"The word 'cattle' is replaced with 'cat', 'rattled' is replaced with 'rat', and 'battery' is replaced with 'bat'.\"\n    },\n    {\n      \"input\": {\n        \"dictionary\": [\n          \"a\",\n          \"b\",\n          \"c\"\n        ],\n        \"sentence\": \"aadsfasf absbs bbab cadsfafs\"\n      },\n      \"output\": \"a a b c\",\n      \"explanation\": \"Each word is replaced with the shortest possible root from the dictionary.\"\n    }\n  ],\n  \"constraints\": {\n    \"dictionary_length\": \"1 <= dictionary.length <= 1000\",\n    \"word_length_in_dictionary\": \"1 <= dictionary[i].length <= 100\",\n    \"sentence_length\": \"1 <= sentence.length <= 10^6\",\n    \"sentence_structure\": \"sentence consists of lowercase English letters and spaces only.\"\n  },\n  \"follow_up\": \"Discuss the time complexity of Trie-based prefix searching and its efficiency for large dictionaries and sentences.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Alice plays a game and stops when she reaches or exceeds k points. Calculate the probability that she ends up with n or fewer points."}, {"role": "assistant", "content": "{\n  \"description\": \"Alice plays a game where she starts with 0 points and draws numbers from a range [1, maxPts] until she reaches or exceeds k points. Each draw is independent, and Alice gains a random number of points from the range in each draw. The goal is to return the probability that Alice ends up with n or fewer points, where n is a target value.\",\n  \"objective\": \"Design an efficient algorithm to calculate the probability that Alice's final points are less than or equal to n, given her stopping condition when her points exceed or equal k. The algorithm should be able to handle large input sizes efficiently, ensuring accuracy up to 10^-5.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the game's rules and determine how Alice's point total changes over successive draws. Alice draws points randomly from a range [1, maxPts], and stops when her points reach or exceed k.\",\n    \"Step 2 - Dynamic Programming Approach\": \"Consider using dynamic programming to keep track of the probabilities of Alice having a specific number of points after each draw. Use a table to store the probability of achieving different point values and update it based on the outcome of each draw.\",\n    \"Step 3 - Transition Formula\": \"At each step, the probability of having n points is the sum of probabilities from previous states where Alice's point total would allow for the next draw. Update the probabilities incrementally as Alice draws numbers.\",\n    \"Step 4 - Boundary Conditions\": \"Handle edge cases where Alice's points might exceed n or reach k on the first draw, which would impact the probability calculation. Ensure the final probability is between 0 and 1.\",\n    \"Step 5 - Code Efficiency\": \"Ensure the solution runs in a time complexity that can handle large inputs efficiently (e.g., O(n) or O(k) time complexity). Use sliding windows or optimized space usage for dynamic programming arrays to avoid memory overhead.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution works within the constraints: 0 <= k <= n <= 10^4 and 1 <= maxPts <= 10^4, and that the final answer is correct to 10^-5 precision.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 10,\n        \"k\": 1,\n        \"maxPts\": 10\n      },\n      \"output\": 1.0,\n      \"explanation\": \"Alice only needs one draw and she will stop immediately, so the probability of having 10 or fewer points is 1.\"\n    },\n    {\n      \"input\": {\n        \"n\": 6,\n        \"k\": 1,\n        \"maxPts\": 10\n      },\n      \"output\": 0.6,\n      \"explanation\": \"In 6 out of 10 possibilities, Alice will have 6 or fewer points after a single draw.\"\n    },\n    {\n      \"input\": {\n        \"n\": 21,\n        \"k\": 17,\n        \"maxPts\": 10\n      },\n      \"output\": 0.73278,\n      \"explanation\": \"The probability that Alice has 21 or fewer points after drawing with maxPts of 10 is 0.73278.\"\n    }\n  ],\n  \"constraints\": {\n    \"k_range\": \"0 <= k <= n <= 10^4\",\n    \"maxPts_range\": \"1 <= maxPts <= 10^4\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create an iterator for a 2D vector."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a class `Vector2D` to flatten a 2D vector and iterate through its elements sequentially. Implement the following methods: `Vector2D(int[][] vec)` to initialize the class with the 2D vector, `next()` to return the next element, and `hasNext()` to check if there are remaining elements.\",\n  \"objective\": \"Write an efficient solution to flatten a 2D vector and iterate through its elements while maintaining an optimal time complexity for both `next()` and `hasNext()` operations. Handle edge cases like empty inner vectors or an entirely empty 2D vector.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the structure of the 2D vector `vec`. Each inner vector may have different lengths, and some may be empty. The iterator must traverse all elements sequentially while skipping empty inner vectors.\",\n    \"Step 2 - Initial Approach\": \"Use a nested loop to flatten the 2D vector into a 1D list, but this increases space complexity unnecessarily. Consider iterating directly through the 2D vector instead.\",\n    \"Step 3 - Efficient Solution\": \"Maintain indices to track the current inner vector and the current element within that vector. Advance the outer index when an inner vector is exhausted.\",\n    \"Step 4 - Edge Cases\": \"Handle edge cases such as empty vectors, inner vectors of varying lengths, and calls to `next()` when no elements remain.\",\n    \"Step 5 - Follow-Up Challenge\": \"Explore how to implement this solution using iterators in languages like Java or C++ for enhanced abstraction and performance.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"commands\": [\n          \"Vector2D\",\n          \"next\",\n          \"next\",\n          \"next\",\n          \"hasNext\",\n          \"hasNext\",\n          \"next\",\n          \"hasNext\"\n        ],\n        \"values\": [\n          [\n            [\n              1,\n              2\n            ],\n            [\n              3\n            ],\n            [\n              4\n            ]\n          ],\n          [],\n          [],\n          [],\n          [],\n          [],\n          [],\n          []\n        ]\n      },\n      \"output\": [\n        null,\n        1,\n        2,\n        3,\n        true,\n        true,\n        4,\n        false\n      ],\n      \"explanation\": \"The iterator sequentially accesses all elements of the 2D vector and handles `hasNext()` properly.\"\n    },\n    {\n      \"input\": {\n        \"commands\": [\n          \"Vector2D\",\n          \"hasNext\",\n          \"next\",\n          \"hasNext\"\n        ],\n        \"values\": [\n          [],\n          [],\n          [],\n          []\n        ]\n      },\n      \"output\": [\n        null,\n        false,\n        null,\n        false\n      ],\n      \"explanation\": \"An empty 2D vector results in `hasNext()` returning false immediately.\"\n    }\n  ],\n  \"constraints\": {\n    \"vec_length\": \"0 <= vec.length <= 200\",\n    \"inner_vec_length\": \"0 <= vec[i].length <= 500\",\n    \"element_range\": \"-500 <= vec[i][j] <= 500\",\n    \"function_calls\": \"At most 10^5 calls will be made to `next` and `hasNext`.\"\n  },\n  \"follow_up\": \"Can you implement this solution using only iterators in Java or C++ to minimize overhead and improve code clarity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given an integer array arr, split the array into chunks and sort each chunk. Return the maximum number of chunks you can make."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an integer array arr. Your task is to determine the maximum number of chunks (or partitions) into which the array can be split such that sorting each chunk individually and then concatenating them results in the array being sorted in ascending order. The goal is to find the largest possible number of chunks.\",\n  \"objective\": \"Design an algorithm to find the maximum number of chunks into which the array can be split, such that sorting each chunk individually leads to the array being sorted as a whole.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The key idea is to split the array into chunks and sort each chunk, then concatenate them. The result must be the sorted version of the array. This implies that the maximum chunk split happens where each chunk can be independently sorted and merged into the global sorted array.\",\n    \"Step 2 - Initial Approach\": \"One possible approach is to iterate through the array and compare the running maximum element with the running minimum element from the end of the array. Every time the maximum element encountered so far is less than or equal to the minimum element of the remaining part of the array, a valid split is found.\",\n    \"Step 3 - Optimal Solution\": \"Iterate through the array, tracking the maximum value seen so far. At each index, if the maximum value encountered so far is less than or equal to the value at the current index, then the current index can be considered as the end of a chunk. Increment the count of chunks and continue.\",\n    \"Step 4 - Output Format\": \"Return the largest number of chunks possible that can be sorted independently, such that after sorting and concatenating, the array is sorted.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure the solution handles edge cases, such as when the array is already sorted or has a length of 1. The solution must be efficient enough to handle arrays up to the size of 2000 elements.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution operates within the constraints 1 <= arr.length <= 2000 and 0 <= arr[i] <= 10^8.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"arr\": [\n          5,\n          4,\n          3,\n          2,\n          1\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"Since the array is in reverse order, it cannot be split into more than one chunk. The only valid split is the entire array as one chunk.\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          2,\n          1,\n          3,\n          4,\n          4\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"The array can be split into four chunks: [2, 1], [3], [4], [4]. Each chunk can be sorted individually and concatenated to form the sorted array.\"\n    }\n  ],\n  \"constraints\": {\n    \"arr_length\": \"1 <= arr.length <= 2000\",\n    \"arr_elements_range\": \"0 <= arr[i] <= 10^8\"\n  },\n  \"follow_up\": \"Can you optimize this solution to run in linear time O(n)?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Serialize and deserialize a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Implement an algorithm to serialize and deserialize a binary tree. Serialization converts a binary tree into a string, and deserialization reconstructs the binary tree from that string. The process should ensure that the original structure of the tree is preserved.\",\n  \"objective\": \"Design an efficient method to convert a binary tree to a string and reconstruct it, considering edge cases like empty trees, large trees, and trees with unbalanced structures.\",\n  \"meta_prompt\": {\n    \"Step 1 - Serialization\": \"Develop a method to traverse the tree and encode its structure and values. Use approaches such as:\\n- Level-order traversal (BFS) with placeholders for `null` nodes.\\n- Preorder traversal (DFS) with explicit markers for null children.\",\n    \"Step 2 - Deserialization\": \"Reconstruct the tree using the serialized string. Ensure that the reconstruction process accounts for placeholders or markers used during serialization.\",\n    \"Step 3 - Edge Cases\": \"Handle scenarios such as:\\n- Empty trees (`null` root).\\n- Trees with only one node.\\n- Large trees with many levels or skewed trees.\",\n    \"Step 4 - Efficiency\": \"Ensure the solution operates within `O(n)` time complexity for both serialization and deserialization, where `n` is the number of nodes.\",\n    \"Step 5 - Validation\": \"Verify that serializing and then deserializing a tree results in the original structure.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3,\n          null,\n          null,\n          4,\n          5\n        ]\n      },\n      \"output\": \"[1, 2, 3, null, null, 4, 5]\",\n      \"explanation\": \"The binary tree is serialized into level-order notation. Deserializing this string reconstructs the original tree.\"\n    },\n    {\n      \"input\": {\n        \"root\": []\n      },\n      \"output\": \"[]\",\n      \"explanation\": \"An empty tree is serialized and deserialized as an empty structure.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 10^4\",\n    \"node_values\": \"-1000 <= Node.val <= 1000\"\n  },\n  \"follow_up\": \"Explore alternative serialization formats that optimize storage or transmission, such as compressed representations for sparse trees.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if it's possible to reorder the array such that each second number is twice the first number."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array of even length, your task is to determine if it is possible to reorder the array such that for every pair of elements at indices 2 * i and 2 * i + 1, the second element is exactly twice the first element. Specifically, check if it is possible to reorder the array so that arr[2 * i + 1] = 2 * arr[2 * i] for every 0 <= i < len(arr) / 2.\",\n  \"objective\": \"Design an algorithm that checks if it is possible to reorder the given array such that for each pair of elements (arr[2 * i], arr[2 * i + 1]), the second element is twice the first. Your solution should handle large arrays efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The goal is to determine if there exists a valid reordering of the input array where every second element is double the previous element in the reordered array.\",\n    \"Step 2 - Input Analysis\": \"The input array contains integers and has an even length. You are required to check if a specific condition holds for every pair of adjacent elements after reordering.\",\n    \"Step 3 - Approach\": \"To solve this problem, one approach is to first check if the array contains an equal number of each integer and its double. Sorting the array can help simplify the pairing process. A greedy approach can be used to pair elements efficiently.\",\n    \"Step 4 - Output\": \"Return true if such a valid reordering is possible, and false otherwise. Ensure that edge cases, such as arrays with both negative and positive numbers, are handled appropriately.\",\n    \"Step 5 - Code Efficiency\": \"Focus on achieving an optimal solution with a time complexity better than O(n^2), ideally O(n log n) by sorting the array and using a hash map or similar data structure for pairing elements.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"arr\": [\n          3,\n          1,\n          3,\n          6\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"It is not possible to reorder the array to satisfy the condition, as there is no valid pair of elements where the second is double the first.\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          2,\n          1,\n          2,\n          6\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"Again, no valid reordering is possible because 2 cannot be paired with 1 to satisfy the condition.\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          4,\n          -2,\n          2,\n          -4\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The array can be reordered as [-2, -4, 2, 4] or [2, 4, -2, -4], which satisfies the condition for all pairs.\"\n    }\n  ],\n  \"constraints\": {\n    \"arr_length\": \"2 <= arr.length <= 30000\",\n    \"arr_elements_range\": \"-10^5 <= arr[i] <= 10^5\",\n    \"arr_length_even\": \"arr.length is even\"\n  },\n  \"follow_up\": \"Can you come up with a solution that works in linear time complexity, or at least minimizes the time complexity by using an efficient pairing approach?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find all root-to-leaf paths in a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary tree, return all root-to-leaf paths in any order. A leaf is defined as a node with no children, and the paths should be represented as strings where values are separated by `->`.\",\n  \"objective\": \"Design an efficient algorithm to traverse the binary tree and generate all root-to-leaf paths while handling edge cases like single-node trees.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that a root-to-leaf path represents a sequence of nodes from the root of the tree to a leaf node. Each path is a string of node values joined by `->`.\",\n    \"Step 2 - Recursive DFS Approach\": \"Use a depth-first search (DFS) to traverse the tree, accumulating the current path as a string and appending it to the result when a leaf node is reached.\",\n    \"Step 3 - Iterative Approach\": \"Optionally, use a stack to implement an iterative DFS for scenarios where recursion depth might be a concern.\",\n    \"Step 4 - Output Format\": \"Return the result as a list of strings, with each string representing a root-to-leaf path.\",\n    \"Step 5 - Edge Cases\": \"Handle cases such as single-node trees (return the root value as the only path) and trees with multiple branches.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3,\n          null,\n          5\n        ]\n      },\n      \"output\": [\n        \"1->2->5\",\n        \"1->3\"\n      ],\n      \"explanation\": \"The tree has two root-to-leaf paths: `1->2->5` and `1->3`.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1\n        ]\n      },\n      \"output\": [\n        \"1\"\n      ],\n      \"explanation\": \"A single-node tree has one root-to-leaf path: `1`.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"1 <= number of nodes <= 100\",\n    \"node_values\": \"-100 <= Node.val <= 100\"\n  },\n  \"follow_up\": \"Can you modify the algorithm to return the paths in sorted order if the values of the nodes are unique?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if two binary trees are identical."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the roots of two binary trees `p` and `q`, determine whether the two trees are the same. Two binary trees are considered the same if they are structurally identical, and their corresponding nodes have the same value.\",\n  \"objective\": \"Design an efficient algorithm to compare two binary trees for structural and value equality.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the problem requires checking both the structure and values of the two trees recursively or iteratively.\",\n    \"Step 2 - Recursive Approach\": \"Write a recursive function to compare the root nodes of the trees and their corresponding left and right subtrees.\",\n    \"Step 3 - Iterative Approach\": \"Use a queue or stack to perform level-by-level comparison of the trees.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases where one or both trees are empty.\",\n    \"Step 5 - Optimize\": \"Minimize memory usage by using iterative approaches where appropriate.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"p\": [\n          1,\n          2,\n          3\n        ],\n        \"q\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"Both trees are structurally identical and have the same node values.\"\n    },\n    {\n      \"input\": {\n        \"p\": [\n          1,\n          2\n        ],\n        \"q\": [\n          1,\n          null,\n          2\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The structure of the two trees is different.\"\n    },\n    {\n      \"input\": {\n        \"p\": [\n          1,\n          2,\n          1\n        ],\n        \"q\": [\n          1,\n          1,\n          2\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The node values of the two trees differ.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 100\",\n    \"node_values\": \"-10^4 <= Node.val <= 10^4\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the largest number by swapping two digits in an integer at most once."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the maximum value of an integer `num` by swapping two digits at most once.\",\n  \"objective\": \"Use a space-optimized greedy algorithm to track the maximum digit to the right of each position and determine the optimal swap.\",\n  \"meta_prompt\": {\n    \"Step 1 - Convert to String\": \"Convert the integer `num` to a string `numStr` for easy manipulation of individual digits.\",\n    \"Step 2 - Initialize Variables\": \"Track the index of the largest digit (`maxDigitIndex`), and initialize `swapIdx1` and `swapIdx2` to -1 for tracking swap positions.\",\n    \"Step 3 - Traverse from Right to Left\": \"Iterate through `numStr` from the end. Update `maxDigitIndex` whenever a new maximum digit is found. If a smaller digit is found, mark it as a candidate for swapping with the largest digit.\",\n    \"Step 4 - Perform Swap\": \"After the traversal, if valid indices `swapIdx1` and `swapIdx2` are found, swap the digits at these positions in `numStr`.\",\n    \"Step 5 - Return Result\": \"Convert the modified string back to an integer and return it. If no swap occurred, return the original number.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"num\": 2736\n      },\n      \"output\": 7236,\n      \"explanation\": \"Swap 2 and 7 to get the maximum number 7236.\"\n    },\n    {\n      \"input\": {\n        \"num\": 9973\n      },\n      \"output\": 9973,\n      \"explanation\": \"The number is already the largest possible; no swap is needed.\"\n    }\n  ],\n  \"constraints\": {\n    \"num_range\": \"0 <= num <= 10^8\"\n  },\n  \"follow_up\": \"Analyze the time complexity of this greedy approach and discuss its efficiency compared to other possible methods.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Determine the minimum cost to merge all piles of stones into one pile using exactly `k` consecutive piles per move."}, {"role": "assistant", "content": "{\n  \"description\": \"Given `n` piles of `stones` arranged in a row, where `stones[i]` represents the number of stones in the `i`th pile, return the minimum cost to merge all piles into one pile using exactly `k` consecutive piles per move. If it is impossible, return `-1`. The cost of each merge is equal to the total number of stones in the merged `k` piles.\",\n  \"objective\": \"Design an efficient algorithm to find the minimum cost of merging all piles into one, ensuring exactly `k` consecutive piles are merged in each move.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the requirements: Merge exactly `k` consecutive piles into one and calculate the cost. The goal is to minimize the total cost.\",\n    \"Step 2 - Initial Approach\": \"Consider using dynamic programming (DP) to track the minimum cost of merging different segments of the array.\",\n    \"Step 3 - DP Approach with State Definition\": \"Define a DP state `dp[i][j]` as the minimum cost to merge the subarray `stones[i:j+1]` into one pile. Use a helper array `prefixSum` to store the cumulative sums of `stones` for efficient range sum calculations.\",\n    \"Step 4 - Recursive Relation\": \"To merge `stones[i:j+1]`, consider all possible segments that can be merged into `k` piles, and update `dp[i][j]` accordingly. Use the prefix sum to calculate the cost of merging these segments.\",\n    \"Step 5 - Handling Impossibility\": \"Check the number of piles remaining after each merge. If it is not possible to merge into exactly `k` piles at any step, return `-1`.\",\n    \"Step 6 - Output Format\": \"Ensure the function returns the minimum cost of merging all piles into one, or `-1` if it is not possible.\",\n    \"Step 7 - Code Efficiency and Edge Cases\": \"Focus on achieving efficient state transitions with time complexity of O(n^3 / k). Handle edge cases such as small values of `n` or `k`, and cases where `k` does not divide the number of piles evenly.\",\n    \"Final Check - Constraints Verification\": \"Verify the solution operates within the constraints: `1 <= n <= 30`, `1 <= stones[i] <= 100`, and `2 <= k <= 30`. Ensure the algorithm is robust and handles various input configurations efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"stones\": [\n          3,\n          2,\n          4,\n          1\n        ],\n        \"k\": 2\n      },\n      \"output\": 20,\n      \"explanation\": \"We merge [3, 2], [4, 1], and then [5, 5] with a total cost of 20.\"\n    },\n    {\n      \"input\": {\n        \"stones\": [\n          3,\n          2,\n          4,\n          1\n        ],\n        \"k\": 3\n      },\n      \"output\": -1,\n      \"explanation\": \"After any merge operation, it is impossible to merge the remaining piles into exactly `k` piles.\"\n    },\n    {\n      \"input\": {\n        \"stones\": [\n          3,\n          5,\n          1,\n          2,\n          6\n        ],\n        \"k\": 3\n      },\n      \"output\": 25,\n      \"explanation\": \"We merge [5, 1, 2] and then [3, 8, 6] with a total cost of 25.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 30\",\n    \"stones_range\": \"1 <= stones[i] <= 100\",\n    \"k_range\": \"2 <= k <= 30\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle larger inputs efficiently, ensuring the algorithm scales well with input size and maintains correctness?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the complement of a number by flipping its binary digits."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `num`, calculate the complement of its binary representation by flipping all `0`'s to `1`'s and all `1`'s to `0`'s. The binary representation should not have any leading zero bits.\",\n  \"objective\": \"Design an efficient algorithm to compute the complement of a number by leveraging bitwise operations and ensuring minimal computational complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Understand that the complement of a number is calculated by flipping all bits in its binary representation. For example, flipping all bits of `101` results in `010`.\",\n    \"Step 2 - Identify Key Steps\": \"Find the number of bits in `num`. Use this to create a mask with all bits set to `1` that matches the length of the binary representation of `num`. Then, use bitwise XOR or bitwise NOT to calculate the complement.\",\n    \"Step 3 - Algorithm Design\": \"1. Determine the binary length of `num`. 2. Construct a mask of the same length with all bits set to `1`. 3. Use bitwise XOR to flip the bits of `num`.\",\n    \"Step 4 - Consider Edge Cases\": \"Handle small values of `num` like `1` and ensure the algorithm works efficiently for large values close to `2^31 - 1`.\",\n    \"Step 5 - Optimize and Verify\": \"Focus on using bitwise operations for optimal performance, ensuring the solution meets the constraints `1 <= num < 2^31`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"num\": 5\n      },\n      \"output\": 2,\n      \"explanation\": \"Binary representation of `5` is `101`. Its complement is `010`, which is `2` in decimal.\"\n    },\n    {\n      \"input\": {\n        \"num\": 1\n      },\n      \"output\": 0,\n      \"explanation\": \"Binary representation of `1` is `1`. Its complement is `0`, which is `0` in decimal.\"\n    },\n    {\n      \"input\": {\n        \"num\": 10\n      },\n      \"output\": 5,\n      \"explanation\": \"Binary representation of `10` is `1010`. Its complement is `0101`, which is `5` in decimal.\"\n    }\n  ],\n  \"constraints\": {\n    \"num_range\": \"1 <= num < 2^31\",\n    \"binary_representation\": \"No leading zero bits in the binary representation of `num`.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"How can you generalize the solution for negative integers if the range is extended to signed numbers?\",\n    \"question_2\": \"Can you implement a solution that avoids explicitly calculating the binary length of `num`?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Determine if there is a town judge in a town of `n` people based on trust relationships."}, {"role": "assistant", "content": "{\n  \"description\": \"In a town of `n` people labeled from `1` to `n`, there is a rumor about a town judge. The town judge trusts nobody, and everybody else trusts the judge. Given an array `trust` where `trust[i] = [ai, bi]` indicates that person `ai` trusts person `bi`, return the label of the town judge if they exist, otherwise return `-1`.\",\n  \"objective\": \"Design an efficient algorithm to identify the town judge based on the given trust relationships.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the requirements: The town judge is trusted by everyone except themselves and trusts nobody.\",\n    \"Step 2 - Initial Approach\": \"Consider using two arrays to keep track of trust counts: one for how many people each person trusts, and another for how many people trust each person.\",\n    \"Step 3 - Algorithm Steps\": \"1. Initialize two arrays to store the number of people each person trusts and the number of people who trust each person. 2. Iterate through the `trust` array to fill these two arrays. 3. Identify the person who is trusted by `n-1` people and trusts nobody. 4. Return the label of the town judge if such a person exists; otherwise, return `-1`.\",\n    \"Step 4 - Output Format\": \"Ensure the function returns an integer representing the label of the town judge or `-1` if the town judge does not exist.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Focus on achieving an efficient solution with time complexity of O(n + m), where `n` is the number of people and `m` is the length of the `trust` array. Handle edge cases such as when there are no trust relationships or all trust relationships involve a single person.\",\n    \"Final Check - Constraints Verification\": \"Verify the solution operates within the constraints: `1 <= n <= 1000`, `0 <= trust.length <= 10^4`, and `trust[i].length == 2`. Ensure the algorithm is robust and handles large inputs efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 2,\n        \"trust\": [\n          [\n            1,\n            2\n          ]\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"Person 2 is trusted by person 1 and trusts nobody, so they are the town judge.\"\n    },\n    {\n      \"input\": {\n        \"n\": 3,\n        \"trust\": [\n          [\n            1,\n            3\n          ],\n          [\n            2,\n            3\n          ]\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"Person 3 is trusted by both person 1 and person 2 and trusts nobody, so they are the town judge.\"\n    },\n    {\n      \"input\": {\n        \"n\": 3,\n        \"trust\": [\n          [\n            1,\n            3\n          ],\n          [\n            2,\n            3\n          ],\n          [\n            3,\n            1\n          ]\n        ]\n      },\n      \"output\": -1,\n      \"explanation\": \"Person 3 trusts person 1, so there is no town judge.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 1000\",\n    \"trust_length\": \"0 <= trust.length <= 10^4\",\n    \"trust_format\": \"trust[i].length == 2\",\n    \"unique_pairs\": \"All the pairs of `trust` are unique.\",\n    \"valid_range\": \"1 <= ai, bi <= n\",\n    \"no_self_trust\": \"ai != bi\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle even larger sets of trust relationships efficiently while ensuring the algorithm scales well with input size and maintains correctness?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Partition a linked list so that all nodes with values less than `x` come before nodes with values greater than or equal to `x`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `head` of a linked list and an integer `x`, partition the list such that all nodes with values less than `x` appear before nodes with values greater than or equal to `x`. The relative order of nodes within each partition must be preserved.\",\n  \"objective\": \"Design an efficient algorithm to rearrange the linked list while maintaining the original order of nodes within each partition. The algorithm should work in O(n) time complexity and use O(1) extra space.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves rearranging the nodes into two partitions while preserving the order of nodes in each partition.\",\n    \"Step 2 - Two-Pointer Technique\": \"Use two pointers to create two separate lists: one for nodes with values less than `x` and another for nodes with values greater than or equal to `x`. Traverse the original list once to build these lists.\",\n    \"Step 3 - Merge Lists\": \"After processing all nodes, merge the two lists by connecting the end of the 'less than' list to the beginning of the 'greater than or equal to' list.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution handles constraints such as a maximum of 200 nodes efficiently and does not allocate extra memory unnecessarily.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider edge cases such as an empty list, a single-node list, or all nodes having the same value as `x`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          4,\n          3,\n          2,\n          5,\n          2\n        ],\n        \"x\": 3\n      },\n      \"output\": [\n        1,\n        2,\n        2,\n        4,\n        3,\n        5\n      ],\n      \"explanation\": \"Nodes with values less than 3 are [1, 2, 2], and nodes with values greater than or equal to 3 are [4, 3, 5].\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          2,\n          1\n        ],\n        \"x\": 2\n      },\n      \"output\": [\n        1,\n        2\n      ],\n      \"explanation\": \"Node with value less than 2 is [1], and node with value greater than or equal to 2 is [2].\"\n    },\n    {\n      \"input\": {\n        \"head\": [],\n        \"x\": 1\n      },\n      \"output\": [],\n      \"explanation\": \"The input list is empty, so the output is also empty.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 200\",\n    \"value_range\": \"-100 <= Node.val <= 100\",\n    \"partition_value\": \"-200 <= x <= 200\",\n    \"relative_order\": \"The relative order of nodes within each partition must be preserved.\"\n  },\n  \"follow_up\": \"Can you adapt this algorithm to handle cases where the relative order is not required to be preserved, potentially improving efficiency?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Traverse a matrix in spiral order."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `m x n` matrix, return all elements of the matrix in spiral order, starting from the top-left corner and moving clockwise.\",\n  \"objective\": \"Design an efficient algorithm to traverse the matrix in spiral order, ensuring it handles the constraints on matrix size and element range.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves traversing the matrix layer by layer in a clockwise direction. The traversal includes moving across the top row, down the rightmost column, across the bottom row in reverse, and up the leftmost column.\",\n    \"Step 2 - Iterative Approach\": \"Use four pointers (`top`, `bottom`, `left`, `right`) to define the boundaries of the matrix. Iteratively traverse the matrix in spiral order while shrinking the boundaries after completing each layer.\",\n    \"Step 3 - Constraints Compliance\": \"Ensure the algorithm works efficiently for matrices with sizes up to `10 x 10` and values within `-100 <= matrix[i][j] <= 100`.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider cases such as single-row matrices, single-column matrices, or `1x1` matrices where the traversal logic simplifies.\",\n    \"Step 5 - Space Optimization\": \"Avoid using additional memory for a copy of the matrix. Use in-place traversal logic.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            1,\n            2,\n            3\n          ],\n          [\n            4,\n            5,\n            6\n          ],\n          [\n            7,\n            8,\n            9\n          ]\n        ]\n      },\n      \"output\": [\n        1,\n        2,\n        3,\n        6,\n        9,\n        8,\n        7,\n        4,\n        5\n      ],\n      \"explanation\": \"The matrix is traversed in a clockwise spiral: first the top row, then the rightmost column, bottom row, and leftmost column.\"\n    },\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            1,\n            2,\n            3,\n            4\n          ],\n          [\n            5,\n            6,\n            7,\n            8\n          ],\n          [\n            9,\n            10,\n            11,\n            12\n          ]\n        ]\n      },\n      \"output\": [\n        1,\n        2,\n        3,\n        4,\n        8,\n        12,\n        11,\n        10,\n        9,\n        5,\n        6,\n        7\n      ],\n      \"explanation\": \"The traversal moves layer by layer clockwise through the matrix.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size\": \"1 <= m, n <= 10\",\n    \"element_range\": \"-100 <= matrix[i][j] <= 100\"\n  },\n  \"follow_up\": \"Can you modify the algorithm to handle larger matrices or optimize for specific patterns in the input?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the diameter of a binary tree, which is the longest path (number of edges) between any two nodes. The path may or may not pass through the root."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of a binary tree, calculate the diameter, which is the longest path (number of edges) between any two nodes in the tree. This path may or may not pass through the root.\",\n  \"objective\": \"Implement an efficient solution using Depth-First Search (DFS) to calculate the diameter in a single pass while maintaining optimal time complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Variables\": \"Initialize an integer variable `diameter` to store the maximum diameter found so far during the traversal. This variable will be updated throughout the DFS traversal.\",\n    \"Step 2 - Define DFS Helper Function `longestPath`\": \"Create a helper function `longestPath(node)` to perform DFS on the tree, returning the longest path length from the current node to its farthest leaf node.\",\n    \"Step 3 - Traverse Tree Recursively\": \"Within `longestPath(node)`, if the current `node` is `None`, return `0` since there are no edges in a non-existent path. Otherwise, recursively call `longestPath` on `node.left` and `node.right` to obtain `leftPath` and `rightPath`, representing the longest paths from the left and right subtrees respectively.\",\n    \"Step 4 - Update Diameter\": \"Calculate the diameter passing through the current `node` by summing `leftPath + rightPath`. If this sum is greater than the current `diameter`, update `diameter` to store this value.\",\n    \"Step 5 - Return Path Length for Recursion\": \"Return the maximum of `leftPath` and `rightPath`, adding `1` to account for the edge connecting the current `node` to its parent. This ensures that each recursive call returns the longest path in the subtree rooted at the current `node`.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution handles trees up to `10^4` nodes efficiently and accounts for edge cases like single-node trees and entirely linear trees (all nodes in a single branch). Ensure the returned diameter represents the correct number of edges, not nodes.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3,\n          4,\n          5\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The longest path is either [4, 2, 1, 3] or [5, 2, 1, 3], each with a diameter of 3 edges.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The longest path is simply the edge between node 1 and node 2, with a diameter of 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"1 <= number of nodes <= 10^4\",\n    \"node_value_range\": \"-100 <= Node.val <= 100\"\n  },\n  \"follow_up\": \"Consider optimizations for more space efficiency by implementing Morris traversal or other tree traversal methods that avoid the use of recursive stack space.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a sorted array can be split into valid subsequences of length 3 or more."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if it is possible to split a sorted array `nums` into one or more subsequences such that each subsequence is a consecutive increasing sequence of length 3 or more.\",\n  \"objective\": \"Iterate through `nums` to validate segments of consecutive numbers and ensure they can form valid subsequences using an optimized space approach.\",\n  \"meta_prompt\": {\n    \"Step 1 - Identify Segments\": \"Iterate through `nums` and divide it into segments where consecutive numbers have a difference greater than one. Use a variable `start` to track the beginning of each segment.\",\n    \"Step 2 - Validate Each Segment\": \"For each segment, use a helper function `isSegmentValid` to determine if valid subsequences can be formed.\",\n    \"Step 3 - Optimize Validation\": \"Within `isSegmentValid`, maintain variables `lengthOneSubsequences`, `lengthTwoSubsequences`, and `totalNoOfSubsequences` to track subsequences of different lengths. Use a variable `frequency` to compute the count of each number on-the-fly.\",\n    \"Step 4 - Check Validity\": \"Ensure that for every number in the segment, there are enough occurrences to extend all existing subsequences or form new valid subsequences. Return false if this condition is violated.\",\n    \"Step 5 - Final Check\": \"If any subsequences of length less than 3 remain after processing the segment, return false. Otherwise, continue to the next segment.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          3,\n          4,\n          5\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The array can be split into [1, 2, 3] and [3, 4, 5], both of which are valid subsequences.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          4,\n          4,\n          5\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"It is not possible to split the array into valid subsequences as some subsequences would be less than 3 in length.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          3,\n          4,\n          4,\n          5,\n          5\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The array can be split into [1, 2, 3, 4, 5] and [3, 4, 5], both valid subsequences.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 10^4\",\n    \"nums_values\": \"-1000 <= nums[i] <= 1000\",\n    \"array_property\": \"nums is sorted in non-decreasing order.\"\n  },\n  \"follow_up\": \"Analyze the time complexity of the optimized space approach and discuss potential trade-offs compared to using arrays for tracking subsequences.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum depth of a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary tree, find its minimum depth. The minimum depth is the number of nodes along the shortest path from the root to the nearest leaf node. A leaf is defined as a node with no children.\",\n  \"objective\": \"Design an algorithm to calculate the minimum depth of a binary tree efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the minimum depth is the shortest distance from the root to a leaf node, requiring traversal to identify all possible paths.\",\n    \"Step 2 - BFS Approach\": \"Use a breadth-first search (BFS) to traverse the tree level by level, stopping at the first leaf node encountered.\",\n    \"Step 3 - Recursive Approach\": \"Write a recursive function to calculate the depth of the left and right subtrees and return the smaller value plus one.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider cases such as an empty tree or a skewed tree with only left or right nodes.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(n) time with O(h) space for the recursion stack or O(n) space for the BFS queue.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          9,\n          20,\n          null,\n          null,\n          15,\n          7\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The shortest path to a leaf is from root (3) to node (9), which has a depth of 2.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          2,\n          null,\n          3,\n          null,\n          4,\n          null,\n          5,\n          null,\n          6\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"The tree is skewed, with the shortest path to a leaf having a depth of 5.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 10^5\",\n    \"node_values\": \"-1000 <= Node.val <= 1000\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number I picked."}, {"role": "assistant", "content": "{\n  \"title\": \"Guess the Number Game\",\n  \"description\": \"Implement a function to guess a number I picked between `1` and `n` using a pre-defined API. The function should efficiently determine the number by minimizing the number of API calls.\",\n  \"objective\": \"Use binary search to efficiently guess the number.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand the API\": {\n      \"API Definition\": \"Use `int guess(int num)` which returns -1, 1, or 0 based on whether the guess is too high, too low, or correct.\",\n      \"Output Mapping\": {\n        \"-1\": \"Guess is too high.\",\n        \"1\": \"Guess is too low.\",\n        \"0\": \"Guess is correct.\"\n      }\n    },\n    \"Step 2 - Binary Search\": {\n      \"Logic\": \"Set two pointers: `low = 1` and `high = n`. In each iteration, compute `mid = (low + high) / 2` and call the `guess` API with `mid`.\",\n      \"Update Conditions\": {\n        \"`guess(mid) == 0`\": \"Return `mid`.\",\n        \"`guess(mid) == -1`\": \"Set `high = mid - 1`.\",\n        \"`guess(mid) == 1`\": \"Set `low = mid + 1`.\"\n      }\n    },\n    \"Step 3 - Return the Result\": {\n      \"Result\": \"The number that satisfies `guess(mid) == 0` is the number I picked.\"\n    }\n  },\n  \"input\": {\n    \"parameters\": [\n      {\n        \"name\": \"n\",\n        \"type\": \"integer\",\n        \"description\": \"The upper limit of the range where the number is picked.\",\n        \"constraints\": \"1 <= n <= 2^31 - 1\"\n      },\n      {\n        \"name\": \"pick\",\n        \"type\": \"integer\",\n        \"description\": \"The number picked in the range [1, n].\"\n      }\n    ]\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The number that was picked.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 10,\n        \"pick\": 6\n      },\n      \"output\": 6,\n      \"explanation\": \"Using binary search, guess 5 (too low), then 8 (too high), then 6 (correct).\"\n    },\n    {\n      \"input\": {\n        \"n\": 1,\n        \"pick\": 1\n      },\n      \"output\": 1,\n      \"explanation\": \"With only one number, guess 1 directly (correct).\"\n    },\n    {\n      \"input\": {\n        \"n\": 2,\n        \"pick\": 1\n      },\n      \"output\": 1,\n      \"explanation\": \"Using binary search, guess 1 (correct).\"\n    }\n  ],\n  \"hints\": [\n    \"Use binary search to minimize the number of API calls.\",\n    \"Avoid linear searching as it is less efficient for large `n`.\",\n    \"The mid-point calculation ensures the range is halved in each step.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve a runtime complexity of O(log n) using binary search.\",\n    \"constraints\": \"Ensure the mid-point calculation avoids overflow by using `mid = low + (high - low) / 2`.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Remove a node in a linked list."}, {"role": "assistant", "content": "{\n  \"description\": \"Delete a node in a linked list without access to the head node.\",\n  \"objective\": \"Modify the given node to remove it from the list, keeping the rest of the list intact.\",\n  \"steps\": [\n    \"Copy the value of the next node into the given node.\",\n    \"Update the given node's next pointer to skip the next node.\",\n    \"Ensure the linked list maintains its structure.\"\n  ],\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          4,\n          5,\n          1,\n          9\n        ],\n        \"node\": 5\n      },\n      \"output\": [\n        4,\n        1,\n        9\n      ]\n    },\n    {\n      \"input\": {\n        \"head\": [\n          4,\n          5,\n          1,\n          9\n        ],\n        \"node\": 1\n      },\n      \"output\": [\n        4,\n        5,\n        9\n      ]\n    }\n  ],\n  \"constraints\": \"The node to be deleted is not the tail node and is guaranteed to exist in the list.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find out how many ways the ball can move out of the grid boundaries in a certain number of moves."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `m x n` grid with a ball starting at `[startRow, startColumn]`, calculate the number of distinct paths to move the ball out of the grid boundaries within `maxMove` moves. The answer should be returned modulo `10^9 + 7`.\",\n  \"objective\": \"Use dynamic programming to track the number of ways to reach each cell within the allowed moves, counting paths that reach the grid boundaries as valid paths out of the grid.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize DP Array\": \"Create a 2D `dp` array where `dp[i][j]` represents the number of ways to reach cell `(i, j)` using the current move count. Initialize the start position `[startRow, startColumn]` with a count of `1` for zero moves.\",\n    \"Step 2 - Transition Between Moves\": \"For each move from `1` up to `maxMove`, use a temporary array `temp` to hold the results for the next move based on current `dp` values. For each cell `(i, j)`, update `temp[i][j]` by adding counts from `dp[i-1][j]`, `dp[i+1][j]`, `dp[i][j-1]`, and `dp[i][j+1]`, while managing boundaries to prevent out-of-bounds errors.\",\n    \"Step 3 - Track Boundary Exits\": \"For every boundary cell that can be reached within the move count, add `dp[i][j]` to a `count` variable representing successful paths out of the grid. Ensure each boundary condition is considered for edge and corner cells.\",\n    \"Step 4 - Update DP Array\": \"After each move, update `dp` with values from `temp`, so it reflects the new positions available with an additional move.\",\n    \"Final Check - Constraints Verification\": \"Verify that the approach handles cases up to `m, n, maxMove = 50` efficiently and applies the modulo constraint `10^9 + 7` to handle large results, confirming output matches the specified requirements.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"m\": 2,\n        \"n\": 2,\n        \"maxMove\": 2,\n        \"startRow\": 0,\n        \"startColumn\": 0\n      },\n      \"output\": 6,\n      \"explanation\": \"There are 6 distinct paths to move the ball out of the grid within 2 moves from the starting position at the top left corner.\"\n    },\n    {\n      \"input\": {\n        \"m\": 1,\n        \"n\": 3,\n        \"maxMove\": 3,\n        \"startRow\": 0,\n        \"startColumn\": 1\n      },\n      \"output\": 12,\n      \"explanation\": \"The ball can exit the grid in 12 ways from various moves within the given constraints.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_dimensions\": \"1 <= m, n <= 50\",\n    \"move_limit\": \"0 <= maxMove <= 50\",\n    \"ball_position\": \"0 <= startRow < m and 0 <= startColumn < n\"\n  },\n  \"follow_up\": \"Explore optimizations using 1D arrays instead of 2D, or ways to improve memory usage for larger grids.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the longest part of the array that adds up to the given number."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums` and an integer `k`, find the maximum length of a contiguous subarray that sums to `k`. If no such subarray exists, return 0.\",\n  \"objective\": \"Design an efficient algorithm to compute the maximum length of a subarray with a sum equal to `k`. The solution should handle both positive and negative integers, and be optimized for large inputs.\",\n  \"meta_prompt\": {\n    \"Step 1 - Prefix Sum Strategy\": \"Use a prefix sum approach to efficiently compute subarray sums. Maintain a running sum and store its first occurrence in a hash map.\",\n    \"Step 2 - Identify Subarrays\": \"For each element, check if the difference `(current_sum - k)` exists in the hash map. If it does, compute the length of the subarray.\",\n    \"Step 3 - Update Results\": \"Track the maximum subarray length during the iteration.\",\n    \"Step 4 - Complexity Analysis\": \"Ensure the algorithm runs in O(n) time complexity with O(n) space for the hash map.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          -1,\n          5,\n          -2,\n          3\n        ],\n        \"k\": 3\n      },\n      \"output\": 4,\n      \"explanation\": \"The subarray [1, -1, 5, -2] has a sum of 3 and is the longest subarray satisfying the condition.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          -2,\n          -1,\n          2,\n          1\n        ],\n        \"k\": 1\n      },\n      \"output\": 2,\n      \"explanation\": \"The subarray [-1, 2] has a sum of 1 and is the longest subarray.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3\n        ],\n        \"k\": 6\n      },\n      \"output\": 3,\n      \"explanation\": \"The entire array [1, 2, 3] has a sum of 6.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 200,000\",\n    \"element_range\": \"-10,000 <= nums[i] <= 10,000\",\n    \"sum_range\": \"-10^9 <= k <= 10^9\"\n  },\n  \"follow_up\": \"Can you optimize the space usage further for specific cases (e.g., small values of `k`)?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find `a^b mod 1337` where `b` is given as an array."}, {"role": "assistant", "content": "{\n  \"title\": \"Compute Modular Exponentiation for Large Exponent\",\n  \"description\": \"Efficiently compute `a^b mod 1337` where `b` is represented as an array of digits.\",\n  \"objective\": \"Leverage modular arithmetic properties to break down the large exponent computation.\",\n  \"input\": {\n    \"parameters\": [\n      {\n        \"name\": \"a\",\n        \"type\": \"integer\",\n        \"description\": \"Base of the exponentiation.\",\n        \"constraints\": \"1 <= a <= 2^31 - 1\"\n      },\n      {\n        \"name\": \"b\",\n        \"type\": \"array of integers\",\n        \"description\": \"Exponent represented as an array of digits.\",\n        \"constraints\": \"1 <= b.length <= 2000, 0 <= b[i] <= 9\"\n      }\n    ]\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The result of `a^b mod 1337`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"a\": 2,\n        \"b\": [\n          3\n        ]\n      },\n      \"output\": 8,\n      \"explanation\": \"2^3 mod 1337 = 8.\"\n    },\n    {\n      \"input\": {\n        \"a\": 2,\n        \"b\": [\n          1,\n          0\n        ]\n      },\n      \"output\": 1024,\n      \"explanation\": \"2^10 mod 1337 = 1024.\"\n    },\n    {\n      \"input\": {\n        \"a\": 1,\n        \"b\": [\n          4,\n          3,\n          3,\n          8,\n          5,\n          2\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"1^b mod 1337 is always 1 for any `b`.\"\n    }\n  ],\n  \"hints\": [\n    \"Decompose the problem using the modular arithmetic property: `(a^b) mod c = ((a^(b1)) mod c * (a^(b2)) mod c) mod c`.\",\n    \"Process the exponent array from the least significant to the most significant digit.\",\n    \"Use fast modular exponentiation to handle intermediate results efficiently.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Ensure O(log(k)) complexity per digit of `b` using modular exponentiation techniques.\",\n    \"constraints\": \"Avoid constructing the full value of `b` to prevent memory overflow.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Match a string with a pattern containing '?' and '*'."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an input string `s` and a pattern `p`, implement wildcard pattern matching where: 1) `'?'` matches any single character, and 2) `'*'` matches any sequence of characters (including the empty sequence). The matching must cover the **entire** input string.\",\n  \"objective\": \"Design an efficient algorithm to determine if the input string matches the pattern, adhering to the constraints of string length and pattern complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves matching a string `s` with a pattern `p` using wildcard characters. The `'*'` can represent any sequence, and `'?'` can represent any single character.\",\n    \"Step 2 - Dynamic Programming Approach\": \"Use a 2D boolean table `dp[i][j]` where `dp[i][j]` represents whether the first `i` characters of `s` match the first `j` characters of `p`. Initialize and fill the table iteratively.\",\n    \"Step 3 - Optimization\": \"Optimize space usage by reducing the DP table to a 1D array since only the previous row's state is needed to compute the current row.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider patterns with multiple consecutive `'*'`, empty strings or patterns, and cases where `s` is much longer than `p` or vice versa.\",\n    \"Step 5 - Constraints Compliance\": \"Ensure the algorithm handles constraints, such as `0 <= s.length, p.length <= 2000`, efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"aa\",\n        \"p\": \"a\"\n      },\n      \"output\": false,\n      \"explanation\": \"The pattern 'a' does not match the entire string 'aa'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"aa\",\n        \"p\": \"*\"\n      },\n      \"output\": true,\n      \"explanation\": \"The pattern '*' matches any sequence of characters, including 'aa'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"cb\",\n        \"p\": \"?a\"\n      },\n      \"output\": false,\n      \"explanation\": \"The '?' matches 'c', but the second character 'a' does not match 'b'.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"0 <= s.length, p.length <= 2000\",\n    \"string_content\": \"`s` contains only lowercase English letters.\",\n    \"pattern_content\": \"`p` contains only lowercase English letters, '?' or '*'.\"\n  },\n  \"follow_up\": \"Can you further optimize the solution to handle extremely large patterns with consecutive wildcards efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the length of the longest uncommon subsequence between two strings. If no such subsequence exists, return `-1`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two strings `a` and `b`, find the length of the longest uncommon subsequence between them. An uncommon subsequence is a sequence that is a subsequence of one string but not the other. If no uncommon subsequence exists, return `-1`.\",\n  \"objective\": \"Design a solution that identifies whether the longest uncommon subsequence is simply the longer of the two strings or if no uncommon subsequence exists, returning the appropriate result.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Identify that the problem is to find an uncommon subsequence with maximum length between two strings. The longest uncommon subsequence is the longest string itself if it differs from the other string.\",\n    \"Step 2 - Base Case Check for Equality\": \"If `a == b`, return `-1` because all subsequences of `a` are also subsequences of `b` and vice versa, so no uncommon subsequence exists.\",\n    \"Step 3 - Length Comparison for Uncommon Subsequence\": \"If `a != b`, the longest uncommon subsequence would be either `a` or `b`, depending on which is longer. Return `max(len(a), len(b))`.\",\n    \"Step 4 - Complexity and Constraints\": \"The solution should operate in constant time O(1) since we only compare the two strings and their lengths, meeting the constraints of `1 <= a.length, b.length <= 100` efficiently.\",\n    \"Final Check - Constraints Verification\": \"Ensure the solution correctly handles cases with equal strings and cases where `a` and `b` are different, returning the length of the longer string if they differ.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"a\": \"aba\",\n        \"b\": \"cdc\"\n      },\n      \"output\": 3,\n      \"explanation\": \"The longest uncommon subsequences are 'aba' and 'cdc', each of length 3.\"\n    },\n    {\n      \"input\": {\n        \"a\": \"aaa\",\n        \"b\": \"bbb\"\n      },\n      \"output\": 3,\n      \"explanation\": \"The longest uncommon subsequences are 'aaa' and 'bbb', each of length 3.\"\n    },\n    {\n      \"input\": {\n        \"a\": \"aaa\",\n        \"b\": \"aaa\"\n      },\n      \"output\": -1,\n      \"explanation\": \"Both strings are identical, so no uncommon subsequence exists.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length_range\": \"1 <= a.length, b.length <= 100\",\n    \"character_type\": \"a and b consist of only lowercase English letters.\"\n  },\n  \"follow_up\": \"Could you extend this solution to find uncommon subsequences in a list of strings, identifying the longest sequence that appears in only one of the strings?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Simulate a process to quarantine viral regions in a grid."}, {"role": "assistant", "content": "{\n  \"description\": \"Simulate a process to quarantine viral regions in a grid by prioritizing regions that threaten the most uninfected cells.\",\n  \"objective\": \"Implement a grid-based simulation to contain viral regions using walls and minimize viral spread while efficiently allocating limited resources.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Identify all contiguous viral regions in the grid, calculating the number of uninfected cells each region threatens.\",\n    \"Step 2\": \"Determine the viral region that threatens the most uninfected cells.\",\n    \"Step 3\": \"Install walls to contain the selected region, marking the region's cells to indicate they are contained.\",\n    \"Step 4\": \"Spread the virus from the remaining uncontained regions to adjacent uninfected cells.\",\n    \"Step 5\": \"Repeat the above steps until all viral regions are contained or the entire grid is infected. Return the total number of walls used.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"isInfected\": [\n          [\n            0,\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1\n          ],\n          [\n            0,\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n          ]\n        ]\n      },\n      \"output\": 10,\n      \"explanation\": \"Two viral regions require containment. On the first day, 5 walls are built around the left region. On the second day, another 5 walls are built around the right region.\"\n    },\n    {\n      \"input\": {\n        \"isInfected\": [\n          [\n            1,\n            1,\n            1\n          ],\n          [\n            1,\n            0,\n            1\n          ],\n          [\n            1,\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"One region is fully contained using 4 walls.\"\n    },\n    {\n      \"input\": {\n        \"isInfected\": [\n          [\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            1,\n            0,\n            1,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1\n          ],\n          [\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n          ]\n        ]\n      },\n      \"output\": 13,\n      \"explanation\": \"Containment requires multiple steps, with walls built in phases as the virus spreads.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_size\": \"1 <= m, n <= 50\",\n    \"cell_values\": \"isInfected[i][j] is either 0 or 1\",\n    \"condition\": \"There is always at least one region that threatens uninfected cells.\"\n  },\n  \"follow_up\": \"Analyze the complexity of the approach in terms of both time and space. Consider optimizations to efficiently simulate viral spread and wall installation in large grids.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the longest valid parentheses substring in a string."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s` containing just the characters `'('` and `')'`, find and return the length of the longest valid (well-formed) parentheses substring in `s`. A well-formed substring is defined as one where every opening parenthesis `'('` has a corresponding closing parenthesis `')'` in the correct order.\",\n  \"objective\": \"Design an efficient algorithm to determine the length of the longest valid parentheses substring while handling large input sizes and adhering to constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that a valid parentheses substring is one where every opening parenthesis is matched with a closing parenthesis in the correct order. The goal is to find the maximum length of such a substring.\",\n    \"Step 2 - Stack-Based Approach\": \"Use a stack to track the indices of unmatched parentheses. Push the index of each `'('` onto the stack, and pop the stack for each `')'` that forms a valid pair. The difference between the indices gives the length of valid substrings.\",\n    \"Step 3 - Two-Pointer Approach\": \"Alternatively, use two pointers to traverse the string from left to right and right to left, counting the number of `'('` and `')'`. Reset the counters whenever the count of `')'` exceeds `'('` (or vice versa).\",\n    \"Step 4 - Handle Edge Cases\": \"Consider edge cases such as an empty string, strings with no valid parentheses, and strings with all parentheses of the same type.\",\n    \"Step 5 - Constraints Compliance\": \"Ensure the solution works within the constraints, such as `0 <= s.length <= 3 * 10^4`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"(()\"\n      },\n      \"output\": 2,\n      \"explanation\": \"The longest valid substring is '()', which has a length of 2.\"\n    },\n    {\n      \"input\": {\n        \"s\": \")()())\"\n      },\n      \"output\": 4,\n      \"explanation\": \"The longest valid substring is '()()', which has a length of 4.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"\"\n      },\n      \"output\": 0,\n      \"explanation\": \"The input string is empty, so there are no valid substrings.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"0 <= s.length <= 3 * 10^4\",\n    \"characters\": \"s[i] is '(' or ')'.\"\n  },\n  \"follow_up\": \"Can you solve this problem using only `O(1)` extra space by leveraging the two-pointer approach?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given a graph and need to find how many nodes are reachable from node 0 with a maximum of maxMoves."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an undirected graph where each edge is subdivided into a chain of nodes. The graph is represented as a 2D array of edges, where each edge is described by the nodes it connects and the number of new nodes the edge is subdivided into. Your task is to determine how many nodes are reachable from node 0, given a maximum number of moves (maxMoves). A node is considered reachable if the distance from node 0 to that node is less than or equal to maxMoves.\",\n  \"objective\": \"Design an algorithm that determines how many nodes are reachable from node 0 in the modified graph. The graph is transformed by subdividing edges into chains of nodes, and you need to compute the reachable nodes based on the maxMoves constraint.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understanding the Problem\": \"You need to transform the original graph into a new graph where each edge is subdivided into a series of new nodes, and then compute the number of nodes that are reachable from node 0 within a certain number of moves.\",\n    \"Step 2 - Graph Transformation\": \"For each edge in the original graph, subdivide it into new nodes as specified. If cnti is greater than 0, replace the edge with cnti+1 new edges and cnti new nodes. This transformation increases the size of the graph.\",\n    \"Step 3 - Reachability Computation\": \"To determine which nodes are reachable, you need to perform a breadth-first search (BFS) or depth-first search (DFS) starting from node 0. The search should stop once the maximum number of moves (maxMoves) is reached or if there are no more nodes to explore.\",\n    \"Step 4 - Optimization Considerations\": \"Given the potential size of the graph (up to 3000 nodes and 104 edges), make sure the solution scales efficiently. You may need to use a priority queue or similar data structure to manage the exploration of nodes within the move limit.\",\n    \"Step 5 - Output Format\": \"Return the number of nodes reachable from node 0, taking into account the distance constraint (maxMoves). The output should be an integer.\",\n    \"Step 6 - Constraints Validation\": \"Ensure that the solution works efficiently for edge cases, such as when there are no edges or when maxMoves is very large.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"edges\": [\n          [\n            0,\n            1,\n            10\n          ],\n          [\n            0,\n            2,\n            1\n          ],\n          [\n            1,\n            2,\n            2\n          ]\n        ],\n        \"maxMoves\": 6,\n        \"n\": 3\n      },\n      \"output\": 13,\n      \"explanation\": \"The edge subdivisions create a graph with 13 reachable nodes within 6 moves.\"\n    },\n    {\n      \"input\": {\n        \"edges\": [\n          [\n            0,\n            1,\n            4\n          ],\n          [\n            1,\n            2,\n            6\n          ],\n          [\n            0,\n            2,\n            8\n          ],\n          [\n            1,\n            3,\n            1\n          ]\n        ],\n        \"maxMoves\": 10,\n        \"n\": 4\n      },\n      \"output\": 23,\n      \"explanation\": \"After subdividing the edges, the new graph contains 23 reachable nodes within 10 moves.\"\n    },\n    {\n      \"input\": {\n        \"edges\": [\n          [\n            1,\n            2,\n            4\n          ],\n          [\n            1,\n            4,\n            5\n          ],\n          [\n            1,\n            3,\n            1\n          ],\n          [\n            2,\n            3,\n            4\n          ],\n          [\n            3,\n            4,\n            5\n          ]\n        ],\n        \"maxMoves\": 17,\n        \"n\": 5\n      },\n      \"output\": 1,\n      \"explanation\": \"Node 0 is disconnected, so only node 0 is reachable.\"\n    }\n  ],\n  \"constraints\": {\n    \"edges_length\": \"0 <= edges.length <= min(n * (n - 1) / 2, 104)\",\n    \"nodes_count\": \"1 <= n <= 3000\",\n    \"moves_limit\": \"0 <= maxMoves <= 109\",\n    \"new_nodes_count\": \"0 <= cnti <= 104\",\n    \"no_multiple_edges\": \"The graph has no multiple edges.\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm to work efficiently for large graphs and ensure it handles the maxMoves constraint effectively?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Make a list for numbers from 1 to `n`. Replace multiples of 3 with 'Fizz', 5 with 'Buzz', and both with 'FizzBuzz'."}, {"role": "assistant", "content": "{\n  \"title\": \"FizzBuzz Problem\",\n  \"description\": \"Generate a string array for integers from 1 to `n` with the following conditions:\",\n  \"rules\": [\n    \"If `i` is divisible by 3 and 5, set `answer[i] = \\\"FizzBuzz\\\"`.\",\n    \"If `i` is divisible by 3 only, set `answer[i] = \\\"Fizz\\\"`.\",\n    \"If `i` is divisible by 5 only, set `answer[i] = \\\"Buzz\\\"`.\",\n    \"Otherwise, set `answer[i] = i` (as a string).\"\n  ],\n  \"input\": {\n    \"name\": \"n\",\n    \"type\": \"integer\",\n    \"description\": \"The number of elements in the output array.\",\n    \"constraints\": \"1 <= n <= 10^4\"\n  },\n  \"output\": {\n    \"type\": \"array of strings\",\n    \"description\": \"A string array containing the FizzBuzz sequence for integers 1 to n.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 3\n      },\n      \"output\": [\n        \"1\",\n        \"2\",\n        \"Fizz\"\n      ],\n      \"explanation\": \"3 is divisible by 3, so replace it with 'Fizz'.\"\n    },\n    {\n      \"input\": {\n        \"n\": 5\n      },\n      \"output\": [\n        \"1\",\n        \"2\",\n        \"Fizz\",\n        \"4\",\n        \"Buzz\"\n      ],\n      \"explanation\": \"5 is divisible by 5, so replace it with 'Buzz'.\"\n    },\n    {\n      \"input\": {\n        \"n\": 15\n      },\n      \"output\": [\n        \"1\",\n        \"2\",\n        \"Fizz\",\n        \"4\",\n        \"Buzz\",\n        \"Fizz\",\n        \"7\",\n        \"8\",\n        \"Fizz\",\n        \"Buzz\",\n        \"11\",\n        \"Fizz\",\n        \"13\",\n        \"14\",\n        \"FizzBuzz\"\n      ],\n      \"explanation\": \"15 is divisible by 3 and 5, so replace it with 'FizzBuzz'.\"\n    }\n  ],\n  \"hints\": [\n    \"Use a loop from 1 to `n` to iterate over each number.\",\n    \"Check divisibility conditions for 3 and 5 using the modulus operator (`%`).\",\n    \"Decide the output string for each iteration based on the conditions.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Iterate through the numbers in O(n) time with O(n) space for the result array.\",\n    \"constraints\": \"Avoid excessive string concatenation or nested loops.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Generate all valid segmentations of a string using dictionary words."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s` and a dictionary of strings `wordDict`, add spaces in `s` to construct a sentence where each word is a valid dictionary word. Return all possible sentences in any order. The same word in the dictionary may be reused multiple times in the segmentation.\",\n  \"objective\": \"Design an algorithm to generate all valid segmentations of the string using the given dictionary.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves generating all valid segmentations where substrings are in `wordDict`.\",\n    \"Step 2 - Backtracking\": \"Use backtracking to explore all possible partitions of `s` and verify each partition against `wordDict`.\",\n    \"Step 3 - Memoization\": \"Cache results for substrings to avoid redundant computations.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as no valid segmentations, repeated dictionary words, or empty strings.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm handles up to the constraint limits efficiently using memoization and pruning.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"catsanddog\",\n        \"wordDict\": [\n          \"cat\",\n          \"cats\",\n          \"and\",\n          \"sand\",\n          \"dog\"\n        ]\n      },\n      \"output\": [\n        \"cats and dog\",\n        \"cat sand dog\"\n      ],\n      \"explanation\": \"Two valid segmentations of 'catsanddog' are 'cats and dog' and 'cat sand dog'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"pineapplepenapple\",\n        \"wordDict\": [\n          \"apple\",\n          \"pen\",\n          \"applepen\",\n          \"pine\",\n          \"pineapple\"\n        ]\n      },\n      \"output\": [\n        \"pine apple pen apple\",\n        \"pineapple pen apple\",\n        \"pine applepen apple\"\n      ],\n      \"explanation\": \"Three valid segmentations of 'pineapplepenapple' are provided.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"catsandog\",\n        \"wordDict\": [\n          \"cats\",\n          \"dog\",\n          \"sand\",\n          \"and\",\n          \"cat\"\n        ]\n      },\n      \"output\": [],\n      \"explanation\": \"No valid segmentations exist.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 20\",\n    \"dictionary_size\": \"1 <= wordDict.length <= 1000\",\n    \"word_length\": \"1 <= wordDict[i].length <= 10\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm to minimize redundant substring checks?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given two strings, `s1` and `s2`, which are anagrams of each other. Find the number of swaps needed to transform `s1` into `s2`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two anagrams `s1` and `s2`, determine the smallest number `k` such that `s1` and `s2` are `k`-similar. Two strings are `k`-similar if we can swap the positions of two letters in `s1` exactly `k` times to make the resulting string equal to `s2`.\",\n  \"objective\": \"Find the smallest number `k` of swaps required to transform string `s1` into string `s2` through a series of letter swaps.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Given that `s1` and `s2` are anagrams, they contain the same characters, and the problem is asking for the minimum number of swaps to convert `s1` to `s2`. Each swap can only involve two positions, so each step should aim to swap two characters to match the target string.\",\n    \"Step 2 - Approach\": \"To solve this problem efficiently, iterate through both strings and keep track of positions where `s1` and `s2` differ. Then, explore how to swap elements in `s1` to reduce the number of differences at each step. Each swap should aim to bring `s1` closer to `s2`.\",\n    \"Step 3 - Algorithm Design\": \"Use a breadth-first search (BFS) approach to explore all possible swap sequences. Each state represents a partial transformation of `s1` into `s2`, and the BFS explores each possible swap. The goal is to minimize the number of swaps to reach the desired string.\",\n    \"Step 4 - Edge Case Considerations\": \"Ensure that the algorithm handles edge cases such as strings that are already equal (i.e., `k = 0`), as well as the constraints on string length (1 \\u2264 s1.length \\u2264 20). This will ensure that the solution can handle both small and medium-length strings efficiently.\",\n    \"Step 5 - Final Check\": \"Ensure that the solution works within the given constraints (1 \\u2264 s1.length \\u2264 20) and that the BFS approach or other search methods do not exceed time or memory limits.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s1\": \"ab\",\n        \"s2\": \"ba\"\n      },\n      \"output\": 1,\n      \"explanation\": \"We can swap the two characters 'a' and 'b' once to convert 'ab' into 'ba'. Therefore, the result is 1.\"\n    },\n    {\n      \"input\": {\n        \"s1\": \"abc\",\n        \"s2\": \"bca\"\n      },\n      \"output\": 2,\n      \"explanation\": \"We can first swap 'a' and 'b' to get 'bac', then swap 'a' and 'c' to get 'bca'. Thus, the minimum number of swaps required is 2.\"\n    }\n  ],\n  \"constraints\": {\n    \"s1_length\": \"1 <= s1.length <= 20\",\n    \"s2_length\": \"s2.length == s1.length\",\n    \"valid_characters\": \"s1 and s2 contain only lowercase letters from the set {'a', 'b', 'c', 'd', 'e', 'f'}\",\n    \"anagram_condition\": \"s2 is an anagram of s1\"\n  },\n  \"follow_up\": \"Can you optimize this solution to handle cases where `s1.length` approaches 20, and the number of possible swaps increases exponentially? Consider implementing memoization or dynamic programming to reduce redundant calculations.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count the number of good subarrays in `nums` with exactly `k` different integers."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums` and an integer `k`, return the number of **good subarrays** of `nums`. A **good array** is an array where the number of different integers in that array is exactly `k`. For example, `[1,2,3,1,2]` has `3` different integers: `1`, `2`, and `3`. A **subarray** is a **contiguous** part of an array.\",\n  \"objective\": \"Design an efficient algorithm to count the number of good subarrays in the given array `nums` with exactly `k` different integers.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the requirements: Identify and count the subarrays with exactly `k` different integers in the given array `nums`.\",\n    \"Step 2 - Initial Approach\": \"Consider a brute-force approach: Iterate through all possible subarrays and count the number of different integers in each. However, this may not be efficient for large arrays.\",\n    \"Step 3 - Optimized Approach with Sliding Window\": \"Use a sliding window technique with two pointers to efficiently count the number of different integers in each subarray. Maintain a frequency map of the integers within the window.\",\n    \"Step 4 - Algorithm Steps\": \"1. Initialize two pointers for the sliding window. 2. Expand the window by moving the right pointer and updating the frequency map. 3. If the window contains exactly `k` different integers, count the subarray. 4. Adjust the left pointer to maintain the window condition. 5. Continue until the right pointer reaches the end of the array.\",\n    \"Step 5 - Output Format\": \"Ensure the function returns the total count of good subarrays as an integer.\",\n    \"Step 6 - Code Efficiency and Edge Cases\": \"Focus on achieving an efficient solution with time complexity of O(n), where `n` is the length of `nums`. Handle edge cases such as arrays with all identical elements or very large arrays.\",\n    \"Final Check - Constraints Verification\": \"Verify the solution operates within the constraints: `1 <= nums.length <= 2 * 10^4` and `1 <= nums[i], k <= nums.length`. Ensure the algorithm is robust and handles large inputs efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          1,\n          2,\n          3\n        ],\n        \"k\": 2\n      },\n      \"output\": 7,\n      \"explanation\": \"Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          1,\n          3,\n          4\n        ],\n        \"k\": 3\n      },\n      \"output\": 3,\n      \"explanation\": \"Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 2 * 10^4\",\n    \"nums_range\": \"1 <= nums[i], k <= nums.length\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle even larger arrays efficiently, ensuring the algorithm scales well with input size and maintains correctness?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count how many reverse pairs exist in the array `nums`. A reverse pair is when one number is greater than double another number."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums`, find the number of reverse pairs in the array. A reverse pair is defined as a pair `(i, j)` where `0 <= i < j < nums.length` and `nums[i] > 2 * nums[j]`.\",\n  \"objective\": \"Design an efficient algorithm to count the number of reverse pairs in `nums`, aiming for a runtime better than the naive `O(n^2)` approach.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the definition of a reverse pair. Iterate through all pairs `(i, j)` and check if the condition `nums[i] > 2 * nums[j]` holds. A naive solution has a time complexity of `O(n^2)`, which is not feasible for large arrays.\",\n    \"Step 2 - Optimized Approach\": \"Leverage a modified merge sort or binary indexed tree (BIT) to count reverse pairs while maintaining an efficient runtime. During the merge process, count the reverse pairs that cross the two sorted halves.\",\n    \"Step 3 - Implementation with Merge Sort\": \"Divide the array recursively into halves. While merging, count pairs `(i, j)` where `nums[i] > 2 * nums[j]`. Maintain a sorted order to make counting efficient using a two-pointer technique.\",\n    \"Step 4 - Output Format\": \"Return the total count of reverse pairs as an integer. Ensure edge cases, such as arrays of size 1 or arrays with identical elements, are handled correctly.\",\n    \"Step 5 - Complexity Analysis\": \"Ensure that the implementation runs in `O(n log n)` time for the merge sort approach and uses `O(n)` extra space for auxiliary arrays.\",\n    \"Final Check - Edge Cases\": \"Verify the implementation for edge cases, such as `nums` with all positive or negative values, very large integers, or arrays with duplicate values.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          3,\n          2,\n          3,\n          1\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The reverse pairs are (1, 4) and (3, 4), where the conditions `nums[i] > 2 * nums[j]` are satisfied.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          4,\n          3,\n          5,\n          1\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The reverse pairs are (1, 4), (2, 4), and (3, 4).\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          5,\n          4,\n          3,\n          2,\n          1\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"The reverse pairs are (0, 4), (1, 4), (1, 3), and (2, 4).\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 5 * 10^4\",\n    \"nums_values_range\": \"-2^31 <= nums[i] <= 2^31 - 1\",\n    \"edge_cases\": \"Empty arrays, single-element arrays, arrays with all identical elements, and arrays with large positive or negative integers.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"Can you solve the problem using a binary indexed tree or segment tree for enhanced efficiency?\",\n    \"question_2\": \"How would you modify the approach if the condition for reverse pairs was different, e.g., `nums[i] + nums[j] > 2 * target`?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the missing number from an array of numbers."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `nums` containing `n` distinct numbers in the range `[0, n]`, find the single missing number in the range. Return the missing number as an integer.\",\n  \"objective\": \"Design an efficient algorithm to determine the missing number using `O(n)` time complexity and `O(1)` extra space. Explore mathematical summation or XOR techniques to achieve optimal results.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the array contains `n` numbers, all distinct, ranging from `0` to `n`. The missing number can be identified by comparing the sum or XOR of the expected range to the actual values in the array.\",\n    \"Step 2 - Summation Formula Approach\": \"Compute the expected sum of numbers from `0` to `n` using the formula `n * (n + 1) / 2`. Subtract the actual sum of the array from the expected sum to find the missing number.\",\n    \"Step 3 - XOR Approach\": \"Alternatively, XOR all numbers in the array and XOR the result with all numbers from `0` to `n`. The remaining value is the missing number due to the properties of XOR.\",\n    \"Step 4 - Edge Cases\": \"Handle cases like an empty array (`n = 1`), arrays missing the first number (`0`), and arrays missing the last number (`n`).\",\n    \"Step 5 - Output\": \"Return the missing number as an integer.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          0,\n          1\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The numbers are in the range [0, 3]. The missing number is `2`.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          1\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The numbers are in the range [0, 2]. The missing number is `2`.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          9,\n          6,\n          4,\n          2,\n          3,\n          5,\n          7,\n          0,\n          1\n        ]\n      },\n      \"output\": 8,\n      \"explanation\": \"The numbers are in the range [0, 9]. The missing number is `8`.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= n <= 10^4\",\n    \"value_range\": \"0 <= nums[i] <= n\",\n    \"uniqueness\": \"All numbers in `nums` are unique.\"\n  },\n  \"follow_up\": \"Can you implement the solution using XOR to achieve constant space and linear time complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count numbers that look the same upside down in a range."}, {"role": "assistant", "content": "{\n  \"description\": \"Count the number of strobogrammatic numbers within a given range.\",\n  \"objective\": \"Return the count of all valid strobogrammatic numbers between `low` and `high`, inclusive.\",\n  \"steps\": [\n    \"Use the strobogrammatic digit pairs to recursively or iteratively generate all numbers between the lengths of `low` and `high`.\",\n    \"Filter generated numbers to ensure they fall within the bounds of the range.\",\n    \"Count the valid numbers and return the result.\"\n  ],\n  \"examples\": [\n    {\n      \"input\": {\n        \"low\": \"50\",\n        \"high\": \"100\"\n      },\n      \"output\": 3\n    },\n    {\n      \"input\": {\n        \"low\": \"0\",\n        \"high\": \"0\"\n      },\n      \"output\": 1\n    }\n  ],\n  \"constraints\": [\n    \"The lengths of `low` and `high` are between 1 and 15.\",\n    \"Both `low` and `high` are valid strobogrammatic numbers with no leading zeros (except for '0').\",\n    \"`low` is less than or equal to `high`.\"\n  ],\n  \"follow_up\": \"Can you optimize the range generation process to avoid generating numbers that are outside the bounds of `low` and `high`?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find how many changes you need to make to turn one gene into another using a list of valid genes."}, {"role": "assistant", "content": "{\n  \"title\": \"Minimum Genetic Mutation\",\n  \"description\": \"Given a start gene, an end gene, and a gene bank, determine the minimum number of mutations required to convert the start gene into the end gene. A mutation involves changing a single character in the gene string. Only genes present in the bank are valid intermediate mutations.\",\n  \"input\": {\n    \"startGene\": {\n      \"type\": \"string\",\n      \"description\": \"The initial gene string to start mutation.\",\n      \"constraints\": \"Must be 8 characters long and contain only 'A', 'C', 'G', 'T'.\"\n    },\n    \"endGene\": {\n      \"type\": \"string\",\n      \"description\": \"The target gene string to reach.\",\n      \"constraints\": \"Must be 8 characters long and contain only 'A', 'C', 'G', 'T'.\"\n    },\n    \"bank\": {\n      \"type\": \"array\",\n      \"description\": \"A list of valid gene strings that can be used as intermediate mutations.\",\n      \"constraints\": \"Each gene must be 8 characters long and consist only of 'A', 'C', 'G', 'T'. Maximum length is 10.\"\n    }\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The minimum number of mutations required to convert the start gene to the end gene, or -1 if the mutation is not possible.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"startGene\": \"AACCGGTT\",\n        \"endGene\": \"AACCGGTA\",\n        \"bank\": [\n          \"AACCGGTA\"\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"One mutation changes 'AACCGGTT' to 'AACCGGTA', which is in the bank.\"\n    },\n    {\n      \"input\": {\n        \"startGene\": \"AACCGGTT\",\n        \"endGene\": \"AAACGGTA\",\n        \"bank\": [\n          \"AACCGGTA\",\n          \"AACCGCTA\",\n          \"AAACGGTA\"\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"Mutations are 'AACCGGTT' -> 'AACCGGTA' -> 'AAACGGTA'.\"\n    },\n    {\n      \"input\": {\n        \"startGene\": \"AACCGGTT\",\n        \"endGene\": \"AAACGGTA\",\n        \"bank\": [\n          \"AACCGGTA\",\n          \"AACCGCTA\"\n        ]\n      },\n      \"output\": -1,\n      \"explanation\": \"The end gene 'AAACGGTA' is not reachable as it is not in the bank.\"\n    }\n  ],\n  \"hints\": [\n    \"Use a breadth-first search (BFS) to explore all possible mutations.\",\n    \"Consider each gene in the bank as a node in a graph where an edge exists if two genes differ by exactly one character.\",\n    \"Track visited genes to avoid loops.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve a time complexity proportional to the size of the gene bank and number of possible mutations.\",\n    \"constraints\": \"Ensure memory usage is efficient by avoiding duplicate processing of genes.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a tree is a BST."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary tree, determine whether it is a valid binary search tree (BST). A BST is defined as a tree where the left subtree contains only values less than the root, the right subtree contains only values greater than the root, and both subtrees are themselves BSTs.\",\n  \"objective\": \"Design an algorithm to validate whether the given tree satisfies the BST property.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the BST property applies recursively to all nodes in the tree, with bounds for allowed values determined by parent nodes.\",\n    \"Step 2 - Recursive Validation\": \"Traverse the tree recursively, passing valid range bounds for each subtree.\",\n    \"Step 3 - Iterative Validation\": \"Alternatively, use a stack to perform an in-order traversal and check if the nodes are in strictly increasing order.\",\n    \"Step 4 - Optimize\": \"Ensure the solution runs in O(n) time with O(h) space, where `h` is the height of the tree.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider edge cases like an empty tree, a single-node tree, and trees with duplicate values.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          2,\n          1,\n          3\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The tree satisfies the BST property.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          5,\n          1,\n          4,\n          null,\n          null,\n          3,\n          6\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The value 4 in the right subtree of 5 violates the BST property.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"1 <= number of nodes <= 10^4\",\n    \"node_values\": \"-2^31 <= Node.val <= 2^31 - 1\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Validate if an array is a UTF-8 sequence."}, {"role": "assistant", "content": "{\n  \"title\": \"Validate UTF-8 Encoding\",\n  \"description\": \"Check if a given array of integers represents a valid UTF-8 encoding sequence.\",\n  \"objective\": \"Validate each byte according to the UTF-8 encoding rules for characters ranging from 1 to 4 bytes.\",\n  \"input\": {\n    \"name\": \"data\",\n    \"type\": \"array of integers\",\n    \"description\": \"Each element represents a byte, where only the least significant 8 bits are used.\",\n    \"constraints\": \"1 <= data.length <= 20,000, 0 <= data[i] <= 255\"\n  },\n  \"output\": {\n    \"type\": \"boolean\",\n    \"description\": \"`true` if the input represents a valid UTF-8 encoding sequence, otherwise `false`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"data\": [\n          197,\n          130,\n          1\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The sequence `11000101 10000010 00000001` represents a valid 2-byte character followed by a valid 1-byte character.\"\n    },\n    {\n      \"input\": {\n        \"data\": [\n          235,\n          140,\n          4\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The sequence `11101011 10001100 00000100` starts with a valid 3-byte prefix, but the second continuation byte is invalid.\"\n    },\n    {\n      \"input\": {\n        \"data\": [\n          0\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The sequence `00000000` is a valid 1-byte character.\"\n    }\n  ],\n  \"hints\": [\n    \"Check the leading bits of the first byte to determine the number of bytes in the character.\",\n    \"For continuation bytes, validate that they start with `10`.\",\n    \"Iterate through the input array, ensuring each character sequence adheres to the UTF-8 rules.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Ensure a single pass over the array with `O(n)` time complexity.\",\n    \"constraints\": \"Avoid unnecessary computations by directly analyzing the binary representation of each byte.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find where a cycle starts in a linked list or return null if there is no cycle."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `head` of a linked list, return the node where the cycle begins. If there is no cycle, return `null`. A cycle exists if a node in the list can be revisited by following the `next` pointer. Do not modify the linked list.\",\n  \"objective\": \"Design an efficient algorithm to detect the starting node of a cycle in a linked list.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves identifying the first node of a cycle in a linked list, if a cycle exists.\",\n    \"Step 2 - Two Pointer Technique\": \"Use Floyd's Tortoise and Hare algorithm to detect the cycle. If a cycle is detected, reset one pointer to the head and move both pointers one step at a time to find the start of the cycle.\",\n    \"Step 3 - Handle Edge Cases\": \"Handle cases such as an empty list, a single node with no cycle, or a very long list.\",\n    \"Step 4 - Optimize\": \"Ensure the solution runs in O(n) time and uses O(1) space.\",\n    \"Step 5 - Validate\": \"Verify the correctness of the solution through comprehensive test cases.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          3,\n          2,\n          0,\n          -4\n        ],\n        \"pos\": 1\n      },\n      \"output\": \"tail connects to node index 1\",\n      \"explanation\": \"The tail connects to the second node, forming a cycle that starts at index 1.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2\n        ],\n        \"pos\": 0\n      },\n      \"output\": \"tail connects to node index 0\",\n      \"explanation\": \"The tail connects to the first node, forming a cycle that starts at index 0.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          1\n        ],\n        \"pos\": -1\n      },\n      \"output\": \"no cycle\",\n      \"explanation\": \"There is no cycle in the linked list.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 10^4\",\n    \"node_values\": \"-10^5 <= Node.val <= 10^5\",\n    \"pos_value\": \"pos is -1 or a valid index in the linked list.\"\n  },\n  \"follow_up\": \"Can you solve the problem using constant memory?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Calculate the maximum vacation days possible given flights and vacation days."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `flights` matrix for `n` cities and the `days` matrix for vacation days, determine the maximum vacation days possible within `k` weeks, starting in city 0 on the first Monday, with flights allowed only on Mondays.\",\n  \"objective\": \"Use dynamic programming to compute the maximum vacation days by tracking vacation days in each city across all weeks, leveraging possible flights.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize DP Table\": \"Create a 2D DP array `dp` where `dp[i][j]` represents the maximum vacation days attainable starting from city `i` in week `j`. Begin by setting initial values of `dp[i][k-1]` for the last week `k-1`, where each entry is simply the value of `days[i][k-1]` for that city.\",\n    \"Step 2 - Fill DP Table Backwards\": \"Iterate backwards from week `k-2` to week `0`. For each city `i` in the current week, consider two scenarios: staying in the same city or taking a flight to another city `j` (if `flights[i][j] == 1`). Update `dp[i][week]` as the maximum of staying in `i` (`days[i][week] + dp[i][week+1]`) or moving to `j` (`days[j][week] + dp[j][week+1]`).\",\n    \"Step 3 - Compute Maximum for Starting City\": \"Since we start in city 0, `dp[0][0]` at the end of the computation will give the maximum number of vacation days starting from city 0.\",\n    \"Step 4 - Return Result\": \"Return `dp[0][0]`, which represents the maximum vacation days possible over all cities and weeks given the constraints of flights and week structure.\",\n    \"Final Check - Constraints Verification\": \"Ensure solution meets constraints: handle cases where all cities are isolated (no flights available) or where `days[i][j]` is minimized (0 vacation days for a city in a given week). Also, account for the time complexity due to constraints (`n`, `k` up to 100), ensuring DP is appropriately used to avoid redundant calculations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"flights\": [\n          [\n            0,\n            1,\n            1\n          ],\n          [\n            1,\n            0,\n            1\n          ],\n          [\n            1,\n            1,\n            0\n          ]\n        ],\n        \"days\": [\n          [\n            1,\n            3,\n            1\n          ],\n          [\n            6,\n            0,\n            3\n          ],\n          [\n            3,\n            3,\n            3\n          ]\n        ]\n      },\n      \"output\": 12,\n      \"explanation\": \"Maximize vacation days by flying to city 1 in week 1, then city 2 in week 2, and staying in city 2 in week 3.\"\n    },\n    {\n      \"input\": {\n        \"flights\": [\n          [\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0\n          ]\n        ],\n        \"days\": [\n          [\n            1,\n            1,\n            1\n          ],\n          [\n            7,\n            7,\n            7\n          ],\n          [\n            7,\n            7,\n            7\n          ]\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"No flights available, so stay in city 0 for all weeks with limited vacation days.\"\n    }\n  ],\n  \"constraints\": {\n    \"number_of_cities\": \"1 <= n <= 100\",\n    \"number_of_weeks\": \"1 <= k <= 100\",\n    \"flight_matrix\": \"flights[i][j] is either 0 or 1, with flights[i][i] = 0\",\n    \"vacation_days\": \"0 <= days[i][j] <= 7\"\n  },\n  \"follow_up\": \"Optimize space complexity\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Smooth a grayscale image by applying a 3x3 filter to replace each cell with the average of itself and its neighbors."}, {"role": "assistant", "content": "{\n  \"description\": \"Apply a 3x3 image smoothing filter to an m x n integer matrix representing a grayscale image, where each cell is replaced by the floor of the average of itself and its valid neighboring cells.\",\n  \"objective\": \"Efficiently calculate the smoothed values for each cell using a two-pass approach: first, encode smoothed values in the original matrix, then decode them to produce the final result.\",\n  \"meta_prompt\": {\n    \"Step 1 - Save Dimensions\": \"Store the dimensions of the image in variables `m` (rows) and `n` (columns).\",\n    \"Step 2 - Calculate Smoothed Values\": \"Iterate over each cell in the matrix. For each cell, initialize `sum` and `count` to 0, and iterate over its valid 3x3 neighborhood. Add valid neighboring cell values to `sum` and increment `count`. Encode the smoothed value as `img[i][j] += (sum / count) * 256`.\",\n    \"Step 3 - Extract Smoothed Values\": \"Traverse the matrix again, extracting the smoothed value from each cell using `img[i][j] / 256`, and update `img[i][j]` with the extracted value.\",\n    \"Step 4 - Return Result\": \"Return the updated matrix `img` containing the smoothed grayscale values.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"img\": [\n          [\n            1,\n            1,\n            1\n          ],\n          [\n            1,\n            0,\n            1\n          ],\n          [\n            1,\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          0,\n          0,\n          0\n        ],\n        [\n          0,\n          0,\n          0\n        ],\n        [\n          0,\n          0,\n          0\n        ]\n      ],\n      \"explanation\": \"Each cell's smoothed value is calculated as the floor of the average of its valid neighboring cells.\"\n    },\n    {\n      \"input\": {\n        \"img\": [\n          [\n            100,\n            200,\n            100\n          ],\n          [\n            200,\n            50,\n            200\n          ],\n          [\n            100,\n            200,\n            100\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          137,\n          141,\n          137\n        ],\n        [\n          141,\n          138,\n          141\n        ],\n        [\n          137,\n          141,\n          137\n        ]\n      ],\n      \"explanation\": \"For example, cell (0, 0) averages the values [100, 200, 200, 50], yielding floor(137.5) = 137.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size\": \"1 <= m, n <= 200\",\n    \"value_range\": \"0 <= img[i][j] <= 255\"\n  },\n  \"follow_up\": \"Analyze the time complexity of this two-pass approach and discuss optimizations for larger matrices.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Sort a string by frequency of characters."}, {"role": "assistant", "content": "{\n  \"title\": \"Frequency Sort of String\",\n  \"description\": \"Given a string `s`, sort it in **decreasing order** based on the **frequency** of characters. If multiple answers are possible, return any of them.\",\n  \"input\": {\n    \"s\": {\n      \"type\": \"string\",\n      \"description\": \"A string consisting of uppercase and lowercase English letters and digits.\",\n      \"constraints\": {\n        \"length\": \"1 <= s.length <= 5 * 10^5\"\n      }\n    }\n  },\n  \"output\": {\n    \"type\": \"string\",\n    \"description\": \"A string sorted in decreasing order of character frequency.\"\n  },\n  \"examples\": [\n    {\n      \"input\": \"tree\",\n      \"output\": \"eert\",\n      \"explanation\": \"'e' appears twice while 'r' and 't' both appear once. So 'e' must appear before both 'r' and 't'.\"\n    },\n    {\n      \"input\": \"cccaaa\",\n      \"output\": \"aaaccc\",\n      \"explanation\": \"Both 'c' and 'a' appear three times, so both 'cccaaa' and 'aaaccc' are valid answers.\"\n    },\n    {\n      \"input\": \"Aabb\",\n      \"output\": \"bbAa\",\n      \"explanation\": \"'bbaA' is also a valid answer. Uppercase and lowercase characters are treated as different.\"\n    }\n  ],\n  \"hints\": [\n    \"Use a hash map to count the frequency of each character.\",\n    \"Sort the characters based on their frequencies.\",\n    \"Construct the resulting string based on the sorted order.\"\n  ],\n  \"constraints\": {\n    \"timeComplexity\": \"O(n log k), where k is the number of unique characters in the string\",\n    \"spaceComplexity\": \"O(k)\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create an array of bit counts for numbers 0 to n."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `n`, generate an array `ans` where `ans[i]` contains the count of `1` bits in the binary representation of `i` for all `0 <= i <= n`. Optimize the solution for linear time complexity, `O(n)`.\",\n  \"objective\": \"Design an efficient algorithm to calculate the number of `1`s in binary representations without using built-in bit-counting functions.\",\n  \"meta_prompt\": {\n    \"Step 1 - Analyze the Problem\": \"Each number `i` can be derived from its binary representation. Use the property that the number of `1`s in `i` can be calculated as `ans[i] = ans[i >> 1] + (i & 1)`.\",\n    \"Step 2 - Precompute Values\": \"Initialize an array of size `n + 1` and iteratively calculate the count of `1`s for each index using the above relation.\",\n    \"Step 3 - Optimize\": \"Avoid redundant calculations by reusing results from previous indices (`i >> 1`).\",\n    \"Step 4 - Validate\": \"Generate results for edge cases like `n = 0`, `n = 1`, and large values of `n`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 2\n      },\n      \"output\": [\n        0,\n        1,\n        1\n      ],\n      \"explanation\": \"Binary representations: 0->'0', 1->'1', 2->'10'. Counts of `1`s: [0, 1, 1].\"\n    },\n    {\n      \"input\": {\n        \"n\": 5\n      },\n      \"output\": [\n        0,\n        1,\n        1,\n        2,\n        1,\n        2\n      ],\n      \"explanation\": \"Binary representations: 0->'0', 1->'1', 2->'10', 3->'11', 4->'100', 5->'101'. Counts: [0, 1, 1, 2, 1, 2].\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"0 <= n <= 100000\",\n    \"bit_operations\": \"Avoid using built-in bit-count functions.\"\n  },\n  \"follow_up\": \"Can you derive a solution that iteratively generates the `ans` array in one pass, ensuring `O(n)` runtime complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the closest leaf to a node in a tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the value of the nearest leaf node to a given target node `k` in a binary tree.\",\n  \"objective\": \"Utilize tree traversal to identify the path to the target node and determine the closest leaf node, accounting for both subtree and ancestor paths.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Traverse the tree to annotate each node with the distance to its nearest leaf in its subtree. Use depth-first search (DFS) for efficient computation.\",\n    \"Step 2\": \"Identify the path from the root to the target node `k` using a depth-first traversal. Store all nodes along this path.\",\n    \"Step 3\": \"For each node on the path to `k`, calculate potential distances to leaf nodes by considering both subtree and ancestor paths.\",\n    \"Step 4\": \"Compare distances for all candidate leaf nodes and determine the nearest leaf to the target node `k`.\",\n    \"Step 5\": \"Return the value of the closest leaf node.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          3,\n          2\n        ],\n        \"k\": 1\n      },\n      \"output\": 2,\n      \"explanation\": \"The nearest leaf node to the target node 1 is 2 (or 3), both at a distance of 1.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1\n        ],\n        \"k\": 1\n      },\n      \"output\": 1,\n      \"explanation\": \"The only node is the root itself, which is also the nearest leaf.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3,\n          4,\n          null,\n          null,\n          null,\n          5,\n          null,\n          6\n        ],\n        \"k\": 2\n      },\n      \"output\": 3,\n      \"explanation\": \"The nearest leaf node to the target node 2 is 3, which is closer than leaf 6.\"\n    }\n  ],\n  \"constraints\": {\n    \"tree_structure\": \"Binary tree with unique values for each node.\",\n    \"node_range\": \"1 <= Node.val <= 1000\",\n    \"tree_size\": \"1 <= number of nodes <= 1000\",\n    \"objective\": \"Minimize the distance to the closest leaf node for any valid target node `k`.\"\n  },\n  \"follow_up\": \"Discuss how to optimize the annotation and path-finding steps for larger trees. Consider space and time complexity trade-offs in your approach.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if one string can become another after some shifts."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two strings `s` and `goal`, your task is to determine if `s` can become `goal` after performing a number of **shifts** on `s`. A **shift** involves moving the leftmost character of `s` to the rightmost position. The goal is to check if it's possible to transform `s` into `goal` using a sequence of shifts.\",\n  \"objective\": \"Design an efficient algorithm to determine if one string can be transformed into another string by repeatedly shifting its characters. Aim for an optimal solution with O(n) time complexity, where n is the length of the strings.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Start by understanding the transformation process: a shift involves moving the first character of the string `s` to the end. If we perform a series of shifts on `s`, we need to check if one of the shifted versions matches `goal`.\",\n    \"Step 2 - Initial Approach\": \"A brute-force approach would involve simulating all shifts of `s` and checking if any of them match `goal`. However, this could lead to O(n^2) time complexity.\",\n    \"Step 3 - Optimized Approach\": \"Instead of simulating each shift, consider concatenating `s` with itself. This allows us to efficiently check if `goal` is a substring of the concatenated string, since all possible shifts of `s` will appear as substrings in `s + s`.\",\n    \"Step 4 - Output Format\": \"Return `true` if `goal` is a substring of the concatenated string `s + s`; otherwise, return `false`.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Focus on optimizing for O(n) time complexity by checking for the substring within the concatenated string. Ensure the solution works for edge cases, such as when the strings are of length 1 or contain repeating characters.\",\n    \"Final Check - Constraints Verification\": \"Ensure the solution operates within the constraints 1 <= s.length, goal.length <= 100, where both strings consist of lowercase English letters.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"abcde\",\n        \"goal\": \"cdeab\"\n      },\n      \"output\": true,\n      \"explanation\": \"By shifting `s` 2 times, it becomes `goal`.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"abcde\",\n        \"goal\": \"abced\"\n      },\n      \"output\": false,\n      \"explanation\": \"No number of shifts can transform `s` into `goal`.\"\n    }\n  ],\n  \"constraints\": {\n    \"s_length\": \"1 <= s.length <= 100\",\n    \"goal_length\": \"1 <= goal.length <= 100\",\n    \"characters_range\": \"s and goal consist of lowercase English letters.\"\n  },\n  \"follow_up\": \"Can you optimize the solution further by reducing the space complexity or using a more space-efficient approach?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the closest positions of two words in a list."}, {"role": "assistant", "content": "{\n  \"description\": \"Calculate the shortest distance between two words in an array of strings.\",\n  \"objective\": \"Find the minimum distance between the indices of two given words in a list.\",\n  \"steps\": [\n    \"Iterate through the list, maintaining indices of the latest occurrences of word1 and word2.\",\n    \"Update the shortest distance whenever both words have been encountered.\",\n    \"For each match, calculate the absolute difference between the indices of the two words.\",\n    \"Return the shortest distance found.\"\n  ],\n  \"examples\": [\n    {\n      \"input\": {\n        \"wordsDict\": [\n          \"practice\",\n          \"makes\",\n          \"perfect\",\n          \"coding\",\n          \"makes\"\n        ],\n        \"word1\": \"coding\",\n        \"word2\": \"practice\"\n      },\n      \"output\": 3\n    },\n    {\n      \"input\": {\n        \"wordsDict\": [\n          \"practice\",\n          \"makes\",\n          \"perfect\",\n          \"coding\",\n          \"makes\"\n        ],\n        \"word1\": \"makes\",\n        \"word2\": \"coding\"\n      },\n      \"output\": 1\n    }\n  ],\n  \"constraints\": [\n    \"wordsDict contains between 2 and 105 elements.\",\n    \"Each word in wordsDict has a length between 1 and 10 characters.\",\n    \"Both word1 and word2 are guaranteed to be in wordsDict.\",\n    \"word1 and word2 may or may not be the same.\"\n  ],\n  \"follow_up\": \"How would you handle scenarios where the list is extremely large or queries for distances are frequent? Can you optimize for such cases?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a contiguous subarray of length at least two exists in an array such that its sum is a multiple of `k`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums` and an integer `k`, determine if `nums` contains a contiguous subarray with length at least two whose elements sum to a multiple of `k`. Return `true` if such a subarray exists and `false` otherwise.\",\n  \"objective\": \"Design an efficient solution that leverages prefix sums and hashing to identify a good subarray with a sum that is a multiple of `k`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Identify that we need to find a contiguous subarray of length at least two where the sum is a multiple of `k`. Use prefix sums and modular arithmetic to efficiently track sums of subarrays.\",\n    \"Step 2 - Using Prefix Sums and Modulo Hashing\": \"Track cumulative prefix sums modulo `k` to detect repeated remainders. If a remainder has been seen before and the subarray length is at least two, then the subarray sum is divisible by `k`.\",\n    \"Step 3 - HashMap for Efficient Lookup\": \"Initialize a hashmap `modSeen` to store the first occurrence of each remainder. If a repeated remainder is found with sufficient subarray length, return `true`. Initialize `modSeen[0]` to -1 to handle cases where the prefix sum is directly divisible by `k`.\",\n    \"Step 4 - Iterative Solution\": \"Iterate through `nums`, updating `prefixMod` as `(prefixMod + nums[i]) % k`. For each `prefixMod`, check if it\\u2019s in `modSeen`. If the remainder exists with distance >= 2, return `true`. Otherwise, store the current index in `modSeen`.\",\n    \"Step 5 - Complexity and Constraints\": \"This approach achieves O(n) time complexity by leveraging prefix sums and hash lookups. Ensure it handles constraints where `nums` has up to `10^5` elements and values are large.\",\n    \"Final Check - Constraints Verification\": \"Ensure the solution works within constraints `1 <= nums.length <= 10^5`, `0 <= nums[i] <= 10^9`, and `1 <= k <= 2^31 - 1`, efficiently managing large sums and modulo operations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          23,\n          2,\n          4,\n          6,\n          7\n        ],\n        \"k\": 6\n      },\n      \"output\": true,\n      \"explanation\": \"[2, 4] is a contiguous subarray with a sum of 6, which is a multiple of 6.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          23,\n          2,\n          6,\n          4,\n          7\n        ],\n        \"k\": 6\n      },\n      \"output\": true,\n      \"explanation\": \"[23, 2, 6, 4, 7] is a contiguous subarray with a sum of 42, which is a multiple of 6.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          23,\n          2,\n          6,\n          4,\n          7\n        ],\n        \"k\": 13\n      },\n      \"output\": false,\n      \"explanation\": \"No contiguous subarray with length at least two has a sum that is a multiple of 13.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10^5\",\n    \"element_value\": \"0 <= nums[i] <= 10^9\",\n    \"sum_range\": \"0 <= sum(nums[i]) <= 2^31 - 1\",\n    \"k_range\": \"1 <= k <= 2^31 - 1\"\n  },\n  \"follow_up\": \"Could you extend this solution to handle cases where we want to find multiple subarrays meeting this condition or optimize further for different values of `k`?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find all paths from node 0 to node n-1 in a directed graph."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a directed acyclic graph (DAG) represented by an adjacency list, your task is to find all possible paths from node `0` to node `n - 1`, where `n` is the number of nodes in the graph. The graph is provided as a list `graph[i]`, where each element is a list of nodes you can visit directly from node `i`. Your goal is to return all paths in any order from node `0` to node `n - 1`.\",\n  \"objective\": \"Design an algorithm that efficiently finds all paths from node `0` to node `n - 1` in the given directed acyclic graph (DAG). Aim for an optimal solution that leverages depth-first search (DFS) to explore possible paths and ensure all paths are returned without revisiting nodes in a cycle.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Start by analyzing the structure of the graph. It\\u2019s a DAG, meaning there are no cycles, and the nodes are connected through directed edges. Each node in the graph points to a list of nodes it can reach directly.\",\n    \"Step 2 - Approach with DFS\": \"A depth-first search (DFS) is a good approach to explore all paths from the source (node `0`) to the target (node `n - 1`). As you explore, you need to track the nodes visited in the current path to avoid revisiting them.\",\n    \"Step 3 - Implement DFS with Path Tracking\": \"Implement a DFS that recursively explores each node from node `0`. Keep a path list that stores the nodes in the current path. Once you reach node `n - 1`, record the current path as a valid result. Backtrack by removing the last node from the path after exploring each neighbor.\",\n    \"Step 4 - Output Format\": \"Return a list of all valid paths from node `0` to node `n - 1`. Each path should be represented as a list of node indices.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure your solution handles the graph size efficiently, taking into account that `n` can go up to 15. Consider edge cases such as when there is only one path or no valid path.\",\n    \"Final Check - Constraints Verification\": \"Verify that the graph adheres to the constraints. Ensure that the graph is a valid DAG, with no self-loops, no repeated elements within the adjacency lists, and that the solution handles graphs of size up to `n = 15`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"graph\": [\n          [\n            1,\n            2\n          ],\n          [\n            3\n          ],\n          [\n            3\n          ],\n          []\n        ]\n      },\n      \"output\": [\n        [\n          0,\n          1,\n          3\n        ],\n        [\n          0,\n          2,\n          3\n        ]\n      ],\n      \"explanation\": \"There are two valid paths from node `0` to node `3`: `0 -> 1 -> 3` and `0 -> 2 -> 3`.\"\n    },\n    {\n      \"input\": {\n        \"graph\": [\n          [\n            4,\n            3,\n            1\n          ],\n          [\n            3,\n            2,\n            4\n          ],\n          [\n            3\n          ],\n          [\n            4\n          ],\n          []\n        ]\n      },\n      \"output\": [\n        [\n          0,\n          4\n        ],\n        [\n          0,\n          3,\n          4\n        ],\n        [\n          0,\n          1,\n          3,\n          4\n        ],\n        [\n          0,\n          1,\n          2,\n          3,\n          4\n        ],\n        [\n          0,\n          1,\n          4\n        ]\n      ],\n      \"explanation\": \"There are five valid paths from node `0` to node `4`.\"\n    }\n  ],\n  \"constraints\": {\n    \"graph_length\": \"2 <= n <= 15\",\n    \"graph_elements_range\": \"0 <= graph[i][j] < n\",\n    \"no_self_loops\": \"graph[i][j] != i\",\n    \"unique_elements_in_graph\": \"All elements of graph[i] are unique\",\n    \"DAG_property\": \"The input graph is guaranteed to be a DAG.\"\n  },\n  \"follow_up\": \"Can you optimize your solution to handle graphs with the largest possible size of `n = 15` efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum number of k-bit flips required to turn all `0`s in the array `nums` into `1`s."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a binary array `nums` and an integer `k`, return the minimum number of **k-bit flips** required so that there is no `0` in the array. A **k-bit flip** is choosing a subarray of length `k` from `nums` and simultaneously changing every `0` in the subarray to `1`, and every `1` in the subarray to `0`. Return `-1` if it is not possible.\",\n  \"objective\": \"Design an efficient algorithm to determine the minimum number of k-bit flips required to convert all `0`s in the binary array `nums` to `1`s, or return `-1` if it is not possible.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the requirements: Identify the minimum number of `k-bit flips` needed to turn all `0`s in the array `nums` into `1`s.\",\n    \"Step 2 - Initial Approach\": \"Consider using a greedy approach: Iterate through the array and flip the subarrays starting from the first `0` encountered, ensuring that the flips cover all `0`s.\",\n    \"Step 3 - Greedy Algorithm with Queue\": \"To handle overlapping flips efficiently, use a queue to track the indices of the starting points of flips. For each index in the array, check if the number of flips affecting that position is even or odd to determine its current state.\",\n    \"Step 4 - Algorithm Steps\": \"1. Initialize a queue to track the start of flips and a variable to count flips. 2. Iterate through the array `nums`. 3. For each `0` encountered, if flipping is required, add the starting index to the queue and increment the flip count. 4. If the length of the queue exceeds `k`, remove the front element to maintain the window size. 5. Continue until all `0`s are flipped or determine if flipping is not possible.\",\n    \"Step 5 - Output Format\": \"Ensure the function returns the minimum number of flips required or `-1` if it is impossible.\",\n    \"Step 6 - Code Efficiency and Edge Cases\": \"Focus on achieving linear time complexity, O(n), where `n` is the length of `nums`. Handle edge cases such as arrays with all `1`s or when `k` is greater than `nums.length`.\",\n    \"Final Check - Constraints Verification\": \"Verify the solution operates within the constraints: `1 <= nums.length <= 10^5` and `1 <= k <= nums.length`. Ensure the algorithm is robust and handles large inputs efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          1,\n          0\n        ],\n        \"k\": 1\n      },\n      \"output\": 2,\n      \"explanation\": \"Flip nums[0], then flip nums[2] to get [1, 1, 1].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          1,\n          0\n        ],\n        \"k\": 2\n      },\n      \"output\": -1,\n      \"explanation\": \"No matter how we flip subarrays of size 2, we cannot make the array become [1, 1, 1].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          0,\n          0,\n          1,\n          0,\n          1,\n          1,\n          0\n        ],\n        \"k\": 3\n      },\n      \"output\": 3,\n      \"explanation\": \"Flip nums[0], nums[1], nums[2], then nums[4], nums[5], nums[6], and finally nums[5], nums[6], nums[7] to get [1, 1, 1, 1, 1, 1, 1, 1].\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 10^5\",\n    \"k_range\": \"1 <= k <= nums.length\"\n  },\n  \"follow_up\": \"Can you optimize the solution further to handle larger arrays efficiently while ensuring the algorithm maintains correctness?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count how many numbers in the range have a prime number of set bits."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two integers `left` and `right`, return the count of numbers in the inclusive range `[left, right]` having a prime number of set bits in their binary representation. A set bit is a `1` in the binary representation of a number.\",\n  \"objective\": \"Count how many numbers in the given range have a prime number of set bits in their binary representation.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The task is to evaluate the binary representation of each integer within the inclusive range from `left` to `right`, and count how many of these integers have a number of set bits that is prime. This requires checking the binary representation of each number and determining if the number of set bits is a prime number.\",\n    \"Step 2 - Strategy\": \"For each number in the range `[left, right]`, we will count its set bits (using the built-in method to count `1`s in its binary representation), then check if this count is a prime number. If it is prime, we increment the result counter.\",\n    \"Step 3 - Approach\": \"Use a loop to iterate over the range of numbers. For each number, compute the number of set bits, check if it is prime, and keep a count of numbers that meet the condition.\",\n    \"Step 4 - Efficient Solution Approach\": \"Precompute the prime numbers up to the maximum possible number of set bits. This is efficient since the maximum number of set bits in a number between `1` and `106` will not be large (it is at most 20 for a 32-bit integer). Once the prime numbers are precomputed, we can easily check if a number of set bits is prime.\",\n    \"Step 5 - Edge Cases\": \"Consider the smallest and largest possible ranges for `left` and `right`. For example, when `left == right` and when `left` is very small or `right` is very large. Make sure to handle the case where there are no prime numbers of set bits in the range.\",\n    \"Step 6 - Output Explanation\": \"The output should be the count of numbers that have a prime number of set bits in their binary representation. The prime numbers of set bits need to be computed efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"left\": 6,\n        \"right\": 10\n      },\n      \"output\": 4,\n      \"explanation\": \"In this range, the numbers with prime set bits are 6 (2 set bits), 7 (3 set bits), 9 (2 set bits), and 10 (2 set bits). Thus, the count is 4.\"\n    },\n    {\n      \"input\": {\n        \"left\": 10,\n        \"right\": 15\n      },\n      \"output\": 5,\n      \"explanation\": \"In this range, the numbers with prime set bits are 10 (2 set bits), 11 (3 set bits), 12 (2 set bits), 13 (3 set bits), and 14 (3 set bits). Thus, the count is 5.\"\n    }\n  ],\n  \"constraints\": {\n    \"range_size\": \"1 <= left <= right <= 10^6\",\n    \"range_width\": \"0 <= right - left <= 10^4\",\n    \"set_bits\": \"The number of set bits in a number is at most 20 for the numbers in the range of interest.\"\n  },\n  \"follow_up\": \"Can you optimize the solution further, especially when the range `[left, right]` is large?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum sum of smaller elements in pairs from an array of integers."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums` of `2n` elements, group these integers into `n` pairs such that the sum of the minimum values from each pair is maximized. Return the maximum possible sum using a counting sort approach.\",\n  \"objective\": \"Implement an efficient algorithm that uses counting sort to group elements in pairs, maximizing the sum of the smaller elements in each pair.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Counting Array\": \"Create a counting array `elementToCount` of size 20001 (covering values from -10^4 to 10^4, shifted by adding 10^4 to each element in `nums`) to store the frequency of each integer in `nums`.\",\n    \"Step 2 - Populate Counting Array\": \"Iterate over each element in `nums`. For each element, add 10^4 to make it non-negative, and increment the corresponding index in `elementToCount`.\",\n    \"Step 3 - Calculate Maximized Sum\": \"Initialize `maxSum` to 0 and `isEvenIndex` to true, representing the position status in the optimal pair arrangement. Iterate through `elementToCount`, and for each non-zero frequency, repeat the element value while adjusting `maxSum` for values at even-indexed positions (adding their actual values to `maxSum`). Flip `isEvenIndex` after each value to alternate between even and odd indices.\",\n    \"Final Check - Constraints Verification\": \"Ensure the algorithm runs in linear time relative to the input size, handling up to 10^4 unique values within the constraint `-10^4 <= nums[i] <= 10^4`. Confirm that the solution respects these bounds and returns the correct sum.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          4,\n          3,\n          2\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"The optimal pairing is (1, 2) and (3, 4), giving min(1, 2) + min(3, 4) = 1 + 3 = 4.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          6,\n          2,\n          6,\n          5,\n          1,\n          2\n        ]\n      },\n      \"output\": 9,\n      \"explanation\": \"The optimal pairing is (1, 2), (2, 5), and (6, 6), giving min(1, 2) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"2 <= nums.length <= 2 * 10^4\",\n    \"nums_values\": \"-10^4 <= nums[i] <= 10^4\"\n  },\n  \"follow_up\": \"Consider space optimization by limiting the counting array to the actual range found in `nums` instead of the full possible range.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if there are three increasing numbers in the array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums`, determine if there exists a strictly increasing triplet `(i, j, k)` such that `i < j < k` and `nums[i] < nums[j] < nums[k]`. Return `true` if such indices exist, and `false` otherwise.\",\n  \"objective\": \"Design an efficient algorithm to solve the problem in O(n) time complexity and O(1) space complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Recognize that the problem requires checking for three increasing numbers in order, while scanning the array in linear time.\",\n    \"Step 2 - Variable Tracking\": \"Maintain two variables, `first` and `second`, to track the smallest and second smallest values seen so far, respectively.\",\n    \"Step 3 - Iterative Check\": \"Iterate through the array while comparing each element with `first` and `second` to update them or confirm the existence of the triplet.\",\n    \"Step 4 - Early Exit\": \"If a third number larger than `second` is found, return `true`. If the loop completes without finding such a number, return `false`.\",\n    \"Step 5 - Edge Cases\": \"Consider edge cases such as arrays with fewer than three elements or arrays with all elements in descending order.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          4,\n          5\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The triplet (1, 2, 3) satisfies the conditions.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          5,\n          4,\n          3,\n          2,\n          1\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"No triplet satisfies the conditions in descending order.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          1,\n          5,\n          0,\n          4,\n          6\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The triplet (0, 4, 6) satisfies the conditions.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"1 <= nums.length <= 5 * 10^5\",\n    \"array_values\": \"-2^31 <= nums[i] <= 2^31 - 1\"\n  },\n  \"follow_up\": \"Ensure the solution has O(n) time complexity and O(1) space complexity by using only two variables to track the progress.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number of words in the input string."}, {"role": "assistant", "content": "{\n  \"title\": \"Count Segments in a String\",\n  \"description\": \"Given a string `s`, count the number of contiguous sequences of non-space characters (segments) in the string. A segment is defined as a sequence of characters separated by one or more spaces.\",\n  \"input\": {\n    \"name\": \"s\",\n    \"type\": \"string\",\n    \"description\": \"The input string consisting of English letters, digits, or symbols.\",\n    \"constraints\": \"0 <= s.length <= 300. The only space character is `' '`.\"\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The number of segments in the input string.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"Hello, my name is John\"\n      },\n      \"output\": 5,\n      \"explanation\": \"The segments are ['Hello,', 'my', 'name', 'is', 'John'].\"\n    },\n    {\n      \"input\": {\n        \"s\": \"Hello\"\n      },\n      \"output\": 1,\n      \"explanation\": \"There is only one segment: ['Hello'].\"\n    },\n    {\n      \"input\": {\n        \"s\": \"   \"\n      },\n      \"output\": 0,\n      \"explanation\": \"The string contains only spaces, so there are no segments.\"\n    }\n  ],\n  \"hints\": [\n    \"Use the `split` method to divide the string into segments.\",\n    \"Filter out empty segments that may result from consecutive spaces or leading/trailing spaces.\",\n    \"Consider edge cases like an empty string or strings with only spaces.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"The solution should have a time complexity proportional to the length of the string, O(n).\",\n    \"constraints\": \"Avoid creating unnecessary intermediate data structures or processing the string multiple times.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find where a list of strings appears in a string as a concatenated substring."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a string `s` and an array of strings `words`. Each string in `words` is of the same length. A **concatenated substring** in `s` is defined as a substring that contains all the strings from `words` exactly once and in any order (i.e., a permutation of `words`). Your task is to find all starting indices of such concatenated substrings in `s`.\",\n  \"objective\": \"Design an efficient algorithm to find all the starting indices of concatenated substrings in `s`, ensuring the solution adheres to the constraints and handles edge cases.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the concatenated substring must be a contiguous substring of `s` with a length equal to `words.length * words[i].length` and must contain all strings from `words` exactly once.\",\n    \"Step 2 - Sliding Window with Hash Map\": \"Use a sliding window of size `words.length * words[i].length` to check for valid substrings. Use a hash map to store the frequency of strings in `words` and validate the substring by comparing frequencies.\",\n    \"Step 3 - Edge Cases\": \"Handle edge cases such as empty `s`, empty `words`, `words` with repeated strings, or `s` with insufficient length to contain the concatenated substring.\",\n    \"Step 4 - Optimization\": \"Avoid recomputing substring frequencies for overlapping windows by incrementally updating the hash map. Use a two-pointer technique to reduce redundant checks.\",\n    \"Step 5 - Constraints Compliance\": \"Ensure the solution handles the constraints efficiently, such as `1 <= s.length <= 10^4` and `1 <= words.length <= 5000`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"barfoothefoobarman\",\n        \"words\": [\n          \"foo\",\n          \"bar\"\n        ]\n      },\n      \"output\": [\n        0,\n        9\n      ],\n      \"explanation\": \"The substrings starting at indices 0 and 9 ('barfoo' and 'foobar') are valid concatenated substrings.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"wordgoodgoodgoodbestword\",\n        \"words\": [\n          \"word\",\n          \"good\",\n          \"best\",\n          \"word\"\n        ]\n      },\n      \"output\": [],\n      \"explanation\": \"There are no valid substrings of length 16 that match a permutation of `words`.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"barfoofoobarthefoobarman\",\n        \"words\": [\n          \"bar\",\n          \"foo\",\n          \"the\"\n        ]\n      },\n      \"output\": [\n        6,\n        9,\n        12\n      ],\n      \"explanation\": \"The substrings starting at indices 6, 9, and 12 are valid concatenated substrings ('foobarthe', 'barthefoo', 'thefoobar').\"\n    }\n  ],\n  \"constraints\": {\n    \"s_length\": \"1 <= s.length <= 10^4\",\n    \"words_length\": \"1 <= words.length <= 5000\",\n    \"word_length\": \"1 <= words[i].length <= 30\",\n    \"characters\": \"Both `s` and `words[i]` consist of lowercase English letters.\"\n  },\n  \"follow_up\": \"Can you improve the solution's time complexity by avoiding redundant computations for overlapping windows? Consider using optimized string-matching techniques or rolling hash.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Calculate the vertical order traversal of a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary tree, calculate the **vertical order traversal** of the binary tree. For each node at position `(row, col)`, its left and right children will be at positions `(row + 1, col - 1)` and `(row + 1, col + 1)` respectively. The root of the tree is at `(0, 0)`. The **vertical order traversal** of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values. Return the **vertical order traversal** of the binary tree.\",\n  \"objective\": \"Design an efficient algorithm to compute the vertical order traversal of a binary tree, ensuring nodes are correctly ordered by their column index and values where necessary.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the requirements: The nodes must be ordered based on their column indices. Nodes in the same column and row should be sorted by their values.\",\n    \"Step 2 - Initial Approach\": \"Consider using a level-order traversal (BFS) to explore the tree level by level while keeping track of the column indices. Use a dictionary to map column indices to lists of nodes.\",\n    \"Step 3 - Data Structures\": \"Use a dictionary of dictionaries (or a similar structure) where the first key is the column index and the second key is the row index. Append nodes to lists in these dictionaries.\",\n    \"Step 4 - Sorting Nodes\": \"Once traversal is complete, sort the nodes in each column by their row index and value. Collect these sorted lists to form the final vertical order traversal.\",\n    \"Step 5 - Output Format\": \"Ensure the function returns a list of lists, where each sublist contains the nodes of a single column sorted top-to-bottom.\",\n    \"Step 6 - Code Efficiency and Edge Cases\": \"Focus on achieving optimal time complexity, ideally O(n log n) due to sorting within columns. Handle edge cases such as trees with a single node, completely unbalanced trees, and large node values.\",\n    \"Final Check - Constraints Verification\": \"Verify the solution operates within the constraints: The number of nodes is in the range [1, 1000], and 0 <= Node.val <= 1000. Ensure the algorithm is robust and handles large inputs efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          9,\n          20,\n          null,\n          null,\n          15,\n          7\n        ]\n      },\n      \"output\": [\n        [\n          9\n        ],\n        [\n          3,\n          15\n        ],\n        [\n          20\n        ],\n        [\n          7\n        ]\n      ],\n      \"explanation\": \"Column -1: Only node 9 is in this column. Column 0: Nodes 3 and 15 are in this column in that order from top to bottom. Column 1: Only node 20 is in this column. Column 2: Only node 7 is in this column.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7\n        ]\n      },\n      \"output\": [\n        [\n          4\n        ],\n        [\n          2\n        ],\n        [\n          1,\n          5,\n          6\n        ],\n        [\n          3\n        ],\n        [\n          7\n        ]\n      ],\n      \"explanation\": \"Column -2: Only node 4 is in this column. Column -1: Only node 2 is in this column. Column 0: Nodes 1, 5, and 6 are in this column. 1 is at the top, so it comes first. 5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6. Column 1: Only node 3 is in this column. Column 2: Only node 7 is in this column.\"\n    }\n  ],\n  \"constraints\": {\n    \"number_of_nodes\": \"The number of nodes in the tree is in the range [1, 1000]\",\n    \"node_value_range\": \"0 <= Node.val <= 1000\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle even larger trees efficiently while maintaining the constraints and ensuring the correctness of the vertical order traversal?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the sum of the widths of all subsequences of nums."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of integers nums, your task is to compute the sum of the widths of all the non-empty subsequences of nums. The width of a subsequence is the difference between its maximum and minimum elements. Since the result could be large, return it modulo 10^9 + 7. A subsequence can be derived by deleting some or no elements while maintaining the order of the remaining elements. For example, [3,6,2,7] is a subsequence of [0,3,1,6,2,2,7].\",\n  \"objective\": \"Design an efficient algorithm to calculate the sum of the widths of all subsequences, returning the result modulo 10^9 + 7. Focus on the problem's constraints, which require a solution capable of handling arrays up to 10^5 elements efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the task: for each subsequence, compute its width as the difference between the maximum and minimum values. Then, sum these widths for all non-empty subsequences.\",\n    \"Step 2 - Initial Approach\": \"Consider generating all possible subsequences and calculating their widths, but this approach will have a time complexity of O(2^n), which is infeasible for large arrays (e.g., n = 10^5). We need a more efficient solution.\",\n    \"Step 3 - Optimal Approach\": \"Sort the array first. After sorting, note that each element in the array contributes to several subsequences as both a maximum and a minimum. For each element, determine how many subsequences it contributes to as the maximum and how many as the minimum. Use combinatorics to calculate these contributions efficiently.\",\n    \"Step 4 - Output Format\": \"Return the sum of widths modulo 10^9 + 7. Ensure the solution works for arrays of various sizes and values, including large numbers.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Optimize the solution to avoid computing all subsequences explicitly. Consider using combinatorial approaches and modulo arithmetic to handle large numbers and ensure the algorithm works efficiently within the problem's constraints.\",\n    \"Final Check - Constraints Verification\": \"Verify that the code works within the given constraints, i.e., 1 <= nums.length <= 10^5 and 1 <= nums[i] <= 10^5. Ensure the algorithm is efficient enough to handle the upper bounds.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          1,\n          3\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"The subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3]. The corresponding widths are 0, 0, 0, 1, 1, 2, 2. The sum of these widths is 6.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          2\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"The only subsequence is [2], and its width is 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 10^5\",\n    \"nums_elements_range\": \"1 <= nums[i] <= 10^5\"\n  },\n  \"follow_up\": \"Can you come up with an algorithm that avoids directly generating all subsequences and instead calculates the result in a more efficient manner, ideally with a time complexity of O(n log n)?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You have some tokens, and you need to maximize your score by playing them in two ways. If you have enough power, you can play them face up and increase your score. If you have a score, you can play them face down to gain power."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an initial amount of power, a score of 0, and a set of tokens, each with a value. Your task is to maximize your score by playing tokens in one of two ways: face up (lose power, gain score) or face down (lose score, gain power). You must determine the maximum score achievable by playing any number of tokens in any order, subject to the constraints on power and score.\",\n  \"objective\": \"Design an algorithm to maximize the score based on the available power and tokens. The solution must take into account the optimal strategy for playing tokens face up and face down to achieve the highest possible score.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Tokens can be played either face up, which reduces power and increases score, or face down, which restores power but decreases score. The key is deciding when to play tokens face up and when to play them face down to maximize the score.\",\n    \"Step 2 - Approach\": \"You need to manage the power and score in a way that allows you to continue playing tokens for as long as possible, balancing between gaining score and restoring power. Sorting the tokens may help decide which token to play face up and which to play face down.\",\n    \"Step 3 - Solution Strategy\": \"Sort the tokens to maximize the number of tokens played face up while maintaining enough power. If you're stuck with no playable tokens face up, consider playing a token face down to restore power and try playing additional tokens face up.\",\n    \"Step 4 - Output Format\": \"Return the maximum score achievable after playing the tokens optimally.\",\n    \"Step 5 - Code Efficiency\": \"Ensure the solution handles the maximum input size efficiently, especially considering the sorting of tokens and potential optimization of the power and score management.\",\n    \"Step 6 - Edge Cases\": \"Consider edge cases where no tokens are available or where playing any token is impossible due to insufficient power or score.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"tokens\": [\n          100\n        ],\n        \"power\": 50\n      },\n      \"output\": 0,\n      \"explanation\": \"With only one token and insufficient power, no token can be played.\"\n    },\n    {\n      \"input\": {\n        \"tokens\": [\n          100,\n          200\n        ],\n        \"power\": 150\n      },\n      \"output\": 1,\n      \"explanation\": \"Play the first token (100) face up, reducing power to 50 and increasing the score to 1. The second token cannot be played due to lack of power.\"\n    },\n    {\n      \"input\": {\n        \"tokens\": [\n          100,\n          200,\n          300,\n          400\n        ],\n        \"power\": 200\n      },\n      \"output\": 2,\n      \"explanation\": \"Play the tokens in this order to achieve a score of 2: 1. Play token 0 (100) face up (score = 1, power = 100), 2. Play token 3 (400) face down (score = 0, power = 500), 3. Play token 1 (200) face up (score = 1, power = 300), 4. Play token 2 (300) face up (score = 2, power = 0).\"\n    }\n  ],\n  \"constraints\": {\n    \"tokens_length\": \"0 <= tokens.length <= 1000\",\n    \"tokens_values\": \"0 <= tokens[i], power < 104\"\n  },\n  \"follow_up\": \"Can you optimize the space complexity when tracking tokens and their order of play? Is there a way to handle tokens face down more efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a number is 2 raised to some power."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if a given integer `n` is a power of two.\",\n  \"objective\": \"Return `true` if `n` is a power of two, otherwise return `false`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand Power of Two\": \"Recognize that a number is a power of two if there exists an integer `x` such that `n = 2^x`.\",\n    \"Step 2 - Handle Special Cases\": \"If `n <= 0`, return `false` as no negative number or zero is a power of two.\",\n    \"Step 3 - Use Efficient Check\": \"Leverage properties of binary representation (e.g., a power of two has only one bit set).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 1\n      },\n      \"output\": true,\n      \"explanation\": \"2^0 = 1, which is a power of two.\"\n    },\n    {\n      \"input\": {\n        \"n\": 16\n      },\n      \"output\": true,\n      \"explanation\": \"2^4 = 16, which is a power of two.\"\n    },\n    {\n      \"input\": {\n        \"n\": 3\n      },\n      \"output\": false,\n      \"explanation\": \"3 is not a power of two.\"\n    }\n  ],\n  \"constraints\": {\n    \"range\": \"-2^31 <= n <= 2^31 - 1\",\n    \"follow_up\": \"Solve the problem without loops or recursion.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create a TicTacToe game where you find the winner after every move."}, {"role": "assistant", "content": "{\n  \"description\": \"Implement the TicTacToe class to handle moves in an `n x n` Tic-Tac-Toe game. Players alternate moves, and a player wins if they place `n` marks in a horizontal, vertical, or diagonal line. Optimize the `move()` function to detect a winner in `O(1)` time complexity.\",\n  \"objective\": \"Design an efficient algorithm to keep track of row, column, and diagonal counts for each player, minimizing computation during each move.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialization\": \"Define the TicTacToe class with a board size `n`, tracking arrays for rows, columns, and diagonal counts for each player.\",\n    \"Step 2 - Update Tracking on Move\": \"When a player makes a move, update the appropriate row, column, and diagonal counts based on the move coordinates.\",\n    \"Step 3 - Winner Check\": \"Check if any row, column, or diagonal count equals `n`, indicating a win for the current player.\",\n    \"Step 4 - Return Result\": \"Return the player's ID if they win or `0` if no one has won yet.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"commands\": [\n          \"TicTacToe\",\n          \"move\",\n          \"move\",\n          \"move\",\n          \"move\",\n          \"move\",\n          \"move\",\n          \"move\"\n        ],\n        \"arguments\": [\n          [\n            3\n          ],\n          [\n            0,\n            0,\n            1\n          ],\n          [\n            0,\n            2,\n            2\n          ],\n          [\n            2,\n            2,\n            1\n          ],\n          [\n            1,\n            1,\n            2\n          ],\n          [\n            2,\n            0,\n            1\n          ],\n          [\n            1,\n            0,\n            2\n          ],\n          [\n            2,\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        1\n      ],\n      \"explanation\": [\n        \"Player 1 ('X') wins by forming a horizontal line in the last move.\"\n      ]\n    }\n  ],\n  \"constraints\": {\n    \"board_size\": \"2 <= n <= 100\",\n    \"player_ids\": \"Player is either 1 or 2\",\n    \"move_coordinates\": \"`0 <= row, col < n` and unique for each move\",\n    \"performance\": \"Minimize time complexity of `move()` to `O(1)`\"\n  },\n  \"follow_up\": \"Can you generalize the solution to handle a Tic-Tac-Toe game on a 3D board or higher dimensions?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given balloons, find the arrows needed."}, {"role": "assistant", "content": "{\n  \"title\": \"Minimum Arrows to Burst Balloons\",\n  \"description\": \"You are given an array `points` where each entry `[xstart, xend]` represents the horizontal range of a balloon in the XY-plane. Arrows shot vertically can burst balloons if the arrow passes through any point in their range. Return the **minimum number of arrows** required to burst all the balloons.\",\n  \"input\": {\n    \"points\": {\n      \"type\": \"array\",\n      \"description\": \"2D array where each entry contains the horizontal start and end positions of a balloon.\",\n      \"constraints\": {\n        \"length\": \"1 <= points.length <= 10^5\",\n        \"range\": \"-2^31 <= xstart < xend <= 2^31 - 1\",\n        \"element\": \"[xstart, xend] where xstart and xend are integers\"\n      }\n    }\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The minimum number of arrows needed to burst all balloons.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"points\": [\n          [\n            10,\n            16\n          ],\n          [\n            2,\n            8\n          ],\n          [\n            1,\n            6\n          ],\n          [\n            7,\n            12\n          ]\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"By sorting the intervals and using a greedy approach, we shoot arrows at x = 6 and x = 11 to burst all balloons.\"\n    },\n    {\n      \"input\": {\n        \"points\": [\n          [\n            1,\n            2\n          ],\n          [\n            3,\n            4\n          ],\n          [\n            5,\n            6\n          ],\n          [\n            7,\n            8\n          ]\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"Each balloon requires a separate arrow as there are no overlapping intervals.\"\n    },\n    {\n      \"input\": {\n        \"points\": [\n          [\n            1,\n            2\n          ],\n          [\n            2,\n            3\n          ],\n          [\n            3,\n            4\n          ],\n          [\n            4,\n            5\n          ]\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The balloons can be burst by two arrows: one at x = 2 and another at x = 4.\"\n    }\n  ],\n  \"hints\": [\n    \"Sort the intervals based on their end coordinates.\",\n    \"Use a greedy approach: shoot an arrow at the end of the first balloon and check which subsequent balloons it bursts.\",\n    \"Repeat for remaining balloons.\"\n  ],\n  \"constraints\": {\n    \"timeComplexity\": \"O(n log n) due to sorting.\",\n    \"spaceComplexity\": \"O(1) for the greedy algorithm.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Determine if the last character in a binary array is a one-bit character."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if the last character in a binary array is a one-bit character, given that the last element is always `0`.\",\n  \"objective\": \"Use a greedy algorithm to verify if the last character in the binary array is a one-bit character by toggling a parity variable for consecutive `1`s preceding the last `0`.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Initialize a variable `parity` to `0` to track the parity of consecutive `1`s.\",\n    \"Step 2\": \"Iterate backward from the second-to-last element in the array (`bits.length - 2`) until the start of the array.\",\n    \"Step 3\": \"For each element, if it is `1`, toggle the parity using `parity ^= 1`.\",\n    \"Step 4\": \"Stop iterating when a `0` is encountered, as the sequence preceding it determines the state of the last `0`.\",\n    \"Step 5\": \"Return `true` if `parity == 0`, indicating the last character is a one-bit character. Otherwise, return `false`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"bits\": [\n          1,\n          0,\n          0\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The array decodes as [10, 0], where the last character is a one-bit character.\"\n    },\n    {\n      \"input\": {\n        \"bits\": [\n          1,\n          1,\n          1,\n          0\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The array decodes as [11, 10], where the last character is part of a two-bit character.\"\n    }\n  ],\n  \"constraints\": {\n    \"length_of_bits\": \"1 <= bits.length <= 1000\",\n    \"values_in_bits\": \"bits[i] is either 0 or 1\",\n    \"last_character_is_zero\": \"The array always ends with a `0`.\"\n  },\n  \"follow_up\": \"Analyze the time complexity of the solution, which is O(n), and discuss why toggling parity works efficiently for this problem.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if an array can become non-decreasing with at most one modification."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if an array can become non-decreasing by modifying at most one element.\",\n  \"objective\": \"Iterate through the array to detect violations of the non-decreasing order and check if at most one modification can fix the array.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Variables\": \"Set a flag `modified` to `false` to track whether a modification has already been made.\",\n    \"Step 2 - Detect Violations\": \"Iterate through the array and check for violations where `nums[i] > nums[i+1]`.\",\n    \"Step 3 - Handle Violations\": \"For the first violation, decide which element to modify based on adjacent elements. If `nums[i-1] <= nums[i+1]`, modify `nums[i]`. Otherwise, modify `nums[i+1]`.\",\n    \"Step 4 - Check Multiple Violations\": \"If another violation is found after the first modification, return `false` immediately.\",\n    \"Step 5 - Return Result\": \"If no more than one modification is required, return `true`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          4,\n          2,\n          3\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"Modify the first 4 to 1 to get a non-decreasing array [1, 2, 3].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          4,\n          2,\n          1\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"It is not possible to make the array non-decreasing by modifying at most one element.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= n <= 10^4\",\n    \"value_range\": \"-10^5 <= nums[i] <= 10^5\"\n  },\n  \"follow_up\": \"Analyze the time complexity of this approach and discuss whether it can handle edge cases efficiently, such as arrays with extreme values or edge lengths.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the least number of perfect squares that sum to a given number `n`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `n`, find the minimum number of perfect square numbers that sum to `n`. A perfect square is an integer that can be expressed as the square of another integer (e.g., `1, 4, 9, 16`).\",\n  \"objective\": \"Design an efficient algorithm using dynamic programming or mathematical approaches to minimize the number of perfect squares needed to sum to `n`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the problem involves finding a combination of perfect squares that sums to `n` while minimizing the number of terms. This can be approached using dynamic programming or number theory.\",\n    \"Step 2 - Dynamic Programming Approach\": \"Define `dp[i]` as the minimum number of perfect squares needed to sum to `i`. Use the recurrence relation `dp[i] = min(dp[i - j^2] + 1)` for all `j` such that `j^2 <= i`.\",\n    \"Step 3 - Base Cases\": \"Initialize `dp[0] = 0` since no numbers are needed to sum to 0. For `dp[i]`, compute values incrementally up to `n`.\",\n    \"Step 4 - Optimization\": \"Leverage properties such as Lagrange's Four Square Theorem to identify specific cases where at most 4 squares are sufficient.\",\n    \"Step 5 - Edge Cases\": \"Handle cases where `n` is itself a perfect square, and small values of `n` where fewer computations are required.\",\n    \"Step 6 - Output\": \"Return the value of `dp[n]` as the minimum number of perfect squares that sum to `n`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 12\n      },\n      \"output\": 3,\n      \"explanation\": \"12 can be expressed as 4 + 4 + 4, requiring 3 perfect squares.\"\n    },\n    {\n      \"input\": {\n        \"n\": 13\n      },\n      \"output\": 2,\n      \"explanation\": \"13 can be expressed as 4 + 9, requiring 2 perfect squares.\"\n    }\n  ],\n  \"constraints\": {\n    \"input_range\": \"1 <= n <= 10^4\",\n    \"perfect_square_definition\": \"Perfect squares are integers of the form `x^2` for some integer `x`.\"\n  },\n  \"follow_up\": \"Can you optimize the solution using mathematical insights such as Lagrange's Four Square Theorem or the BFS approach for faster results?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the closest palindrome to a given number."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `n` representing an integer, find the closest integer that is a palindrome and not equal to `n`. If there\\u2019s a tie in closeness, return the smaller palindrome.\",\n  \"objective\": \"Design a solution using binary search to efficiently identify the closest palindrome by finding the smallest palindrome greater than `n` and the largest palindrome smaller than `n`, then selecting the closest by absolute difference.\",\n  \"meta_prompt\": {\n    \"Step 1 - Define Palindrome Generation Function\": \"Create a helper function `makePalindrome(num)` that, given an integer or a string, converts it into a palindrome by mirroring its first half to the second half. This function will be used to construct candidate palindromes for binary search.\",\n    \"Step 2 - Find Next Closest Palindrome with Binary Search\": \"Initialize left and right boundaries for the binary search, where `left` starts at `n + 1` and `right` is set to an arbitrarily large value (e.g., 10^18). Perform binary search, and for each midpoint `mid`, use `makePalindrome(mid)` to check if it forms a valid palindrome. If the palindrome is greater than `n`, continue searching to the left; otherwise, search to the right.\",\n    \"Step 3 - Find Previous Closest Palindrome with Binary Search\": \"Similarly, perform binary search to find the largest palindrome smaller than `n`. Set `left` as 0 and `right` as `n - 1`. For each midpoint `mid`, construct a palindrome with `makePalindrome(mid)`. If this palindrome is smaller than `n`, move right to maximize the palindrome; otherwise, move left.\",\n    \"Step 4 - Compare Closest Palindromes\": \"After both searches, calculate the absolute differences of `n` from the smallest palindrome greater than `n` and the largest palindrome smaller than `n`. Return the palindrome with the smaller difference. In case of a tie, return the smaller palindrome.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": \"123\"\n      },\n      \"output\": \"121\",\n      \"explanation\": \"The closest palindromic integer to 123 is 121. Since 121 is the smaller of 121 and 131, we return 121.\"\n    },\n    {\n      \"input\": {\n        \"n\": \"1\"\n      },\n      \"output\": \"0\",\n      \"explanation\": \"The closest palindromic integers to 1 are 0 and 2. Since 0 is smaller, we return it.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= n.length <= 18\",\n    \"integer_range\": \"1 <= integer representation of n <= 10^18 - 1\"\n  },\n  \"follow_up\": \"Explore optimizing palindrome construction by considering only the first half of `n` when constructing candidates. Investigate additional performance improvements for very large values of `n`.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Alice and Bob play a game with piles of stones. Alice starts first, and they take turns picking piles from either end of the row. Return true if Alice wins, false if Bob wins."}, {"role": "assistant", "content": "{\n  \"description\": \"Alice and Bob play a game with piles of stones. Alice starts first and takes turns with Bob. Each player can choose to take an entire pile either from the beginning or the end of the row, and they aim to collect the most stones. Given that both players play optimally, the goal is to determine whether Alice will win the game.\",\n  \"objective\": \"Determine if Alice wins the game, given that Alice and Bob play optimally. Return true if Alice wins, false if Bob wins.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Alice and Bob take turns picking from either the start or the end of a list of piles. The objective is to maximize the number of stones collected by the end of the game. The sum of all piles is odd, which ensures no tie occurs.\",\n    \"Step 2 - Approach\": \"We can use dynamic programming to simulate both players' optimal moves. Define a 2D array `dp[i][j]` representing the maximum difference in stones between Alice and Bob, assuming they play optimally for the subarray `piles[i]` to `piles[j]`. We will compute the result starting from smaller subarrays and build up to the entire array.\",\n    \"Step 3 - Output Format\": \"Return `true` if Alice wins the game and `false` otherwise.\",\n    \"Step 4 - Code Efficiency and Edge Cases\": \"The dynamic programming solution will run in O(n^2) time, where n is the number of piles. We also ensure that edge cases like small inputs (e.g., two piles) are handled correctly.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"piles\": [\n          5,\n          3,\n          4,\n          5\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"Alice can win by picking the first 5 and then taking the last 5. Even if Bob plays optimally, Alice can ensure she has more stones.\"\n    },\n    {\n      \"input\": {\n        \"piles\": [\n          3,\n          7,\n          2,\n          3\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"Alice can win by choosing optimally from the available piles, ensuring she collects more stones than Bob.\"\n    }\n  ],\n  \"constraints\": {\n    \"piles_length_range\": \"2 <= piles.length <= 500\",\n    \"piles_values_range\": \"1 <= piles[i] <= 500\",\n    \"sum_piles_odd\": \"The sum of all the piles is guaranteed to be odd, ensuring no ties.\"\n  },\n  \"follow_up\": \"How would the solution change if there were more than two players?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Determine if there are two numbers in a BST that add up to a given k."}, {"role": "assistant", "content": "{\n  \"description\": \"Check whether there exist two elements in a Binary Search Tree (BST) whose sum equals a given integer k.\",\n  \"objective\": \"Use the properties of BST and an inorder traversal to find if two numbers in the tree add up to k efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Perform Inorder Traversal\": \"Traverse the BST in an inorder manner to collect all node values in a sorted list.\",\n    \"Step 2 - Initialize Two Pointers\": \"Set two pointers, l pointing to the beginning of the sorted list and r pointing to the end.\",\n    \"Step 3 - Use Two Pointer Technique\": \"Iterate using the two pointers to check if their sum equals k. If the sum is less than k, increment the left pointer l. If the sum is greater than k, decrement the right pointer r.\",\n    \"Step 4 - Return Result\": \"If a pair is found with a sum equal to k, return true. If the pointers cross without finding a pair, return false.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          5,\n          3,\n          6,\n          2,\n          4,\n          null,\n          7\n        ],\n        \"k\": 9\n      },\n      \"output\": true,\n      \"explanation\": \"The pair (4, 5) adds up to 9.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          5,\n          3,\n          6,\n          2,\n          4,\n          null,\n          7\n        ],\n        \"k\": 28\n      },\n      \"output\": false,\n      \"explanation\": \"No pair of nodes adds up to 28.\"\n    }\n  ],\n  \"constraints\": {\n    \"nodes_range\": \"1 <= number of nodes <= 10^4\",\n    \"node_values_range\": \"-10^4 <= Node.val <= 10^4\",\n    \"k_range\": \"-10^5 <= k <= 10^5\",\n    \"tree_property\": \"root is guaranteed to be a valid BST\"\n  },\n  \"follow_up\": \"Analyze the time and space complexity of the approach and discuss optimizations for large-scale BSTs.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if you can take all courses based on prerequisites."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if it is possible to finish all courses given a number of courses and their prerequisite pairs.\",\n  \"objective\": \"Develop an algorithm to detect cycles in a directed graph, representing the courses and prerequisites, and ensure all courses can be taken.\",\n  \"meta_prompt\": {\n    \"Step 1 - Graph Representation\": \"Model the courses and prerequisites as a directed graph using adjacency lists.\",\n    \"Step 2 - Cycle Detection\": \"Use algorithms such as Depth-First Search (DFS) or Kahn's Algorithm to detect cycles in the graph.\",\n    \"Step 3 - Topological Sort\": \"If no cycle is detected, perform a topological sort to verify the order of courses.\",\n    \"Step 4 - Edge Cases\": \"Handle cases with no prerequisites, a single course, or complex dependency chains.\",\n    \"Step 5 - Optimization\": \"Ensure that the solution is efficient, running in O(V + E) time, where V is the number of courses and E is the number of prerequisite pairs.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"numCourses\": 2,\n        \"prerequisites\": [\n          [\n            1,\n            0\n          ]\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"Course 1 depends on course 0, and there is no cycle.\"\n    },\n    {\n      \"input\": {\n        \"numCourses\": 2,\n        \"prerequisites\": [\n          [\n            1,\n            0\n          ],\n          [\n            0,\n            1\n          ]\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"There is a cycle between course 0 and course 1.\"\n    },\n    {\n      \"input\": {\n        \"numCourses\": 3,\n        \"prerequisites\": [\n          [\n            0,\n            1\n          ],\n          [\n            1,\n            2\n          ],\n          [\n            2,\n            0\n          ]\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"Courses form a cycle: 0 -> 1 -> 2 -> 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"numCourses\": \"1 <= numCourses <= 2000\",\n    \"prerequisite_pairs\": \"0 <= prerequisites.length <= 5000\",\n    \"values\": \"0 <= ai, bi < numCourses\"\n  },\n  \"follow_up\": \"Can you extend the solution to output the order in which courses should be taken?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count numbers from 0 to `n` without consecutive ones in their binary representation."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a positive integer `n`, return the count of integers in the range `[0, n]` whose binary representations do not contain consecutive ones. Implement an efficient solution using bit manipulation and dynamic programming techniques.\",\n  \"objective\": \"Identify all integers from `0` to `n` whose binary representations lack consecutive ones, utilizing precomputed results for binary numbers without consecutive ones to avoid recalculations.\",\n  \"meta_prompt\": {\n    \"Step 1 - Define the DP Array\": \"Define an array `f[i]` where `f[i]` stores the count of `i`-bit binary numbers without consecutive ones.\",\n    \"Step 2 - Initialize Base Cases\": \"Initialize `f[0] = 1` and `f[1] = 2`, where `f[0]` represents the empty binary string and `f[1]` represents the one-bit binary numbers.\",\n    \"Step 3 - Populate DP Array Using Recurrence\": \"Use the recurrence `f[i] = f[i-1] + f[i-2]` for `i >= 2`, iterating up to the number of bits in `n`, to build the DP array values.\",\n    \"Step 4 - Traverse `n` from the MSB\": \"Scan the binary representation of `n` from the most significant bit (MSB) to the least significant bit (LSB). For each bit, if it's 1, add `f[i]` to the count; if two consecutive bits are 1, break the loop.\",\n    \"Step 5 - Check Final Count\": \"If no consecutive 1's were found in `n`, increment the result by 1 to include `n` itself as a valid number.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 5\n      },\n      \"output\": 5,\n      \"explanation\": \"Binary representations of numbers <= 5 without consecutive ones are: `0, 1, 10, 100, 101`. Number `3` (`11` in binary) has consecutive ones, so it's excluded.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1\n      },\n      \"output\": 2,\n      \"explanation\": \"The numbers `0` and `1` have binary representations without consecutive ones, totaling 2.\"\n    }\n  ],\n  \"constraints\": {\n    \"range\": \"1 <= n <= 10^9\",\n    \"output\": \"Result is a count of valid integers, guaranteed within the range of 32-bit integers.\"\n  },\n  \"follow_up\": \"Explore how to efficiently calculate the DP array up to a limit of `10^9`, leveraging bit manipulation for rapid traversal.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given two arrays, and you need to find the minimum integer after flipping cards."}, {"role": "assistant", "content": "{\n  \"description\": \"We are given two arrays `fronts` and `backs`, representing the numbers on the front and back of each card. The goal is to determine the smallest number that can be facing down after flipping some cards, but not facing up on any card. If no such number exists, we should return 0.\",\n  \"objective\": \"Write a function to find the smallest integer that is facing down on some card and is not facing up on any card after flipping some cards. Return 0 if no such integer exists.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We need to track the numbers that can be facing down on the cards and ensure they do not appear facing up. The minimum good integer will be the smallest number that satisfies these conditions.\",\n    \"Step 2 - Constraints\": \"The length of the arrays is bounded by `n <= 1000`, which suggests that a time complexity of O(n) or O(n log n) should be feasible.\",\n    \"Step 3 - Approach\": \"We can maintain a set of numbers that are present on the front of the cards. Then, for each card, if the number on the back is not present on the front, it becomes a candidate for the minimum good integer.\",\n    \"Step 4 - Edge Case Handling\": \"If all numbers from the backs appear in the fronts (either directly or after flipping), there will be no good integer, so the function should return 0.\",\n    \"Step 5 - Optimization\": \"The solution should involve iterating over both arrays and using a set for quick lookups. This ensures that the solution operates within O(n) time complexity.\",\n    \"Step 6 - Implementation Details\": \"The steps include iterating through both arrays, collecting the numbers from the front into a set, and then checking if the numbers from the backs that are not in the set of fronts are good candidates.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"fronts\": [\n          1,\n          2,\n          4,\n          4,\n          7\n        ],\n        \"backs\": [\n          1,\n          3,\n          4,\n          1,\n          3\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"By flipping the second card, the face-up numbers are [1, 3, 4, 4, 7], and the face-down numbers are [1, 2, 4, 1, 3]. 2 is the smallest number facing down but not up.\"\n    },\n    {\n      \"input\": {\n        \"fronts\": [\n          1\n        ],\n        \"backs\": [\n          1\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"There are no numbers that are facing down but not up, so we return 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length_range\": \"1 <= n <= 1000\",\n    \"value_range\": \"1 <= fronts[i], backs[i] <= 2000\"\n  },\n  \"follow_up\": \"How would you modify your approach if there were multiple numbers that could be facing down but not up?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the second minimum value in a binary tree where each node's value is the minimum of its children."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the second minimum value in a special binary tree where each node's value equals the minimum of its children's values if it has children.\",\n  \"objective\": \"Traverse the binary tree to identify the second smallest unique value in the tree. If no such value exists, return -1.\",\n  \"meta_prompt\": {\n    \"Step 1 - Identify First Minimum\": \"Start at the root node and note its value as the smallest value (`first_min`) in the tree.\",\n    \"Step 2 - Traverse the Tree\": \"Perform a depth-first traversal (DFS) to explore all nodes. Compare each node's value to `first_min`.\",\n    \"Step 3 - Update Second Minimum\": \"If a node's value is greater than `first_min` and smaller than the current `second_min`, update `second_min`.\",\n    \"Step 4 - Handle Edge Cases\": \"If no value greater than `first_min` is found during the traversal, return -1 to indicate no second minimum exists.\",\n    \"Step 5 - Return Result\": \"After traversal, return the value of `second_min`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          2,\n          2,\n          5,\n          null,\n          null,\n          5,\n          7\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"The smallest value is 2, and the second smallest value is 5.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          2,\n          2,\n          2\n        ]\n      },\n      \"output\": -1,\n      \"explanation\": \"The smallest value is 2, but there is no second unique value.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_range\": \"1 <= number of nodes <= 25\",\n    \"value_range\": \"1 <= Node.val <= 2^31 - 1\",\n    \"tree_property\": \"root.val == min(root.left.val, root.right.val) for internal nodes.\"\n  },\n  \"follow_up\": \"Discuss the time complexity of the DFS approach and how it ensures correctness given the tree's structure.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find all palindromic permutations of a string."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s`, generate all unique palindromic permutations of `s` if they exist. Return the permutations in any order, or return an empty list if no palindromic permutation is possible.\",\n  \"objective\": \"Design an efficient algorithm to generate all unique palindromic permutations of `s` by leveraging symmetry properties and avoiding duplicate computations.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that a palindromic permutation requires at most one character with an odd frequency, while all other characters must appear an even number of times.\",\n    \"Step 2 - Frequency Count\": \"Count the frequency of each character in `s` to determine if a palindromic permutation is possible. If more than one character has an odd frequency, return an empty list.\",\n    \"Step 3 - Construct Half Permutations\": \"If valid, use the characters with even frequencies to construct half of the palindrome. Generate all permutations of this half.\",\n    \"Step 4 - Symmetry Construction\": \"For each half permutation, construct the full palindrome by mirroring the half around a potential center (if a character with odd frequency exists).\",\n    \"Step 5 - Avoid Duplicates\": \"Use a set or similar mechanism to ensure all generated palindromes are unique.\",\n    \"Step 6 - Output\": \"Return a list of all unique palindromic permutations or an empty list if none exist.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"aabb\"\n      },\n      \"output\": [\n        \"abba\",\n        \"baab\"\n      ],\n      \"explanation\": \"The string 'aabb' can be rearranged to form the palindromes 'abba' and 'baab'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"abc\"\n      },\n      \"output\": [],\n      \"explanation\": \"The string 'abc' has no palindromic permutation since no valid palindrome can be formed.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"aaa\"\n      },\n      \"output\": [\n        \"aaa\"\n      ],\n      \"explanation\": \"The string 'aaa' can only form the palindrome 'aaa'.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 16\",\n    \"character_set\": \"The string consists of only lowercase English letters.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to use backtracking for generating permutations instead of precomputing them?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find all the ways to multiply numbers to get `n`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `n`, find all possible combinations of its factors such that their product equals `n`. The factors must be in the range `[2, n-1]`, and the output can be in any order.\",\n  \"objective\": \"Design an efficient algorithm to generate all combinations of factors for a given integer `n`. Use recursive backtracking to explore possible factor combinations while ensuring that duplicate results are avoided.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task requires finding all valid combinations of integers that multiply to `n`. Factors must be greater than or equal to 2 and less than `n`.\",\n    \"Step 2 - Recursive Approach\": \"Use recursive backtracking to explore all possible combinations of factors. At each step, divide `n` by a factor and continue the search with the quotient.\",\n    \"Step 3 - Optimization\": \"Avoid duplicate combinations by ensuring that each recursive call considers factors greater than or equal to the last used factor.\",\n    \"Step 4 - Edge Cases\": \"Handle edge cases like `n = 1` (no valid factors) and prime numbers (no valid factor combinations).\",\n    \"Step 5 - Final Output\": \"Return all valid factor combinations as a list of lists, with each inner list representing a combination.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 1\n      },\n      \"output\": [],\n      \"explanation\": \"The number 1 has no factors in the range `[2, n-1]`.\"\n    },\n    {\n      \"input\": {\n        \"n\": 12\n      },\n      \"output\": [\n        [\n          2,\n          6\n        ],\n        [\n          3,\n          4\n        ],\n        [\n          2,\n          2,\n          3\n        ]\n      ],\n      \"explanation\": \"The factors of 12 can be grouped into combinations such as `2 x 6`, `3 x 4`, and `2 x 2 x 3`.\"\n    },\n    {\n      \"input\": {\n        \"n\": 37\n      },\n      \"output\": [],\n      \"explanation\": \"The number 37 is prime and has no valid factor combinations in the range `[2, n-1]`.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 10^7\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle large values of `n` by limiting unnecessary computations through memoization or pruning?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create a calculator to evaluate a math expression string."}, {"role": "assistant", "content": "{\n  \"description\": \"You are tasked with implementing a basic calculator to evaluate a simple mathematical expression. The expression string contains non-negative integers and the operators: addition (+), subtraction (-), multiplication (*), division (/), and parentheses for grouping. You are not allowed to use any built-in functions such as `eval()` to evaluate the string. The integer division should truncate toward zero.\",\n  \"objective\": \"Given a valid expression string `s`, compute the result of the expression and return it as an integer.\",\n  \"meta_prompt\": {\n    \"Step 1 - Parsing the Expression\": \"The expression will consist of digits, operators, and parentheses. You need to handle each character while respecting the operator precedence and parentheses.\",\n    \"Step 2 - Operator Precedence\": \"Operators *, / have higher precedence over +, -. Handle the parentheses first, then evaluate the multiplication and division before addition and subtraction.\",\n    \"Step 3 - Integer Division\": \"Ensure that the integer division (/) truncates toward zero. This means rounding towards zero instead of truncating towards negative infinity as typical in integer division.\",\n    \"Step 4 - Implementation Details\": \"Iterate through the expression, handle numbers and operators, and use a stack to manage intermediate results. For multiplication and division, evaluate immediately, while addition and subtraction can be stored for later evaluation.\",\n    \"Step 5 - Output\": \"After parsing and evaluating the expression, return the computed integer result.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"1+1\"\n      },\n      \"output\": 2,\n      \"explanation\": \"The expression '1+1' evaluates to 2.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"6-4/2\"\n      },\n      \"output\": 4,\n      \"explanation\": \"The expression '6-4/2' evaluates to 6-2, which is 4.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"2*(5+5*2)/3+(6/2+8)\"\n      },\n      \"output\": 21,\n      \"explanation\": \"Following the order of operations, the expression evaluates to 21.\"\n    }\n  ],\n  \"constraints\": {\n    \"expression_length\": \"1 <= s.length <= 10^4\",\n    \"expression_contents\": \"s consists of digits, operators (+, -, *, /), and parentheses.\",\n    \"valid_expression\": \"The expression is guaranteed to be valid and can be assumed to be well-formed.\"\n  },\n  \"follow_up\": \"Can you optimize your solution to handle larger input sizes?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find groups of four numbers in an array that add up to a target number."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `nums` of `n` integers, return an array of all the **unique** quadruplets `[nums[a], nums[b], nums[c], nums[d]]` such that the indices `a`, `b`, `c`, and `d` are distinct and the sum of the quadruplet equals the target. The answer can be returned in any order.\",\n  \"objective\": \"Design an efficient algorithm to find all unique quadruplets that sum to the target, ensuring no duplicate results and handling large input sizes effectively.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The task is to identify all unique quadruplets `[nums[a], nums[b], nums[c], nums[d]]` in the array that satisfy the given conditions. Ensure no duplicate quadruplets are included in the output.\",\n    \"Step 2 - Sorting to Facilitate Efficiency\": \"Sort the input array to simplify duplicate handling and enable the use of a two-pointer approach within nested loops.\",\n    \"Step 3 - Iterative Solution\": \"Use two nested loops to fix two numbers, then apply the two-pointer technique to find the other two numbers that complete the target sum.\",\n    \"Step 4 - Handling Duplicates\": \"After sorting, skip duplicate values for both the fixed numbers and the two-pointer positions to avoid duplicate quadruplets.\",\n    \"Step 5 - Edge Cases\": \"Handle edge cases such as arrays with fewer than four elements, all elements being identical, or large positive/negative target values relative to the array elements.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          0,\n          -1,\n          0,\n          -2,\n          2\n        ],\n        \"target\": 0\n      },\n      \"output\": [\n        [\n          -2,\n          -1,\n          1,\n          2\n        ],\n        [\n          -2,\n          0,\n          0,\n          2\n        ],\n        [\n          -1,\n          0,\n          0,\n          1\n        ]\n      ],\n      \"explanation\": \"The valid quadruplets are those that sum to 0 and do not include duplicates.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          2,\n          2,\n          2,\n          2\n        ],\n        \"target\": 8\n      },\n      \"output\": [\n        [\n          2,\n          2,\n          2,\n          2\n        ]\n      ],\n      \"explanation\": \"The only valid quadruplet is `[2, 2, 2, 2]`.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 200\",\n    \"nums_values\": \"-10^9 <= nums[i] <= 10^9\",\n    \"target_range\": \"-10^9 <= target <= 10^9\",\n    \"time_complexity\": \"Aim for an `O(n^3)` solution.\"\n  },\n  \"follow_up\": \"Can you generalize the algorithm to handle `k`-sum problems where `k > 4`?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count the rectangles in a grid formed by '1's."}, {"role": "assistant", "content": "{\n  \"description\": \"Count the number of axis-aligned rectangles formed by '1's in a binary grid.\",\n  \"objective\": \"Optimize the rectangle counting process by distinguishing between heavy rows with many '1's and light rows with fewer '1's.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Iterate through each row in the grid and classify rows into heavy or light based on a threshold (e.g., rows with more than sqrt(n) '1's are heavy).\",\n    \"Step 2\": \"For light rows, compare each pair of rows to determine columns with '1's in common. Count the number of such pairs directly for rectangle formation.\",\n    \"Step 3\": \"For heavy rows, use a fast lookup structure (e.g., a set or hash map) to efficiently find common '1's with other rows and compute rectangles.\",\n    \"Step 4\": \"Sum the rectangle counts from both heavy and light row calculations and return the result.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            0,\n            0,\n            1,\n            0\n          ],\n          [\n            0,\n            0,\n            1,\n            0,\n            1\n          ],\n          [\n            0,\n            0,\n            0,\n            1,\n            0\n          ],\n          [\n            1,\n            0,\n            1,\n            0,\n            1\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The single rectangle is formed by rows 1 and 3 at columns 2 and 4.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            1,\n            1\n          ],\n          [\n            1,\n            1,\n            1\n          ],\n          [\n            1,\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": 9,\n      \"explanation\": \"Nine rectangles are formed from combinations of rows and columns.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            1,\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"No rectangles can be formed with a single row.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_size\": \"1 <= m, n <= 200\",\n    \"cell_values\": \"grid[i][j] is either 0 or 1\",\n    \"ones_count\": \"The total number of '1's in the grid is in the range [1, 6000]\"\n  },\n  \"follow_up\": \"Discuss how the heavy and light row distinction optimizes performance. Analyze the trade-offs of using sets or hash maps for quick lookups in heavy rows.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Change the color of connected pixels in an image."}, {"role": "assistant", "content": "{\n  \"description\": \"Perform a flood fill operation on a given image grid starting from a specific pixel and changing all connected pixels of the same color to a new color.\",\n  \"objective\": \"Use Depth-First Search (DFS) or Breadth-First Search (BFS) to identify all connected pixels of the starting pixel and change their color efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Identify the starting pixel's color (`startColor`) using the provided coordinates (`sr`, `sc`). If `startColor` matches the `color`, return the original image as no changes are needed.\",\n    \"Step 2\": \"Define a helper function `dfs` to recursively change the pixel's color to `color`. Check the bounds of the grid and ensure that the pixel has the `startColor` before changing its value.\",\n    \"Step 3\": \"Invoke the `dfs` function starting from the given coordinates (`sr`, `sc`). Use recursion to visit all 4-directionally connected pixels of the same color.\",\n    \"Step 4\": \"For BFS implementation, use a queue to iteratively process connected pixels of the same color. Push neighboring pixels into the queue and update their colors.\",\n    \"Step 5\": \"Return the modified image grid after all connected pixels have been updated.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"image\": [\n          [\n            1,\n            1,\n            1\n          ],\n          [\n            1,\n            1,\n            0\n          ],\n          [\n            1,\n            0,\n            1\n          ]\n        ],\n        \"sr\": 1,\n        \"sc\": 1,\n        \"color\": 2\n      },\n      \"output\": [\n        [\n          2,\n          2,\n          2\n        ],\n        [\n          2,\n          2,\n          0\n        ],\n        [\n          2,\n          0,\n          1\n        ]\n      ],\n      \"explanation\": [\n        \"Starting at pixel (1, 1) with color 1, change all connected pixels (4-directionally) of color 1 to 2.\",\n        \"Pixels at (0, 0), (0, 1), (0, 2), (1, 0), and (1, 1) are updated, while pixels at (2, 2) remain unchanged.\"\n      ]\n    },\n    {\n      \"input\": {\n        \"image\": [\n          [\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0\n          ]\n        ],\n        \"sr\": 0,\n        \"sc\": 0,\n        \"color\": 0\n      },\n      \"output\": [\n        [\n          0,\n          0,\n          0\n        ],\n        [\n          0,\n          0,\n          0\n        ]\n      ],\n      \"explanation\": [\n        \"The starting pixel is already of the new color, so no changes are made to the image.\"\n      ]\n    }\n  ],\n  \"constraints\": {\n    \"grid_size\": \"1 <= m, n <= 50\",\n    \"pixel_value\": \"0 <= image[i][j], color < 2^16\",\n    \"starting_point\": \"0 <= sr < m, 0 <= sc < n\",\n    \"description\": \"Ensure the operation modifies only the connected region of pixels with the same initial color as the starting pixel.\"\n  },\n  \"follow_up\": \"Analyze the time complexity of DFS and BFS for this problem. Discuss edge cases such as when the starting pixel is already of the desired color or when the grid is completely filled with the same color.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if you can reach the last index of an array where each element tells how far you can jump."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums`, where each element represents the maximum jump length at that position, determine if you can reach the last index starting from the first index. Return `true` if it is possible, and `false` otherwise.\",\n  \"objective\": \"Design an efficient algorithm to check whether the last index can be reached, optimizing for both time and space complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task is to verify if it's possible to traverse the array from the first index to the last index, given the jump constraints defined by each element.\",\n    \"Step 2 - Greedy Approach\": \"Use a greedy approach by tracking the farthest position reachable at any point during traversal. If this position surpasses or reaches the last index, return `true`. Otherwise, return `false`.\",\n    \"Step 3 - Early Termination\": \"If at any point the farthest reachable index is less than or equal to the current index, and it's not the last index, terminate the loop and return `false`.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution works efficiently for constraints such as `1 <= nums.length <= 10^4` and `0 <= nums[i] <= 10^5`.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider edge cases such as single-element arrays (always `true`), arrays with all zeros except the first element, or arrays with large jump values.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          3,\n          1,\n          1,\n          4\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"Jump 1 step from index 0 to 1, then 3 steps to the last index.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          2,\n          1,\n          0,\n          4\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"You will always arrive at index 3, which has a maximum jump length of 0, making it impossible to reach the last index.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10^4\",\n    \"jump_range\": \"0 <= nums[i] <= 10^5\"\n  },\n  \"follow_up\": \"Can you implement a dynamic programming approach for this problem and compare its efficiency with the greedy solution?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find how many unique substrings of `s` are in the alphabet wraparound string."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a string `s` consisting of lowercase English letters. Your task is to find how many unique non-empty substrings of `s` exist in the infinite wraparound string `base`, which is a cyclic repetition of the alphabet `abcdefghijklmnopqrstuvwxyz`. Each substring of `s` that appears in `base` should follow consecutive alphabetical order, allowing wrapping from `z` to `a`.\",\n  \"objective\": \"Design an efficient algorithm to calculate the total count of unique non-empty substrings of `s` that are present in `base`. Optimize for time and space to handle large strings.\",\n  \"meta_prompt\": {\n    \"Step 1 - Analyze the Problem\": \"Understand the relationship between `s` and `base`. Identify substrings in `s` that appear in `base` as consecutive alphabetical sequences, allowing wrapping from `z` to `a`.\",\n    \"Step 2 - Define Unique Substring Contributions\": \"For each character in `s`, calculate the length of the longest substring ending at that character that satisfies the wraparound property. Use this to determine how many new unique substrings it contributes.\",\n    \"Step 3 - Use a Dynamic Programming Approach\": \"Maintain a table or array to track the maximum length of wraparound substrings ending with each letter of the alphabet. Use this to accumulate the count of unique substrings.\",\n    \"Step 4 - Optimize for Efficiency\": \"Avoid recalculating substrings unnecessarily by leveraging previously computed results and updating only when the wraparound condition is satisfied.\",\n    \"Step 5 - Handle Edge Cases\": \"Ensure that edge cases, such as single-character strings or strings with no valid wraparound substrings, are handled correctly.\",\n    \"Final Output\": \"Return the total count of unique substrings of `s` that are present in `base`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"a\"\n      },\n      \"output\": 1,\n      \"explanation\": \"The only substring is 'a', which is present in the wraparound string.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"cac\"\n      },\n      \"output\": 2,\n      \"explanation\": \"The substrings 'a' and 'c' are valid in the wraparound string.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"zab\"\n      },\n      \"output\": 6,\n      \"explanation\": \"The substrings are 'z', 'a', 'b', 'za', 'ab', and 'zab', all of which are in the wraparound string.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 10^5\",\n    \"characters\": \"The input string `s` consists of lowercase English letters only.\"\n  },\n  \"follow_up\": \"Can you optimize your approach further to handle very large strings efficiently, reducing redundant computations or memory usage?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a Sudoku board is valid."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if a `9 x 9` partially filled Sudoku board is valid. The board is considered valid if the following conditions are met: 1) Each row contains the digits `1-9` without repetition, 2) Each column contains the digits `1-9` without repetition, and 3) Each of the nine `3 x 3` sub-boxes contains the digits `1-9` without repetition. Only the filled cells need to be validated according to these rules.\",\n  \"objective\": \"Design an efficient algorithm to validate the Sudoku board by checking rows, columns, and sub-boxes for compliance with the given rules.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the goal is to validate the rows, columns, and `3 x 3` sub-boxes independently without solving the Sudoku. Use hash sets or arrays to track seen numbers in each row, column, and sub-box.\",\n    \"Step 2 - Traverse the Board\": \"Iterate through each cell of the board. For every digit encountered, check whether it has already appeared in the current row, column, or sub-box.\",\n    \"Step 3 - Identify Sub-Boxes\": \"Map the board into `3 x 3` sub-boxes using the formula `box_index = (i // 3) * 3 + (j // 3)` to ensure proper indexing.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the algorithm handles edge cases such as an empty board, minimal inputs, or rows, columns, or sub-boxes with multiple repeated digits.\",\n    \"Step 5 - Optimization and Space Efficiency\": \"Ensure that the solution works within the given constraints of `board.length == 9` and runs efficiently without unnecessary computations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"board\": [\n          [\n            \"5\",\n            \"3\",\n            \".\",\n            \".\",\n            \"7\",\n            \".\",\n            \".\",\n            \".\",\n            \".\"\n          ],\n          [\n            \"6\",\n            \".\",\n            \".\",\n            \"1\",\n            \"9\",\n            \"5\",\n            \".\",\n            \".\",\n            \".\"\n          ],\n          [\n            \".\",\n            \"9\",\n            \"8\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \"6\",\n            \".\"\n          ],\n          [\n            \"8\",\n            \".\",\n            \".\",\n            \".\",\n            \"6\",\n            \".\",\n            \".\",\n            \".\",\n            \"3\"\n          ],\n          [\n            \"4\",\n            \".\",\n            \".\",\n            \"8\",\n            \".\",\n            \"3\",\n            \".\",\n            \".\",\n            \"1\"\n          ],\n          [\n            \"7\",\n            \".\",\n            \".\",\n            \".\",\n            \"2\",\n            \".\",\n            \".\",\n            \".\",\n            \"6\"\n          ],\n          [\n            \".\",\n            \"6\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \"2\",\n            \"8\",\n            \".\"\n          ],\n          [\n            \".\",\n            \".\",\n            \".\",\n            \"4\",\n            \"1\",\n            \"9\",\n            \".\",\n            \".\",\n            \"5\"\n          ],\n          [\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \"8\",\n            \".\",\n            \".\",\n            \"7\",\n            \"9\"\n          ]\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The board is valid as all rows, columns, and sub-boxes contain distinct digits or empty cells.\"\n    },\n    {\n      \"input\": {\n        \"board\": [\n          [\n            \"8\",\n            \"3\",\n            \".\",\n            \".\",\n            \"7\",\n            \".\",\n            \".\",\n            \".\",\n            \".\"\n          ],\n          [\n            \"6\",\n            \".\",\n            \".\",\n            \"1\",\n            \"9\",\n            \"5\",\n            \".\",\n            \".\",\n            \".\"\n          ],\n          [\n            \".\",\n            \"9\",\n            \"8\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \"6\",\n            \".\"\n          ],\n          [\n            \"8\",\n            \".\",\n            \".\",\n            \".\",\n            \"6\",\n            \".\",\n            \".\",\n            \".\",\n            \"3\"\n          ],\n          [\n            \"4\",\n            \".\",\n            \".\",\n            \"8\",\n            \".\",\n            \"3\",\n            \".\",\n            \".\",\n            \"1\"\n          ],\n          [\n            \"7\",\n            \".\",\n            \".\",\n            \".\",\n            \"2\",\n            \".\",\n            \".\",\n            \".\",\n            \"6\"\n          ],\n          [\n            \".\",\n            \"6\",\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \"2\",\n            \"8\",\n            \".\"\n          ],\n          [\n            \".\",\n            \".\",\n            \".\",\n            \"4\",\n            \"1\",\n            \"9\",\n            \".\",\n            \".\",\n            \"5\"\n          ],\n          [\n            \".\",\n            \".\",\n            \".\",\n            \".\",\n            \"8\",\n            \".\",\n            \".\",\n            \"7\",\n            \"9\"\n          ]\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The board is invalid as the top-left `3 x 3` sub-box contains duplicate `8`s.\"\n    }\n  ],\n  \"constraints\": {\n    \"board_size\": \"The board is a 9 x 9 grid.\",\n    \"cell_values\": \"Each cell contains a digit `1-9` or `'.'` (empty).\",\n    \"validity\": \"Only filled cells need to be validated.\"\n  },\n  \"follow_up\": \"Can you optimize your solution to handle larger boards (e.g., for generalized Sudoku boards)?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find all words in a grid."}, {"role": "assistant", "content": "{\n  \"description\": \"Find all words from a given list that can be formed by sequentially adjacent letters in a 2D grid.\",\n  \"objective\": \"Design an efficient solution using Trie and backtracking to search for words in a grid.\",\n  \"meta_prompt\": {\n    \"Step 1 - Build Trie\": \"Insert all words from the list into a Trie for efficient prefix-based search.\",\n    \"Step 2 - Iterate Grid\": \"Traverse each cell in the grid to begin a search if the character matches the root of a Trie branch.\",\n    \"Step 3 - Backtracking\": \"Mark visited cells to avoid revisiting during the DFS.\",\n    \"Step 4 - Handle Constraints\": \"Ensure no cell is used more than once in a single word. Optimize by pruning paths that are not prefixes in the Trie.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"board\": [\n          [\n            \"o\",\n            \"a\",\n            \"a\",\n            \"n\"\n          ],\n          [\n            \"e\",\n            \"t\",\n            \"a\",\n            \"e\"\n          ],\n          [\n            \"i\",\n            \"h\",\n            \"k\",\n            \"r\"\n          ],\n          [\n            \"i\",\n            \"f\",\n            \"l\",\n            \"v\"\n          ]\n        ],\n        \"words\": [\n          \"oath\",\n          \"pea\",\n          \"eat\",\n          \"rain\"\n        ]\n      },\n      \"output\": [\n        \"oath\",\n        \"eat\"\n      ],\n      \"explanation\": \"The words 'oath' and 'eat' can be constructed from adjacent cells in the board.\"\n    },\n    {\n      \"input\": {\n        \"board\": [\n          [\n            \"a\",\n            \"b\"\n          ],\n          [\n            \"c\",\n            \"d\"\n          ]\n        ],\n        \"words\": [\n          \"abcd\"\n        ]\n      },\n      \"output\": [],\n      \"explanation\": \"No words can be formed with adjacent cells.\"\n    }\n  ],\n  \"constraints\": {\n    \"board_size\": \"1 <= board.length, board[i].length <= 12\",\n    \"word_length\": \"1 <= words[i].length <= 10\",\n    \"words_list\": \"1 <= words.length <= 3 * 10^4\",\n    \"characters\": \"Grid contains only lowercase letters. Words list is unique.\"\n  },\n  \"follow_up\": \"How would you handle cases where the words list is extremely large or the grid is sparse?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find how much water can be trapped between bars in an elevation map."}, {"role": "assistant", "content": "{\n  \"description\": \"Given `n` non-negative integers representing an elevation map where the width of each bar is `1`, compute the amount of water that can be trapped after raining.\",\n  \"objective\": \"Design an efficient algorithm to calculate the total amount of water trapped between the bars in the elevation map, adhering to the constraints and minimizing space and time complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the water trapped above a bar is determined by the minimum of the maximum heights on its left and right minus the height of the bar itself. Sum this for all bars to compute the total water trapped.\",\n    \"Step 2 - Two-Pointer Technique\": \"Use two pointers, one starting at the left and the other at the right. Track the maximum heights on both sides as you iterate towards the center. Calculate the water trapped at each step.\",\n    \"Step 3 - Alternative Approach with Precomputed Arrays\": \"Precompute the maximum heights to the left and right of each bar using two arrays. Use these arrays to calculate the water trapped at each position.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution works efficiently within the constraints of `1 <= n <= 2 * 10^4` and `0 <= height[i] <= 10^5`.\",\n    \"Step 5 - Edge Cases\": \"Handle cases where the elevation map has no bars (`n = 1`), no water can be trapped, or all bars are of the same height.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"height\": [\n          0,\n          1,\n          0,\n          2,\n          1,\n          0,\n          1,\n          3,\n          2,\n          1,\n          2,\n          1\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"The total water trapped between the bars is 6 units.\"\n    },\n    {\n      \"input\": {\n        \"height\": [\n          4,\n          2,\n          0,\n          3,\n          2,\n          5\n        ]\n      },\n      \"output\": 9,\n      \"explanation\": \"The total water trapped between the bars is 9 units.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= height.length <= 2 * 10^4\",\n    \"height_values\": \"0 <= height[i] <= 10^5\",\n    \"time_and_space\": \"The algorithm should run in O(n) time and use O(1) extra space if possible.\"\n  },\n  \"follow_up\": \"Can you optimize the space complexity to O(1) using the two-pointer technique while maintaining O(n) time complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the largest palindrome you can make by multiplying two n-digit numbers and return it modulo 1337."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `n`, find the largest palindromic integer that can be represented as the product of two `n`-digit integers. Since the result can be very large, return the value modulo `1337`.\",\n  \"objective\": \"Design an efficient algorithm to calculate the largest palindromic product of two `n`-digit integers, ensuring the result is returned modulo `1337`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand Palindromic Product\": \"Identify that a palindromic number reads the same forward and backward. The task involves finding the maximum palindrome that results from the product of two `n`-digit integers.\",\n    \"Step 2 - Constraints Analysis\": \"Understand that for larger values of `n`, the range of numbers to check increases exponentially. Use constraints such as `1 <= n <= 8` to limit the search space.\",\n    \"Step 3 - Optimize Search for Palindromes\": \"Start from the largest `n`-digit integers and work backwards to minimize unnecessary calculations. Check only products that are potential palindromes.\",\n    \"Step 4 - Palindrome Check\": \"Use a helper function to determine if a number is a palindrome by comparing its string representation with its reverse.\",\n    \"Step 5 - Efficiency and Modular Arithmetic\": \"Ensure the algorithm avoids redundant computations and applies modulo `1337` only when the largest palindrome is identified.\",\n    \"Step 6 - Edge Cases\": \"Handle edge cases, such as when `n = 1`, where the numbers are single digits and the result is the maximum digit (e.g., 9).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 2\n      },\n      \"output\": 987,\n      \"explanation\": \"The largest palindrome is 9009, which is 99 x 91. Applying modulo 1337 gives 987.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1\n      },\n      \"output\": 9,\n      \"explanation\": \"The largest palindrome is 9, which is the product of 1-digit numbers like 3 x 3 or 1 x 9.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 8\",\n    \"modulo_value\": \"Return result modulo 1337.\",\n    \"time_efficiency\": \"Optimize for larger values of `n` to avoid exponential runtime.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"How would the algorithm change if there was no modulo constraint?\",\n    \"question_2\": \"Can you optimize further for `n = 8` by leveraging mathematical properties of palindromes?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the squares of numbers in the list and return them in sorted order."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a sorted array of integers nums in non-decreasing order, your task is to return an array of the squares of each number, sorted in non-decreasing order. You are expected to implement an efficient solution that avoids directly squaring each element and sorting the result, and instead leverages the sorted structure of the input array to achieve the result in O(n) time complexity.\",\n  \"objective\": \"Design an optimal algorithm that squares each element of the sorted array and returns the resulting array of squares in non-decreasing order with an O(n) time complexity approach.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Start by analyzing the structure of the input: nums is already sorted in non-decreasing order. Your task is to square each element and return the sorted result.\",\n    \"Step 2 - Initial Approach\": \"One naive solution would be to square each element and then sort the resulting array. However, this approach has a time complexity of O(n log n), which is not optimal. We need to find a better approach.\",\n    \"Step 3 - Optimal Solution\": \"Since the array is sorted, the largest and smallest values will be at the two ends of the array. The result will be built by comparing the squares of these values and placing them in the correct order. You can use two pointers\\u2014one starting from the left and the other from the right\\u2014to build the result array from the largest to the smallest square.\",\n    \"Step 4 - Output Format\": \"Return the array of squares, sorted in non-decreasing order. Ensure that the algorithm runs efficiently even for large input sizes, adhering to the O(n) time complexity.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Write the code to handle edge cases such as arrays with only one element, arrays containing negative numbers, and arrays with all positive or all negative numbers.\",\n    \"Final Check - Constraints Verification\": \"Verify that your solution runs within the given constraints of 1 <= nums.length <= 10^4 and -10^4 <= nums[i] <= 10^4. Ensure that the solution is efficient and scalable.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          -4,\n          -1,\n          0,\n          3,\n          10\n        ]\n      },\n      \"output\": [\n        0,\n        1,\n        9,\n        16,\n        100\n      ],\n      \"explanation\": \"After squaring each element, the array becomes [16, 1, 0, 9, 100]. After sorting, it becomes [0, 1, 9, 16, 100].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          -7,\n          -3,\n          2,\n          3,\n          11\n        ]\n      },\n      \"output\": [\n        4,\n        9,\n        9,\n        49,\n        121\n      ],\n      \"explanation\": \"After squaring each element, the array becomes [49, 9, 4, 9, 121]. After sorting, it becomes [4, 9, 9, 49, 121].\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 10^4\",\n    \"nums_elements_range\": \"-10^4 <= nums[i] <= 10^4\",\n    \"nums_sorted\": \"The input array is sorted in non-decreasing order.\"\n  },\n  \"follow_up\": \"Can you implement an O(n) solution by using a two-pointer technique to build the result array from the largest to smallest squares, without performing a sort operation?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given a mathematical expression with variables and integers, and you need to simplify it."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an expression with variables and integers, and an evaluation map that provides the values for specific variables. Your task is to simplify the expression and return a list of tokens representing the simplified expression, formatted according to certain rules.\",\n  \"objective\": \"Evaluate the given expression by replacing variables with their respective values and simplifying the terms in a specific format. The expression may include variables, integers, and arithmetic operators.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understanding the Expression\": \"The expression is a valid mathematical expression, consisting of variables, integers, and arithmetic operations (addition, subtraction, multiplication). The variables in the expression need to be evaluated based on the given `evalvars` and `evalints` mappings.\",\n    \"Step 2 - Expression Parsing\": \"Split the expression into individual tokens (variables, integers, operators) and handle them according to the standard order of operations (brackets first, followed by multiplication, then addition and subtraction).\",\n    \"Step 3 - Substituting Variables\": \"For each variable in `evalvars`, replace it with its corresponding value from `evalints`. If there are no variables to replace, skip this step.\",\n    \"Step 4 - Simplifying Terms\": \"After variable substitution, simplify the expression by combining like terms, sorting variables lexicographically within each term, and ensuring the output follows the specified format.\",\n    \"Step 5 - Format the Result\": \"The result must be a list of terms, where each term contains a coefficient and variables sorted lexicographically. The highest degree terms should be listed first, and terms with a coefficient of zero should be excluded.\",\n    \"Step 6 - Handle Edge Cases\": \"Consider edge cases such as missing variables in `evalvars`, negative coefficients, and expressions with parentheses. Ensure the solution handles these correctly.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution meets the problem constraints, including the expression length, the valid ranges for variables and integers, and the fact that all tokens are separated by spaces.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"expression\": \"e + 8 - a + 5 \",\n        \"evalvars\": [\n          \"e\"\n        ],\n        \"evalints\": [\n          1\n        ]\n      },\n      \"output\": [\n        \"-1*a \",\n        \"14 \"\n      ],\n      \"explanation\": \"The variable `e` is replaced with 1, and the expression simplifies to `1 + 8 - a + 5`, which simplifies further to `-1*a + 14`.\"\n    },\n    {\n      \"input\": {\n        \"expression\": \"e - 8 + temperature - pressure \",\n        \"evalvars\": [\n          \"e\",\n          \"temperature\"\n        ],\n        \"evalints\": [\n          1,\n          12\n        ]\n      },\n      \"output\": [\n        \"-1*pressure \",\n        \"5 \"\n      ],\n      \"explanation\": \"The variables `e` and `temperature` are replaced, and the expression simplifies to `1 - 8 + 12 - pressure`, which simplifies to `-1*pressure + 5`.\"\n    },\n    {\n      \"input\": {\n        \"expression\": \"(e + 8) * (e - 8) \",\n        \"evalvars\": [],\n        \"evalints\": []\n      },\n      \"output\": [\n        \"1*e*e \",\n        \"-64 \"\n      ],\n      \"explanation\": \"There are no variables to replace, so the expression simplifies to `e^2 - 64`.\"\n    }\n  ],\n  \"constraints\": {\n    \"expression_length\": \"1 <= expression.length <= 250\",\n    \"evalvars_length\": \"0 <= evalvars.length <= 100\",\n    \"evalvars_element_length\": \"1 <= evalvars[i].length <= 20\",\n    \"evalvars_elements\": \"evalvars[i] consists of lowercase English letters.\",\n    \"evalints_length\": \"evalints.length == evalvars.length\",\n    \"evalints_values\": \"-100 <= evalints[i] <= 100\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle larger expressions efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum number of points that lie on the same straight line."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of `points` where `points[i] = [xi, yi]` represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.\",\n  \"objective\": \"Design an algorithm to determine the maximum number of points that can lie on the same straight line.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves determining collinearity of points based on their slopes.\",\n    \"Step 2 - Use Slope Calculation\": \"For each point, calculate slopes to all other points and use a hash map to count occurrences of each slope.\",\n    \"Step 3 - Handle Vertical Lines\": \"Consider vertical lines as a special case by using an undefined slope.\",\n    \"Step 4 - Optimize\": \"Ensure the solution is efficient for up to 300 points by avoiding redundant calculations.\",\n    \"Step 5 - Handle Edge Cases\": \"Handle cases such as overlapping points, all points lying on a single line, or only one point.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"points\": [\n          [\n            1,\n            1\n          ],\n          [\n            2,\n            2\n          ],\n          [\n            3,\n            3\n          ]\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"All three points lie on the same line.\"\n    },\n    {\n      \"input\": {\n        \"points\": [\n          [\n            1,\n            1\n          ],\n          [\n            3,\n            2\n          ],\n          [\n            5,\n            3\n          ],\n          [\n            4,\n            1\n          ],\n          [\n            2,\n            3\n          ],\n          [\n            1,\n            4\n          ]\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"Four points lie on the line.\"\n    }\n  ],\n  \"constraints\": {\n    \"point_count\": \"1 <= points.length <= 300\",\n    \"coordinate_values\": \"-10^4 <= xi, yi <= 10^4\",\n    \"uniqueness\": \"All points are unique.\"\n  },\n  \"follow_up\": \"Can you implement the solution to handle both integer and floating-point precision for slope calculations?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count hits from the last 5 minutes."}, {"role": "assistant", "content": "{\n  \"title\": \"Design a Hit Counter\",\n  \"description\": \"Design a system to count hits received in the last 5 minutes (300 seconds) in a timestamped manner, supporting high efficiency and scalability.\",\n  \"methods\": {\n    \"HitCounter\": {\n      \"description\": \"Initializes the hit counter object.\",\n      \"parameters\": []\n    },\n    \"hit\": {\n      \"description\": \"Records a hit at the specified timestamp.\",\n      \"parameters\": [\n        {\n          \"name\": \"timestamp\",\n          \"type\": \"integer\",\n          \"description\": \"The timestamp of the hit in seconds.\"\n        }\n      ],\n      \"output\": {\n        \"type\": \"void\",\n        \"description\": \"Records the hit and does not return any value.\"\n      }\n    },\n    \"getHits\": {\n      \"description\": \"Returns the number of hits in the last 5 minutes (300 seconds) from the specified timestamp.\",\n      \"parameters\": [\n        {\n          \"name\": \"timestamp\",\n          \"type\": \"integer\",\n          \"description\": \"The timestamp at which the query is being made.\"\n        }\n      ],\n      \"output\": {\n        \"type\": \"integer\",\n        \"description\": \"The number of hits received in the past 300 seconds.\"\n      }\n    }\n  },\n  \"constraints\": [\n    \"1 <= timestamp <= 2 * 10^9\",\n    \"At most 300 calls to `hit` and `getHits` combined.\",\n    \"Timestamps arrive in chronological order.\"\n  ],\n  \"examples\": [\n    {\n      \"input\": [\n        \"HitCounter\",\n        \"hit(1)\",\n        \"hit(2)\",\n        \"hit(3)\",\n        \"getHits(4)\",\n        \"hit(300)\",\n        \"getHits(300)\",\n        \"getHits(301)\"\n      ],\n      \"output\": [\n        null,\n        null,\n        null,\n        null,\n        3,\n        null,\n        4,\n        3\n      ],\n      \"explanation\": [\n        \"HitCounter is initialized.\",\n        \"A hit is recorded at timestamp 1.\",\n        \"A hit is recorded at timestamp 2.\",\n        \"A hit is recorded at timestamp 3.\",\n        \"There are 3 hits in the last 5 minutes from timestamp 4.\",\n        \"A hit is recorded at timestamp 300.\",\n        \"There are 4 hits in the last 5 minutes from timestamp 300.\",\n        \"There are 3 hits in the last 5 minutes from timestamp 301.\"\n      ]\n    }\n  ],\n  \"hints\": [\n    \"Use a queue or circular buffer to store hits and their timestamps.\",\n    \"Efficiently prune hits older than 300 seconds during `getHits` calls.\",\n    \"Minimize the memory overhead and number of operations to maintain scalability.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(1) or O(n) per operation where n is the number of stored hits within the last 5 minutes.\",\n    \"constraints\": \"Ensure the system scales for a large number of hits and handles concurrent calls efficiently.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create a class to traverse a BST using in-order traversal."}, {"role": "assistant", "content": "{\n  \"description\": \"Implement the `BSTIterator` class to iterate over a binary search tree (BST) using in-order traversal.\",\n  \"objective\": \"Design an iterator that provides efficient `next()` and `hasNext()` operations to traverse a BST.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that in-order traversal visits nodes in ascending order for a BST.\",\n    \"Step 2 - Use Stack for Iteration\": \"Maintain a stack to simulate recursion and keep track of nodes to visit.\",\n    \"Step 3 - Implement `next()`\": \"Return the next smallest value and update the stack by pushing the leftmost nodes of the right subtree.\",\n    \"Step 4 - Implement `hasNext()`\": \"Check if the stack is non-empty to determine if there are more nodes to visit.\",\n    \"Step 5 - Optimize Space\": \"Use O(h) memory, where h is the height of the tree, by keeping only the necessary nodes on the stack.\",\n    \"Step 6 - Handle Edge Cases\": \"Ensure the solution handles edge cases like an empty tree, a tree with one node, or highly unbalanced trees.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"operations\": [\n          \"BSTIterator\",\n          \"next\",\n          \"next\",\n          \"hasNext\",\n          \"next\",\n          \"hasNext\",\n          \"next\",\n          \"hasNext\",\n          \"next\",\n          \"hasNext\"\n        ],\n        \"values\": [\n          [\n            [\n              7,\n              3,\n              15,\n              null,\n              null,\n              9,\n              20\n            ]\n          ],\n          [],\n          [],\n          [],\n          [],\n          [],\n          [],\n          [],\n          [],\n          []\n        ]\n      },\n      \"output\": [\n        null,\n        3,\n        7,\n        true,\n        9,\n        true,\n        15,\n        true,\n        20,\n        false\n      ],\n      \"explanation\": \"`next()` returns nodes in ascending order. `hasNext()` indicates if more nodes are available.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"1 <= number of nodes <= 10^5\",\n    \"node_value\": \"0 <= Node.val <= 10^6\",\n    \"calls_limit\": \"At most 10^5 calls to `next()` and `hasNext()`.\"\n  },\n  \"follow_up\": \"Can you implement `next()` and `hasNext()` to run in O(1) average time using O(h) memory?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a list of words and a pattern, return a list of words that match the pattern."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a list of strings `words` and a string `pattern`. Your task is to return a list of words from `words` that match the pattern. A word matches the pattern if there exists a permutation of letters such that every letter in the pattern is mapped to a distinct letter in the word. A permutation is a bijection where every letter in the pattern maps to a unique letter in the word.\",\n  \"objective\": \"Design a solution that identifies words that match the given pattern using a permutation mapping.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understanding Pattern Matching\": \"Each word matches the pattern if you can create a one-to-one mapping between characters in the pattern and the corresponding characters in the word. This mapping should be bijective, meaning that no two characters in the pattern map to the same character in the word.\",\n    \"Step 2 - Efficient Matching Logic\": \"To determine if a word matches the pattern, iterate over both the word and the pattern at the same time. Maintain a mapping of characters from the pattern to the word, and ensure that each character in the pattern maps to a unique character in the word. If any violation occurs (e.g., two characters map to the same letter), the word does not match the pattern.\",\n    \"Step 3 - Output the Results\": \"The output should be a list of words from `words` that match the pattern, in any order.\",\n    \"Step 4 - Constraints Consideration\": \"Given the constraints (word length up to 20 and list length up to 50), an efficient approach involves linear scanning and map-based validation for each word. Ensure that the solution works in reasonable time for the input size.\",\n    \"Step 5 - Edge Case Handling\": \"Ensure that the solution handles edge cases such as words of length 1 or patterns that have repeated characters.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"words\": [\n          \"abc\",\n          \"deq\",\n          \"mee\",\n          \"aqq\",\n          \"dkd\",\n          \"ccc\"\n        ],\n        \"pattern\": \"abb\"\n      },\n      \"output\": [\n        \"mee\",\n        \"aqq\"\n      ],\n      \"explanation\": \"The words 'mee' and 'aqq' match the pattern because a valid bijection can be created between the letters of the pattern and the letters in the words.\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"a\",\n          \"b\",\n          \"c\"\n        ],\n        \"pattern\": \"a\"\n      },\n      \"output\": [\n        \"a\",\n        \"b\",\n        \"c\"\n      ],\n      \"explanation\": \"All the words match the pattern since they all have exactly one character, and any one-character word can map to the pattern.\"\n    }\n  ],\n  \"constraints\": {\n    \"pattern_length\": \"1 <= pattern.length <= 20\",\n    \"words_length\": \"1 <= words.length <= 50\",\n    \"word_length\": \"words[i].length == pattern.length\",\n    \"letters\": \"pattern and words[i] consist of lowercase English letters\"\n  },\n  \"follow_up\": \"Can you optimize this solution to work in linear time for each word?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the length of the longest palindrome from a string."}, {"role": "assistant", "content": "{\n  \"title\": \"Longest Palindrome Length\",\n  \"description\": \"Given a string `s` consisting of lowercase and uppercase letters, determine the length of the longest palindrome that can be formed using the letters of `s`. Letters are case-sensitive, and each letter can appear at most as many times as it exists in `s`.\",\n  \"input\": {\n    \"name\": \"s\",\n    \"type\": \"string\",\n    \"description\": \"The input string consisting of lowercase and uppercase English letters.\",\n    \"constraints\": \"1 <= s.length <= 2000\"\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The length of the longest palindrome that can be built using the characters of `s`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"abccccdd\"\n      },\n      \"output\": 7,\n      \"explanation\": \"A longest palindrome is 'dccaccd', which has a length of 7.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"a\"\n      },\n      \"output\": 1,\n      \"explanation\": \"The longest palindrome that can be built is 'a', with a length of 1.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"Aa\"\n      },\n      \"output\": 1,\n      \"explanation\": \"Since the letters are case-sensitive, only one letter can be used to form a palindrome, with a length of 1.\"\n    }\n  ],\n  \"hints\": [\n    \"Use a frequency count to determine how many times each character appears.\",\n    \"For each character with an even frequency, use all of them in the palindrome.\",\n    \"For characters with an odd frequency, use one less than their frequency to keep the count even, and add one character to the center if needed.\"\n  ],\n  \"constraints\": {\n    \"goal\": \"Solve the problem in O(n) time using a single pass to count character frequencies.\",\n    \"avoid\": \"Avoid generating all permutations or explicitly building the palindrome.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the first bad version of a product using an API."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given `n` versions `[1, 2, ..., n]` of a product, where some versions are bad, and all versions after the first bad version are also bad. Implement a function to find the first bad version using the `isBadVersion(version)` API, which returns `true` if the version is bad and `false` otherwise.\",\n  \"objective\": \"Design an efficient algorithm to find the first bad version while minimizing the number of API calls by using binary search.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the problem can be solved using binary search because the versions are ordered. If version `i` is bad, all versions after `i` are also bad.\",\n    \"Step 2 - Binary Search Setup\": \"Initialize two pointers, `low` at `1` and `high` at `n`. Use binary search to narrow down the range of possible bad versions.\",\n    \"Step 3 - Binary Search Logic\": \"Check the middle version using `isBadVersion`. If it is bad, move the `high` pointer to `mid` (including `mid` as a potential answer). If it is not bad, move the `low` pointer to `mid + 1`.\",\n    \"Step 4 - Stop Condition\": \"When `low` equals `high`, the first bad version has been found.\",\n    \"Step 5 - Edge Cases\": \"Handle cases such as `n = 1` (only one version to check) and cases where the first version is bad (`bad = 1`).\",\n    \"Step 6 - Output\": \"Return the value of the first bad version.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 5,\n        \"bad\": 4\n      },\n      \"output\": 4,\n      \"explanation\": \"Version 4 is the first bad version. Binary search minimizes the number of API calls.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1,\n        \"bad\": 1\n      },\n      \"output\": 1,\n      \"explanation\": \"With only one version, it must be the first bad version.\"\n    }\n  ],\n  \"constraints\": {\n    \"version_range\": \"1 <= bad <= n <= 2^31 - 1\",\n    \"API_usage_limit\": \"Minimize the number of calls to `isBadVersion` using an efficient search strategy.\"\n  },\n  \"follow_up\": \"Can you optimize the binary search to ensure it works efficiently for very large values of `n` and avoids potential overflow?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find all root-to-leaf paths in a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary tree, return all root-to-leaf paths in any order. A leaf is defined as a node with no children, and the paths should be represented as strings where values are separated by `->`.\",\n  \"objective\": \"Design an efficient algorithm to traverse the binary tree and generate all root-to-leaf paths while handling edge cases like single-node trees.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that a root-to-leaf path represents a sequence of nodes from the root of the tree to a leaf node. Each path is a string of node values joined by `->`.\",\n    \"Step 2 - Recursive DFS Approach\": \"Use a depth-first search (DFS) to traverse the tree, accumulating the current path as a string and appending it to the result when a leaf node is reached.\",\n    \"Step 3 - Iterative Approach\": \"Optionally, use a stack to implement an iterative DFS for scenarios where recursion depth might be a concern.\",\n    \"Step 4 - Output Format\": \"Return the result as a list of strings, with each string representing a root-to-leaf path.\",\n    \"Step 5 - Edge Cases\": \"Handle cases such as single-node trees (return the root value as the only path) and trees with multiple branches.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3,\n          null,\n          5\n        ]\n      },\n      \"output\": [\n        \"1->2->5\",\n        \"1->3\"\n      ],\n      \"explanation\": \"The tree has two root-to-leaf paths: `1->2->5` and `1->3`.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1\n        ]\n      },\n      \"output\": [\n        \"1\"\n      ],\n      \"explanation\": \"A single-node tree has one root-to-leaf path: `1`.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"1 <= number of nodes <= 100\",\n    \"node_values\": \"-100 <= Node.val <= 100\"\n  },\n  \"follow_up\": \"Can you modify the algorithm to return the paths in sorted order if the values of the nodes are unique?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given an encoded string, return the kth character in the decoded string."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an encoded string 's'. The string contains letters and digits. The letters are written directly onto the tape, while the digits represent how many times the current tape content is repeated. Your task is to return the kth letter in the fully decoded string, with k being 1-indexed.\",\n  \"objective\": \"Design an efficient algorithm to decode the string and return the kth character without fully decoding the string, focusing on achieving optimal performance due to the potential size of the decoded string.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Start by analyzing the structure of the encoded string. The string consists of characters where a letter is written directly, and a digit indicates repetition of the entire tape from the beginning. The task is to find the kth letter in the decoded string.\",\n    \"Step 2 - Strategy for Finding the kth Letter\": \"Instead of decoding the string fully, track the lengths of the decoded string as you process each character. When encountering a digit, calculate how much the total length will increase and how the kth position is affected by that digit\\u2019s repetition.\",\n    \"Step 3 - Efficiently Identify the kth Letter\": \"Use the length of the tape dynamically. Iterate through the string and maintain the current length of the decoded string. If the kth index is in the current tape, continue decoding, and if the kth index falls within the range of a repeated section, adjust your approach accordingly.\",\n    \"Step 4 - Output Format\": \"Return the character corresponding to the kth position in the decoded string. Ensure that your code handles all edge cases, such as large repetitions, and returns the result efficiently without fully constructing the decoded string.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure your solution works within the constraints, achieving time complexity better than constructing the entire string. Handle the cases where repeated sections are large or the kth position falls within the repeated regions.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution works under the given constraints, including a very large number of repetitions, and ensures the correct output for any valid input.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"leet2code3\",\n        \"k\": 10\n      },\n      \"output\": \"o\",\n      \"explanation\": \"The decoded string is 'leetleetcodeleetleetcodeleetleetcode'. The 10th letter is 'o'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"ha22\",\n        \"k\": 5\n      },\n      \"output\": \"h\",\n      \"explanation\": \"The decoded string is 'hahahaha'. The 5th letter is 'h'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"a2345678999999999999999\",\n        \"k\": 1\n      },\n      \"output\": \"a\",\n      \"explanation\": \"The decoded string is 'a' repeated many times. The 1st letter is 'a'.\"\n    }\n  ],\n  \"constraints\": {\n    \"s_length\": \"2 <= s.length <= 100\",\n    \"s_elements\": \"The string contains lowercase English letters and digits from 2 to 9.\",\n    \"k_range\": \"1 <= k <= 10^9\",\n    \"decoded_length_limit\": \"The length of the decoded string is guaranteed to be less than 2^63.\"\n  },\n  \"follow_up\": \"Can you devise a method to determine the kth character without fully decoding the string, thus avoiding unnecessary computations, and ensuring that the solution runs efficiently even for large values of k?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the size of the largest BST subtree in a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of a binary tree, find the largest subtree that satisfies the Binary Search Tree (BST) properties. Return the size of this subtree, where size refers to the total number of nodes in the subtree.\",\n  \"objective\": \"Design an efficient algorithm to find the largest BST subtree in the binary tree. Optimize the solution to run in O(n) time complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Node Definition\": \"A BST satisfies two conditions: (1) left child values are less than the parent, and (2) right child values are greater than the parent. Validate this recursively for every subtree.\",\n    \"Step 2 - Subtree Validation\": \"For each node, calculate the size of the largest BST in its left and right subtrees. Also track the min and max values in the subtree to validate the BST property for the current node.\",\n    \"Step 3 - Bottom-Up Traversal\": \"Use a post-order traversal to check BST properties from the bottom up. Combine results from child nodes to determine if the current node forms a valid BST.\",\n    \"Step 4 - Result Aggregation\": \"At each node, if it forms a BST with its children, calculate its total size and update the global maximum. If not, propagate invalid states upwards.\",\n    \"Step 5 - Edge Cases\": \"Handle cases where the tree is empty or all nodes are part of a valid BST.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          10,\n          5,\n          15,\n          1,\n          8,\n          null,\n          7\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The largest BST subtree is [5, 1, 8] with size 3.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          4,\n          2,\n          7,\n          2,\n          3,\n          5,\n          null,\n          2,\n          null,\n          null,\n          null,\n          null,\n          null,\n          1\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The largest BST subtree is [2, 3] with size 2.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"The number of nodes is in the range [0, 10^4].\",\n    \"node_values\": \"Each node's value is within [-10^4, 10^4].\",\n    \"valid_tree\": \"The input is a valid binary tree.\"\n  },\n  \"follow_up\": \"Explore methods to optimize the solution to run in O(n) time complexity by avoiding redundant calculations during tree traversal.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given two binary trees. Check if they are flip equivalent."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given two binary trees, and your task is to determine whether they are flip equivalent. A flip operation allows you to swap the left and right child subtrees of any node. Two binary trees are considered flip equivalent if one can be transformed into the other by applying some number of flip operations.\",\n  \"objective\": \"Write a function that takes the roots of two binary trees as input and returns `true` if the trees are flip equivalent, otherwise returns `false`. A flip equivalent tree is one that can be transformed into the other by swapping left and right children of some nodes.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"You are given two binary trees. The challenge is to check if they are flip equivalent, meaning you can transform one into the other by swapping left and right subtrees of nodes.\",\n    \"Step 2 - Approach\": \"To solve this problem, use a recursive approach to compare the two trees. For each pair of nodes, check if their values match. Then, either compare their children normally (left with left and right with right) or swap the children and compare (left with right and right with left).\",\n    \"Step 3 - Recursive Function\": \"A helper function can recursively check if two trees are flip equivalent by checking for two conditions: (a) the trees match in structure and values, or (b) one tree can be transformed into the other through flipping the left and right subtrees.\",\n    \"Step 4 - Base Cases\": \"Base cases include checking if both nodes are `null` (return `true`), if one node is `null` and the other is not (return `false`), and if the node values do not match (return `false`).\",\n    \"Step 5 - Recursive Comparison\": \"For each node, check if its children can be flipped to match the children of the corresponding node in the other tree. If both flipped and non-flipped comparisons yield `true`, the trees are flip equivalent.\",\n    \"Step 6 - Edge Cases\": \"Consider edge cases such as empty trees or trees with only one node. Ensure the function handles these cases correctly.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root1\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          null,\n          null,\n          null,\n          7,\n          8\n        ],\n        \"root2\": [\n          1,\n          3,\n          2,\n          null,\n          6,\n          4,\n          5,\n          null,\n          null,\n          null,\n          null,\n          8,\n          7\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"We flipped at nodes with values 1, 3, and 5, making the trees identical.\"\n    },\n    {\n      \"input\": {\n        \"root1\": [],\n        \"root2\": []\n      },\n      \"output\": true,\n      \"explanation\": \"Both trees are empty, so they are trivially flip equivalent.\"\n    },\n    {\n      \"input\": {\n        \"root1\": [],\n        \"root2\": [\n          1\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"One tree is empty and the other has a node, so they cannot be flip equivalent.\"\n    }\n  ],\n  \"constraints\": {\n    \"nodes_range\": \"[0, 100]\",\n    \"node_values_range\": \"[0, 99]\",\n    \"unique_values\": \"Each tree will have unique node values\"\n  },\n  \"follow_up\": \"Can you optimize the solution for larger trees?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Simulate asteroid collisions."}, {"role": "assistant", "content": "{\n  \"description\": \"Simulate asteroid collisions in a row based on their size and direction, returning the final state after all collisions are resolved.\",\n  \"objective\": \"Use a stack-based approach to handle asteroid collisions efficiently while processing the array of asteroids sequentially.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Initialize an empty stack to store asteroids that remain after resolving collisions.\",\n    \"Step 2\": \"Iterate through each asteroid in the input array `asteroids`.\",\n    \"Step 3\": \"If the current asteroid moves left (negative) and the stack's top asteroid moves right (positive), check collision conditions.\",\n    \"Step 4\": \"If the current asteroid is larger in size, remove the top asteroid from the stack and continue checking collisions.\",\n    \"Step 5\": \"If the current asteroid is equal in size to the top asteroid, remove the top asteroid from the stack and discard the current asteroid.\",\n    \"Step 6\": \"If the current asteroid is smaller in size, discard the current asteroid without modifying the stack.\",\n    \"Step 7\": \"If the current asteroid does not collide or survives all collisions, add it to the stack.\",\n    \"Step 8\": \"After iterating through all asteroids, the stack contains the remaining asteroids in the correct order.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"asteroids\": [\n          5,\n          10,\n          -5\n        ]\n      },\n      \"output\": [\n        5,\n        10\n      ],\n      \"explanation\": [\n        \"10 and -5 collide, resulting in 10 surviving.\",\n        \"5 and 10 do not collide as they move in the same direction.\"\n      ]\n    },\n    {\n      \"input\": {\n        \"asteroids\": [\n          8,\n          -8\n        ]\n      },\n      \"output\": [],\n      \"explanation\": [\n        \"8 and -8 collide, resulting in both asteroids exploding.\"\n      ]\n    },\n    {\n      \"input\": {\n        \"asteroids\": [\n          10,\n          2,\n          -5\n        ]\n      },\n      \"output\": [\n        10\n      ],\n      \"explanation\": [\n        \"2 and -5 collide, resulting in -5 surviving.\",\n        \"-5 and 10 collide, resulting in 10 surviving.\"\n      ]\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"2 <= asteroids.length <= 10^4\",\n    \"value_range\": \"-1000 <= asteroids[i] <= 1000\",\n    \"non_zero_values\": \"All asteroids have non-zero sizes.\"\n  },\n  \"follow_up\": \"Analyze the time complexity of this stack-based solution. Discuss its efficiency compared to other possible approaches, such as brute force, for large input sizes.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum moves to make the array equal by incrementing elements."}, {"role": "assistant", "content": "{\n  \"title\": \"Min Moves to Make Array Elements Equal\",\n  \"description\": \"Given an integer array `nums` of size `n`, return the minimum number of moves required to make all array elements equal. In one move, you can increment `n-1` elements of the array by 1.\",\n  \"input\": {\n    \"nums\": {\n      \"type\": \"array\",\n      \"description\": \"Array of integers representing the elements of the array.\",\n      \"constraints\": {\n        \"length\": \"1 <= nums.length <= 10^5\",\n        \"elements\": \"-10^9 <= nums[i] <= 10^9\"\n      }\n    }\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"Minimum number of moves required to make all elements in the array equal.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"Increment all but the largest element to minimize moves: [1,2,3] => [2,3,3] => [3,4,3] => [4,4,4].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          1,\n          1\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"No moves are required since all elements are already equal.\"\n    }\n  ],\n  \"hints\": [\n    \"Focus on the relationship between incrementing `n-1` elements and decrementing one element.\",\n    \"Think about minimizing the total number of increments required to make all elements equal.\"\n  ],\n  \"constraints\": {\n    \"timeComplexity\": \"O(n)\",\n    \"spaceComplexity\": \"O(1)\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Shift the characters of a string according to the given array."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a string `s` consisting of lowercase English letters and an integer array `shifts` of the same length. The task is to apply the shift operation to the first `i + 1` letters of `s` for each `shifts[i]`. A shift operation consists of advancing each letter to the next letter in the alphabet, with 'z' wrapping around to 'a'. The goal is to return the final string after all shifts are applied to `s`.\",\n  \"objective\": \"Design an algorithm that efficiently applies the shift operation on the string `s` according to the provided `shifts` array, ensuring that each shift operation is correctly applied to the appropriate subset of the string. Aim for an efficient solution to handle large input sizes.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The input consists of a string `s` and an integer array `shifts`. For each index `i` in `shifts`, the first `i + 1` characters of `s` need to be shifted by `shifts[i]` positions. You need to ensure that the shift wraps around the alphabet correctly.\",\n    \"Step 2 - Initial Approach\": \"Start by iterating through each index of the `shifts` array and apply the shift operation on the string. The shifting operation for each character should account for the wrapping of the alphabet.\",\n    \"Step 3 - Optimization Consideration\": \"Instead of performing the shift operation multiple times for the same characters, try to apply the shifts in reverse order to accumulate the shifts in an efficient manner, reducing the number of operations.\",\n    \"Step 4 - Edge Cases\": \"Consider cases where the shift values are extremely large (up to 10^9), ensuring the solution handles these efficiently. Also, test edge cases with small strings and minimal shifts.\",\n    \"Step 5 - Output Format\": \"Return the final string after applying all shifts. Ensure the code handles large inputs and edge cases correctly.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"abc\",\n        \"shifts\": [\n          3,\n          5,\n          9\n        ]\n      },\n      \"output\": \"rpl\",\n      \"explanation\": \"We start with 'abc'. After shifting the first 1 letter by 3, we get 'dbc'. After shifting the first 2 letters by 5, we get 'igc'. After shifting the first 3 letters by 9, we get 'rpl'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"aaa\",\n        \"shifts\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": \"gfd\",\n      \"explanation\": \"We start with 'aaa'. After shifting the first 1 letter by 1, we get 'baa'. After shifting the first 2 letters by 2, we get 'cba'. After shifting the first 3 letters by 3, we get 'gfd'.\"\n    }\n  ],\n  \"constraints\": {\n    \"s_length\": \"1 <= s.length <= 10^5\",\n    \"shifts_length\": \"shifts.length == s.length\",\n    \"shifts_values\": \"0 <= shifts[i] <= 10^9\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle very large values in the `shifts` array (up to 10^9) efficiently, ensuring the time complexity is manageable even for the largest inputs?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a tree has all the same values. Return `true` if it does, otherwise `false`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of a binary tree, determine if the tree is uni-valued. A binary tree is considered uni-valued if all the nodes in the tree have the same value. Return `true` if the tree is uni-valued, otherwise return `false`.\",\n  \"objective\": \"Write a function that checks whether all the nodes in the binary tree have the same value, making sure to handle edge cases like a single-node tree or trees with different values at different levels.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The input is a binary tree, represented as an array of node values in level-order. A binary tree is uni-valued if every node has the same value. The task is to return `true` if the tree is uni-valued and `false` otherwise.\",\n    \"Step 2 - Strategy Outline\": \"You can perform a depth-first search (DFS) or breadth-first search (BFS) to traverse the tree and check if every node has the same value as the root node. If any node differs from the root node's value, return `false`.\",\n    \"Step 3 - Edge Cases\": \"Consider edge cases such as a single-node tree or trees where the left and right subtrees have different values.\",\n    \"Step 4 - Output Format\": \"The solution should return a boolean value, `true` or `false`, based on whether the tree is uni-valued.\",\n    \"Step 5 - Code Efficiency\": \"The tree contains at most 100 nodes, so an O(n) time complexity is acceptable. Ensure that the traversal checks each node value efficiently.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution works within the constraints, particularly the number of nodes and the value range for each node.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          1,\n          1,\n          1,\n          1,\n          null,\n          1\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"All the nodes in this tree have the same value (1), so the tree is uni-valued.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          2,\n          2,\n          2,\n          5,\n          2\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The value 5 in the left subtree makes this tree not uni-valued, so the output is `false`.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count_range\": \"1 <= Number of nodes <= 100\",\n    \"node_value_range\": \"0 <= Node.val < 100\"\n  },\n  \"follow_up\": \"Can you optimize the solution for trees with large numbers of nodes or trees with deep branches? Consider using an iterative solution to avoid recursion depth issues.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given an array `nums`, find the best rotation index that gives the highest score."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `nums`, you can rotate it by a non-negative integer `k` so that the array becomes `[nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]`. After each rotation, we assign one point for every entry `nums[i]` that is less than or equal to its index `i`. Your task is to return the rotation index `k` that maximizes the score, and if there are multiple such `k`, return the smallest index.\",\n  \"objective\": \"Find the rotation index `k` that maximizes the score after rotating the array `nums` by `k`. The score is calculated by checking how many elements in the rotated array satisfy the condition `nums[i] <= i`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand the Rotation Mechanism\": \"The array is rotated such that the elements are shifted cyclically. The challenge is to evaluate the score for each rotation index `k` and find the best one.\",\n    \"Step 2 - Score Calculation\": \"For each rotation `k`, evaluate the rotated array. For each index `i` in the rotated array, check if `nums[i] <= i`. Count how many such conditions hold true, which gives the score for that rotation.\",\n    \"Step 3 - Brute Force Evaluation\": \"You could loop over all possible rotation indices `k` from 0 to `n-1`, compute the rotated array for each index, and calculate the score. Then, return the index with the maximum score.\",\n    \"Step 4 - Optimize the Solution\": \"Instead of recalculating the entire rotation for each index, try to leverage the previous rotation result to optimize the process. For example, you can adjust the score incrementally as you move from one rotation to the next.\",\n    \"Step 5 - Edge Case Consideration\": \"Consider cases where the rotation does not change the order of the elements significantly or where the score remains constant for all rotations, as in the second example.\",\n    \"Final Check - Constraints Handling\": \"Ensure the solution is efficient enough to handle large arrays, as `nums.length` can be as large as 100,000.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          3,\n          1,\n          4,\n          0\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The scores for each rotation `k` are as follows: k = 0, score = 2; k = 1, score = 3; k = 2, score = 3; k = 3, score = 4; k = 4, score = 3. The maximum score is 4, at index k = 3.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          3,\n          0,\n          2,\n          4\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"The score for all rotations is 3, so the smallest `k` is chosen, which is 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 105\",\n    \"nums_values_range\": \"0 <= nums[i] < nums.length\"\n  },\n  \"follow_up\": \"Can you optimize the solution to compute the score for each rotation more efficiently, avoiding full recalculation of the rotated array?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count how many smaller numbers are to the right for each number in an array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums`, design a function to return an array `counts` where `counts[i]` is the number of smaller elements to the right of `nums[i]` in the array. The goal is to implement this efficiently, considering the constraints of up to 105 elements in `nums`.\",\n  \"objective\": \"Develop an algorithm that computes the counts efficiently, aiming for a solution better than O(n\\u00b2), such as O(n log n) using a Binary Indexed Tree, Segment Tree, or a modified merge sort approach.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that for each element in `nums`, we need to count elements that are smaller and appear to its right. The naive O(n\\u00b2) approach of comparing every pair is too slow for large inputs.\",\n    \"Step 2 - Data Structure Selection\": \"Choose data structures like Binary Indexed Tree (BIT), Segment Tree, or use a divide-and-conquer approach with a modified merge sort to efficiently compute the counts.\",\n    \"Step 3 - Efficient Computation\": \"Leverage sorted data structures to maintain and query counts of smaller elements dynamically as you traverse the array.\",\n    \"Step 4 - Edge Cases\": \"Handle edge cases such as single-element arrays, arrays with all identical elements, and arrays with very large or very small values.\",\n    \"Step 5 - Output Format\": \"Return the counts array where each `counts[i]` corresponds to the count of smaller elements to the right of `nums[i]`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          5,\n          2,\n          6,\n          1\n        ]\n      },\n      \"output\": [\n        2,\n        1,\n        1,\n        0\n      ],\n      \"explanation\": \"For 5, smaller elements to the right are [2, 1] -> count is 2. For 2, [1] -> count is 1. For 6, [1] -> count is 1. For 1, there are no smaller elements to the right -> count is 0.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          -1\n        ]\n      },\n      \"output\": [\n        0\n      ],\n      \"explanation\": \"There are no elements to the right of -1.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          -1,\n          -1\n        ]\n      },\n      \"output\": [\n        0,\n        0\n      ],\n      \"explanation\": \"No elements to the right of either -1 are smaller.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"1 <= nums.length <= 105\",\n    \"element_range\": \"-104 <= nums[i] <= 104\"\n  },\n  \"follow_up\": \"Can you solve the problem using a modified merge sort or a Fenwick Tree to achieve O(n log n) complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Build a binary tree from preorder and inorder arrays."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two integer arrays `preorder` and `inorder`, construct and return the binary tree they represent. The `preorder` array gives the root-first traversal of the tree, and the `inorder` array gives the left-root-right traversal.\",\n  \"objective\": \"Design an efficient algorithm to construct a binary tree from its preorder and inorder traversal arrays.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the properties of preorder and inorder traversals and how they can be used to identify the root and subtrees.\",\n    \"Step 2 - Recursive Construction\": \"Recursively identify the root node (from preorder), and split the inorder array into left and right subtrees.\",\n    \"Step 3 - Index Mapping\": \"Optimize the split operation by using a hashmap to store the indices of elements in the inorder array.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider cases such as a single-node tree or highly unbalanced trees.\",\n    \"Step 5 - Optimize\": \"Ensure the solution runs in O(n) time and uses O(n) space for the recursion stack and index map.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"preorder\": [\n          3,\n          9,\n          20,\n          15,\n          7\n        ],\n        \"inorder\": [\n          9,\n          3,\n          15,\n          20,\n          7\n        ]\n      },\n      \"output\": {\n        \"root\": [\n          3,\n          9,\n          20,\n          null,\n          null,\n          15,\n          7\n        ]\n      },\n      \"explanation\": \"The constructed tree has root 3, left subtree [9], and right subtree [20, 15, 7].\"\n    },\n    {\n      \"input\": {\n        \"preorder\": [\n          -1\n        ],\n        \"inorder\": [\n          -1\n        ]\n      },\n      \"output\": {\n        \"root\": [\n          -1\n        ]\n      },\n      \"explanation\": \"A single-node tree is constructed with root -1.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= preorder.length <= 3000\",\n    \"node_values\": \"-3000 <= preorder[i], inorder[i] <= 3000\",\n    \"properties\": \"All values in the arrays are unique, and the preorder and inorder arrays represent the same tree.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Convert the sentence to Goat Latin by following the rules: append 'ma ' to words starting with vowels and rearrange words starting with consonants. Add increasing 'a's based on word index."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a string `sentence` consisting of words separated by spaces. Each word consists of lowercase and uppercase letters. The task is to convert the sentence to 'Goat Latin,' a made-up language with specific rules. If a word begins with a vowel ('a', 'e', 'i', 'o', or 'u'), append 'ma ' to the end of the word. If a word starts with a consonant, move the first letter to the end and append 'ma '. Additionally, for each word, add an increasing number of 'a's to the end based on its position in the sentence, starting from 1.\",\n  \"objective\": \"Write a function that converts a given sentence into Goat Latin by following the described rules, and returns the final sentence in Goat Latin format.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Understand that the sentence is a collection of words, and each word needs to be transformed according to whether it starts with a vowel or consonant.\",\n    \"Step 2 - Word Transformation\": \"For each word in the sentence, if it starts with a vowel, simply append 'ma ' to it. If it starts with a consonant, move the first letter to the end and append 'ma '.\",\n    \"Step 3 - Adding 'a' for Position\": \"For each word, add a number of 'a's to the end based on its index in the sentence (starting from 1 for the first word). This step needs to be done after the main transformation of the word.\",\n    \"Step 4 - Output Format\": \"Ensure the final sentence is returned as a string, with each word transformed and correctly spaced between words.\",\n    \"Step 5 - Code Efficiency\": \"Ensure that the solution efficiently handles the sentence transformation in linear time, as the sentence length can go up to 150 characters.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"sentence\": \"I speak Goat Latin\"\n      },\n      \"output\": \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\",\n      \"explanation\": \"After applying the rules, the sentence becomes 'Imaa peaksmaaa oatGmaaaa atinLmaaaaa'.\"\n    },\n    {\n      \"input\": {\n        \"sentence\": \"The quick brown fox jumped over the lazy dog\"\n      },\n      \"output\": \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\",\n      \"explanation\": \"The words in the sentence are transformed into Goat Latin based on their initial letters and positions, with 'ma ' added and 'a's appended accordingly.\"\n    }\n  ],\n  \"constraints\": {\n    \"sentence_length\": \"1 <= sentence.length <= 150\",\n    \"sentence_content\": \"The sentence consists of English letters and spaces, with no leading or trailing spaces, and words separated by a single space.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle larger inputs efficiently, while maintaining readability and clarity of the code?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the largest number with increasing digits less than or equal to `n`."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the largest integer less than or equal to `n` with monotone increasing digits.\",\n  \"objective\": \"Implement an algorithm to identify violations of monotone increasing property in digits of `n`, correct those violations by modifying digits, and return the largest valid number.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Convert the integer `n` to a list of its digits for easier manipulation.\",\n    \"Step 2\": \"Traverse the list from left to right to identify the first pair of digits where a violation occurs (i.e., `digits[i-1] > digits[i]`).\",\n    \"Step 3\": \"Backtrack to the first occurrence of the violating digit, reduce it by 1, and set all subsequent digits to 9 to ensure monotone increasing digits.\",\n    \"Step 4\": \"If no violations are found, return the original number. Otherwise, recombine the modified digit list into an integer and return it.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 10\n      },\n      \"output\": 9,\n      \"explanation\": \"The number 10 has a violation at digits '1' > '0'. Decreasing '1' and setting subsequent digits to 9 gives 9.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1234\n      },\n      \"output\": 1234,\n      \"explanation\": \"The number 1234 already has monotone increasing digits, so no changes are needed.\"\n    },\n    {\n      \"input\": {\n        \"n\": 332\n      },\n      \"output\": 299,\n      \"explanation\": \"The number 332 has a violation at '3' > '2'. Decreasing the first '3' to '2' and setting subsequent digits to 9 gives 299.\"\n    }\n  ],\n  \"constraints\": {\n    \"range\": \"0 <= n <= 10^9\",\n    \"validity\": \"Input is always a valid integer.\"\n  },\n  \"follow_up\": \"Analyze the time complexity of this approach, discuss its efficiency, and explore potential optimizations for handling edge cases or larger values of `n`.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Convert a Roman numeral to an integer."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a valid Roman numeral string `s`, convert it into its corresponding integer value. The string `s` is composed of the Roman numeral symbols (`I`, `V`, `X`, `L`, `C`, `D`, `M`) and represents a number in the range `[1, 3999]`. Handle cases where subtraction rules apply (e.g., `IV = 4`, `IX = 9`).\",\n  \"objective\": \"Design an efficient algorithm to process the Roman numeral string from left to right and convert it to its integer representation while adhering to the subtraction rules.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the Roman numeral system, where symbols are typically added together from left to right, except when a smaller symbol appears before a larger one (subtraction cases).\",\n    \"Step 2 - Initial Approach\": \"Iterate through the string, checking each symbol and its adjacent symbol. If a subtraction rule applies, subtract the smaller symbol's value from the larger and add the result to the total.\",\n    \"Step 3 - Edge Cases\": \"Handle edge cases such as the smallest Roman numeral (`I = 1`), the largest (`MMMCMXCIX = 3999`), and strings with consecutive subtraction rules.\",\n    \"Step 4 - Final Output\": \"Return the integer value corresponding to the Roman numeral string.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"III\"\n      },\n      \"output\": 3,\n      \"explanation\": \"`III = 3` because each `I` adds 1.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"LVIII\"\n      },\n      \"output\": 58,\n      \"explanation\": \"`LVIII = 58` because `L = 50`, `V = 5`, and `III = 3`.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"MCMXCIV\"\n      },\n      \"output\": 1994,\n      \"explanation\": \"`M = 1000`, `CM = 900`, `XC = 90`, and `IV = 4`.\"\n    }\n  ],\n  \"constraints\": {\n    \"s_length\": \"1 <= s.length <= 15\",\n    \"s_content\": \"The string `s` contains only valid Roman numeral characters (`I`, `V`, `X`, `L`, `C`, `D`, `M`).\",\n    \"validity\": \"The string is guaranteed to be a valid Roman numeral in the range `[1, 3999]`.\"\n  },\n  \"follow_up\": \"Can you optimize the solution further by reducing redundant checks or using a hashmap for symbol-value lookups?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count the number of solutions to the n-queens puzzle."}, {"role": "assistant", "content": "{\n  \"description\": \"The **n-queens** puzzle requires placing `n` queens on an `n x n` chessboard such that no two queens attack each other. Given an integer `n`, return the number of distinct solutions to the n-queens puzzle.\",\n  \"objective\": \"Design an efficient backtracking algorithm to count all valid solutions to the n-queens problem.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that queens attack vertically, horizontally, and diagonally. The task is to count the total number of valid arrangements where no two queens threaten each other.\",\n    \"Step 2 - Backtracking Approach\": \"Use backtracking to explore all possible placements row by row. Maintain sets or arrays to track columns and diagonals under attack.\",\n    \"Step 3 - Pruning\": \"Optimize the solution by pruning invalid placements early. Skip columns and diagonals already under attack to reduce unnecessary recursion.\",\n    \"Step 4 - Handle Constraints\": \"Ensure the algorithm is efficient for constraints such as `1 <= n <= 9`. Use memory-efficient tracking methods for larger board sizes.\",\n    \"Step 5 - Edge Cases\": \"Handle edge cases like `n = 1` (one solution) and `n = 2` or `n = 3` (no solutions).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 4\n      },\n      \"output\": 2,\n      \"explanation\": \"There are two distinct solutions to the 4-queens puzzle.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1\n      },\n      \"output\": 1,\n      \"explanation\": \"A single queen can be placed on a 1x1 board with no conflicts.\"\n    }\n  ],\n  \"constraints\": {\n    \"board_size\": \"1 <= n <= 9\",\n    \"output\": \"Return the total number of valid solutions as an integer.\"\n  },\n  \"follow_up\": \"Can you optimize the solution for larger board sizes using bitwise operations or parallel processing?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the index of a target value in a sorted array."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the index of a target value in a sorted array of unique elements with unknown size using the `ArrayReader` interface.\",\n  \"objective\": \"Implement a binary search algorithm with an expanding boundary technique to achieve O(log n) runtime complexity.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Define the initial boundaries for the search with `left = 0` and `right = 1`.\",\n    \"Step 2\": \"Expand the boundary by doubling `right` until `ArrayReader.get(right)` is greater than or equal to `target`.\",\n    \"Step 3\": \"Perform a binary search within the defined boundaries:\",\n    \"Step 4\": \"Calculate the middle index using `pivot = left + ((right - left) >> 1)`.\",\n    \"Step 5\": \"Use `ArrayReader.get(pivot)` to retrieve the value at the pivot index.\",\n    \"Step 6\": \"Compare the retrieved value with the target:\",\n    \"Step 7\": \"If the value equals the target, return the pivot index.\",\n    \"Step 8\": \"If the value is greater than the target, update `right = pivot - 1`.\",\n    \"Step 9\": \"If the value is less than the target, update `left = pivot + 1`.\",\n    \"Step 10\": \"If the target is not found within the boundaries, return `-1`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"secret\": [\n          -1,\n          0,\n          3,\n          5,\n          9,\n          12\n        ],\n        \"target\": 9\n      },\n      \"output\": 4,\n      \"explanation\": \"The target value 9 is found at index 4 in the array.\"\n    },\n    {\n      \"input\": {\n        \"secret\": [\n          -1,\n          0,\n          3,\n          5,\n          9,\n          12\n        ],\n        \"target\": 2\n      },\n      \"output\": -1,\n      \"explanation\": \"The target value 2 does not exist in the array.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= secret.length <= 10^4\",\n    \"value_range\": \"-10^4 <= secret[i], target <= 10^4\",\n    \"properties\": \"The array `secret` is sorted in strictly increasing order.\"\n  },\n  \"follow_up\": \"Discuss the efficiency of this approach in scenarios where the array size is significantly large or when the target lies at the boundaries of the array.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the longest sequence of consecutive numbers in an unsorted array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an unsorted array of integers `nums`, return the length of the longest consecutive elements sequence. Your algorithm must run in O(n) time.\",\n  \"objective\": \"Design an efficient algorithm to find the length of the longest consecutive sequence in an unsorted array.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves identifying sequences of consecutive integers and finding the longest one.\",\n    \"Step 2 - Use a Hash Set\": \"Store all elements in a hash set for O(1) lookups. For each number, check if it is the start of a sequence by verifying that `num - 1` is not in the set.\",\n    \"Step 3 - Traverse Sequence\": \"If it is the start of a sequence, count consecutive numbers and track the maximum length.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as an empty array or arrays with no consecutive sequences.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(n) time and uses O(n) space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          100,\n          4,\n          200,\n          1,\n          3,\n          2\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"The longest consecutive elements sequence is [1, 2, 3, 4], with a length of 4.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          3,\n          7,\n          2,\n          5,\n          8,\n          4,\n          6,\n          0,\n          1\n        ]\n      },\n      \"output\": 9,\n      \"explanation\": \"The longest consecutive elements sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8], with a length of 9.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"0 <= nums.length <= 10^5\",\n    \"element_range\": \"-10^9 <= nums[i] <= 10^9\"\n  },\n  \"follow_up\": \"Can you extend this approach to work for floating-point numbers or custom ranges?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a linked list has a cycle."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `head` of a linked list, determine if the list contains a cycle. A cycle exists if there is a node in the list that can be revisited by continuously following the `next` pointer.\",\n  \"objective\": \"Design an algorithm to detect whether a linked list has a cycle.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves detecting a cycle in a linked list using the given `head` pointer.\",\n    \"Step 2 - Two Pointer Technique\": \"Use a slow pointer that moves one step and a fast pointer that moves two steps. If the two pointers meet, a cycle exists.\",\n    \"Step 3 - Handle Edge Cases\": \"Handle cases such as an empty list, a single node with no cycle, or a very long list.\",\n    \"Step 4 - Optimize\": \"Ensure the solution runs in O(n) time and uses O(1) space.\",\n    \"Step 5 - Proof of Correctness\": \"Explain why the two-pointer technique guarantees detection of a cycle.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          3,\n          2,\n          0,\n          -4\n        ],\n        \"pos\": 1\n      },\n      \"output\": true,\n      \"explanation\": \"The tail connects to the 1st node (0-indexed), forming a cycle.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2\n        ],\n        \"pos\": 0\n      },\n      \"output\": true,\n      \"explanation\": \"The tail connects to the 0th node, forming a cycle.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          1\n        ],\n        \"pos\": -1\n      },\n      \"output\": false,\n      \"explanation\": \"There is no cycle in the list.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 10^4\",\n    \"node_values\": \"-10^5 <= Node.val <= 10^5\"\n  },\n  \"follow_up\": \"Can you implement the solution using constant memory?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum profit from a stock price list with at most k transactions."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `prices` where `prices[i]` is the price of a stock on day `i`, and an integer `k`, determine the maximum profit that can be achieved by completing at most `k` transactions.\",\n  \"objective\": \"Design an algorithm to find the maximum profit, considering at most `k` buy-sell transactions.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that each transaction consists of one buy and one sell, and multiple transactions cannot overlap.\",\n    \"Step 2 - Dynamic Programming Approach\": \"Use dynamic programming to maintain a state table where `dp[t][d]` represents the maximum profit on day `d` with at most `t` transactions.\",\n    \"Step 3 - Transition Formula\": \"For each transaction count `t`, calculate the maximum profit by considering whether to sell or not on day `d`. Transition is `dp[t][d] = max(dp[t][d-1], prices[d] + max(dp[t-1][p] - prices[p] for all p < d))`.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases where `k >= prices.length // 2` (unlimited transactions), single-day prices, or empty price arrays.\",\n    \"Step 5 - Optimize Space\": \"Optimize space usage by keeping only the current and previous transaction states.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"k\": 2,\n        \"prices\": [\n          2,\n          4,\n          1\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"Buy on day 1 at 2 and sell on day 2 at 4. Maximum profit is 2.\"\n    },\n    {\n      \"input\": {\n        \"k\": 2,\n        \"prices\": [\n          3,\n          2,\n          6,\n          5,\n          0,\n          3\n        ]\n      },\n      \"output\": 7,\n      \"explanation\": \"Buy on day 2 at 2 and sell on day 3 at 6 (profit 4). Then buy on day 5 at 0 and sell on day 6 at 3 (profit 3).\"\n    }\n  ],\n  \"constraints\": {\n    \"transactions_range\": \"1 <= k <= 100\",\n    \"prices_length\": \"1 <= prices.length <= 1000\",\n    \"price_range\": \"0 <= prices[i] <= 1000\"\n  },\n  \"follow_up\": \"Can you reduce the time complexity of the solution for large values of `k` and optimize space usage?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the single element in a sorted array where every other element appears twice, using O(log n) time and O(1) space."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a sorted array where every element appears exactly twice except for one element which appears exactly once, find and return the single element that appears only once. The solution must have a time complexity of O(log n) and a space complexity of O(1).\",\n  \"objective\": \"Implement an efficient algorithm using binary search on even indices to identify the single non-duplicate element without using extra space.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Recognize that the array is sorted and each element appears twice except for one unique element. This pattern allows us to use binary search by comparing pairs of elements at calculated indices.\",\n    \"Step 2 - Initialize Binary Search Bounds\": \"Set `lo` to 0 and `hi` to the last index of the array. The search space includes only even indices because pairs start at even indices in a sorted array.\",\n    \"Step 3 - Adjust Mid to Even Index\": \"Calculate `mid` as `(lo + hi) // 2`. If `mid` is odd, decrement it by 1 to ensure it is even, aligning with the pairing pattern.\",\n    \"Step 4 - Pair Comparison\": \"Compare `nums[mid]` with `nums[mid + 1]`. If they are equal, the single element is in the right half, so set `lo` to `mid + 2`. If not, the single element is in the left half or at `mid`, so set `hi` to `mid`.\",\n    \"Step 5 - Loop Termination\": \"Continue the binary search loop until `lo >= hi`. At this point, `lo` will point to the single non-duplicate element. Return `nums[lo]`.\",\n    \"Final Check - Constraints Verification\": \"Ensure the algorithm runs in O(log n) time and O(1) space, adhering to constraints of `1 <= nums.length <= 10^5` and `0 <= nums[i] <= 10^5`. Confirm it handles edge cases, such as arrays of minimal length and large values.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          1,\n          2,\n          3,\n          3,\n          4,\n          4,\n          8,\n          8\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The single element is 2, found efficiently using binary search on even indices.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          3,\n          7,\n          7,\n          10,\n          11,\n          11\n        ]\n      },\n      \"output\": 10,\n      \"explanation\": \"The single element is 10, identified without extra space by leveraging the sorted array properties.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10^5\",\n    \"element_value_range\": \"0 <= nums[i] <= 10^5\",\n    \"time_complexity\": \"Solution must run in O(log n) time\",\n    \"space_complexity\": \"Solution must use O(1) space\"\n  },\n  \"follow_up\": \"Could you adapt this algorithm to work if the array is unsorted or if elements can appear more than twice?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Decode a string with numbers and stars to count valid ways to make letters."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an encoded string containing digits and '*', determine the number of ways to decode it into valid letters as per the mapping A-Z. Return the result modulo 10^9 + 7.\",\n  \"objective\": \"Efficiently calculate the total number of valid decodings of the string using dynamic programming and handle wildcard cases introduced by '*'.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Base Cases\": \"Create an array `dp` of size `n+1` where `dp[i]` represents the number of ways to decode the substring of length `i`. Set `dp[0] = 1` (empty string) and initialize `dp[1]` based on the first character.\",\n    \"Step 2 - Iterate Through Characters\": \"Iterate over the string starting from the second character. For each index `i`, calculate `dp[i]` by considering single-character and two-character decoding rules.\",\n    \"Step 3 - Handle '*'\": \"For characters that are '*', expand them to represent digits from '1' to '9' or valid combinations like 10-19 and 20-26 when paired with the previous character.\",\n    \"Step 4 - Apply Modular Arithmetic\": \"At each calculation, ensure that results are computed modulo `10^9 + 7` to handle large values.\",\n    \"Step 5 - Return Result\": \"At the end of the iteration, return `dp[n]`, which contains the total number of valid decodings.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"*\"\n      },\n      \"output\": 9,\n      \"explanation\": \"The '*' can represent any digit from '1' to '9', resulting in 9 valid decodings.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"1*\"\n      },\n      \"output\": 18,\n      \"explanation\": \"The '1*' can represent 11-19, each of which has 2 decodings, resulting in 18 valid decodings.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"2*\"\n      },\n      \"output\": 15,\n      \"explanation\": \"The '2*' can represent 21-26 (2 decodings each) and 27-29 (1 decoding each), resulting in 15 valid decodings.\"\n    }\n  ],\n  \"constraints\": {\n    \"length_range\": \"1 <= s.length <= 10^5\",\n    \"characters\": \"s[i] is a digit or '*'\"\n  },\n  \"follow_up\": \"Analyze the time and space complexity for this approach and discuss further optimizations for very large strings using sliding window techniques.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number of triples in an array where the bitwise AND of the numbers is zero."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums`, return the number of **AND triples**. An **AND triple** is defined as a set of indices `(i, j, k)` such that `0 <= i < nums.length`, `0 <= j < nums.length`, `0 <= k < nums.length`, and the bitwise-AND of `nums[i]`, `nums[j]`, and `nums[k]` equals 0 (`nums[i] & nums[j] & nums[k] == 0`).\",\n  \"objective\": \"Design an efficient algorithm to count the number of valid AND triples in the given array `nums`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the conditions for a valid AND triple: indices `i, j, k` must all be within the bounds of the array, and their bitwise-AND result must be 0.\",\n    \"Step 2 - Initial Approach\": \"Consider a brute force approach using three nested loops to iterate over all possible triples `(i, j, k)` in the array, and count those that meet the condition. However, this may not be efficient for large arrays.\",\n    \"Step 3 - Optimized Approach with Hashing\": \"To improve efficiency, use a hash map to store intermediate AND results and their counts. Iterate through pairs of elements, compute their AND result, and store the count in the hash map. Then, for each element, check if there exists a pair in the hash map that forms a valid AND triple.\",\n    \"Step 4 - Output Format\": \"Return the total count of valid AND triples as an integer. Ensure the algorithm handles edge cases where the array is small or contains only zeros.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Focus on minimizing the time complexity, ideally aiming for better than O(n^3) by reducing redundant calculations. Handle edge cases where all elements are zeros or the array is at its minimum length.\",\n    \"Final Check - Constraints Verification\": \"Verify the solution operates within the constraints: `1 <= nums.length <= 1000` and `0 <= nums[i] < 2^16`. Ensure the algorithm is robust and handles large inputs efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          1,\n          3\n        ]\n      },\n      \"output\": 12,\n      \"explanation\": \"The valid triples are (0,0,1), (0,1,0), (0,1,1), (0,1,2), (0,2,1), (1,0,0), (1,0,1), (1,0,2), (1,1,0), (1,2,0), (2,0,1), (2,1,0).\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          0,\n          0\n        ]\n      },\n      \"output\": 27,\n      \"explanation\": \"All triples (0,0,0) to (2,2,2) are valid since 0 & 0 & 0 == 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 1000\",\n    \"nums_elements_range\": \"0 <= nums[i] < 2^16\"\n  },\n  \"follow_up\": \"Can you come up with an algorithm that solves this problem more efficiently than the brute force approach, possibly using hashing or other techniques to reduce the overall time complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find a node to remove to stop malware from spreading in the graph."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an `n x n` adjacency matrix `graph` representing a network of `n` nodes. Some nodes are initially infected by malware. Malware spreads between connected nodes. If one of the connected nodes is infected, both nodes become infected. You need to remove exactly one node from the list of infected nodes such that the total number of infected nodes in the network, after the malware spreads, is minimized. If multiple nodes lead to the same result, return the one with the smallest index.\",\n  \"objective\": \"Design an efficient algorithm to determine which infected node to remove in order to minimize the spread of malware. You should aim to optimize the spread and compute the final number of infected nodes in the network after removal.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The problem involves simulating the spread of malware through a network and determining which infected node, when removed, minimizes the total number of infected nodes. The key is understanding how malware spreads from initially infected nodes and how the removal of one node can reduce this spread.\",\n    \"Step 2 - Initial Approach\": \"A brute-force solution would involve removing each node from the `initial` list one by one, simulating the spread of malware, and counting the number of infected nodes in each case. The node that results in the least number of infected nodes should be chosen.\",\n    \"Step 3 - Optimized Approach\": \"Rather than simulating the spread for each removal, we can optimize the process by tracking how the removal of each node affects the infection spread. By leveraging BFS or DFS, we can calculate the number of nodes infected if we remove a specific node from the `initial` list.\",\n    \"Step 4 - Simulation Details\": \"When simulating the malware spread, a BFS or DFS starting from the initially infected nodes will allow us to track how the infection propagates. For each node removal, we need to re-calculate the infection spread without that node.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure that the solution is efficient enough to handle up to 300 nodes, considering that the graph can be dense. Handle edge cases such as fully connected networks or disconnected subgraphs.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution works within the given constraints: `n` is between 2 and 300, and the graph is undirected with each node having a self-loop (graph[i][i] == 1).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"graph\": [\n          [\n            1,\n            1,\n            0\n          ],\n          [\n            1,\n            1,\n            0\n          ],\n          [\n            0,\n            0,\n            1\n          ]\n        ],\n        \"initial\": [\n          0,\n          1\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"Removing node 0 minimizes the number of infected nodes after malware spreads, as removing node 1 would not reduce the total infection.\"\n    },\n    {\n      \"input\": {\n        \"graph\": [\n          [\n            1,\n            0,\n            0\n          ],\n          [\n            0,\n            1,\n            0\n          ],\n          [\n            0,\n            0,\n            1\n          ]\n        ],\n        \"initial\": [\n          0,\n          2\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"Removing node 0 results in the minimal infection spread after malware spreads.\"\n    },\n    {\n      \"input\": {\n        \"graph\": [\n          [\n            1,\n            1,\n            1\n          ],\n          [\n            1,\n            1,\n            1\n          ],\n          [\n            1,\n            1,\n            1\n          ]\n        ],\n        \"initial\": [\n          1,\n          2\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"Removing node 1 minimizes the spread, as node 2 would still infect the entire network.\"\n    }\n  ],\n  \"constraints\": {\n    \"graph_size\": \"2 <= n <= 300\",\n    \"graph_values\": \"graph[i][j] == 0 or 1\",\n    \"graph_symmetric\": \"graph[i][j] == graph[j][i]\",\n    \"self_loop\": \"graph[i][i] == 1\",\n    \"initial_nodes_count\": \"1 <= initial.length <= n\",\n    \"initial_unique\": \"Initial list contains unique elements\"\n  },\n  \"follow_up\": \"Can you optimize the infection simulation further by using more advanced techniques like dynamic programming or memoization to track the spread of malware?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Design an iterator to go through a run-length encoded array."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a run-length encoded array, and your task is to design an iterator that can iterate through the sequence, exhausting elements as requested by the user. The run-length encoded array is even in length, and each even-indexed element specifies the number of times the following element (odd-indexed) is repeated in the sequence.\",\n  \"objective\": \"Design a class `RLEIterator` that efficiently handles multiple calls to `next(n)`, where each call requests the next `n` elements from the run-length encoded sequence. The iterator should return the last element exhausted after consuming `n` elements. If there are not enough elements to fulfill the request, it should return -1.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The sequence is represented using run-length encoding, where each even index indicates the frequency of the next value in the sequence. You are required to design an iterator that can exhaust the sequence efficiently by serving multiple requests for the next `n` elements.\",\n    \"Step 2 - Design Considerations\": \"You need to process multiple calls to the `next` function, and your solution should be efficient. Instead of regenerating the sequence for every call, you should keep track of your current position in the encoded array and manage the counts for each value.\",\n    \"Step 3 - Efficient Solution\": \"Consider using a pointer or index to traverse the encoding. For each `next(n)` call, move through the encoding array and update the count of remaining elements to exhaust. If the requested number of elements exceeds the remaining elements in the sequence, return -1.\",\n    \"Step 4 - Handling Edge Cases\": \"Ensure the iterator returns the correct value even when `n` exceeds the remaining elements, and efficiently handles repeated requests. Make sure to check the constraints and optimize for performance when processing a large number of calls.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"You should aim for an optimal solution with time complexity proportional to the number of calls, i.e., O(n) for each `next(n)` call, and O(1) for initializing the iterator. Ensure the solution handles large values of `n` and avoids unnecessary computation.\",\n    \"Final Check - Constraints Verification\": \"Ensure that your solution handles the constraints where encoding length is even and up to 1000 calls to `next` are made, with the encoding values being up to 10^9.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"encoded\": [\n          3,\n          8,\n          0,\n          9,\n          2,\n          5\n        ],\n        \"calls\": [\n          2,\n          1,\n          1,\n          2\n        ]\n      },\n      \"output\": [\n        null,\n        8,\n        8,\n        5,\n        -1\n      ],\n      \"explanation\": \"The encoded sequence is [8, 8, 8, 5, 5]. The first call to `next(2)` consumes two 8's, returning 8. The second call consumes one 8, returning 8. The third call consumes one 5, returning 5. The fourth call asks for 2 elements, but the last element has already been consumed, so it returns -1.\"\n    }\n  ],\n  \"constraints\": {\n    \"encoding_length_range\": \"2 <= encoding.length <= 1000\",\n    \"encoding_values_range\": \"0 <= encoding[i] <= 10^9\",\n    \"n_range\": \"1 <= n <= 10^9\",\n    \"max_calls\": \"At most 1000 calls to `next`.\"\n  },\n  \"follow_up\": \"Can you optimize the iterator for scenarios with extremely large values of `n` or frequent calls?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the first and last position of a number in a sorted array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of integers `nums` sorted in non-decreasing order, find the starting and ending position of a given `target` value. If `target` is not found in the array, return `[-1, -1]`. The solution must have `O(log n)` runtime complexity.\",\n  \"objective\": \"Design an efficient algorithm to locate the starting and ending positions of `target` in the array using binary search to achieve `O(log n)` time complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves identifying the first and last occurrence of `target` in a sorted array. If `target` is not present, return `[-1, -1]`.\",\n    \"Step 2 - Use Binary Search\": \"Perform two binary searches: one to locate the first occurrence of `target` and another to locate the last occurrence. These searches can be modified to focus on specific conditions.\",\n    \"Step 3 - Handle Edge Cases\": \"Consider cases where the array is empty, the `target` does not exist in `nums`, or all elements in `nums` are equal to `target`.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution works within constraints, such as `0 <= nums.length <= 10^5` and `O(log n)` runtime.\",\n    \"Step 5 - Debugging and Verification\": \"Test the algorithm on arrays with varying sizes, values, and edge cases to ensure correctness and efficiency.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          5,\n          7,\n          7,\n          8,\n          8,\n          10\n        ],\n        \"target\": 8\n      },\n      \"output\": [\n        3,\n        4\n      ],\n      \"explanation\": \"The `target` value 8 first appears at index 3 and last appears at index 4.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          5,\n          7,\n          7,\n          8,\n          8,\n          10\n        ],\n        \"target\": 6\n      },\n      \"output\": [\n        -1,\n        -1\n      ],\n      \"explanation\": \"The `target` value 6 is not present in the array.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [],\n        \"target\": 0\n      },\n      \"output\": [\n        -1,\n        -1\n      ],\n      \"explanation\": \"The array is empty, so the `target` cannot be found.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"0 <= nums.length <= 10^5\",\n    \"element_range\": \"-10^9 <= nums[i] <= 10^9\",\n    \"target_range\": \"-10^9 <= target <= 10^9\",\n    \"time_complexity\": \"The solution must run in O(log n) time.\"\n  },\n  \"follow_up\": \"Can you extend your solution to handle unsorted arrays or achieve constant extra space usage?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Insert a value into a circular linked list."}, {"role": "assistant", "content": "{\n  \"description\": \"Insert a value into a sorted circular linked list while maintaining its sorted property.\",\n  \"objective\": \"Write a function to insert a value into a given sorted circular linked list. Handle edge cases for empty lists and maintain the circular structure of the list.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Define the structure of a circular linked list node with attributes `val` and `next`.\",\n    \"Step 2\": \"Handle the case where the given list is empty. Create a new node, set its `next` pointer to itself, and return the new node.\",\n    \"Step 3\": \"Iterate through the circular linked list starting from the given node to find the appropriate position to insert the new value. Consider the following scenarios:\",\n    \"Step 4\": \"Insert between two nodes where `current.val <= insertVal <= current.next.val`.\",\n    \"Step 5\": \"Insert at the end of the list where `current.val > current.next.val`, and `insertVal` is either greater than `current.val` or less than `current.next.val`.\",\n    \"Step 6\": \"If no position is found in one traversal, insert the new value after the current node.\",\n    \"Step 7\": \"Update the `next` pointers of the nodes to include the new node in the circular list.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          3,\n          4,\n          1\n        ],\n        \"insertVal\": 2\n      },\n      \"output\": [\n        3,\n        4,\n        1,\n        2\n      ],\n      \"explanation\": \"The value 2 is inserted between nodes 1 and 3, maintaining the sorted circular property.\"\n    },\n    {\n      \"input\": {\n        \"head\": [],\n        \"insertVal\": 1\n      },\n      \"output\": [\n        1\n      ],\n      \"explanation\": \"The list is empty, so a new single node with value 1 is created.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          1\n        ],\n        \"insertVal\": 0\n      },\n      \"output\": [\n        1,\n        0\n      ],\n      \"explanation\": \"The value 0 is inserted after 1, forming a circular list with 1 -> 0 -> 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 5 * 10^4\",\n    \"value_range\": \"-10^6 <= Node.val, insertVal <= 10^6\"\n  },\n  \"follow_up\": \"Discuss the time complexity of this insertion operation and explain how it remains efficient given the sorted and circular nature of the list.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the position of a number in a sorted array, or where it should be inserted."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a sorted array of distinct integers `nums` and a target value `target`, return the index of `target` if it is found in the array. If not, return the index where `target` would be inserted in order. The solution must have `O(log n)` runtime complexity.\",\n  \"objective\": \"Design an efficient algorithm to determine the position of `target` in a sorted array or the position where it should be inserted, ensuring the algorithm meets the `O(log n)` complexity requirement.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The task involves finding the position of `target` in a sorted array or the index where it should be inserted to maintain sorted order.\",\n    \"Step 2 - Binary Search\": \"Use binary search to locate `target`. If `target` is not found, determine the appropriate insertion point using the mid-index during the search process.\",\n    \"Step 3 - Constraints Compliance\": \"Ensure the solution adheres to constraints such as `1 <= nums.length <= 10^4`, `nums` being sorted in ascending order, and all elements being distinct.\",\n    \"Step 4 - Edge Cases\": \"Handle edge cases such as when `target` is smaller than all elements in `nums`, larger than all elements, or fits between two elements in the array.\",\n    \"Step 5 - Optimization and Testing\": \"Test the algorithm for correctness and efficiency using arrays of varying sizes and values, ensuring proper handling of all edge cases.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          3,\n          5,\n          6\n        ],\n        \"target\": 5\n      },\n      \"output\": 2,\n      \"explanation\": \"The target `5` is found at index 2.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          3,\n          5,\n          6\n        ],\n        \"target\": 2\n      },\n      \"output\": 1,\n      \"explanation\": \"The target `2` is not found. It would be inserted at index 1 to maintain sorted order.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          3,\n          5,\n          6\n        ],\n        \"target\": 7\n      },\n      \"output\": 4,\n      \"explanation\": \"The target `7` is not found. It would be inserted at index 4, the end of the array.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10^4\",\n    \"element_range\": \"-10^4 <= nums[i] <= 10^4\",\n    \"target_range\": \"-10^4 <= target <= 10^4\",\n    \"distinct_values\": \"All values in `nums` are distinct.\",\n    \"time_complexity\": \"The solution must run in O(log n) time.\"\n  },\n  \"follow_up\": \"Can you modify your solution to work efficiently for arrays with duplicate values while maintaining `O(log n)` complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Make a set that can insert, remove, and get random items."}, {"role": "assistant", "content": "{\n  \"title\": \"Implement RandomizedSet\",\n  \"description\": \"Design a `RandomizedSet` class to manage insertions, deletions, and random access in constant time.\",\n  \"objective\": \"Efficiently implement `insert`, `remove`, and `getRandom` methods with an average time complexity of `O(1)`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Data Structures\": {\n      \"HashMap\": \"Use a hashmap to store the elements and their indices in an array.\",\n      \"Array\": \"Maintain an array to store the current elements for efficient access during `getRandom`.\"\n    },\n    \"Step 2 - Insert Operation\": {\n      \"Validation\": \"Check if the element exists in the hashmap.\",\n      \"Insertion\": \"Add the element to the array and update its index in the hashmap.\"\n    },\n    \"Step 3 - Remove Operation\": {\n      \"Validation\": \"Check if the element exists in the hashmap.\",\n      \"Efficient Deletion\": \"Swap the element to be removed with the last element in the array, update indices, and then remove it.\"\n    },\n    \"Step 4 - Random Access\": {\n      \"Uniform Randomization\": \"Generate a random index to retrieve an element from the array.\",\n      \"Validation\": \"Ensure the array has elements before calling `getRandom`.\"\n    }\n  },\n  \"input\": {\n    \"operations\": [\n      \"RandomizedSet\",\n      \"insert\",\n      \"remove\",\n      \"getRandom\"\n    ],\n    \"arguments\": [\n      [],\n      [\n        \"int val\"\n      ],\n      [\n        \"int val\"\n      ],\n      []\n    ]\n  },\n  \"output\": {\n    \"type\": \"array\",\n    \"description\": \"The output for each operation, with `null` for void operations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"operations\": [\n          \"RandomizedSet\",\n          \"insert\",\n          \"remove\",\n          \"insert\",\n          \"getRandom\",\n          \"remove\",\n          \"insert\",\n          \"getRandom\"\n        ],\n        \"arguments\": [\n          [],\n          [\n            1\n          ],\n          [\n            2\n          ],\n          [\n            2\n          ],\n          [],\n          [\n            1\n          ],\n          [\n            2\n          ],\n          []\n        ]\n      },\n      \"output\": [\n        null,\n        true,\n        false,\n        true,\n        2,\n        true,\n        false,\n        2\n      ],\n      \"explanation\": [\n        \"Initialize the set.\",\n        \"`insert(1)` inserts 1 successfully, returns `true`.\",\n        \"`remove(2)` fails as 2 is not in the set, returns `false`.\",\n        \"`insert(2)` inserts 2 successfully, returns `true`.\",\n        \"`getRandom()` returns 1 or 2 randomly.\",\n        \"`remove(1)` removes 1, returns `true`.\",\n        \"`insert(2)` fails as 2 is already in the set, returns `false`.\",\n        \"`getRandom()` returns 2 as it is the only element.\"\n      ]\n    }\n  ],\n  \"hints\": [\n    \"Use a hashmap for constant-time lookups and an array for random access.\",\n    \"When removing an element, consider swapping it with the last element for efficient deletion.\",\n    \"Ensure the array remains consistent with the hashmap during operations.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Maintain `O(1)` average complexity for all operations.\",\n    \"constraints\": \"Avoid duplicating elements or unnecessary iterations during operations.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Use a formula `f(x) = ax^2 + bx + c` to transform a sorted array and return it in sorted order."}, {"role": "assistant", "content": "{\n  \"title\": \"Apply and Sort Quadratic Transformation\",\n  \"description\": \"Given a **sorted** integer array `nums` and coefficients `a`, `b`, and `c`, apply a quadratic function `f(x) = ax^2 + bx + c` to each element in `nums` and return the resulting array in sorted order.\",\n  \"input\": {\n    \"name\": \"nums\",\n    \"type\": \"array\",\n    \"description\": \"A sorted array of integers.\",\n    \"constraints\": \"1 <= nums.length <= 200, -100 <= nums[i] <= 100\"\n  },\n  \"parameters\": [\n    {\n      \"name\": \"a\",\n      \"type\": \"integer\",\n      \"description\": \"Coefficient of x^2 in the quadratic equation.\",\n      \"constraints\": \"-100 <= a <= 100\"\n    },\n    {\n      \"name\": \"b\",\n      \"type\": \"integer\",\n      \"description\": \"Coefficient of x in the quadratic equation.\",\n      \"constraints\": \"-100 <= b <= 100\"\n    },\n    {\n      \"name\": \"c\",\n      \"type\": \"integer\",\n      \"description\": \"Constant term in the quadratic equation.\",\n      \"constraints\": \"-100 <= c <= 100\"\n    }\n  ],\n  \"output\": {\n    \"type\": \"array\",\n    \"description\": \"A sorted array resulting from applying the quadratic function to `nums`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          -4,\n          -2,\n          2,\n          4\n        ],\n        \"a\": 1,\n        \"b\": 3,\n        \"c\": 5\n      },\n      \"output\": [\n        3,\n        9,\n        15,\n        33\n      ],\n      \"explanation\": \"The function f(x) = x^2 + 3x + 5 produces values 3, 9, 15, and 33 for inputs -4, -2, 2, and 4 respectively. The result is already sorted.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          -4,\n          -2,\n          2,\n          4\n        ],\n        \"a\": -1,\n        \"b\": 3,\n        \"c\": 5\n      },\n      \"output\": [\n        -23,\n        -5,\n        1,\n        7\n      ],\n      \"explanation\": \"The function f(x) = -x^2 + 3x + 5 produces values -23, -5, 1, and 7 for inputs -4, -2, 2, and 4 respectively. The result is sorted as [-23, -5, 1, 7].\"\n    }\n  ],\n  \"hints\": [\n    \"The quadratic function `f(x)` has a parabolic shape. When `a > 0`, the parabola opens upwards, and when `a < 0`, it opens downwards.\",\n    \"Since the input array is sorted, calculate the values of `f(x)` for each element, then use a two-pointer approach to merge the results in sorted order.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(n) time complexity using a two-pointer approach.\",\n    \"constraints\": \"Avoid sorting the transformed values explicitly to maintain linear performance.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if one binary tree is a subtree of another."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two binary trees, `root` and `subRoot`, determine if `subRoot` is a subtree of `root` by comparing hash values generated from each node's subtree.\",\n  \"objective\": \"Use tree hashing to efficiently check if `subRoot` appears as a subtree within `root` by building unique hash values for each subtree, thus reducing the complexity of repeated tree comparisons.\",\n  \"meta_prompt\": {\n    \"Step 1 - Define Hashing Constants\": \"Define two large prime constants, `MOD_1` and `MOD_2`, to use in hashing calculations for minimal spurious hits.\",\n    \"Step 2 - Hash Each Node's Subtree\": \"Create a function `hashSubtreeAtNode(node, needToAdd)` which returns a unique hash pair for each subtree rooted at `node`. The `needToAdd` parameter indicates if the hash value should be stored in the memo set. If the node is null, return a default pair like `(3, 7)`.\",\n    \"Step 3 - Compute Hash Values\": \"For non-null nodes, compute a hash pair by: shifting the left child's hash values by fixed constants, shifting the right child's hash values by another set of constants, and adding these values with the current node's value. Take `MOD_1` for the first hash and `MOD_2` for the second hash to prevent overflow.\",\n    \"Step 4 - Add to Memo (if Required)\": \"If `needToAdd` is true, store each subtree's hash pair in a `memo` set for future reference. This ensures each unique subtree in `root` is stored.\",\n    \"Step 5 - Check for Subtree Match\": \"Invoke `hashSubtreeAtNode(subRoot, false)`, calculating the hash of `subRoot` without adding it to `memo`. Check if the result is in `memo`; if so, return true, as `subRoot` is a subtree of `root`.\",\n    \"Final Check - Constraints Verification\": \"Ensure all nodes from `root` are hashed in `O(N)` time, meeting constraints where `root` has up to 2000 nodes and `subRoot` has up to 1000 nodes. Verify that memory constraints are respected by limiting storage to hash values only.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          4,\n          5,\n          1,\n          2\n        ],\n        \"subRoot\": [\n          4,\n          1,\n          2\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"A subtree starting at node 4 matches the structure and values of `subRoot`.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          4,\n          5,\n          1,\n          2,\n          null,\n          null,\n          null,\n          null,\n          0\n        ],\n        \"subRoot\": [\n          4,\n          1,\n          2\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"No subtree in `root` matches the structure and values of `subRoot`.\"\n    }\n  ],\n  \"constraints\": {\n    \"root_nodes\": \"1 <= root node count <= 2000\",\n    \"subRoot_nodes\": \"1 <= subRoot node count <= 1000\",\n    \"node_value_range\": \"-10^4 <= node.val <= 10^4\"\n  },\n  \"follow_up\": \"Explore alternative hashing techniques to further reduce spurious hits and optimize for even larger tree structures. Additionally, examine using a single hash value instead of a hash pair for smaller trees or low node ranges.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Write a function to convert a BST to a string and back."}, {"role": "assistant", "content": "{\n  \"title\": \"Serialize and Deserialize a Binary Search Tree\",\n  \"description\": \"Design an algorithm to serialize and deserialize a binary search tree (BST). Serialization converts the tree into a string for storage or transmission. Deserialization reconstructs the tree from the string. Ensure the output string is compact while preserving the structure of the BST.\",\n  \"input\": {\n    \"root\": {\n      \"type\": \"TreeNode\",\n      \"description\": \"The root of the binary search tree.\",\n      \"constraints\": {\n        \"numberOfNodes\": \"[0, 10^4]\",\n        \"nodeValues\": \"[0, 10^4]\",\n        \"treeType\": \"Binary Search Tree (BST)\"\n      }\n    }\n  },\n  \"output\": {\n    \"type\": \"TreeNode\",\n    \"description\": \"The root of the reconstructed binary search tree.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          2,\n          1,\n          3\n        ]\n      },\n      \"output\": [\n        2,\n        1,\n        3\n      ],\n      \"explanation\": \"The BST is serialized and deserialized correctly, preserving its structure.\"\n    },\n    {\n      \"input\": {\n        \"root\": []\n      },\n      \"output\": [],\n      \"explanation\": \"An empty tree is serialized to an empty string and deserialized back to an empty tree.\"\n    }\n  ],\n  \"hints\": [\n    \"Since the input is a BST, consider leveraging preorder or postorder traversal for compact serialization.\",\n    \"For deserialization, use the properties of BST (values on the left subtree are smaller, and values on the right subtree are larger).\",\n    \"The use of delimiter characters between node values can be minimized to achieve compact encoding.\"\n  ],\n  \"constraints\": {\n    \"timeComplexity\": {\n      \"serialization\": \"O(n)\",\n      \"deserialization\": \"O(n)\"\n    },\n    \"spaceComplexity\": {\n      \"serialization\": \"O(n)\",\n      \"deserialization\": \"O(h) where h is the height of the tree.\"\n    }\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number of tuples from four arrays where the sum is zero."}, {"role": "assistant", "content": "{\n  \"title\": \"Four Sum II Problem\",\n  \"description\": \"Given four integer arrays `nums1`, `nums2`, `nums3`, and `nums4` all of length `n`, return the number of tuples `(i, j, k, l)` such that the sum of `nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0`.\",\n  \"input\": {\n    \"nums1\": {\n      \"type\": \"array\",\n      \"description\": \"First array of integers.\",\n      \"constraints\": {\n        \"length\": \"1 <= n <= 200\",\n        \"elements\": \"-2^28 <= nums1[i] <= 2^28\"\n      }\n    },\n    \"nums2\": {\n      \"type\": \"array\",\n      \"description\": \"Second array of integers.\",\n      \"constraints\": {\n        \"length\": \"1 <= n <= 200\",\n        \"elements\": \"-2^28 <= nums2[i] <= 2^28\"\n      }\n    },\n    \"nums3\": {\n      \"type\": \"array\",\n      \"description\": \"Third array of integers.\",\n      \"constraints\": {\n        \"length\": \"1 <= n <= 200\",\n        \"elements\": \"-2^28 <= nums3[i] <= 2^28\"\n      }\n    },\n    \"nums4\": {\n      \"type\": \"array\",\n      \"description\": \"Fourth array of integers.\",\n      \"constraints\": {\n        \"length\": \"1 <= n <= 200\",\n        \"elements\": \"-2^28 <= nums4[i] <= 2^28\"\n      }\n    }\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The number of tuples `(i, j, k, l)` such that `nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums1\": [\n          1,\n          2\n        ],\n        \"nums2\": [\n          -2,\n          -1\n        ],\n        \"nums3\": [\n          -1,\n          2\n        ],\n        \"nums4\": [\n          0,\n          2\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"There are 2 tuples: (0, 0, 0, 1) and (1, 1, 0, 0).\"\n    },\n    {\n      \"input\": {\n        \"nums1\": [\n          0\n        ],\n        \"nums2\": [\n          0\n        ],\n        \"nums3\": [\n          0\n        ],\n        \"nums4\": [\n          0\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"There is 1 tuple: (0, 0, 0, 0).\"\n    }\n  ],\n  \"hints\": [\n    \"Consider splitting the problem into two groups: nums1 + nums2 and nums3 + nums4.\",\n    \"Use a hash map to store possible sums from nums1 and nums2 and count how many times each sum occurs.\",\n    \"Iterate through nums3 and nums4 to find complements to these sums in the hash map.\"\n  ],\n  \"constraints\": {\n    \"timeComplexity\": \"O(n^2)\",\n    \"spaceComplexity\": \"O(n^2)\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given an array of integers, find the number of possible binary trees you can make using these numbers where each non-leaf node is the product of its children."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an array of unique integers `arr`, where each integer `arr[i]` is strictly greater than 1. You need to construct binary trees using these integers, where each number can be used any number of times. For non-leaf nodes, their value should be equal to the product of their children's values. Your task is to determine the number of binary trees that can be constructed. Since the number can be very large, return the result modulo 10^9 + 7.\",\n  \"objective\": \"Design an efficient algorithm to count the number of possible binary trees that can be constructed using the given integers, ensuring that the result is computed modulo 10^9 + 7.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Understand that each non-leaf node is the product of its children, and each number in `arr` can be used multiple times. The challenge is to compute the number of distinct binary trees based on these rules.\",\n    \"Step 2 - Initial Approach\": \"Consider using dynamic programming (DP) to count the possible trees for each number, based on whether it can be constructed by multiplying two smaller trees.\",\n    \"Step 3 - Dynamic Programming Solution\": \"Define a DP array where `dp[x]` represents the number of ways to construct a tree with `x` as the root. For each `x`, check if `x` can be formed by the product of two smaller integers from `arr`.\",\n    \"Step 4 - Modulo Operation\": \"Since the result can be large, remember to take each result modulo 10^9 + 7 during your computations.\",\n    \"Step 5 - Code Efficiency and Constraints\": \"Ensure that the solution works within the given constraints, where `arr` has up to 1000 elements and each element is between 2 and 10^9. Consider optimizing the solution to handle these limits efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"arr\": [\n          2,\n          4\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The possible binary trees are: [2], [4], and [4, 2, 2].\"\n    },\n    {\n      \"input\": {\n        \"arr\": [\n          2,\n          4,\n          5,\n          10\n        ]\n      },\n      \"output\": 7,\n      \"explanation\": \"The possible binary trees are: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], and [10, 5, 2].\"\n    }\n  ],\n  \"constraints\": {\n    \"arr_length\": \"1 <= arr.length <= 1000\",\n    \"arr_elements_range\": \"2 <= arr[i] <= 10^9\",\n    \"unique_elements\": \"All elements in `arr` are unique.\"\n  },\n  \"follow_up\": \"Can you come up with a more optimized approach to handle large arrays, possibly using memoization or a more efficient DP technique?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum cuts needed to partition a string into palindromes."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s`, partition `s` such that every substring of the partition is a palindrome. Return the minimum number of cuts needed for a palindrome partitioning.\",\n  \"objective\": \"Design an efficient algorithm to compute the minimum cuts required for a palindrome partitioning.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves minimizing cuts while ensuring each substring in the partition is a palindrome.\",\n    \"Step 2 - Dynamic Programming\": \"Use a DP array to track the minimum cuts required for substrings of various lengths.\",\n    \"Step 3 - Precompute Palindromicity\": \"Precompute whether substrings are palindromes using a DP table.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as single-character strings (no cuts required) and strings with all identical characters (no cuts required).\",\n    \"Step 5 - Optimize\": \"Ensure the solution runs in O(n^2) time with O(n^2) space for precomputing palindromicity.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"aab\"\n      },\n      \"output\": 1,\n      \"explanation\": \"The partition ['aa', 'b'] requires one cut.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"a\"\n      },\n      \"output\": 0,\n      \"explanation\": \"A single-character string requires no cuts.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"ab\"\n      },\n      \"output\": 1,\n      \"explanation\": \"The partition ['a', 'b'] requires one cut.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 2000\",\n    \"characters\": \"s consists only of lowercase English letters.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to use O(n) space while maintaining O(n^2) time complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given a tree and need to place cameras on the nodes to monitor all of them."}, {"role": "assistant", "content": "{\n  \"description\": \"We are given the root of a binary tree and need to install cameras on the tree nodes such that each camera can monitor its parent, itself, and its immediate children. The goal is to return the minimum number of cameras needed to monitor all nodes of the tree.\",\n  \"objective\": \"Determine the minimum number of cameras required to ensure all nodes in the binary tree are covered. The camera installed at a node monitors itself, its parent, and its immediate children.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We are tasked with placing cameras on nodes of a binary tree such that all nodes are covered. A camera at a node can monitor its parent, the node itself, and its children. We need to minimize the number of cameras while ensuring full coverage.\",\n    \"Step 2 - Solution Approach\": \"We can use a greedy approach by performing a depth-first search (DFS) on the binary tree. The idea is to start from the leaves and move up to the root, deciding where to place cameras based on the coverage of each node and its subtrees.\",\n    \"Step 3 - Tree Traversal and Coverage\": \"Each node can be in one of three states: covered by a camera (either directly or indirectly), requiring a camera, or already covered by its children's cameras. We will decide the camera placement based on these states during the DFS traversal.\",\n    \"Step 4 - Edge Cases\": \"We should handle edge cases such as small trees with only one node or trees where certain subtrees require multiple cameras for complete coverage.\",\n    \"Step 5 - Code Efficiency\": \"Ensure that the algorithm runs efficiently within the given constraints, particularly for trees with up to 1000 nodes.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          0,\n          0,\n          null,\n          0,\n          0\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"One camera is placed at the second level of the tree, covering all nodes.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          0,\n          0,\n          null,\n          0,\n          null,\n          0,\n          null,\n          null,\n          0\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"At least two cameras are needed to monitor all nodes. The valid configuration places cameras at two nodes, ensuring full coverage.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_range\": \"The number of nodes in the tree is between 1 and 1000.\",\n    \"node_value\": \"Node values are all 0.\"\n  },\n  \"follow_up\": \"Can you optimize the approach further, especially for larger trees?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find a number in a rotated sorted array."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an integer array `nums` sorted in ascending order with **distinct** values. This array is **possibly rotated** at an unknown pivot. Given the array `nums` and an integer `target`, return the index of `target` if it exists in `nums`, or `-1` if it does not. The solution must have a time complexity of `O(log n)`.\",\n  \"objective\": \"Design an efficient algorithm to search for `target` in the rotated sorted array, leveraging binary search to achieve the required `O(log n)` time complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the array is sorted but may be rotated. This rotation creates two sorted subarrays. The task is to efficiently locate the target using binary search.\",\n    \"Step 2 - Binary Search with Pivot Consideration\": \"Modify binary search to account for the rotation. Identify which half of the array (left or right) is sorted during each iteration, and decide whether to search in the sorted or unsorted half based on the target value.\",\n    \"Step 3 - Handle Edge Cases\": \"Consider cases where the array is not rotated, contains only one element, or the target is outside the range of elements in `nums`.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution works within the constraints, such as `1 <= nums.length <= 5000` and `O(log n)` time complexity.\",\n    \"Step 5 - Debugging and Verification\": \"Test the algorithm with edge cases, such as when `nums` is already sorted without rotation, or when `target` is at the pivot.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          4,\n          5,\n          6,\n          7,\n          0,\n          1,\n          2\n        ],\n        \"target\": 0\n      },\n      \"output\": 4,\n      \"explanation\": \"The target `0` is located at index 4.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          4,\n          5,\n          6,\n          7,\n          0,\n          1,\n          2\n        ],\n        \"target\": 3\n      },\n      \"output\": -1,\n      \"explanation\": \"The target `3` is not present in the array.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1\n        ],\n        \"target\": 0\n      },\n      \"output\": -1,\n      \"explanation\": \"The array contains only one element, which is not equal to the target.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 5000\",\n    \"element_range\": \"-10^4 <= nums[i] <= 10^4\",\n    \"distinct_values\": \"All values in `nums` are distinct.\",\n    \"time_complexity\": \"The solution must run in O(log n) time.\"\n  },\n  \"follow_up\": \"Can you optimize your implementation to minimize unnecessary comparisons while maintaining O(log n) complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a string can be transformed into another string by swapping two letters."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two strings `s` and `goal`, check if you can swap two letters in `s` to make it equal to `goal`. The swap operation consists of selecting two distinct indices and swapping the characters at those indices. Return `true` if it's possible to make the swap and obtain `goal`, otherwise return `false`.\",\n  \"objective\": \"Design an efficient algorithm to determine if two strings `s` and `goal` can be made equal by swapping exactly two letters in `s`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We are given two strings, `s` and `goal`, and we are to determine if a swap of two distinct characters in `s` can transform it into `goal`. The solution requires careful comparison and conditions on the string lengths and characters.\",\n    \"Step 2 - Initial Approach\": \"The first step is to check if both strings are of the same length. If not, the answer is immediately `false`. Then, we need to find the positions where the characters in `s` and `goal` differ. If there are exactly two differences, check if swapping those characters in `s` results in `goal`.\",\n    \"Step 3 - Algorithmic Approach\": \"1. Ensure the strings are the same length. If not, return `false`. 2. Compare the strings character by character to identify mismatched positions. 3. If there are exactly two mismatched positions, check if swapping the characters at these positions in `s` makes it equal to `goal`. 4. Otherwise, return `false`.\",\n    \"Step 4 - Output Format\": \"Return `true` if it's possible to swap two characters in `s` to make it equal to `goal`, otherwise return `false`.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure that the solution efficiently handles strings of length up to 20000. Handle edge cases such as when the strings are already equal or when more than two differences exist between them.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"ab\",\n        \"goal\": \"ba\"\n      },\n      \"output\": true,\n      \"explanation\": \"You can swap `s[0] = 'a'` and `s[1] = 'b'` to get 'ba', which is equal to `goal`.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"ab\",\n        \"goal\": \"ab\"\n      },\n      \"output\": false,\n      \"explanation\": \"The only possible swap in `s` results in 'ba', which is not equal to `goal`.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"aa\",\n        \"goal\": \"aa\"\n      },\n      \"output\": true,\n      \"explanation\": \"You can swap `s[0] = 'a'` and `s[1] = 'a'` to get 'aa', which is equal to `goal`.\"\n    }\n  ],\n  \"constraints\": {\n    \"length_range\": \"1 <= s.length, goal.length <= 20000\",\n    \"characters_range\": \"s and goal consist of lowercase letters\"\n  },\n  \"follow_up\": \"Can you optimize the solution further for very large strings or handle edge cases efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if two strings are anagrams."}, {"role": "assistant", "content": "{\n  \"description\": \"Check if one string is an anagram of another.\",\n  \"objective\": \"Return true if the second string is an anagram of the first; otherwise, return false.\",\n  \"steps\": [\n    \"Ensure the two strings have the same length.\",\n    \"Count the occurrences of each character in both strings.\",\n    \"Compare the character counts of the two strings.\",\n    \"If the counts match, return true; otherwise, return false.\"\n  ],\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"anagram\",\n        \"t\": \"nagaram\"\n      },\n      \"output\": true\n    },\n    {\n      \"input\": {\n        \"s\": \"rat\",\n        \"t\": \"car\"\n      },\n      \"output\": false\n    }\n  ],\n  \"constraints\": \"Optimize for strings up to 50,000 characters in length.\",\n  \"follow_up\": \"How would you adapt the solution to handle Unicode characters efficiently? Can you achieve the same functionality with reduced memory usage?\"\n}"}]}
