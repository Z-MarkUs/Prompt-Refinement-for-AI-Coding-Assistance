{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Remove duplicates from a sorted array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums` sorted in non-decreasing order, remove the duplicates **in-place** such that each unique element appears only **once** while maintaining their relative order. Return the number of unique elements, `k`, and ensure that the first `k` elements of `nums` contain these unique elements in the same order they originally appeared. The remaining elements in `nums` beyond the first `k` do not matter.\",\n  \"objective\": \"Design an efficient algorithm to modify the array in-place to remove duplicates and return the count of unique elements.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task is to remove duplicates from a sorted array while preserving the relative order of elements and modifying the array in-place.\",\n    \"Step 2 - Two-Pointer Technique\": \"Use two pointers: one pointer (`slow`) to track the position for placing unique elements, and another pointer (`fast`) to traverse the array and identify duplicates.\",\n    \"Step 3 - Modify Array In-Place\": \"When a new unique element is found, place it at the position indicated by the `slow` pointer, and increment the `slow` pointer.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution adheres to the constraints, such as `1 <= nums.length <= 3 * 10^4` and that `nums` is sorted in non-decreasing order.\",\n    \"Step 5 - Edge Cases\": \"Handle edge cases such as arrays with all duplicate values, arrays with no duplicates, and arrays with only one element.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          1,\n          2\n        ]\n      },\n      \"output\": {\n        \"k\": 2,\n        \"nums\": [\n          1,\n          2,\n          \"_\"\n        ]\n      },\n      \"explanation\": \"The function modifies the array to keep the first two unique elements (1, 2) and returns k = 2.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          0,\n          1,\n          1,\n          1,\n          2,\n          2,\n          3,\n          3,\n          4\n        ]\n      },\n      \"output\": {\n        \"k\": 5,\n        \"nums\": [\n          0,\n          1,\n          2,\n          3,\n          4,\n          \"_\",\n          \"_\",\n          \"_\",\n          \"_\",\n          \"_\"\n        ]\n      },\n      \"explanation\": \"The function modifies the array to keep the first five unique elements (0, 1, 2, 3, 4) and returns k = 5.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 3 * 10^4\",\n    \"element_range\": \"-100 <= nums[i] <= 100\",\n    \"sorted_order\": \"nums is sorted in non-decreasing order.\"\n  },\n  \"follow_up\": \"Can you implement the solution in `O(n)` time complexity and `O(1)` additional space?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Flip the image and invert it."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an `n x n` binary matrix `image`. Your task is to flip the image horizontally, then invert it, and return the resulting image.\",\n  \"objective\": \"Implement a function to flip the binary matrix horizontally and then invert it according to the specified rules.\",\n  \"meta_prompt\": {\n    \"Step 1 - Horizontal Flip\": \"To flip the image horizontally, reverse each row of the matrix. For example, if a row is [1, 1, 0], after the flip it becomes [0, 1, 1].\",\n    \"Step 2 - Inversion\": \"After the horizontal flip, invert the image by replacing each `0` with `1` and each `1` with `0`. For example, if a row is [0, 1, 1], after inversion it becomes [1, 0, 0].\",\n    \"Step 3 - Output\": \"Return the resulting matrix after applying both the flip and the inversion steps.\",\n    \"Final Check\": \"Ensure that both transformations (flip and invert) are applied to all rows of the matrix. Check if the output matches the expected result.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"image\": [\n          [\n            1,\n            1,\n            0\n          ],\n          [\n            1,\n            0,\n            1\n          ],\n          [\n            0,\n            0,\n            0\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          1,\n          0,\n          0\n        ],\n        [\n          0,\n          1,\n          0\n        ],\n        [\n          1,\n          1,\n          1\n        ]\n      ],\n      \"explanation\": \"After flipping each row, the image becomes [[0,1,1],[1,0,1],[0,0,0]]. Then, inverting it results in [[1,0,0],[0,1,0],[1,1,1]].\"\n    },\n    {\n      \"input\": {\n        \"image\": [\n          [\n            1,\n            1,\n            0,\n            0\n          ],\n          [\n            1,\n            0,\n            0,\n            1\n          ],\n          [\n            0,\n            1,\n            1,\n            1\n          ],\n          [\n            1,\n            0,\n            1,\n            0\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          1,\n          1,\n          0,\n          0\n        ],\n        [\n          0,\n          1,\n          1,\n          0\n        ],\n        [\n          0,\n          0,\n          0,\n          1\n        ],\n        [\n          1,\n          0,\n          1,\n          0\n        ]\n      ],\n      \"explanation\": \"After flipping each row, the image becomes [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]. Then, inverting it results in [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]].\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size\": \"1 <= n <= 20\",\n    \"matrix_values\": \"Each element in the matrix is either 0 or 1.\"\n  },\n  \"follow_up\": \"How would you modify your solution to handle larger matrices (up to 10^5 elements)?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Simulate a class where students sit in seats, starting from seat 0 and moving toward higher numbers. When they leave, the seat is vacated."}, {"role": "assistant", "content": "{\n  \"description\": \"You are asked to simulate an exam room with `n` seats, where students sit in a way that maximizes the distance to the nearest person. Implement the `ExamRoom` class with the methods `seat()` and `leave()`. When a student enters the room, they will sit in the seat that maximizes the distance to the closest person, and if there are multiple options, they will choose the seat with the lowest index. If a student leaves the room, the seat will be vacated.\",\n  \"objective\": \"Create a class that simulates the behavior of students seating and leaving in an exam room according to the specified rules.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The task involves simulating student behavior in a large exam room with a specific seating strategy, which maximizes the distance to the nearest person. We need to implement a class that tracks the seats that are occupied and provides methods for seating new students and handling seat vacancies.\",\n    \"Step 2 - Approach\": \"Use a greedy strategy to seat the next student by finding the seat that maximizes the distance to the nearest occupied seat. Efficiently handle the seating and vacating of seats to maintain optimal performance, considering the constraints of up to 10^9 seats and 10^4 operations.\",\n    \"Step 3 - Algorithm Design\": \"To manage the seating strategy, maintain a list or set of occupied seats and consider the largest gaps between them. When a new student enters, they will occupy the seat that maximizes the minimum distance to any occupied seat. If multiple seats have the same distance, the seat with the smallest index should be chosen. When a student leaves, the corresponding seat is freed, and the largest gap might shift.\",\n    \"Step 4 - Edge Case Considerations\": \"Handle cases like the first student entering the room, where they should sit at seat 0, and the scenario where all students leave and the room becomes empty. Ensure the class handles both operations efficiently within the constraints.\",\n    \"Step 5 - Final Check\": \"Ensure that the implemented methods work as expected under various scenarios, such as seating students, leaving seats, and correctly handling large gaps between students. Verify that the solution performs well with respect to the provided constraints (n \\u2264 10^9, 10^4 operations).\"\n  },\n  \"examples\": [\n    {\n      \"input\": [\n        \"ExamRoom\",\n        \"seat\",\n        \"seat\",\n        \"seat\",\n        \"seat\",\n        \"leave\",\n        \"seat\"\n      ],\n      \"output\": [\n        null,\n        0,\n        9,\n        4,\n        2,\n        null,\n        5\n      ],\n      \"explanation\": \"ExamRoom examRoom = new ExamRoom(10); examRoom.seat(); // return 0, no one is in the room, then the student sits at seat number 0. examRoom.seat(); // return 9, the student sits at the last seat number 9. examRoom.seat(); // return 4, the student sits at the last seat number 4. examRoom.seat(); // return 2, the student sits at the last seat number 2. examRoom.leave(4); examRoom.seat(); // return 5, the student sits at the last seat number 5.\"\n    }\n  ],\n  \"constraints\": {\n    \"n\": \"1 <= n <= 10^9\",\n    \"operations\": \"At most 10^4 calls will be made to `seat()` and `leave()`\",\n    \"seat_condition\": \"It is guaranteed that there is a student sitting at seat `p` when calling `leave(p)`\"\n  },\n  \"follow_up\": \"How can we optimize the seat selection process to work efficiently with very large values of `n` (up to 10^9)? Consider using a data structure like a balanced binary search tree or priority queues to track seat availability dynamically.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number of valid permutations of integers from 0 to n based on the given string of 'D' and 'I'."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string s of length n, where each character is either 'D' (decreasing) or 'I' (increasing), find the number of valid permutations of integers from 0 to n that satisfy the conditions dictated by the string. A valid permutation perm of integers must adhere to the rules based on the characters of s: for each valid i, if s[i] is 'D', perm[i] > perm[i+1], and if s[i] is 'I', perm[i] < perm[i+1].\",\n  \"objective\": \"Design an efficient algorithm to calculate the number of valid permutations of the integers in the range [0, n] that satisfy the conditions given by the string s. Return the result modulo 10^9 + 7.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We are given a string s representing a series of constraints on a permutation of integers from 0 to n. We need to find how many permutations satisfy these constraints.\",\n    \"Step 2 - Approach Overview\": \"We can use dynamic programming to build up the solution by evaluating the number of valid permutations based on smaller subproblems. The state of the problem can be represented by the number of permutations that satisfy a certain prefix of the string s.\",\n    \"Step 3 - Dynamic Programming Approach\": \"We use a dp table where dp[i][j] represents the number of valid permutations for the first i elements with the j-th element being the largest. We can fill this table based on the constraints from the string s and previous values.\",\n    \"Step 4 - Output Format\": \"The answer will be the number of valid permutations modulo 10^9 + 7.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure the algorithm runs efficiently for large values of n (up to 200), considering edge cases such as all 'I' or all 'D' strings.\",\n    \"Final Check - Constraints Verification\": \"Verify the solution handles strings of length up to 200 and calculates the result modulo 10^9 + 7.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"DID\"\n      },\n      \"output\": 5,\n      \"explanation\": \"The 5 valid permutations of the integers (0, 1, 2, 3) are: (1, 0, 3, 2), (2, 0, 3, 1), (2, 1, 3, 0), (3, 0, 2, 1), (3, 1, 2, 0).\"\n    },\n    {\n      \"input\": {\n        \"s\": \"D\"\n      },\n      \"output\": 1,\n      \"explanation\": \"For the string 'D', only one valid permutation exists: (1, 0).\"\n    }\n  ],\n  \"constraints\": {\n    \"s_length\": \"1 <= n <= 200\",\n    \"s_elements\": \"s[i] is either 'I' or 'D'\",\n    \"result_modulo\": \"Return the result modulo 10^9 + 7\"\n  },\n  \"follow_up\": \"Can you optimize this solution further to handle larger constraints?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Group strings that are similar after shifting letters."}, {"role": "assistant", "content": "{\n  \"description\": \"Group strings that belong to the same shifting sequence.\",\n  \"objective\": \"Return groups of strings where each group represents strings that can be transformed into each other through successive letter shifts.\",\n  \"steps\": [\n    \"For each string, calculate a normalized representation that is invariant to shifts. For example, 'abc' -> [0, 1, 2].\",\n    \"Group strings based on their normalized representations.\",\n    \"Return the grouped strings.\"\n  ],\n  \"examples\": [\n    {\n      \"input\": [\n        \"abc\",\n        \"bcd\",\n        \"acef\",\n        \"xyz\",\n        \"az\",\n        \"ba\",\n        \"a\",\n        \"z\"\n      ],\n      \"output\": [\n        [\n          \"acef\"\n        ],\n        [\n          \"a\",\n          \"z\"\n        ],\n        [\n          \"abc\",\n          \"bcd\",\n          \"xyz\"\n        ],\n        [\n          \"az\",\n          \"ba\"\n        ]\n      ]\n    },\n    {\n      \"input\": [\n        \"a\"\n      ],\n      \"output\": [\n        [\n          \"a\"\n        ]\n      ]\n    }\n  ],\n  \"constraints\": [\n    \"The length of the input array is between 1 and 200.\",\n    \"Each string has a length between 1 and 50.\",\n    \"All strings consist of lowercase English letters.\"\n  ],\n  \"follow_up\": \"Can you handle scenarios where the input has a very large number of strings efficiently, such as using hashing or grouping techniques?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Design a calendar system to book events."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a calendar system to manage event bookings and avoid double bookings.\",\n  \"objective\": \"Implement a `MyCalendar` class that allows booking events and ensures no overlapping intervals.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Initialize an empty sorted list `calendar` to store booked intervals.\",\n    \"Step 2\": \"For each new booking `[start, end)`, perform a binary search to find the correct position in the sorted list.\",\n    \"Step 3\": \"Check for overlaps with neighboring intervals (both before and after).\",\n    \"Step 4\": \"If no overlap exists, insert the interval into the `calendar` at the correct position.\",\n    \"Step 5\": \"Return `true` for a successful booking and `false` if there is an overlap.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"actions\": [\n          \"MyCalendar\",\n          \"book\",\n          \"book\",\n          \"book\"\n        ],\n        \"values\": [\n          [],\n          [\n            10,\n            20\n          ],\n          [\n            15,\n            25\n          ],\n          [\n            20,\n            30\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        true,\n        false,\n        true\n      ],\n      \"explanation\": \"The first event is successfully booked. The second overlaps with the first and is rejected. The third does not overlap and is booked successfully.\"\n    },\n    {\n      \"input\": {\n        \"actions\": [\n          \"MyCalendar\",\n          \"book\",\n          \"book\",\n          \"book\"\n        ],\n        \"values\": [\n          [],\n          [\n            5,\n            10\n          ],\n          [\n            15,\n            20\n          ],\n          [\n            5,\n            15\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        true,\n        true,\n        false\n      ],\n      \"explanation\": \"The first two events are successfully booked. The third overlaps with the first and second and is rejected.\"\n    }\n  ],\n  \"constraints\": {\n    \"intervals\": \"0 <= start < end <= 10^9\",\n    \"calls\": \"At most 1000 calls will be made to `book`.\"\n  },\n  \"follow_up\": \"Discuss the efficiency of the solution using binary search (O(logN) for insertion and O(N) for maintaining order). Consider optimizing for large input sizes or frequent updates.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Split an array into `k` subarrays to minimize the largest sum."}, {"role": "assistant", "content": "{\n  \"title\": \"Minimize Largest Sum in Split Array\",\n  \"description\": \"Given an integer array `nums` and an integer `k`, split `nums` into `k` non-empty contiguous subarrays such that the largest sum of any subarray is minimized. Return the minimized largest sum.\",\n  \"input\": [\n    {\n      \"name\": \"nums\",\n      \"type\": \"array of integers\",\n      \"description\": \"The array to split into subarrays.\",\n      \"constraints\": \"1 <= nums.length <= 1000, 0 <= nums[i] <= 10^6\"\n    },\n    {\n      \"name\": \"k\",\n      \"type\": \"integer\",\n      \"description\": \"The number of subarrays to split `nums` into.\",\n      \"constraints\": \"1 <= k <= min(50, nums.length)\"\n    }\n  ],\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The minimized largest sum of the split subarrays.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          7,\n          2,\n          5,\n          10,\n          8\n        ],\n        \"k\": 2\n      },\n      \"output\": 18,\n      \"explanation\": \"The best split is [7,2,5] and [10,8], with the largest sum being 18.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          4,\n          5\n        ],\n        \"k\": 2\n      },\n      \"output\": 9,\n      \"explanation\": \"The best split is [1,2,3] and [4,5], with the largest sum being 9.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          4,\n          4\n        ],\n        \"k\": 3\n      },\n      \"output\": 4,\n      \"explanation\": \"The best split is [1], [4], and [4], with the largest sum being 4.\"\n    }\n  ],\n  \"hints\": [\n    \"Use binary search to optimize the maximum sum.\",\n    \"Check if it is possible to split the array into `k` parts with a maximum subarray sum of `mid`.\",\n    \"Iteratively adjust the range of possible sums until the minimized largest sum is found.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve a time complexity of O(n log(sum(nums))) by using binary search and a greedy approach.\",\n    \"constraints\": \"Avoid generating all possible splits to ensure efficiency.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Generate a matrix layout of a binary tree showing its structure."}, {"role": "assistant", "content": "{\n  \"description\": \"Construct a 0-indexed m x n string matrix representing a formatted layout of a binary tree.\",\n  \"objective\": \"Generate a matrix where nodes of a binary tree are placed according to their level and position, with the root at the center of the top row and children distributed according to tree structure.\",\n  \"meta_prompt\": {\n    \"Step 1 - Calculate Tree Height\": \"Use a recursive function to calculate the height of the binary tree, which determines the number of rows (m) and columns (n) in the matrix.\",\n    \"Step 2 - Initialize the Matrix\": \"Create an empty m x n matrix filled with empty strings, where m = height + 1 and n = 2^(height+1) - 1.\",\n    \"Step 3 - Define Recursive Fill Function\": \"Implement a function fill(node, level, left, right) to place the nodes in the correct positions recursively. Calculate the middle index as (left + right) // 2 for the current node.\",\n    \"Step 4 - Place Node Values\": \"Place the string representation of the node's value at the calculated middle index. Recursively fill the left and right children at the appropriate positions based on the level and tree structure.\",\n    \"Step 5 - Execute Fill Function\": \"Start with the root node at level 0, left = 0, and right = n - 1. Use the fill function to populate the matrix.\",\n    \"Step 6 - Return the Matrix\": \"Return the filled matrix containing the formatted layout of the binary tree.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2\n        ]\n      },\n      \"output\": [\n        [\n          \" \",\n          \"1\",\n          \" \"\n        ],\n        [\n          \"2\",\n          \" \",\n          \" \"\n        ]\n      ],\n      \"explanation\": \"The root node 1 is placed in the middle of the first row, and the left child 2 is placed in the second row shifted to the left.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3,\n          null,\n          4\n        ]\n      },\n      \"output\": [\n        [\n          \" \",\n          \" \",\n          \" \",\n          \"1\",\n          \" \",\n          \" \",\n          \" \"\n        ],\n        [\n          \" \",\n          \"2\",\n          \" \",\n          \" \",\n          \" \",\n          \"3\",\n          \" \"\n        ],\n        [\n          \" \",\n          \" \",\n          \"4\",\n          \" \",\n          \" \",\n          \" \",\n          \" \"\n        ]\n      ],\n      \"explanation\": \"The root node 1 is at the center, with left child 2 and right child 3 on the second row. The child 4 of node 2 is placed in the third row.\"\n    }\n  ],\n  \"constraints\": {\n    \"nodes_range\": \"1 <= number of nodes <= 210\",\n    \"node_values_range\": \"-99 <= Node.val <= 99\",\n    \"tree_depth_range\": \"1 <= depth <= 10\"\n  },\n  \"follow_up\": \"Analyze the time complexity of constructing the matrix and discuss optimizations for handling larger trees efficiently.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Design a class to find the kth largest element in a stream."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a class to find the kth largest element in a stream, using a min-heap to efficiently maintain the k largest elements.\",\n  \"objective\": \"Implement a `KthLargest` class that initializes with a value `k` and a stream of integers, and supports adding integers to the stream while efficiently finding the kth largest element.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Initialize a min-heap data structure to store at most `k` elements, and keep the smallest element at the root.\",\n    \"Step 2\": \"In the constructor `KthLargest(int k, int[] nums)`, iterate through the input `nums` array and use the `add` function to maintain the heap of k largest elements.\",\n    \"Step 3\": \"In the `add(int val)` method, append the new value to the heap only if the size of the heap is less than `k` or the new value is larger than the root of the heap.\",\n    \"Step 4\": \"If the heap size exceeds `k`, remove the smallest element from the heap to maintain the size constraint.\",\n    \"Step 5\": \"Return the root of the heap as the kth largest element after each `add` call.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"operations\": [\n          \"KthLargest\",\n          \"add\",\n          \"add\",\n          \"add\",\n          \"add\",\n          \"add\"\n        ],\n        \"arguments\": [\n          [\n            3,\n            [\n              4,\n              5,\n              8,\n              2\n            ]\n          ],\n          [\n            3\n          ],\n          [\n            5\n          ],\n          [\n            10\n          ],\n          [\n            9\n          ],\n          [\n            4\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        4,\n        5,\n        5,\n        8,\n        8\n      ],\n      \"explanation\": \"The stream evolves as follows: [4, 5, 8] -> [4, 5, 8, 3] -> [5, 5, 8, 3] -> [5, 8, 10, 3] -> [8, 9, 10, 5] -> [8, 9, 10, 4]. The kth largest element is tracked in each step.\"\n    },\n    {\n      \"input\": {\n        \"operations\": [\n          \"KthLargest\",\n          \"add\",\n          \"add\",\n          \"add\"\n        ],\n        \"arguments\": [\n          [\n            2,\n            [\n              1,\n              2,\n              3\n            ]\n          ],\n          [\n            4\n          ],\n          [\n            5\n          ],\n          [\n            6\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        3,\n        4,\n        5\n      ],\n      \"explanation\": \"The stream evolves as [2, 3] -> [3, 4] -> [4, 5] -> [5, 6], with the kth largest updated accordingly.\"\n    }\n  ],\n  \"constraints\": {\n    \"k_range\": \"1 <= k <= 10^4\",\n    \"stream_size\": \"0 <= nums.length <= 10^4\",\n    \"element_range\": \"-10^4 <= nums[i], val <= 10^4\",\n    \"operations_limit\": \"At most 10^4 calls will be made to `add`.\"\n  },\n  \"follow_up\": \"Analyze the time complexity of maintaining the heap with k elements (O(log k) per add operation), and discuss how the solution scales for large `k` or frequent updates to the stream.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Perform a bitwise OR operation on two Quad-Trees."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two Quad-Trees `quadTree1` and `quadTree2` representing `n * n` binary matrices, perform a logical bitwise OR operation on the two matrices and return the resulting Quad-Tree.\",\n  \"objective\": \"Recursively construct a Quad-Tree for the resulting `n * n` matrix by evaluating each node and combining child nodes as needed.\",\n  \"meta_prompt\": {\n    \"Step 1 - Handle Leaf Nodes\": \"Check if either `quadTree1` or `quadTree2` is a leaf node. If `quadTree1` is a leaf, return it if `quadTree1.val` is True (indicating a matrix filled with 1s); otherwise, return `quadTree2`. Similarly, if `quadTree2` is a leaf, return it if `quadTree2.val` is True; otherwise, return `quadTree1`.\",\n    \"Step 2 - Recursive OR on Children\": \"If neither `quadTree1` nor `quadTree2` is a leaf node, recursively apply the OR operation to each corresponding child node: top-left (`topLeft`), top-right (`topRight`), bottom-left (`bottomLeft`), and bottom-right (`bottomRight`). Store each result in variables `tl`, `tr`, `bl`, and `br` respectively.\",\n    \"Step 3 - Merge Similar Leaves\": \"After obtaining the results for all child nodes, check if `tl`, `tr`, `bl`, and `br` are all leaf nodes with the same value. If they are, create a new leaf node with this common value, as this represents a uniform sub-grid in the resulting matrix.\",\n    \"Step 4 - Create Internal Node\": \"If the child nodes are not uniform, create a new internal node with `tl`, `tr`, `bl`, and `br` as children and return this node as it represents a mixed-value sub-grid in the resulting matrix.\",\n    \"Final Check - Constraints Verification\": \"Confirm that the solution handles edge cases where either Quad-Tree is a uniform matrix. Ensure it respects constraints where `n` is a power of 2 (`n == 2^x` for `0 <= x <= 9`), and `quadTree1` and `quadTree2` are valid Quad-Trees with either leaves or internal nodes with four children.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"quadTree1\": [\n          [\n            0,\n            1\n          ],\n          [\n            1,\n            1\n          ],\n          [\n            1,\n            1\n          ],\n          [\n            1,\n            0\n          ],\n          [\n            1,\n            0\n          ]\n        ],\n        \"quadTree2\": [\n          [\n            0,\n            1\n          ],\n          [\n            1,\n            1\n          ],\n          [\n            0,\n            1\n          ],\n          [\n            1,\n            1\n          ],\n          [\n            1,\n            0\n          ],\n          null,\n          null,\n          null,\n          null,\n          [\n            1,\n            0\n          ],\n          [\n            1,\n            0\n          ],\n          [\n            1,\n            1\n          ],\n          [\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          0,\n          0\n        ],\n        [\n          1,\n          1\n        ],\n        [\n          1,\n          1\n        ],\n        [\n          1,\n          1\n        ],\n        [\n          1,\n          0\n        ]\n      ],\n      \"explanation\": \"The output Quad-Tree represents the matrix obtained by performing a logical OR operation on the matrices represented by quadTree1 and quadTree2.\"\n    },\n    {\n      \"input\": {\n        \"quadTree1\": [\n          [\n            1,\n            0\n          ]\n        ],\n        \"quadTree2\": [\n          [\n            1,\n            0\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          1,\n          0\n        ]\n      ],\n      \"explanation\": \"Both trees represent a `1x1` matrix of 0s. The result is a single node leaf representing a `1x1` matrix of 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_size\": \"The binary matrices represented by quadTree1 and quadTree2 are `n * n` where `n == 2^x` for `0 <= x <= 9`\",\n    \"node_structure\": \"Each node in quadTree1 and quadTree2 has a `val`, `isLeaf`, and potentially four children (`topLeft`, `topRight`, `bottomLeft`, `bottomRight`)\"\n  },\n  \"follow_up\": \"Consider if other bitwise operations (e.g., AND, XOR) could be implemented in a similar recursive approach, and explore optimization for large `n` with uniform sub-grids.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Remove the minimum number of invalid parentheses from a string."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s` consisting of lowercase English letters and parentheses, remove the minimum number of invalid parentheses to make the string valid. Return all unique valid strings that can be generated with the minimum number of removals.\",\n  \"objective\": \"Design an algorithm to generate all valid strings with the minimum number of parentheses removed, ensuring that duplicates are avoided and the solution is efficient.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the properties of a valid string:\\n1. The number of opening and closing parentheses must match.\\n2. Parentheses must be properly nested (e.g., '(a(b)c)' is valid).\",\n    \"Step 2 - Breadth-First Search (BFS)\": \"Use BFS to explore all possible strings by removing one character at a time. Stop processing further levels as soon as valid strings are found.\",\n    \"Step 3 - Validation Function\": \"Implement a function to validate if a given string is valid by counting open and close parentheses.\",\n    \"Step 4 - Edge Cases\": \"Handle cases like:\\n- Strings with no parentheses.\\n- Completely invalid strings (e.g., ')(').\\n- Strings with letters but no parentheses.\",\n    \"Step 5 - Output\": \"Return a list of unique valid strings. Ensure no duplicates in the result by using a set or hash map.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"()())()\"\n      },\n      \"output\": [\n        \"(())()\",\n        \"()()()\"\n      ],\n      \"explanation\": \"Two valid strings can be generated by removing one closing parenthesis.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"(a)())()\"\n      },\n      \"output\": [\n        \"(a())()\",\n        \"(a)()()\"\n      ],\n      \"explanation\": \"Two valid strings can be generated by removing one closing parenthesis.\"\n    },\n    {\n      \"input\": {\n        \"s\": \")(\"\n      },\n      \"output\": [\n        \"\"\n      ],\n      \"explanation\": \"No valid string can be generated without removing both parentheses.\"\n    }\n  ],\n  \"constraints\": {\n    \"length\": \"1 <= s.length <= 25\",\n    \"characters\": \"`s` consists of lowercase English letters and parentheses '(' and ')'.\",\n    \"parentheses_count\": \"There will be at most 20 parentheses in `s`.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to avoid generating all possible substrings and directly prune invalid states during BFS or DFS traversal?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Convert an Excel column title to a number."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `columnTitle` representing an Excel column title, return its corresponding column number.\",\n  \"objective\": \"Design an algorithm to convert an Excel column title to its corresponding column number.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the column title is a base-26 number system where 'A' maps to 1, 'B' maps to 2, ..., 'Z' maps to 26.\",\n    \"Step 2 - Convert Each Character\": \"Iterate through the column title, converting each character to its numeric value (A = 1, B = 2, ..., Z = 26).\",\n    \"Step 3 - Accumulate the Result\": \"Multiply the accumulated result by 26 before adding the current character's value to handle the positional significance.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider edge cases such as single-character titles and the largest column title within the constraints.\",\n    \"Step 5 - Optimize\": \"Ensure the solution runs in O(n) time where n is the length of the column title.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"columnTitle\": \"A\"\n      },\n      \"output\": 1,\n      \"explanation\": \"'A' corresponds to 1.\"\n    },\n    {\n      \"input\": {\n        \"columnTitle\": \"AB\"\n      },\n      \"output\": 28,\n      \"explanation\": \"'AB' corresponds to 1 * 26 + 2 = 28.\"\n    },\n    {\n      \"input\": {\n        \"columnTitle\": \"ZY\"\n      },\n      \"output\": 701,\n      \"explanation\": \"'ZY' corresponds to 26 * 26 + 25 = 701.\"\n    }\n  ],\n  \"constraints\": {\n    \"title_length\": \"1 <= columnTitle.length <= 7\",\n    \"character_set\": \"Column title consists only of uppercase English letters.\",\n    \"valid_range\": \"Column title is in the range ['A', 'FXSHRXW'].\"\n  },\n  \"follow_up\": \"How would you handle titles with lowercase or invalid characters?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Perform bottom-up level order traversal on a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary tree, return the bottom-up level order traversal of its nodes' values (i.e., from left to right, level by level from leaf to root).\",\n  \"objective\": \"Design an algorithm to perform bottom-up level order traversal of a binary tree.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that bottom-up level order traversal is a reversed version of standard level order traversal.\",\n    \"Step 2 - Use a Queue\": \"Perform a level order traversal using a queue to group nodes by level, and store these groups in reverse order.\",\n    \"Step 3 - Handle Edge Cases\": \"Handle cases such as an empty tree, a single-node tree, and trees with varying numbers of levels.\",\n    \"Step 4 - Optimize\": \"Ensure the solution runs in O(n) time and uses O(n) space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          9,\n          20,\n          null,\n          null,\n          15,\n          7\n        ]\n      },\n      \"output\": [\n        [\n          15,\n          7\n        ],\n        [\n          9,\n          20\n        ],\n        [\n          3\n        ]\n      ],\n      \"explanation\": \"The nodes are grouped bottom-up: [15, 7], then [9, 20], and finally [3].\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1\n        ]\n      },\n      \"output\": [\n        [\n          1\n        ]\n      ],\n      \"explanation\": \"A single-node tree results in one level.\"\n    },\n    {\n      \"input\": {\n        \"root\": []\n      },\n      \"output\": [],\n      \"explanation\": \"An empty tree results in no levels.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 2000\",\n    \"node_values\": \"-1000 <= Node.val <= 1000\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Make a Twitter-like app where users can post tweets and follow others."}, {"role": "assistant", "content": "{\n  \"description\": \"Implement a simplified version of Twitter with functionalities to post tweets, follow/unfollow users, and fetch a news feed of the 10 most recent tweets.\",\n  \"objective\": \"Efficiently manage tweets, user relationships, and news feed generation using appropriate data structures.\",\n  \"meta_prompt\": {\n    \"Step 1 - Data Structures\": {\n      \"tweets\": \"Maintain a mapping of user IDs to a list of their tweets with timestamps.\",\n      \"followers\": \"Maintain a mapping of user IDs to a set of users they follow.\"\n    },\n    \"Step 2 - Posting Tweets\": \"Add a new tweet to the user's list of tweets with a unique timestamp.\",\n    \"Step 3 - Fetching News Feed\": \"Aggregate tweets from the user and their followees, sort by timestamp, and retrieve the 10 most recent.\",\n    \"Step 4 - Follow/Unfollow Operations\": \"Update the follower list of the user to reflect the new relationships.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"actions\": [\n          \"Twitter\",\n          \"postTweet\",\n          \"getNewsFeed\",\n          \"follow\",\n          \"postTweet\",\n          \"getNewsFeed\",\n          \"unfollow\",\n          \"getNewsFeed\"\n        ],\n        \"arguments\": [\n          [],\n          [\n            1,\n            5\n          ],\n          [\n            1\n          ],\n          [\n            1,\n            2\n          ],\n          [\n            2,\n            6\n          ],\n          [\n            1\n          ],\n          [\n            1,\n            2\n          ],\n          [\n            1\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        null,\n        [\n          5\n        ],\n        null,\n        null,\n        [\n          6,\n          5\n        ],\n        null,\n        [\n          5\n        ]\n      ]\n    }\n  ],\n  \"constraints\": {\n    \"userId\": \"1 <= userId, followerId, followeeId <= 500\",\n    \"tweetId\": \"0 <= tweetId <= 10^4\",\n    \"calls\": \"At most 3 * 10^4 calls will be made.\"\n  },\n  \"follow_up\": {\n    \"optimization\": \"Use a max heap or priority queue to optimize news feed generation.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Perform a preorder traversal of a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary tree, return the preorder traversal of its nodes' values. Preorder traversal visits nodes in the order: root, left subtree, right subtree.\",\n  \"objective\": \"Design an algorithm to perform preorder traversal of a binary tree.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that preorder traversal involves visiting nodes in the root, left, right order.\",\n    \"Step 2 - Recursive Approach\": \"Use a recursive function to traverse the tree in preorder.\",\n    \"Step 3 - Iterative Approach\": \"Implement an iterative solution using a stack to simulate recursion.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as an empty tree, a single-node tree, or unbalanced trees.\",\n    \"Step 5 - Optimize\": \"Ensure the solution is efficient and handles large trees gracefully.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          null,\n          2,\n          3\n        ]\n      },\n      \"output\": [\n        1,\n        2,\n        3\n      ],\n      \"explanation\": \"Visit the root node first, then the left subtree, and finally the right subtree.\"\n    },\n    {\n      \"input\": {\n        \"root\": []\n      },\n      \"output\": [],\n      \"explanation\": \"An empty tree results in an empty traversal.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1\n        ]\n      },\n      \"output\": [\n        1\n      ],\n      \"explanation\": \"A single-node tree results in a traversal with that node.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 100\",\n    \"node_values\": \"-100 <= Node.val <= 100\"\n  },\n  \"follow_up\": \"Can you implement the traversal iteratively and optimize for memory usage?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the next permutation of an array of integers."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of integers `nums`, find the **next permutation** of `nums`. The next permutation is the lexicographically greater permutation of the array. If no such permutation exists, rearrange the array into its lowest possible order (i.e., sorted in ascending order). The replacement must be performed **in-place** and use only constant extra memory.\",\n  \"objective\": \"Design an efficient algorithm to compute the next permutation of the array in-place, ensuring that it adheres to the constraints and handles edge cases.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task is to find the next lexicographical permutation of the array. If the array is already in descending order, return it in ascending order.\",\n    \"Step 2 - Identify Pivot\": \"Traverse the array from the end to find the first pair of elements `nums[i]` and `nums[i-1]` such that `nums[i-1] < nums[i]`. This element `nums[i-1]` is the pivot.\",\n    \"Step 3 - Find Swap Element\": \"From the end of the array, find the smallest element greater than `nums[i-1]` to swap with `nums[i-1]`.\",\n    \"Step 4 - Rearrange the Tail\": \"Reverse the subarray starting from `i` to ensure the smallest lexicographical order for the tail.\",\n    \"Step 5 - Edge Cases\": \"Handle edge cases such as arrays already in descending order, arrays with identical elements, or arrays of size 1.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": [\n        1,\n        3,\n        2\n      ],\n      \"explanation\": \"The next lexicographical permutation of [1, 2, 3] is [1, 3, 2].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          2,\n          1\n        ]\n      },\n      \"output\": [\n        1,\n        2,\n        3\n      ],\n      \"explanation\": \"[3, 2, 1] is the last permutation. The next permutation is the lowest possible order: [1, 2, 3].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          1,\n          5\n        ]\n      },\n      \"output\": [\n        1,\n        5,\n        1\n      ],\n      \"explanation\": \"The next lexicographical permutation of [1, 1, 5] is [1, 5, 1].\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 100\",\n    \"element_range\": \"0 <= nums[i] <= 100\",\n    \"in_place\": \"The solution must be in-place and use constant extra memory.\"\n  },\n  \"follow_up\": \"Can you modify your approach to efficiently handle arrays with extremely large numbers of elements while ensuring in-place operation?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a positive integer `n`, find the longest distance between any two adjacent 1's in the binary representation of `n`. If no two adjacent 1's are present, return 0."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a positive integer `n`, and the task is to find and return the **longest distance** between any two adjacent `1`'s in the binary representation of `n`. Two `1`'s are considered adjacent if there are only `0`'s separating them, and the distance is defined as the absolute difference between their bit positions. If there are no adjacent `1`'s, return `0`.\",\n  \"objective\": \"The goal is to find the maximum distance between two adjacent `1`'s in the binary representation of a given integer `n`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The task involves analyzing the binary representation of a given number `n` and finding the largest distance between two adjacent `1`'s. The binary form of `n` is composed of `1`s and `0`s, and the adjacent `1`'s are those that are separated by a sequence of `0`'s (which may be empty). The distance is calculated as the absolute difference in the positions of two adjacent `1`'s.\",\n    \"Step 2 - Approach\": \"Convert the integer `n` to its binary representation and iterate through the bits to find the positions of all `1`'s. Then, calculate the distance between each pair of consecutive `1`'s and track the maximum distance encountered.\",\n    \"Step 3 - Output Format\": \"Return the largest distance between two adjacent `1`'s. If no adjacent `1`'s exist, return `0`.\",\n    \"Step 4 - Code Efficiency and Edge Cases\": \"The solution must handle integer values up to `10^9`, so the binary representation could be up to 30 bits long. The algorithm should efficiently handle this size and correctly handle edge cases like when no `1`'s are adjacent.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 22\n      },\n      \"output\": 2,\n      \"explanation\": \"22 in binary is '10110'. The first adjacent pair of 1's is '10110' with a distance of 2. The second adjacent pair of 1's is '10110' with a distance of 1. The answer is the largest distance, which is 2.\"\n    },\n    {\n      \"input\": {\n        \"n\": 8\n      },\n      \"output\": 0,\n      \"explanation\": \"8 in binary is '1000'. There are no adjacent pairs of 1's in the binary representation of 8, so the result is 0.\"\n    },\n    {\n      \"input\": {\n        \"n\": 5\n      },\n      \"output\": 2,\n      \"explanation\": \"5 in binary is '101'. The adjacent 1's are at positions 0 and 2, giving a distance of 2.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 10^9\",\n    \"bit_representation\": \"The binary representation of `n` will be at most 30 bits long, so the solution should be efficient enough to handle this size.\"\n  },\n  \"follow_up\": \"How would the solution change if `n` could be a very large number, say up to 10^18?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given two lists, check if one could be the result of pushing and popping elements from the other."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given two integer arrays, `pushed` and `popped`, each containing distinct values. You need to determine whether the `popped` array could have been the result of a sequence of push and pop operations on an initially empty stack. Return `true` if this is possible, or `false` otherwise.\",\n  \"objective\": \"Design an algorithm that simulates the push and pop operations on a stack to determine if the sequence of operations could produce the given `popped` array from the `pushed` array.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Consider the stack operations: you can push elements from `pushed` onto the stack and pop them to match the sequence in `popped`. The problem boils down to simulating these operations in a way that adheres to the constraints of stack behavior (LIFO).\",\n    \"Step 2 - Initial Approach\": \"Use a stack to simulate the push and pop operations. Iterate through the `pushed` array, pushing elements onto the stack. For each element in the `popped` array, check if the top of the stack matches the current element. If it does, pop it from the stack and continue. If not, return false.\",\n    \"Step 3 - Efficient Solution\": \"Iterate through the `pushed` array while checking for matches in the `popped` array. This will give us a time complexity of O(n) where n is the length of the arrays.\",\n    \"Step 4 - Output Format\": \"Return `true` if the stack operations can produce the `popped` array, otherwise return `false`.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure that your solution handles edge cases, such as when the arrays contain the minimum length (1), or when `pushed` and `popped` are in reverse order.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"pushed\": [\n          1,\n          2,\n          3,\n          4,\n          5\n        ],\n        \"popped\": [\n          4,\n          5,\n          3,\n          2,\n          1\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"We can push the elements in the order 1, 2, 3, 4, then pop them in the order 4, 5, 3, 2, 1, matching the popped sequence.\"\n    },\n    {\n      \"input\": {\n        \"pushed\": [\n          1,\n          2,\n          3,\n          4,\n          5\n        ],\n        \"popped\": [\n          4,\n          3,\n          5,\n          1,\n          2\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"In this case, 1 cannot be popped before 2, making it impossible to match the popped sequence.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= pushed.length <= 1000\",\n    \"nums_elements_range\": \"0 <= pushed[i] <= 1000\",\n    \"popped_length\": \"popped.length == pushed.length\",\n    \"unique_elements\": \"All elements in pushed are unique, and popped is a permutation of pushed.\"\n  },\n  \"follow_up\": \"Can you improve the solution's space complexity or handle additional constraints more efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given an array of integers, find the largest perimeter of a triangle formed by three of them. If no triangle can be formed, return 0."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an integer array `nums`. The task is to return the largest perimeter of a triangle that can be formed from three elements of this array. A triangle is valid if the sum of the lengths of any two sides is greater than the length of the third side. If no valid triangle can be formed, return 0.\",\n  \"objective\": \"Determine the largest possible perimeter of a triangle that can be formed with the given side lengths. If no such triangle exists, return 0.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The problem requires you to check which sets of three lengths from the array can form a triangle with a non-zero area. This is based on the triangle inequality theorem.\",\n    \"Step 2 - Clarify Triangle Condition\": \"For three side lengths a, b, and c, they can form a triangle if: a + b > c, a + c > b, and b + c > a.\",\n    \"Step 3 - Key Insight for Solution\": \"If you sort the array in non-decreasing order, you only need to check the triangle condition for the largest three elements first. This is because any valid triangle formed by three consecutive elements in the sorted array will automatically satisfy the conditions for smaller sets of elements.\",\n    \"Step 4 - Approach\": \"Sort the array in descending order. Check triplets of consecutive elements to see if they satisfy the triangle inequality. The first valid triplet you encounter will give the largest perimeter.\",\n    \"Step 5 - Output Format\": \"Return the perimeter of the largest triangle that can be formed, or 0 if no valid triangle exists.\",\n    \"Step 6 - Time Complexity Consideration\": \"Ensure that the solution runs efficiently with a time complexity of O(n log n) due to the sorting step, where n is the number of elements in the array.\",\n    \"Step 7 - Edge Case Consideration\": \"Consider edge cases where the array has exactly three elements, where all sides are the same, or where the longest side is too long to form a valid triangle.\",\n    \"Final Check - Constraints Verification\": \"The solution should handle arrays with lengths between 3 and 10,000 and side values up to 1,000,000.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          1,\n          2\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"The largest perimeter triangle that can be formed is [2, 2, 1], with a perimeter of 5.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          1,\n          10\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"No combination of side lengths can form a valid triangle with non-zero area, so the output is 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"3 <= nums.length <= 10,000\",\n    \"nums_values\": \"1 <= nums[i] <= 1,000,000\"\n  },\n  \"follow_up\": \"Can you optimize the solution for the largest possible array size, and explain how you can avoid checking all possible triplets directly?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Convert a fraction to a decimal and detect repeating parts."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two integers `numerator` and `denominator`, return the fraction in string format. If the fractional part is repeating, enclose the repeating part in parentheses.\",\n  \"objective\": \"Design an algorithm to handle division and detect repeating decimal parts efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Handle Integer Part\": \"Divide `numerator` by `denominator` to determine the integer part of the fraction.\",\n    \"Step 2 - Calculate Remainder\": \"Calculate the remainder after dividing the integer part and track its position in the result string.\",\n    \"Step 3 - Detect Repeating Decimals\": \"Use a hash map to store remainders and their positions in the result string. If a remainder repeats, the decimal part is repeating.\",\n    \"Step 4 - Format Output\": \"Append the repeating decimal part in parentheses. If there is no repeating part, append the fractional part normally.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider cases like negative results, zero numerator, and large values of numerator and denominator.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"numerator\": 1,\n        \"denominator\": 2\n      },\n      \"output\": \"0.5\",\n      \"explanation\": \"The fraction 1/2 equals 0.5 with no repeating part.\"\n    },\n    {\n      \"input\": {\n        \"numerator\": 4,\n        \"denominator\": 333\n      },\n      \"output\": \"0.(012)\",\n      \"explanation\": \"The fraction 4/333 has a repeating decimal part '012', so the result is 0.(012).\"\n    }\n  ],\n  \"constraints\": {\n    \"numerator_range\": \"-2^31 <= numerator <= 2^31 - 1\",\n    \"denominator_range\": \"-2^31 <= denominator <= 2^31 - 1\",\n    \"non_zero_denominator\": \"denominator != 0\"\n  },\n  \"follow_up\": \"Can you optimize the implementation for cases with very large denominators?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Reverse the words in the character array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a character array `s`, reverse the order of words in the array in place.\",\n  \"objective\": \"Reorder the words in the character array without allocating extra space.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the input is an array of characters, where words are separated by single spaces.\",\n    \"Step 2 - Reverse Entire Array\": \"Reverse the entire character array to bring the last word to the start.\",\n    \"Step 3 - Reverse Each Word\": \"Identify word boundaries and reverse individual words to restore their order.\",\n    \"Step 4 - Handle Edge Cases\": \"Ensure the solution handles single-word inputs or very large arrays efficiently.\",\n    \"Step 5 - Optimize for Space\": \"Avoid using extra memory and ensure in-place transformations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": [\n          \"t\",\n          \"h\",\n          \"e\",\n          \" \",\n          \"s\",\n          \"k\",\n          \"y\",\n          \" \",\n          \"i\",\n          \"s\",\n          \" \",\n          \"b\",\n          \"l\",\n          \"u\",\n          \"e\"\n        ]\n      },\n      \"output\": [\n        \"b\",\n        \"l\",\n        \"u\",\n        \"e\",\n        \" \",\n        \"i\",\n        \"s\",\n        \" \",\n        \"s\",\n        \"k\",\n        \"y\",\n        \" \",\n        \"t\",\n        \"h\",\n        \"e\"\n      ],\n      \"explanation\": \"Reversing the words in place changes their order while maintaining spacing.\"\n    },\n    {\n      \"input\": {\n        \"s\": [\n          \"a\"\n        ]\n      },\n      \"output\": [\n        \"a\"\n      ],\n      \"explanation\": \"Single-word input remains unchanged.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"1 <= s.length <= 10^5\",\n    \"character_set\": \"s[i] is a letter, digit, or space.\",\n    \"word_spacing\": \"Words are separated by a single space, and there are no leading or trailing spaces.\"\n  },\n  \"follow_up\": \"Can you optimize the implementation to avoid unnecessary character swaps while reversing?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number of paths from the start to the end in a grid."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an m x n integer array grid where each element can represent the following: 1 for the starting square, 2 for the ending square, 0 for empty squares we can walk over, and -1 for obstacles. Your task is to return the number of distinct 4-directional walks from the starting square to the ending square, such that every non-obstacle square is visited exactly once during the walk.\",\n  \"objective\": \"Design an algorithm to find all possible paths from the starting point to the ending point in the grid, ensuring that every non-obstacle square is visited exactly once. The grid's dimensions are relatively small, so backtracking with depth-first search (DFS) should be a feasible approach.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We are given a grid where the starting square and ending square are marked, and obstacles are scattered throughout. The goal is to compute the number of distinct paths that connect the start and end points, while visiting every walkable square exactly once.\",\n    \"Step 2 - Approach\": \"A depth-first search (DFS) approach can be used to explore all possible paths, backtracking when necessary. The idea is to maintain a count of visited squares and recursively try all possible 4-directional moves (up, down, left, right) from the current position.\",\n    \"Step 3 - Constraints Handling\": \"Since the grid's size is limited to a maximum of 20 cells, a backtracking approach should be efficient enough. The key challenge is ensuring that every walkable square is visited exactly once, which can be checked by comparing the number of visited squares with the total number of walkable squares (i.e., excluding obstacles).\",\n    \"Step 4 - Recursive DFS Logic\": \"Starting from the initial position (marked by 1), recursively visit all valid neighboring squares (up, down, left, right). At each step, mark the current square as visited, and after visiting its neighbors, backtrack to try other possible moves. Keep a count of the paths that reach the destination (marked by 2) and satisfy the condition of visiting every non-obstacle square exactly once.\",\n    \"Step 5 - Output Format\": \"The output should be an integer representing the number of distinct valid paths that satisfy the conditions.\",\n    \"Step 6 - Edge Cases\": \"Handle edge cases where no valid path exists, such as grids that are too small or where the starting or ending positions are isolated by obstacles. The DFS should also account for grids where the starting and ending squares are very close or even adjacent.\",\n    \"Final Check - Constraints Verification\": \"The solution should work efficiently within the problem's constraints, specifically where 1 <= m, n <= 20, and the grid has at most 20 cells. It should also be optimized for correctness and completeness in pathfinding.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            2,\n            -1\n          ]\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"There are two distinct paths from the start (0,0) to the end (2,2), both of which walk over every non-obstacle square exactly once.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0,\n            2\n          ]\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"There are four valid paths that visit every non-obstacle square exactly once, from start (0,0) to end (2,3).\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            0,\n            1\n          ],\n          [\n            2,\n            0\n          ]\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"No path can walk over every empty square exactly once, as the grid is too small and obstructed.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_size\": \"1 <= m, n <= 20\",\n    \"total_cells\": \"1 <= m * n <= 20\",\n    \"valid_values\": \"The grid contains exactly one starting cell (1), one ending cell (2), and obstacles (-1).\"\n  },\n  \"follow_up\": \"Can you optimize the solution for larger grids (m * n > 20) or find a way to reduce redundant path explorations in the DFS approach?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the largest number in the array and check if it is at least twice as large as the others."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if the largest number in the array is at least twice as large as all other numbers, and return its index if true, or -1 otherwise.\",\n  \"objective\": \"Implement a solution that identifies the largest and second largest numbers in a single pass, and then verifies if the largest number satisfies the required condition.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Initialize variables to track the largest number (max1) and the second largest number (max2), along with the index of the largest number (max1Index).\",\n    \"Step 2\": \"Iterate through the array to identify max1, max2, and the index of max1.\",\n    \"Step 3\": \"Verify if max1 is at least twice as large as max2. If true, return max1Index; otherwise, return -1.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          6,\n          1,\n          0\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The largest number is 6 at index 1, and it is at least twice as large as all other numbers.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          4\n        ]\n      },\n      \"output\": -1,\n      \"explanation\": \"The largest number is 4, but it is not at least twice as large as 3.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"2 <= nums.length <= 50\",\n    \"number_range\": \"0 <= nums[i] <= 100\",\n    \"uniqueness\": \"The largest element is guaranteed to be unique.\"\n  },\n  \"follow_up\": \"Discuss how this approach scales with larger arrays and explore alternatives such as sorting for this problem. Analyze the time complexity of both approaches.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a list of words, find how many different transformations exist."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a list of words, where each word consists of lowercase English letters. Each letter is mapped to its corresponding Morse code representation. You are tasked with determining the number of distinct Morse code transformations for all the words in the list. The transformation of a word is the concatenation of the Morse code of each of its letters.\",\n  \"objective\": \"Design a function that calculates how many distinct transformations exist in the given list of words, where each transformation is a concatenation of the Morse code for each letter in the word.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The problem requires you to translate each word into a series of Morse codes for each of its letters, and then identify how many unique transformations exist across all words.\",\n    \"Step 2 - Key Concepts\": \"Morse code is a standardized encoding system, where each English letter is represented by a series of dots and dashes. The goal is to find how many distinct Morse code transformations exist in the given list of words.\",\n    \"Step 3 - Approach\": \"To solve the problem, we can map each letter to its corresponding Morse code. Then, for each word, we can concatenate the Morse codes for its individual letters to get its transformation. After computing the transformations for all words, we can count the number of distinct transformations.\",\n    \"Step 4 - Solution Strategy\": \"1. Create a mapping from each letter to its Morse code. 2. For each word, generate the Morse code transformation by concatenating the transformations of its individual letters. 3. Use a set to store the unique transformations. 4. Return the size of the set as the number of distinct transformations.\",\n    \"Step 5 - Optimizations\": \"Since each word can have up to 12 letters and there are at most 100 words, the approach of using a set to track distinct transformations should work efficiently within the problem's constraints.\",\n    \"Step 6 - Final Solution\": \"The solution should have a time complexity of O(n * m), where n is the number of words, and m is the maximum length of a word (12). Since this is efficient for the given constraints, the solution will run within the time limits.\",\n    \"Step 7 - Edge Case Handling\": \"Consider edge cases such as a list with only one word, words that map to the same transformation, and ensuring the Morse code is correctly concatenated for each word.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"words\": [\n          \"gin\",\n          \"zen\",\n          \"gig\",\n          \"msg\"\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The transformation of each word is: 'gin' -> '--...-.', 'zen' -> '--...-.', 'gig' -> '--...--.', 'msg' -> '--...--.' There are 2 distinct transformations: '--...-.' and '--...--.'\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"a\"\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The transformation of the word 'a' is '.-'. There is only 1 distinct transformation.\"\n    }\n  ],\n  \"constraints\": {\n    \"words_length\": \"1 <= words.length <= 100\",\n    \"word_length\": \"1 <= words[i].length <= 12\",\n    \"letters_in_words\": \"words[i] consists of lowercase English letters\"\n  },\n  \"follow_up\": \"How would you modify your solution if the input size (number of words) were much larger, say up to 10^6?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Make a Trie that can insert and find words."}, {"role": "assistant", "content": "{\n  \"description\": \"Implement a Trie (prefix tree) data structure with efficient insertion, search, and prefix search capabilities.\",\n  \"objective\": \"Design the Trie class to handle strings with only lowercase English letters, ensuring optimized performance for the given operations.\",\n  \"meta_prompt\": {\n    \"Step 1 - Data Structure Design\": \"Understand that a Trie is a tree-like data structure where each node represents a single character, and paths represent words or prefixes.\",\n    \"Step 2 - Insertion\": \"Implement the `insert` method to add words character by character, creating nodes as needed.\",\n    \"Step 3 - Search\": \"Implement the `search` method to check if a word exists in the Trie, returning true if it exists.\",\n    \"Step 4 - Prefix Search\": \"Implement the `startsWith` method to check if any word in the Trie starts with a given prefix.\",\n    \"Step 5 - Handle Constraints\": \"Ensure the Trie can handle up to 2000-character words and up to 30,000 operations efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": [\n        \"Trie\",\n        \"insert\",\n        \"search\",\n        \"search\",\n        \"startsWith\",\n        \"insert\",\n        \"search\"\n      ],\n      \"params\": [\n        [],\n        [\n          \"apple\"\n        ],\n        [\n          \"apple\"\n        ],\n        [\n          \"app\"\n        ],\n        [\n          \"app\"\n        ],\n        [\n          \"app\"\n        ],\n        [\n          \"app\"\n        ]\n      ],\n      \"output\": [\n        null,\n        null,\n        true,\n        false,\n        true,\n        null,\n        true\n      ],\n      \"explanation\": \"The Trie supports insertion, full word search, and prefix search as expected.\"\n    },\n    {\n      \"input\": [\n        \"Trie\",\n        \"insert\",\n        \"startsWith\",\n        \"search\"\n      ],\n      \"params\": [\n        [],\n        [\n          \"banana\"\n        ],\n        [\n          \"ban\"\n        ],\n        [\n          \"ban\"\n        ]\n      ],\n      \"output\": [\n        null,\n        null,\n        true,\n        false\n      ],\n      \"explanation\": \"The word 'banana' exists in the Trie, and the prefix 'ban' matches, but 'ban' as a word does not exist.\"\n    }\n  ],\n  \"constraints\": {\n    \"word_length\": \"1 <= word.length, prefix.length <= 2000\",\n    \"character_set\": \"Lowercase English letters only\",\n    \"operation_count\": \"At most 30,000 operations in total for `insert`, `search`, and `startsWith`\"\n  },\n  \"follow_up\": \"Can you optimize the Trie to reduce memory usage without sacrificing performance?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the boundary of the points."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `trees` where `trees[i] = [xi, yi]` represents the coordinates of a tree in a garden, compute the minimal set of points that form the boundary of the convex hull enclosing all trees. Use the Monotone Chain algorithm to efficiently compute this hull.\",\n  \"objective\": \"Identify the points that are on the perimeter of the convex hull enclosing the trees, ensuring the fence encloses all the trees with the minimal rope length.\",\n  \"meta_prompt\": {\n    \"Step 1 - Sort Points\": \"Sort all points by x-coordinate values in ascending order. If two points have the same x-coordinate, sort them by y-coordinate.\",\n    \"Step 2 - Build Lower Hull\": \"Traverse the sorted points and add them to the hull. For each new point, check the last two points on the hull and verify if adding the current point creates a counterclockwise turn. If not, remove the last point from the hull until a counterclockwise turn is achieved.\",\n    \"Step 3 - Build Upper Hull\": \"Traverse the sorted points in reverse order to form the upper portion of the hull using the same process as in Step 2.\",\n    \"Step 4 - Combine Hulls\": \"Combine the points from the lower and upper hulls to form the complete convex hull. Ensure to remove any duplicates.\",\n    \"Final Check - Constraints Verification\": \"Verify the algorithm satisfies constraints where `1 <= trees.length <= 3000`, all points are unique, and coordinates are within `0 <= xi, yi <= 100`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"trees\": [\n          [\n            1,\n            1\n          ],\n          [\n            2,\n            2\n          ],\n          [\n            2,\n            0\n          ],\n          [\n            2,\n            4\n          ],\n          [\n            3,\n            3\n          ],\n          [\n            4,\n            2\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          1,\n          1\n        ],\n        [\n          2,\n          0\n        ],\n        [\n          4,\n          2\n        ],\n        [\n          3,\n          3\n        ],\n        [\n          2,\n          4\n        ]\n      ],\n      \"explanation\": \"Points on the convex hull are identified, excluding the point [2, 2] which lies inside the boundary.\"\n    },\n    {\n      \"input\": {\n        \"trees\": [\n          [\n            1,\n            2\n          ],\n          [\n            2,\n            2\n          ],\n          [\n            4,\n            2\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          1,\n          2\n        ],\n        [\n          2,\n          2\n        ],\n        [\n          4,\n          2\n        ]\n      ],\n      \"explanation\": \"The points form a straight line, which is the convex hull.\"\n    }\n  ],\n  \"constraints\": {\n    \"point_range\": \"1 <= trees.length <= 3000\",\n    \"coordinate_range\": \"0 <= xi, yi <= 100\",\n    \"uniqueness\": \"All given points are unique.\"\n  },\n  \"follow_up\": \"Investigate how the algorithm can be adapted to handle non-unique points or additional constraints, such as minimizing the number of points returned on the hull.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the sum of elements in a submatrix."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a 2D matrix `matrix`, design a class `NumMatrix` that can efficiently compute the sum of elements in any submatrix defined by its upper-left corner `(row1, col1)` and lower-right corner `(row2, col2)`. Ensure the method `sumRegion` has an O(1) time complexity.\",\n  \"objective\": \"Preprocess the matrix to allow constant-time sum queries for any submatrix. The preprocessing should take O(m * n) time and use O(m * n) additional space.\",\n  \"meta_prompt\": {\n    \"Step 1 - Preprocessing with Prefix Sums\": \"Precompute a prefix sum matrix `prefix` where `prefix[i][j]` contains the sum of elements from `(0, 0)` to `(i, j)`. Use this prefix sum to compute any submatrix sum efficiently.\",\n    \"Step 2 - Efficient Sum Query\": \"Use the formula:\\n`sumRegion(row1, col1, row2, col2) = prefix[row2][col2] - prefix[row1-1][col2] - prefix[row2][col1-1] + prefix[row1-1][col1-1]` (adjust indices for edge cases).\",\n    \"Step 3 - Edge Cases\": \"Handle edge cases where:\\n1. The submatrix touches the borders of the matrix (e.g., `row1 = 0` or `col1 = 0`).\\n2. The entire matrix is queried.\",\n    \"Step 4 - Complexity Analysis\": \"Ensure that preprocessing takes O(m * n) and each query is O(1).\",\n    \"Step 5 - Robustness\": \"Validate inputs to `sumRegion` to ensure they satisfy `0 <= row1 <= row2 < m` and `0 <= col1 <= col2 < n`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            3,\n            0,\n            1,\n            4,\n            2\n          ],\n          [\n            5,\n            6,\n            3,\n            2,\n            1\n          ],\n          [\n            1,\n            2,\n            0,\n            1,\n            5\n          ],\n          [\n            4,\n            1,\n            0,\n            1,\n            7\n          ],\n          [\n            1,\n            0,\n            3,\n            0,\n            5\n          ]\n        ],\n        \"queries\": [\n          [\n            2,\n            1,\n            4,\n            3\n          ],\n          [\n            1,\n            1,\n            2,\n            2\n          ],\n          [\n            1,\n            2,\n            2,\n            4\n          ]\n        ]\n      },\n      \"output\": [\n        8,\n        11,\n        12\n      ],\n      \"explanation\": \"Using the precomputed prefix sums, compute the sum for each submatrix efficiently.\"\n    },\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            1,\n            2\n          ],\n          [\n            3,\n            4\n          ]\n        ],\n        \"queries\": [\n          [\n            0,\n            0,\n            1,\n            1\n          ],\n          [\n            1,\n            0,\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": [\n        10,\n        7\n      ],\n      \"explanation\": \"Sum of the entire matrix is 10, and the sum of the bottom-right submatrix is 7.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_dimensions\": \"1 <= m, n <= 200\",\n    \"element_range\": \"-10^4 <= matrix[i][j] <= 10^4\",\n    \"query_range\": \"0 <= row1 <= row2 < m, 0 <= col1 <= col2 < n\",\n    \"query_count\": \"At most 10^4 calls to `sumRegion`.\"\n  },\n  \"follow_up\": \"How would you adapt your solution to handle dynamic updates to the matrix while maintaining efficient query times?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given two strings, `order` and `s`. Permute the characters of `s` to match the order given in `order`."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given two strings, `order` and `s`. The string `order` contains characters that have been sorted in some custom order. The goal is to permute the characters of string `s` so that they match the custom order in `order`. Specifically, if character `x` occurs before character `y` in `order`, then `x` should appear before `y` in the permuted string. Characters in `s` that do not appear in `order` can be placed in any order in the resulting string.\",\n  \"objective\": \"Given two strings, `order` and `s`, return a permutation of `s` that respects the order specified in `order`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The task is to reorder the string `s` according to the custom order given in `order`. Any characters in `s` that do not appear in `order` can be placed at the end of the string. The main challenge lies in ensuring the correct order of characters that are present in `order` while maintaining the positions of those not included in `order`.\",\n    \"Step 2 - Approach\": \"You can map each character in `order` to its index and use this map to determine the order of characters in `s`. First, place the characters that are in `order` in the correct order, and then append the remaining characters from `s` (those not in `order`) at the end in any order.\",\n    \"Step 3 - Plan\": \"1. Create a dictionary to store the index of each character in `order`. 2. Sort the characters of `s` based on their order in the dictionary. 3. Append the remaining characters from `s` that are not in `order`. Return the resulting string.\",\n    \"Step 4 - Edge Cases\": \"Ensure to handle cases where all characters of `s` are included in `order` or none are, and handle both small and large strings efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"order\": \"cba\",\n        \"s\": \"abcd\"\n      },\n      \"output\": \"cbad\",\n      \"explanation\": \"The order of 'a', 'b', and 'c' should be 'c', 'b', and 'a' based on the `order` string. The character 'd' is not in `order`, so it can appear at the end in any position.\"\n    },\n    {\n      \"input\": {\n        \"order\": \"cbafg\",\n        \"s\": \"abcd\"\n      },\n      \"output\": \"cbad\",\n      \"explanation\": \"The order 'c', 'b', 'a' should be respected, and the character 'd' can be placed at any position.\"\n    }\n  ],\n  \"constraints\": {\n    \"order_length\": \"1 <= order.length <= 26\",\n    \"s_length\": \"1 <= s.length <= 200\",\n    \"characters\": \"order and s consist of lowercase English letters, and all characters in `order` are unique.\"\n  },\n  \"follow_up\": \"What if the input strings `order` and `s` were allowed to contain uppercase letters as well? How would this impact the solution?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the h-index of a researcher given their citation counts."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `citations` where `citations[i]` represents the number of citations for the `i-th` paper, calculate the h-index of the researcher. The h-index is defined as the maximum value of `h` such that the researcher has at least `h` papers with `h` or more citations each.\",\n  \"objective\": \"Design an efficient algorithm to compute the h-index by sorting or leveraging counting techniques to minimize time complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the h-index measures the impact of a researcher's work by balancing the number of highly cited papers and the number of citations.\",\n    \"Step 2 - Sorting Approach\": \"Sort the citations array in descending order. Iterate through the sorted array to find the maximum value of `h` such that `citations[i] >= i + 1`.\",\n    \"Step 3 - Counting Approach for Large Inputs\": \"Use a counting sort-like technique to create a frequency array for citation counts. Aggregate frequencies from high to low to find the h-index without fully sorting the input.\",\n    \"Step 4 - Edge Cases\": \"Handle cases where all citation counts are zero (h-index is 0) or where all papers have the same number of citations.\",\n    \"Step 5 - Output\": \"Return the calculated h-index as an integer.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"citations\": [\n          3,\n          0,\n          6,\n          1,\n          5\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The researcher has 3 papers with at least 3 citations each.\"\n    },\n    {\n      \"input\": {\n        \"citations\": [\n          1,\n          3,\n          1\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The researcher has 1 paper with at least 1 citation.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"1 <= citations.length <= 5000\",\n    \"citation_count\": \"0 <= citations[i] <= 1000\"\n  },\n  \"follow_up\": \"Can you optimize the solution to O(n) time complexity by using a counting sort-based method?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the longest sequence in an array of numbers."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums`, where `nums` is a permutation of numbers from the range `[0, n - 1]`, build a sequence starting at each element `nums[k]` by repeatedly indexing through `nums` using the value at the current position. Continue until a duplicate is encountered, and track the length of each sequence. Return the longest sequence found.\",\n  \"objective\": \"Implement an efficient solution by leveraging a visited array to mark indices that have already been processed, avoiding redundant calculations for previously visited elements.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Visited Array\": \"Create a `visited` array initialized to `false`, representing that no elements have been visited yet. This will help in marking elements as processed, preventing duplicate calculations.\",\n    \"Step 2 - Iterate Over Each Starting Index\": \"For each index `i` in `nums`, if `i` has not been visited, initialize `count = 0` and set `current = i` to start a new sequence from `nums[i]`.\",\n    \"Step 3 - Track the Sequence Length Using Visited Array\": \"While `current` has not been visited, increment `count`, mark `current` as visited, and update `current` to `nums[current]` to continue the sequence. This will traverse through the sequence defined by the current cycle, marking all elements as visited to avoid recalculating for future starting indices.\",\n    \"Step 4 - Track and Return the Longest Sequence\": \"After each sequence completes, update the maximum sequence length found so far if `count` is greater than the previous maximum. Once all indices have been checked, return the maximum sequence length.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution handles the constraints effectively, especially with large input sizes up to `10^5`, by using an O(n) approach.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          5,\n          4,\n          0,\n          3,\n          1,\n          6,\n          2\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"The longest sequence begins at index 0: {nums[0], nums[5], nums[6], nums[2]} = {5, 6, 2, 0}, length = 4.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          1,\n          2\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"Each element forms a separate set by itself, so the longest length is 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10^5\",\n    \"value_range\": \"0 <= nums[i] < nums.length\"\n  },\n  \"follow_up\": \"Explore optimizing space by using in-place marking techniques if allowed, where `nums` could serve as a marker without a separate visited array.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the smallest heater radius needed to cover all houses."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the positions of `houses` and `heaters` on a horizontal line, find the minimum radius of heaters required to ensure that every house can be warmed. A house is considered warmed if it is within the radius of at least one heater. The heaters all share the same warm radius.\",\n  \"objective\": \"Design an algorithm that calculates the minimum radius such that all houses are covered efficiently, minimizing computation time for large input sizes.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Analyze the positions of houses and heaters. Each heater has a range defined by its position and radius. The goal is to ensure that every house lies within the range of at least one heater.\",\n    \"Step 2 - Sorting for Optimization\": \"Sort the arrays `houses` and `heaters` to simplify the process of determining the closest heater for each house.\",\n    \"Step 3 - Binary Search for Closest Heater\": \"For each house, use binary search to find the nearest heater position. Calculate the distance to this heater and track the maximum distance needed across all houses.\",\n    \"Step 4 - Radius Calculation\": \"The minimum radius is the maximum distance required for any house to reach a heater. Ensure that the solution works efficiently for large input sizes, leveraging sorting and binary search.\",\n    \"Step 5 - Edge Cases\": \"Consider edge cases such as only one house or one heater, very large values for positions, and houses or heaters placed at the extremes of the range.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"houses\": [\n          1,\n          2,\n          3\n        ],\n        \"heaters\": [\n          2\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The heater at position 2 covers all houses with a radius of 1.\"\n    },\n    {\n      \"input\": {\n        \"houses\": [\n          1,\n          2,\n          3,\n          4\n        ],\n        \"heaters\": [\n          1,\n          4\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"Heaters at positions 1 and 4 cover all houses with a radius of 1.\"\n    },\n    {\n      \"input\": {\n        \"houses\": [\n          1,\n          5\n        ],\n        \"heaters\": [\n          2\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The heater at position 2 requires a radius of 3 to cover houses at positions 1 and 5.\"\n    }\n  ],\n  \"constraints\": {\n    \"houses_length\": \"1 <= houses.length <= 3 * 10^4\",\n    \"heaters_length\": \"1 <= heaters.length <= 3 * 10^4\",\n    \"houses_positions\": \"1 <= houses[i] <= 10^9\",\n    \"heaters_positions\": \"1 <= heaters[i] <= 10^9\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"How can you further optimize the algorithm to handle extremely large datasets?\",\n    \"question_2\": \"Can this approach be extended to a 2D grid or other geometric scenarios?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given an array of strings, delete some columns to make each string lexicographically sorted. Find the minimum number of columns to delete."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an array of `n` strings, each of the same length. The goal is to delete some set of columns such that each string in the resulting array is lexicographically sorted. The task is to find the minimum number of columns that need to be deleted to achieve this.\",\n  \"objective\": \"Given an array of strings, return the minimum number of columns that must be deleted so that each string is lexicographically sorted after the deletion. A string is lexicographically sorted if each character is less than or equal to the next one.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We are given a set of strings. After deleting certain columns, we need each string to be in lexicographical order. The challenge is to determine the fewest number of columns to delete to make the strings sorted in this way.\",\n    \"Step 2 - Approach\": \"The basic approach would involve checking column by column to determine whether it violates the lexicographical order when compared to the string below. If a column causes a violation, it should be deleted.\",\n    \"Step 3 - Algorithm Design\": \"We can iterate through each column and check if removing it helps in maintaining lexicographical order across all the strings. If a violation occurs, the column is marked for deletion.\",\n    \"Step 4 - Code Efficiency\": \"The solution should iterate over the strings and columns efficiently, leading to a time complexity of O(n * m), where n is the number of strings and m is the length of each string.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"strs\": [\n          \"babca\",\n          \"bbazb\"\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"After deleting columns 0, 1, and 4, the strings become ['bc', 'az'], which are lexicographically sorted.\"\n    },\n    {\n      \"input\": {\n        \"strs\": [\n          \"edcba\"\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"Since the only string is not lexicographically sorted, we must delete all columns to make it sorted.\"\n    },\n    {\n      \"input\": {\n        \"strs\": [\n          \"ghi\",\n          \"def\",\n          \"abc\"\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"All strings are already lexicographically sorted, so no columns need to be deleted.\"\n    }\n  ],\n  \"constraints\": {\n    \"input_size\": \"1 <= strs.length <= 100\",\n    \"string_length\": \"1 <= strs[i].length <= 100\",\n    \"characters\": \"Each string contains lowercase English letters.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle larger arrays or longer strings more efficiently? Consider dynamic programming or greedy approaches.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the length of the longest palindromic subsequence in a string."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s`, find the length of the longest palindromic subsequence within `s`. A subsequence is a sequence that can be derived by deleting some or no characters from another sequence while maintaining the order of the remaining characters.\",\n  \"objective\": \"Implement an optimized dynamic programming solution that calculates the longest palindromic subsequence using two 1D arrays to track subsequence lengths efficiently, thus minimizing space usage.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The task involves finding the length of the longest palindromic subsequence in `s`. A palindromic subsequence reads the same backward and forward, and this length must be computed efficiently.\",\n    \"Step 2 - State Transition and Recursive Cases\": \"Use dynamic programming to build up solutions from smaller substrings. Define the state transitions as follows: if `s[i] == s[j]`, then `dp[i][j] = 2 + dp[i + 1][j - 1]`. Otherwise, `dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])`.\",\n    \"Step 3 - Space Optimization with 1D Arrays\": \"Since each `dp[i][j]` value depends only on `dp[i + 1][j]`, `dp[i][j - 1]`, and `dp[i + 1][j - 1]`, optimize space by using two 1D arrays `dp` and `dpPrev`. Update `dp[j]` for the current row while using `dpPrev[j]` for the previous row\\u2019s values.\",\n    \"Step 4 - Iterative DP Computation\": \"Run an outer loop from `i = n - 1` to `0` and an inner loop from `j = i + 1` to `n - 1`. At each step, update `dp[j]` based on whether `s[i] == s[j]` and copy `dp` to `dpPrev` at the end of each `i` iteration.\",\n    \"Step 5 - Complexity and Constraints\": \"The solution has a time complexity of O(n^2) and space complexity of O(n), which is efficient given constraints where `1 <= s.length <= 1000`.\",\n    \"Final Check - Constraints Verification\": \"Ensure the solution works within constraints by handling up to 1000 characters, using only necessary space, and correctly tracking the longest palindromic subsequence length.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"bbbab\"\n      },\n      \"output\": 4,\n      \"explanation\": \"The longest palindromic subsequence is 'bbbb', which has a length of 4.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"cbbd\"\n      },\n      \"output\": 2,\n      \"explanation\": \"The longest palindromic subsequence is 'bb', which has a length of 2.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length_range\": \"1 <= s.length <= 1000\",\n    \"character_type\": \"s consists only of lowercase English letters.\"\n  },\n  \"follow_up\": \"Could you implement this solution with a single 1D array, modifying it in-place to further reduce space usage while retaining efficiency?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Calculate the total score in a baseball game based on operations like adding, removing, or manipulating scores."}, {"role": "assistant", "content": "{\n  \"description\": \"Calculate the total score in a baseball game based on a list of operations that add, remove, or manipulate scores according to specific rules.\",\n  \"objective\": \"Use a stack to maintain the scores and efficiently handle operations that depend on the most recent scores.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Stack\": \"Create an empty stack to store the valid scores for each round.\",\n    \"Step 2 - Process Operations\": \"Iterate through the list of operations. For each operation, handle it based on its type:\",\n    \"Step 3 - Handle Integer Scores\": \"If the operation is an integer, convert it to an integer and push it onto the stack.\",\n    \"Step 4 - Handle 'C' Operation\": \"If the operation is 'C', pop the last score from the stack to invalidate it.\",\n    \"Step 5 - Handle 'D' Operation\": \"If the operation is 'D', double the last score on the stack and push the result onto the stack.\",\n    \"Step 6 - Handle '+' Operation\": \"If the operation is '+', sum the last two scores on the stack and push the result onto the stack.\",\n    \"Step 7 - Compute Total\": \"After processing all operations, compute the total sum of the scores in the stack and return it.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"ops\": [\n          \"5\",\n          \"2\",\n          \"C\",\n          \"D\",\n          \"+\"\n        ]\n      },\n      \"output\": 30,\n      \"explanation\": \"After processing the operations, the valid scores are [5, 10, 15]. The total sum is 30.\"\n    },\n    {\n      \"input\": {\n        \"ops\": [\n          \"5\",\n          \"-2\",\n          \"4\",\n          \"C\",\n          \"D\",\n          \"9\",\n          \"+\",\n          \"+\"\n        ]\n      },\n      \"output\": 27,\n      \"explanation\": \"The valid scores are [5, -2, -4, 9, 5, 14]. The total sum is 27.\"\n    },\n    {\n      \"input\": {\n        \"ops\": [\n          \"1\",\n          \"C\"\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"The single score '1' is invalidated by the 'C' operation. The total sum is 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"operations_length\": \"1 <= operations.length <= 1000\",\n    \"operation_types\": \"operations[i] is 'C', 'D', '+', or an integer in [-3 * 10^4, 3 * 10^4]\",\n    \"valid_operations\": \"'+' requires at least two previous scores; 'C' and 'D' require at least one previous score.\"\n  },\n  \"follow_up\": \"Discuss the time complexity of this stack-based solution and its scalability for larger inputs.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find all duplicate subtrees in a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Identify all duplicate subtrees in a binary tree and return the root node of one instance for each type of duplicate subtree.\",\n  \"objective\": \"Use postorder traversal to assign unique IDs to subtrees based on their structure and node values, and detect duplicates efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Data Structures\": \"Create a hash map tripletToID to map triplets (left subtree ID, root value, right subtree ID) to unique IDs, and another map cnt to count occurrences of each subtree ID.\",\n    \"Step 2 - Define Recursive Function\": \"Implement a recursive function traverse(node) that processes subtrees using postorder traversal, generates triplets, assigns unique IDs, and tracks duplicates.\",\n    \"Step 3 - Detect and Store Duplicates\": \"When a subtree ID occurs for the second time during traversal, add the root node of this duplicate subtree to the result list.\",\n    \"Step 4 - Return Results\": \"Invoke traverse(root) and return the list of root nodes of all detected duplicate subtrees.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2,\n          3,\n          4,\n          null,\n          2,\n          4,\n          null,\n          null,\n          4\n        ]\n      },\n      \"output\": [\n        [\n          2,\n          4\n        ],\n        [\n          4\n        ]\n      ],\n      \"explanation\": \"The subtree [2, 4] and [4] appear more than once in the tree, so their root nodes are returned.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          2,\n          1,\n          1\n        ]\n      },\n      \"output\": [\n        [\n          1\n        ]\n      ],\n      \"explanation\": \"The subtree [1] is a duplicate and its root node is returned.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          2,\n          2,\n          2,\n          3,\n          null,\n          3,\n          null\n        ]\n      },\n      \"output\": [\n        [\n          2,\n          3\n        ],\n        [\n          3\n        ]\n      ],\n      \"explanation\": \"The subtree [2, 3] and [3] are duplicates and their root nodes are returned.\"\n    }\n  ],\n  \"constraints\": {\n    \"nodes_range\": \"1 <= number of nodes <= 5000\",\n    \"node_values_range\": \"-200 <= Node.val <= 200\"\n  },\n  \"follow_up\": \"Analyze the time complexity of the approach and discuss how the use of unique IDs and hash maps optimizes the detection of duplicate subtrees.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "A laser starts from the southwest corner of a room and bounces off the walls. Find which receptor the ray meets first."}, {"role": "assistant", "content": "{\n  \"description\": \"In a special square room with mirrors on each wall, a laser ray starts from the southwest corner and reflects off the walls. The room has a square shape with walls of length `p`. There are receptors at the corners of the room, except for the southwest corner. The ray initially meets the east wall at a distance `q` from the `0th` receptor. Your task is to determine which receptor (0, 1, or 2) the ray meets first after bouncing off the walls.\",\n  \"objective\": \"Design an efficient algorithm to calculate which receptor the laser ray meets first, based on the given room size `p` and the initial distance `q` from the `0th` receptor on the east wall.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The problem involves simulating a laser ray that starts from the southwest corner of a square room with mirrors. The ray reflects off the walls, and the goal is to find out which of the receptors (located at the east, north, or west walls) the ray meets first.\",\n    \"Step 2 - Initial Approach\": \"Consider the path of the ray as it reflects across the room. The key idea is to track the ray's movement after each reflection and determine when it reaches one of the receptors.\",\n    \"Step 3 - Algorithmic Approach\": \"The ray's trajectory will follow a predictable pattern as it reflects off the walls. Start by considering the ray's initial position on the east wall, and after each reflection, track its distance relative to the receptors. This can be modeled by determining the number of times the ray crosses the walls and checking if it meets a receptor after each reflection.\",\n    \"Step 4 - Output Format\": \"Return the number (0, 1, or 2) of the receptor that the ray first meets. Make sure the code handles all cases efficiently, considering the constraints where `1 <= q <= p <= 1000`.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Optimize the solution by avoiding unnecessary simulations and ensuring that the ray's path can be calculated directly. Handle edge cases like small room sizes and reflections that happen at various points on the walls.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"p\": 2,\n        \"q\": 1\n      },\n      \"output\": 2,\n      \"explanation\": \"The ray meets receptor 2 when it gets reflected back to the left wall.\"\n    },\n    {\n      \"input\": {\n        \"p\": 3,\n        \"q\": 1\n      },\n      \"output\": 1,\n      \"explanation\": \"The ray meets receptor 1 when it reaches the north wall.\"\n    }\n  ],\n  \"constraints\": {\n    \"p_range\": \"1 <= q <= p <= 1000\"\n  },\n  \"follow_up\": \"Can you improve the solution to compute the result without simulating each reflection, possibly using mathematical patterns or modular arithmetic?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the square root of a number rounded down to the nearest integer."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a non-negative integer `x`, return the square root of `x` rounded down to the nearest integer. You must not use any built-in exponentiation or square root functions.\",\n  \"objective\": \"Design an efficient algorithm to compute the integer square root of `x` using iterative or binary search methods.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task is to compute the square root of `x`, truncating the decimal part if necessary. The result should be the largest integer `r` such that `r * r <= x`.\",\n    \"Step 2 - Binary Search Approach\": \"Use binary search to find the integer square root efficiently. Set the search range between 0 and `x`, and use the midpoint to test `mid * mid <= x`.\",\n    \"Step 3 - Optimization with Newton's Method\": \"Optionally implement Newton's method for faster convergence in finding the square root, starting with an initial guess and iteratively improving the result.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the algorithm handles constraints such as `0 <= x <= 2^31 - 1` efficiently and avoids overflow issues during calculations.\",\n    \"Step 5 - Edge Cases\": \"Handle edge cases like `x = 0` (result is 0), `x = 1` (result is 1), or very large values of `x` near `2^31 - 1`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"x\": 4\n      },\n      \"output\": 2,\n      \"explanation\": \"The square root of 4 is 2, so we return 2.\"\n    },\n    {\n      \"input\": {\n        \"x\": 8\n      },\n      \"output\": 2,\n      \"explanation\": \"The square root of 8 is approximately 2.82842, which is truncated to 2.\"\n    },\n    {\n      \"input\": {\n        \"x\": 0\n      },\n      \"output\": 0,\n      \"explanation\": \"The square root of 0 is 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"input_range\": \"0 <= x <= 2^31 - 1\",\n    \"no_exponentiation\": \"You must not use built-in square root or power functions.\"\n  },\n  \"follow_up\": \"Can you extend the algorithm to calculate the square root up to a specific number of decimal places without using built-in functions?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a list of points, find the closest ones to the origin."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of `points`, where `points[i] = [xi, yi]` represents a point on the **X-Y** plane and an integer `k`, return the `k` closest points to the origin `(0, 0)`. The distance between two points on the X-Y plane is calculated using the Euclidean distance formula, which is `\\u221a(x1 - x2)\\u00b2 + (y1 - y2)\\u00b2`. You may return the answer in any order, and the answer is guaranteed to be unique (except for the order).\",\n  \"objective\": \"Write a function that identifies the `k` closest points to the origin from a given list of points on a 2D plane, where the distance is calculated using the Euclidean distance formula.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"You are given multiple points in a 2D plane and need to find the closest points to the origin. The Euclidean distance formula will be used to calculate the proximity of each point to the origin. The goal is to return the closest `k` points.\",\n    \"Step 2 - Distance Calculation\": \"For each point `[xi, yi]`, calculate the Euclidean distance to the origin `(0, 0)`. This can be simplified by computing the square of the distance (avoiding computing the square root) to maintain efficiency and avoid potential precision issues.\",\n    \"Step 3 - Sorting or Selection\": \"Once distances are calculated, the `k` closest points need to be identified. You can achieve this by sorting the points based on their distance and selecting the first `k` points, or you can use a more efficient selection algorithm like a heap.\",\n    \"Step 4 - Constraints Handling\": \"Consider the constraints, including large arrays of up to 10^4 points, ensuring your solution can handle the maximum input size efficiently.\",\n    \"Step 5 - Optimization\": \"Focus on the performance of the solution to minimize time complexity, especially when sorting or selecting the closest points.\",\n    \"Step 6 - Edge Cases\": \"Handle edge cases like when there is only one point or when multiple points are at the same distance from the origin.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"points\": [\n          [\n            1,\n            3\n          ],\n          [\n            -2,\n            2\n          ]\n        ],\n        \"k\": 1\n      },\n      \"output\": [\n        [\n          -2,\n          2\n        ]\n      ],\n      \"explanation\": \"The point (-2, 2) is closer to the origin than (1, 3).\"\n    },\n    {\n      \"input\": {\n        \"points\": [\n          [\n            3,\n            3\n          ],\n          [\n            5,\n            -1\n          ],\n          [\n            -2,\n            4\n          ]\n        ],\n        \"k\": 2\n      },\n      \"output\": [\n        [\n          3,\n          3\n        ],\n        [\n          -2,\n          4\n        ]\n      ],\n      \"explanation\": \"The points (3, 3) and (-2, 4) are the two closest points to the origin.\"\n    }\n  ],\n  \"constraints\": {\n    \"k\": \"1 <= k <= points.length <= 10^4\",\n    \"coordinates_range\": \"-10^4 < xi, yi < 10^4\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm to reduce time complexity, especially when handling large input sizes?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find if the array has the same number at two close indices."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if there exist two distinct indices `i` and `j` in an array such that `nums[i] == nums[j]` and the absolute difference between `i` and `j` is at most `k`.\",\n  \"objective\": \"Implement an efficient solution using a sliding window or hash map to minimize time complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Understand that you need to compare indices of duplicate values while ensuring the difference between the indices is within `k`.\",\n    \"Step 2 - Use Efficient Data Structures\": \"Leverage a hash map to track the last seen index of each value in `nums`.\",\n    \"Step 3 - Prune Out of Range Indices\": \"Ensure indices being considered are within the allowed range by updating the hash map.\",\n    \"Step 4 - Return Result\": \"Return `true` as soon as a valid pair is found; otherwise, return `false`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          1\n        ],\n        \"k\": 3\n      },\n      \"output\": true,\n      \"explanation\": \"Indices 0 and 3 have the same value (1), and abs(0 - 3) = 3 \\u2264 k.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          0,\n          1,\n          1\n        ],\n        \"k\": 1\n      },\n      \"output\": true,\n      \"explanation\": \"Indices 2 and 3 have the same value (1), and abs(2 - 3) = 1 \\u2264 k.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          1,\n          2,\n          3\n        ],\n        \"k\": 2\n      },\n      \"output\": false,\n      \"explanation\": \"No duplicate values satisfy the condition abs(i - j) \\u2264 k.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10^5\",\n    \"value_range\": \"-10^9 <= nums[i] <= 10^9\",\n    \"k_range\": \"0 <= k <= 10^5\"\n  },\n  \"follow_up\": \"How would you handle cases where the array is extremely large and cannot fit into memory entirely?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a grid, return the path taken when you walk around the grid starting from a specific point."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a grid with dimensions `rows x cols` and a starting position `(rStart, cStart)` in the grid. You start at this position, facing east, and walk in a clockwise spiral until you have visited all the positions in the grid. If you move out of bounds, continue walking outside the grid. Your task is to return an array of coordinates representing the order of positions you visit during this walk.\",\n  \"objective\": \"Design an algorithm to simulate the spiral walk, ensuring the traversal covers all cells in the grid and the order of coordinates is correct based on the spiral pattern.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The walk begins at `(rStart, cStart)` and proceeds in a clockwise direction. If you encounter an out-of-bounds position, continue the walk, but keep track of the visited coordinates.\",\n    \"Step 2 - Spiral Movement\": \"You will be moving in a clockwise direction, i.e., east -> south -> west -> north. After completing one direction, you change direction and move to the next cell in the spiral pattern.\",\n    \"Step 3 - Edge Handling\": \"You should handle cases where the walk moves outside the grid, ensuring that once all positions are covered, the walk terminates. Also, ensure that the algorithm accounts for possible revisits to grid boundaries.\",\n    \"Step 4 - Coordinate Tracking\": \"Track the visited coordinates in the correct order, updating your position and direction as you traverse the grid. Return the list of coordinates in the correct sequence.\",\n    \"Final Check - Constraints Verification\": \"Ensure the solution works within the input constraints: 1 <= rows, cols <= 100, and the starting point is within valid grid bounds.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"rows\": 1,\n        \"cols\": 4,\n        \"rStart\": 0,\n        \"cStart\": 0\n      },\n      \"output\": [\n        [\n          0,\n          0\n        ],\n        [\n          0,\n          1\n        ],\n        [\n          0,\n          2\n        ],\n        [\n          0,\n          3\n        ]\n      ],\n      \"explanation\": \"Since the grid is a single row, the walk proceeds left to right in the only row.\"\n    },\n    {\n      \"input\": {\n        \"rows\": 5,\n        \"cols\": 6,\n        \"rStart\": 1,\n        \"cStart\": 4\n      },\n      \"output\": [\n        [\n          1,\n          4\n        ],\n        [\n          1,\n          5\n        ],\n        [\n          2,\n          5\n        ],\n        [\n          2,\n          4\n        ],\n        [\n          2,\n          3\n        ],\n        [\n          1,\n          3\n        ],\n        [\n          0,\n          3\n        ],\n        [\n          0,\n          4\n        ],\n        [\n          0,\n          5\n        ],\n        [\n          3,\n          5\n        ],\n        [\n          3,\n          4\n        ],\n        [\n          3,\n          3\n        ],\n        [\n          3,\n          2\n        ],\n        [\n          2,\n          2\n        ],\n        [\n          1,\n          2\n        ],\n        [\n          0,\n          2\n        ],\n        [\n          4,\n          5\n        ],\n        [\n          4,\n          4\n        ],\n        [\n          4,\n          3\n        ],\n        [\n          4,\n          2\n        ],\n        [\n          4,\n          1\n        ],\n        [\n          3,\n          1\n        ],\n        [\n          2,\n          1\n        ],\n        [\n          1,\n          1\n        ],\n        [\n          0,\n          1\n        ],\n        [\n          4,\n          0\n        ],\n        [\n          3,\n          0\n        ],\n        [\n          2,\n          0\n        ],\n        [\n          1,\n          0\n        ],\n        [\n          0,\n          0\n        ]\n      ],\n      \"explanation\": \"The walk proceeds in a clockwise direction starting from the given position and visits all the grid cells.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_size\": \"1 <= rows, cols <= 100\",\n    \"starting_position\": \"0 <= rStart < rows, 0 <= cStart < cols\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm for larger grids?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the index of a target element in a sorted array."}, {"role": "assistant", "content": "{\n  \"description\": \"Implement a binary search algorithm to find the index of a target element in a sorted array or return -1 if the target is not present.\",\n  \"objective\": \"Write an efficient function that uses O(log n) runtime complexity to locate the target element in the array.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Initialize two pointers, `left` and `right`, to define the search space (`left = 0`, `right = nums.length - 1`).\",\n    \"Step 2\": \"While `left <= right`, calculate the middle index as `mid = left + (right - left) // 2` to avoid overflow.\",\n    \"Step 3\": \"Compare the middle value `nums[mid]` with the `target`:\",\n    \"Step 4\": \"If `nums[mid]` equals `target`, return `mid` as the index of the target.\",\n    \"Step 5\": \"If `nums[mid] < target`, adjust the search space to the right (`left = mid + 1`).\",\n    \"Step 6\": \"If `nums[mid] > target`, adjust the search space to the left (`right = mid - 1`).\",\n    \"Step 7\": \"If the loop terminates without finding the target, return `-1`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          -1,\n          0,\n          3,\n          5,\n          9,\n          12\n        ],\n        \"target\": 9\n      },\n      \"output\": 4,\n      \"explanation\": \"The target 9 is at index 4 in the array.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          -1,\n          0,\n          3,\n          5,\n          9,\n          12\n        ],\n        \"target\": 2\n      },\n      \"output\": -1,\n      \"explanation\": \"The target 2 is not present in the array, so the function returns -1.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"1 <= nums.length <= 10^4\",\n    \"element_range\": \"-10^4 < nums[i], target < 10^4\",\n    \"uniqueness\": \"All elements in `nums` are unique.\",\n    \"order\": \"`nums` is sorted in ascending order.\"\n  },\n  \"follow_up\": \"Discuss potential edge cases such as an empty array, a single-element array, and handling of very large or very small values of `target` and `nums`.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum number of stickers required to spell out the given target string using a set of stickers."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine the minimum number of stickers required to spell out a given `target` string using a collection of stickers, or return `-1` if it's impossible.\",\n  \"objective\": \"Use dynamic programming with a state-based representation to minimize the number of stickers needed to form the target string.\",\n  \"meta_prompt\": {\n    \"Step 1 - Preprocess Stickers\": \"Convert each sticker into a `Counter` representation that tracks the frequency of characters in each sticker.\",\n    \"Step 2 - Filter Irrelevant Stickers\": \"Remove characters from the stickers that are not present in the `target` string for optimization.\",\n    \"Step 3 - Define State Representation\": \"Represent each state as the remaining letters of the target string that still need to be formed.\",\n    \"Step 4 - Base Case\": \"If the state is an empty string, return 0 as no stickers are needed to form an empty target.\",\n    \"Step 5 - Transition Function\": \"For each sticker, calculate its effect on the current state by subtracting its characters from the target. Recursively calculate the minimum stickers needed for the new state.\",\n    \"Step 6 - Memoization\": \"Store results of computed states in a dictionary to avoid redundant calculations and optimize performance.\",\n    \"Step 7 - Return Result\": \"Return the minimum number of stickers needed for the target. If no valid combination exists, return `-1`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"stickers\": [\n          \"with\",\n          \"example\",\n          \"science\"\n        ],\n        \"target\": \"thehat\"\n      },\n      \"output\": 3,\n      \"explanation\": \"We can use 2 'with' stickers and 1 'example' sticker to form 'thehat'.\"\n    },\n    {\n      \"input\": {\n        \"stickers\": [\n          \"notice\",\n          \"possible\"\n        ],\n        \"target\": \"basicbasic\"\n      },\n      \"output\": -1,\n      \"explanation\": \"It is impossible to form 'basicbasic' with the given stickers.\"\n    }\n  ],\n  \"constraints\": {\n    \"stickers_length\": \"1 <= stickers.length <= 50\",\n    \"sticker_word_length\": \"1 <= stickers[i].length <= 10\",\n    \"target_length\": \"1 <= target.length <= 15\",\n    \"character_set\": \"All strings consist of lowercase English letters.\"\n  },\n  \"follow_up\": \"Discuss the complexity of the dynamic programming approach, including the time complexity `O(2^target.length * n * k)` where `n` is the number of stickers and `k` is the average sticker length, and potential optimizations for reducing state space or pruning redundant calculations.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Flatten a multilevel linked list."}, {"role": "assistant", "content": "{\n  \"title\": \"Flatten Multilevel Doubly Linked List\",\n  \"description\": \"Given the `head` of a multilevel doubly linked list, flatten the list so that all nodes appear in a single-level doubly linked list. The nodes should maintain their order as they appear when traversing the list, where a child list is visited immediately after the parent node.\",\n  \"objective\": \"Write a function `flatten(head: Node) -> Node` to flatten the multilevel linked list.\",\n  \"input\": {\n    \"name\": \"head\",\n    \"type\": \"Node\",\n    \"description\": \"The head node of the multilevel doubly linked list.\",\n    \"constraints\": [\n      \"The number of nodes will not exceed 1000.\",\n      \"Each node has three pointers: `next`, `prev`, and `child`.\",\n      \"`1 <= Node.val <= 10^5`.\"\n    ]\n  },\n  \"output\": {\n    \"type\": \"Node\",\n    \"description\": \"The head of the flattened doubly linked list, with all child pointers set to `null`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          null,\n          null,\n          null,\n          7,\n          8,\n          9,\n          10,\n          null,\n          null,\n          11,\n          12\n        ]\n      },\n      \"output\": [\n        1,\n        2,\n        3,\n        7,\n        8,\n        11,\n        12,\n        9,\n        10,\n        4,\n        5,\n        6\n      ],\n      \"explanation\": \"Nodes in the child lists are inserted after their parent nodes. The child pointers are all set to `null`.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2,\n          null,\n          3\n        ]\n      },\n      \"output\": [\n        1,\n        3,\n        2\n      ],\n      \"explanation\": \"The node `3` is in the child list of `1`. It is moved to the main list.\"\n    },\n    {\n      \"input\": {\n        \"head\": []\n      },\n      \"output\": [],\n      \"explanation\": \"An empty list remains empty after flattening.\"\n    }\n  ],\n  \"hints\": [\n    \"Use a stack to keep track of nodes to visit later.\",\n    \"Handle the `prev` pointer carefully when connecting nodes.\",\n    \"Ensure all `child` pointers are set to `null` in the final list.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Flatten the list in O(n) time, where n is the number of nodes.\",\n    \"constraints\": \"Use O(n) additional space in the worst case, or optimize to O(1) space by using the `child` pointers as temporary storage.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Return all possible strings formed by changing cases of letters in a string."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s`, you can transform every letter individually to be lowercase or uppercase to create another string. Return a list of all possible strings we could create. Return the output in any order.\",\n  \"objective\": \"Generate all possible strings that can be formed by transforming each letter in the input string to either lowercase or uppercase.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The problem requires generating all possible combinations of lowercase and uppercase transformations for the letters in the given string. Digits are not transformed, but letters (both lowercase and uppercase) can each independently be transformed into their other case.\",\n    \"Step 2 - Observations\": \"For each letter in the string, there are two choices: lowercase or uppercase. For digits, no transformation is needed. The total number of combinations is 2 raised to the power of the number of alphabetic characters in the string.\",\n    \"Step 3 - Strategy\": \"We can use a backtracking approach to explore all combinations of uppercase and lowercase for each alphabetic character, while leaving the digits unchanged. For each character, we branch into two possibilities and recursively generate all the combinations.\",\n    \"Step 4 - Approach\": \"We will iterate over the string and for each letter, explore both the lowercase and uppercase versions. For each digit, we simply include it as is. The result will be a collection of all such strings generated from these transformations.\",\n    \"Step 5 - Constraints Consideration\": \"Since the maximum length of the string is 12, the number of possible transformations can go up to 2^12, which is 4096. This is manageable with a recursive or iterative approach.\",\n    \"Step 6 - Optimizing\": \"This problem is generally solved with a backtracking technique, where each decision point (a character to transform) is handled one by one, creating the resulting strings without repeating or missing any combinations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"a1b2\"\n      },\n      \"output\": [\n        \"a1b2\",\n        \"a1B2\",\n        \"A1b2\",\n        \"A1B2\"\n      ],\n      \"explanation\": \"Each letter is either lowercase or uppercase, while the digits remain the same, resulting in 4 different combinations.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"3z4\"\n      },\n      \"output\": [\n        \"3z4\",\n        \"3Z4\"\n      ],\n      \"explanation\": \"The digits '3' and '4' are unchanged, while the letter 'z' can either stay lowercase or become uppercase, resulting in 2 combinations.\"\n    }\n  ],\n  \"constraints\": {\n    \"s_length_range\": \"1 <= s.length <= 12\",\n    \"character_types\": \"The string consists of lowercase English letters, uppercase English letters, and digits.\"\n  },\n  \"follow_up\": \"Can you implement an approach that doesn't use recursion?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create a matrix filled with numbers in spiral order."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a positive integer `n`, generate an `n x n` matrix filled with elements from `1` to `n^2` in spiral order.\",\n  \"objective\": \"Design an efficient algorithm to construct an `n x n` matrix with elements arranged in a spiral pattern, starting from 1 and ending at `n^2`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves filling the matrix in layers, moving right, down, left, and up in a spiral order until all numbers are placed.\",\n    \"Step 2 - Layer-by-Layer Filling\": \"Use four pointers (`top`, `bottom`, `left`, `right`) to define the boundaries of the matrix. Fill the numbers sequentially in the appropriate direction within these boundaries.\",\n    \"Step 3 - Constraints Compliance\": \"Ensure the solution handles constraints such as `1 <= n <= 20` efficiently without unnecessary iterations.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider cases like `n = 1` (single element matrix) and even/odd values of `n` to ensure correct filling of the spiral.\",\n    \"Step 5 - Space Optimization\": \"Avoid using additional data structures; fill the matrix directly during traversal to minimize space overhead.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 3\n      },\n      \"output\": [\n        [\n          1,\n          2,\n          3\n        ],\n        [\n          8,\n          9,\n          4\n        ],\n        [\n          7,\n          6,\n          5\n        ]\n      ],\n      \"explanation\": \"The matrix is filled in a spiral order starting from 1 and ending at 9.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1\n      },\n      \"output\": [\n        [\n          1\n        ]\n      ],\n      \"explanation\": \"For a single element matrix, the output is [[1]].\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size\": \"1 <= n <= 20\",\n    \"element_range\": \"The matrix contains elements from 1 to n^2.\"\n  },\n  \"follow_up\": \"Can you modify the algorithm to generate a spiral matrix for non-square dimensions, such as `m x n` matrices?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Perform a zigzag level order traversal of a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary tree, return the zigzag level order traversal of its nodes' values. Zigzag traversal alternates between left-to-right and right-to-left order at each level.\",\n  \"objective\": \"Design an algorithm to perform a zigzag level order traversal of a binary tree.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that zigzag traversal alternates the order of traversal between levels, requiring careful tracking of traversal direction.\",\n    \"Step 2 - Use a Queue\": \"Use a queue to perform level order traversal, but reverse the node values for alternate levels.\",\n    \"Step 3 - Group Nodes by Level\": \"Collect the values of nodes at each level, applying reversal based on the level index.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider cases such as an empty tree, a single-node tree, and trees with varying numbers of levels.\",\n    \"Step 5 - Optimize\": \"Ensure the solution runs in O(n) time with O(n) space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          9,\n          20,\n          null,\n          null,\n          15,\n          7\n        ]\n      },\n      \"output\": [\n        [\n          3\n        ],\n        [\n          20,\n          9\n        ],\n        [\n          15,\n          7\n        ]\n      ],\n      \"explanation\": \"The first level is left-to-right, the second is right-to-left, and the third is left-to-right.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1\n        ]\n      },\n      \"output\": [\n        [\n          1\n        ]\n      ],\n      \"explanation\": \"A single-node tree results in a single level.\"\n    },\n    {\n      \"input\": {\n        \"root\": []\n      },\n      \"output\": [],\n      \"explanation\": \"An empty tree results in no levels.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 2000\",\n    \"node_values\": \"-100 <= Node.val <= 100\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the next greater number for each element in a circular array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a circular integer array `nums`, return the next greater number for each element in `nums`. The next greater number for an element `x` is the first number that is larger than `x` when moving to the next elements in a circular traversal order. If no greater number exists, return `-1` for that element.\",\n  \"objective\": \"Design an algorithm that efficiently finds the next greater number for each element in a circular array by leveraging a stack-based approach to optimize the search process.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Analyze the input array `nums` as a circular array where the next element after the last is the first element. The goal is to find the next greater number for each element, which may require circular traversal.\",\n    \"Step 2 - Circular Traversal\": \"Consider the need for two passes through `nums`. The first pass processes elements to the right, but without wrapping. The second pass ensures circular traversal is accounted for by revisiting the start of the array.\",\n    \"Step 3 - Using a Stack for Efficient Search\": \"To handle the next greater element search efficiently, maintain a stack that stores indices of elements in `nums`. Starting from the rightmost element and moving left, for each element `nums[i]`, pop elements from the stack as long as they are less than or equal to `nums[i]`. After processing, the stack top gives the next greater element if it exists.\",\n    \"Step 4 - Storing Results and Edge Handling\": \"If no greater element is found for an item after the circular search, return `-1` for that position. This ensures that each element's result is stored accurately in a result array.\",\n    \"Step 5 - Complexity and Stack Management\": \"The use of a stack ensures that each element is processed at most twice, keeping the algorithm time complexity at `O(n)`. Only indices are stored in the stack to handle possible duplicates efficiently.\",\n    \"Final Check - Constraints Verification\": \"Verify that the algorithm operates within constraints (`1 <= nums.length <= 10^4`, `-10^9 <= nums[i] <= 10^9`), handling large arrays and extreme values effectively.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          1\n        ]\n      },\n      \"output\": [\n        2,\n        -1,\n        2\n      ],\n      \"explanation\": \"The first 1's next greater number is 2; the number 2 doesn't have a next greater number; the second 1's next greater number is 2 (found circularly).\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          4,\n          3\n        ]\n      },\n      \"output\": [\n        2,\n        3,\n        4,\n        -1,\n        4\n      ],\n      \"explanation\": \"Each element is matched with its next greater number in circular order. Only the number 4 does not have a next greater number.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 10^4\",\n    \"nums_value_range\": \"-10^9 <= nums[i] <= 10^9\"\n  },\n  \"follow_up\": \"Could you implement a solution that uses constant extra space (apart from the result array), effectively managing the stack to ensure an optimal runtime for large inputs?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Remove the nth node from the end of a linked list."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `head` of a linked list, remove the `nth` node from the end of the list and return the updated `head`. The solution should handle edge cases and aim for a one-pass approach if possible.\",\n  \"objective\": \"Design an algorithm to efficiently remove the `nth` node from the end of the list using constant extra space and, if possible, in one traversal.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves finding and removing the `nth` node from the end of the list. A one-pass approach is recommended for optimal efficiency.\",\n    \"Step 2 - Use Two Pointers for One-Pass Solution\": \"Employ a two-pointer technique where the first pointer starts ahead by `n` nodes, and both pointers move simultaneously until the first pointer reaches the end. This ensures the second pointer is positioned just before the node to be removed.\",\n    \"Step 3 - Handle Edge Cases\": \"Consider scenarios such as a single-node list, removing the first node, and removing the last node.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution adheres to the constraints, such as `1 <= sz <= 30` and `1 <= n <= sz`.\",\n    \"Step 5 - Alternative Approach\": \"If a one-pass solution is not implemented, traverse the list twice: once to count the total nodes and the second time to identify and remove the target node.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2,\n          3,\n          4,\n          5\n        ],\n        \"n\": 2\n      },\n      \"output\": [\n        1,\n        2,\n        3,\n        5\n      ],\n      \"explanation\": \"The second node from the end (value 4) is removed.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          1\n        ],\n        \"n\": 1\n      },\n      \"output\": [],\n      \"explanation\": \"The only node is removed, resulting in an empty list.\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2\n        ],\n        \"n\": 1\n      },\n      \"output\": [\n        1\n      ],\n      \"explanation\": \"The last node (value 2) is removed.\"\n    }\n  ],\n  \"constraints\": {\n    \"list_size\": \"1 <= sz <= 30\",\n    \"node_values\": \"0 <= Node.val <= 100\",\n    \"n_value\": \"1 <= n <= sz\"\n  },\n  \"follow_up\": \"Could you implement the algorithm in one traversal while maintaining constant space?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a string is a valid number."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s`, determine if it represents a **valid number**. A valid number must adhere to specific rules regarding its components (decimal number, integer, optional scientific notation with 'e' or 'E').\",\n  \"objective\": \"Design an efficient algorithm to validate whether the given string is a valid number based on strict parsing rules.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that a valid number can be a decimal or an integer and may optionally include scientific notation with 'e' or 'E'. Each component has specific rules regarding signs, digits, and the position of the dot.\",\n    \"Step 2 - Define Regular Expressions\": \"Construct a regular expression that captures all valid formats of numbers, including optional signs, decimals, and scientific notation.\",\n    \"Step 3 - Iterative Parsing\": \"Alternatively, parse the string character by character to validate its components using a state machine that transitions based on input.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the algorithm handles constraints such as `1 <= s.length <= 20` and accounts for invalid input cases (e.g., misplaced 'e', multiple dots, or invalid characters).\",\n    \"Step 5 - Handle Edge Cases\": \"Consider edge cases such as strings with only signs, a single dot, numbers with leading zeros, or valid scientific notations with positive/negative exponents.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"0\"\n      },\n      \"output\": true,\n      \"explanation\": \"The string '0' is a valid integer.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"e\"\n      },\n      \"output\": false,\n      \"explanation\": \"The string 'e' is not a valid number.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"2e10\"\n      },\n      \"output\": true,\n      \"explanation\": \"The string '2e10' is a valid scientific notation.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"-.9\"\n      },\n      \"output\": true,\n      \"explanation\": \"The string '-.9' is a valid decimal number.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 20\",\n    \"character_set\": \"s consists of digits (`0-9`), '+', '-', '.', 'e', 'E', and spaces are not allowed.\"\n  },\n  \"follow_up\": \"Can you extend this algorithm to validate other types of inputs, such as currency formats or hexadecimal numbers?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given an array of fruits. Pick as many fruits as possible using two baskets. Each basket can hold one type of fruit."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an integer array `fruits` representing the type of fruit produced by trees arranged in a row. You are allowed to pick fruits from two baskets, where each basket can hold only one type of fruit. Your goal is to pick as many fruits as possible, starting from any tree and moving to the right. The picked fruits must fit into the baskets, and you must stop when you reach a tree with a fruit type that doesn't fit into either of the baskets.\",\n  \"objective\": \"Design an efficient algorithm to calculate the maximum number of fruits that can be picked, following the given constraints. The algorithm should handle arrays with up to 100,000 elements.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"You need to traverse the array from any starting point, collecting fruits until you encounter a third type of fruit, at which point you must stop. Each basket can hold one type of fruit.\",\n    \"Step 2 - Approach Overview\": \"You can solve this problem efficiently using a sliding window (two-pointer) approach, where the window size changes dynamically based on the type of fruits encountered.\",\n    \"Step 3 - Sliding Window Approach\": \"Maintain a window of two distinct types of fruits. Expand the window by moving the right pointer and contract the window by moving the left pointer whenever a third fruit type is encountered.\",\n    \"Step 4 - Edge Cases\": \"Consider edge cases where the array has only one type of fruit or where all trees have the same fruit.\",\n    \"Step 5 - Time Complexity\": \"Aim for an O(n) time complexity, where n is the length of the `fruits` array, by ensuring that each element is processed at most twice (once by the right pointer and once by the left pointer).\",\n    \"Final Check - Constraints Verification\": \"Verify the solution handles arrays of size up to 100,000 and returns the result within a reasonable time frame.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"fruits\": [\n          1,\n          2,\n          1\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"We can pick from all 3 trees because there are only two types of fruits: 1 and 2.\"\n    },\n    {\n      \"input\": {\n        \"fruits\": [\n          0,\n          1,\n          2,\n          2\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"We can pick from trees [1, 2, 2] and collect 3 fruits. Starting from the first tree would give us only 2 fruits.\"\n    },\n    {\n      \"input\": {\n        \"fruits\": [\n          1,\n          2,\n          3,\n          2,\n          2\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"We can pick from trees [2, 3, 2, 2], collecting 4 fruits.\"\n    }\n  ],\n  \"constraints\": {\n    \"fruits_length\": \"1 <= fruits.length <= 10^5\",\n    \"fruit_types\": \"0 <= fruits[i] < fruits.length\"\n  },\n  \"follow_up\": \"Can you optimize this solution further for very large arrays by implementing it with a sliding window approach?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if two sentences are similar based on word pairs."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if two sentences are similar based on word equivalence using a union-find data structure to group similar words.\",\n  \"objective\": \"Leverage union-find to efficiently group similar words and verify whether two sentences are similar based on word-by-word similarity.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Verify that the lengths of `sentence1` and `sentence2` are equal. If not, return `false` immediately.\",\n    \"Step 2\": \"Initialize a union-find data structure to represent groups of similar words.\",\n    \"Step 3\": \"Iterate over `similarPairs` and use the union-find structure to group each pair of similar words into the same set.\",\n    \"Step 4\": \"Iterate through all word pairs in `sentence1` and `sentence2`. For each pair, check if the words are either identical or belong to the same set in the union-find structure. If not, return `false`.\",\n    \"Step 5\": \"If all word pairs pass the similarity check, return `true`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"sentence1\": [\n          \"great\",\n          \"acting\",\n          \"skills\"\n        ],\n        \"sentence2\": [\n          \"fine\",\n          \"drama\",\n          \"talent\"\n        ],\n        \"similarPairs\": [\n          [\n            \"great\",\n            \"good\"\n          ],\n          [\n            \"fine\",\n            \"good\"\n          ],\n          [\n            \"drama\",\n            \"acting\"\n          ],\n          [\n            \"skills\",\n            \"talent\"\n          ]\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"Each word pair in `sentence1` and `sentence2` is either identical or belongs to the same set based on the given pairs.\"\n    },\n    {\n      \"input\": {\n        \"sentence1\": [\n          \"I\",\n          \"love\",\n          \"leetcode\"\n        ],\n        \"sentence2\": [\n          \"I\",\n          \"love\",\n          \"onepiece\"\n        ],\n        \"similarPairs\": [\n          [\n            \"manga\",\n            \"onepiece\"\n          ],\n          [\n            \"platform\",\n            \"anime\"\n          ],\n          [\n            \"leetcode\",\n            \"platform\"\n          ],\n          [\n            \"anime\",\n            \"manga\"\n          ]\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"'leetcode' and 'onepiece' are connected through the similarity chain, making the sentences similar.\"\n    },\n    {\n      \"input\": {\n        \"sentence1\": [\n          \"I\",\n          \"love\",\n          \"leetcode\"\n        ],\n        \"sentence2\": [\n          \"I\",\n          \"love\",\n          \"onepiece\"\n        ],\n        \"similarPairs\": [\n          [\n            \"manga\",\n            \"hunterXhunter\"\n          ],\n          [\n            \"platform\",\n            \"anime\"\n          ],\n          [\n            \"leetcode\",\n            \"platform\"\n          ],\n          [\n            \"anime\",\n            \"manga\"\n          ]\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"No similarity chain connects 'leetcode' and 'onepiece', making the sentences dissimilar.\"\n    }\n  ],\n  \"constraints\": {\n    \"sentence_length\": \"1 <= sentence1.length, sentence2.length <= 1000\",\n    \"word_length\": \"1 <= sentence1[i].length, sentence2[i].length <= 20\",\n    \"pairs_length\": \"0 <= similarPairs.length <= 2000\",\n    \"validity\": \"All pairs in `similarPairs` are distinct and consist of valid English words.\"\n  },\n  \"follow_up\": \"Analyze the efficiency of union-find in terms of time and space complexity. Compare its use with adjacency lists or other graph-based approaches for the problem.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Merge overlapping intervals in a list of intervals."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of `intervals` where each interval is represented as `[starti, endi]`, merge all overlapping intervals and return an array of the non-overlapping intervals that cover all input intervals.\",\n  \"objective\": \"Design an efficient algorithm to merge overlapping intervals while ensuring the result is sorted and contains no redundant intervals.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task requires merging intervals with overlapping ranges and returning the merged intervals in sorted order by their start times.\",\n    \"Step 2 - Sorting by Start Time\": \"Sort the intervals by their start times to ensure that overlapping intervals are adjacent in the list.\",\n    \"Step 3 - Merge Intervals\": \"Iterate through the sorted intervals and compare each interval's start time with the end time of the previously merged interval. Merge overlapping intervals by extending the end time.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution efficiently handles constraints such as `1 <= intervals.length <= 10^4` and `0 <= starti <= endi <= 10^4`.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider edge cases such as a single interval (no merging required) or intervals that are already non-overlapping.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"intervals\": [\n          [\n            1,\n            3\n          ],\n          [\n            2,\n            6\n          ],\n          [\n            8,\n            10\n          ],\n          [\n            15,\n            18\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          1,\n          6\n        ],\n        [\n          8,\n          10\n        ],\n        [\n          15,\n          18\n        ]\n      ],\n      \"explanation\": \"Intervals [1, 3] and [2, 6] overlap, so they are merged into [1, 6].\"\n    },\n    {\n      \"input\": {\n        \"intervals\": [\n          [\n            1,\n            4\n          ],\n          [\n            4,\n            5\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          1,\n          5\n        ]\n      ],\n      \"explanation\": \"Intervals [1, 4] and [4, 5] overlap as their end and start times meet.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= intervals.length <= 10^4\",\n    \"interval_range\": \"0 <= starti <= endi <= 10^4\",\n    \"interval_format\": \"Each interval contains exactly two integers representing the start and end times.\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm further to handle extremely large inputs or dynamically update the merged intervals if a new interval is added?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Group words that are anagrams in an array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of strings `strs`, group all the anagrams together. An **Anagram** is a word or phrase formed by rearranging the letters of another word or phrase, using all the original letters exactly once. Return the grouped anagrams in any order.\",\n  \"objective\": \"Design an efficient algorithm to group anagrams, ensuring the solution handles large inputs and adheres to constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves identifying groups of words that are anagrams of each other. Words in the same group will have the same characters in the same frequencies.\",\n    \"Step 2 - Character Sorting Approach\": \"Sort the characters in each string to create a common key for all anagrams. Use this key to group strings into a dictionary.\",\n    \"Step 3 - Alternate Frequency Count Approach\": \"Alternatively, use a frequency count of letters to create a tuple as the key for grouping anagrams.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider edge cases such as an empty string, a single character, or all strings being unique.\",\n    \"Step 5 - Constraints Compliance\": \"Ensure the solution efficiently handles constraints such as `1 <= strs.length <= 10^4` and `0 <= strs[i].length <= 100`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"strs\": [\n          \"eat\",\n          \"tea\",\n          \"tan\",\n          \"ate\",\n          \"nat\",\n          \"bat\"\n        ]\n      },\n      \"output\": [\n        [\n          \"bat\"\n        ],\n        [\n          \"nat\",\n          \"tan\"\n        ],\n        [\n          \"ate\",\n          \"eat\",\n          \"tea\"\n        ]\n      ],\n      \"explanation\": \"Words with the same characters are grouped together as anagrams.\"\n    },\n    {\n      \"input\": {\n        \"strs\": [\n          \"\"\n        ]\n      },\n      \"output\": [\n        [\n          \"\"\n        ]\n      ],\n      \"explanation\": \"An empty string is grouped as an anagram of itself.\"\n    },\n    {\n      \"input\": {\n        \"strs\": [\n          \"a\"\n        ]\n      },\n      \"output\": [\n        [\n          \"a\"\n        ]\n      ],\n      \"explanation\": \"A single character is grouped as an anagram of itself.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= strs.length <= 10^4\",\n    \"string_length\": \"0 <= strs[i].length <= 100\",\n    \"character_range\": \"strs[i] consists of lowercase English letters.\"\n  },\n  \"follow_up\": \"Can you optimize your solution to reduce time complexity when processing very large arrays?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Rotate the array right by k steps."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `nums` and an integer `k`, rotate the array to the right by `k` steps.\",\n  \"objective\": \"Implement a function that rotates the array efficiently using in-place operations.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that rotation involves shifting elements, wrapping around when reaching the end of the array.\",\n    \"Step 2 - Modulo Optimization\": \"Since rotating by `nums.length` steps results in the same array, use `k % nums.length` to reduce unnecessary rotations.\",\n    \"Step 3 - In-Place Solutions\": \"Explore reversing the array or cyclic replacements to achieve `O(1)` extra space complexity.\",\n    \"Step 4 - Handle Edge Cases\": \"Ensure the solution handles cases where `k = 0`, `k >= nums.length`, or `nums` contains one element.\",\n    \"Step 5 - Compare Approaches\": \"Discuss alternative solutions such as using extra arrays, pointer swaps, or multiple reversals.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7\n        ],\n        \"k\": 3\n      },\n      \"output\": [\n        5,\n        6,\n        7,\n        1,\n        2,\n        3,\n        4\n      ],\n      \"explanation\": \"Rotating 3 steps shifts the array right, wrapping around.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          -1,\n          -100,\n          3,\n          99\n        ],\n        \"k\": 2\n      },\n      \"output\": [\n        3,\n        99,\n        -1,\n        -100\n      ],\n      \"explanation\": \"The array is rotated 2 steps to the right.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"1 <= nums.length <= 10^5\",\n    \"element_range\": \"-2^31 <= nums[i] <= 2^31 - 1\",\n    \"steps_range\": \"0 <= k <= 10^5\"\n  },\n  \"follow_up\": \"Can you solve the problem using three different methods, including one that uses `O(1)` extra space?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create a list of `n` integers from 1 to `n` such that the absolute differences between consecutive elements have `k` distinct values."}, {"role": "assistant", "content": "{\n  \"description\": \"Construct a list of `n` distinct integers from 1 to `n` such that the list of absolute differences between consecutive elements has exactly `k` distinct integers.\",\n  \"objective\": \"Use a structured construction method to ensure exactly `k` distinct differences by combining simple and alternating patterns.\",\n  \"meta_prompt\": {\n    \"Step 1 - Divide the Problem\": \"Separate the construction into two parts: one with `n-k-1` elements in sequential order and another with `k+1` elements forming the required distinct differences.\",\n    \"Step 2 - Construct the First Part\": \"Add the integers `[1, 2, ..., n-k-1]` sequentially to the result.\",\n    \"Step 3 - Construct the Second Part\": \"For the remaining `k+1` elements `[n-k, n-k+1, ..., n]`, alternate between choosing from the head and the tail to create `k` distinct differences. Add every even index from the head and every odd index from the tail.\",\n    \"Step 4 - Merge and Return\": \"Combine the two parts and return the final list as the result.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 3,\n        \"k\": 1\n      },\n      \"output\": [\n        1,\n        2,\n        3\n      ],\n      \"explanation\": \"The differences are [1, 1], which has exactly 1 distinct value.\"\n    },\n    {\n      \"input\": {\n        \"n\": 3,\n        \"k\": 2\n      },\n      \"output\": [\n        1,\n        3,\n        2\n      ],\n      \"explanation\": \"The differences are [2, 1], which has exactly 2 distinct values.\"\n    },\n    {\n      \"input\": {\n        \"n\": 6,\n        \"k\": 3\n      },\n      \"output\": [\n        1,\n        2,\n        3,\n        6,\n        4,\n        5\n      ],\n      \"explanation\": \"The differences are [1, 1, 3, 2, 1], which has exactly 3 distinct values.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 10^4\",\n    \"k_range\": \"1 <= k < n\"\n  },\n  \"follow_up\": \"Discuss the time complexity of this construction approach and how it ensures the desired properties in linear time.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Remove duplicate letters in a string and make sure the result is the smallest in lexicographical order."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s`, remove duplicate letters such that each letter appears exactly once, and the resultant string is the smallest lexicographical order among all possible results.\",\n  \"objective\": \"Design an efficient algorithm to process the string and return the lexicographically smallest string containing all unique letters of `s`. The solution must maintain the constraints of O(n) time complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the goal is to generate the smallest lexicographical string containing all unique characters of `s`. Each letter must appear exactly once.\",\n    \"Step 2 - Observations\": \"A greedy approach can be applied. Process the string while ensuring that any removed character will not affect the ability to construct the result. Use a stack and keep track of the last occurrence of each character.\",\n    \"Step 3 - Implementation Strategy\": \"Iterate through the string while maintaining a monotonic stack to construct the result. Use a set to track included characters and a frequency map to count remaining occurrences of each character.\",\n    \"Step 4 - Edge Cases\": \"Handle cases like strings with all identical characters, strings in reverse lexicographical order, and strings with a single character.\",\n    \"Step 5 - Complexity\": \"Ensure the solution is O(n) by using the stack and frequency map efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"bcabc\"\n      },\n      \"output\": \"abc\",\n      \"explanation\": \"Remove the duplicate 'b' and 'c' to get the lexicographically smallest string.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"cbacdcbc\"\n      },\n      \"output\": \"acdb\",\n      \"explanation\": \"Remove the duplicate 'c' and 'b' to get the smallest string.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"aaa\"\n      },\n      \"output\": \"a\",\n      \"explanation\": \"All characters are identical, so the result is 'a'.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 104\",\n    \"characters\": \"s consists of lowercase English letters only.\"\n  },\n  \"follow_up\": \"Can you optimize the implementation to use O(1) additional space for character checks by replacing the set with a bitmask?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the nth term of the count-and-say sequence."}, {"role": "assistant", "content": "{\n  \"description\": \"The **count-and-say** sequence is a sequence of digit strings defined recursively as follows: `countAndSay(1) = '1'`, and for `n > 1`, `countAndSay(n)` is determined by describing `countAndSay(n-1)`. To 'say' a digit string, split it into minimal substrings of identical digits, then describe each substring by stating the count of digits followed by the digit itself. Given a positive integer `n`, return the `nth` term of the count-and-say sequence.\",\n  \"objective\": \"Design an efficient algorithm to generate the `nth` term of the count-and-say sequence, ensuring it adheres to the constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves generating the `nth` term of the sequence using a recursive description. The base case is `countAndSay(1) = '1'`, and subsequent terms are built by describing the previous term.\",\n    \"Step 2 - Recursive String Construction\": \"Generate the sequence iteratively or recursively by describing each term based on the previous term. Use nested loops to count consecutive identical digits.\",\n    \"Step 3 - Optimize String Processing\": \"Use a string-building approach to minimize overhead when constructing the new terms of the sequence.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the algorithm handles constraints, such as `1 <= n <= 30`, efficiently.\",\n    \"Step 5 - Edge Cases\": \"Consider edge cases like `n = 1` (base case) and the rapid growth of sequence length as `n` increases.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 1\n      },\n      \"output\": \"1\",\n      \"explanation\": \"This is the base case of the sequence.\"\n    },\n    {\n      \"input\": {\n        \"n\": 4\n      },\n      \"output\": \"1211\",\n      \"explanation\": \"countAndSay(1) = '1', countAndSay(2) = '11', countAndSay(3) = '21', and countAndSay(4) = '1211'.\"\n    }\n  ],\n  \"constraints\": {\n    \"range\": \"1 <= n <= 30\",\n    \"sequence_growth\": \"Ensure that the algorithm efficiently handles the exponential growth in string length as `n` increases.\"\n  },\n  \"follow_up\": \"Can you optimize your implementation to handle very large `n` while minimizing memory usage and runtime overhead?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number of good integers in the range [1, n]. A number is good if rotating its digits forms a valid and different number."}, {"role": "assistant", "content": "{\n  \"description\": \"An integer is considered 'good' if after rotating each digit individually by 180 degrees, the result forms a valid number that is different from the original number. Each digit must be rotated, and the result must still be a valid number. Some digits remain the same after rotation (e.g., 0, 1, 8), while others transform into different digits (e.g., 2 turns into 5, and 6 turns into 9). The task is to find how many 'good' integers exist in the range [1, n].\",\n  \"objective\": \"Design an algorithm that efficiently calculates the number of 'good' integers in the range [1, n]. An integer is 'good' if rotating each digit individually by 180 degrees results in a valid, different number.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The problem involves rotating each digit of an integer and checking if the resulting number is valid and different from the original number. Some digits like 2 and 5 are swapped, while others like 6 and 9 are also swapped. Digits like 3, 4, and 7 are invalid when rotated.\",\n    \"Step 2 - Approach Outline\": \"The approach should loop through all numbers from 1 to n, rotate their digits one by one, check if the rotated number is valid, and ensure that it is different from the original number.\",\n    \"Step 3 - Valid Digits and Rotation\": \"Identify the valid digits that can be rotated and their corresponding mappings: 0 -> 0, 1 -> 1, 8 -> 8, 2 -> 5, 5 -> 2, 6 -> 9, 9 -> 6. Any number containing invalid digits (3, 4, or 7) is immediately discarded.\",\n    \"Step 4 - Efficient Calculation\": \"To calculate the number of 'good' integers, iterate through all integers from 1 to n, perform digit-by-digit rotation, and check if the rotated number is different from the original number. Ensure to count only valid rotations.\",\n    \"Step 5 - Edge Case Handling\": \"Consider edge cases where n is small, such as n = 1, and where the rotation results in a number that is the same as the original (e.g., 1 or 10).\",\n    \"Step 6 - Code Efficiency\": \"Optimize the solution to handle the upper constraint of n up to 10,000 efficiently. Use string manipulation or digit-by-digit processing to avoid unnecessary complexity.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 10\n      },\n      \"output\": 4,\n      \"explanation\": \"The good numbers in the range [1, 10] are 2, 5, 6, and 9. The other numbers either remain unchanged or contain invalid digits.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1\n      },\n      \"output\": 0,\n      \"explanation\": \"There are no good numbers in the range [1, 1], as 1 remains unchanged after rotation.\"\n    },\n    {\n      \"input\": {\n        \"n\": 2\n      },\n      \"output\": 1,\n      \"explanation\": \"In the range [1, 2], only 2 is a good number because it becomes 5 after rotation, which is a valid and different number.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 10^4\",\n    \"valid_digit_rotation\": \"The valid digits that rotate are: 0, 1, 8, 2, 5, 6, 9. Digits 3, 4, and 7 do not have valid rotations.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle larger values of n or consider other techniques to avoid checking each number individually?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if four numbers from an array of cards can be arranged with mathematical operations and parentheses to equal 24."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine if four numbers from an array of cards can be arranged with mathematical operations and parentheses to equal 24.\",\n  \"objective\": \"Use recursive backtracking to evaluate all possible arrangements of numbers and operators, checking if the result equals 24.\",\n  \"meta_prompt\": {\n    \"Step 1 - Define Base Case\": \"If the array size is 1, check if the only number equals 24. Return true if it does; otherwise, return false.\",\n    \"Step 2 - Generate Possible Results\": \"Create a helper function to perform all mathematical operations (addition, subtraction, multiplication, division) between two numbers and return the results.\",\n    \"Step 3 - Recursive Backtracking\": \"Iterate over all pairs of numbers in the array, apply all operations to the pair, create a new list with the result of the operation, and recursively call the function on this new list.\",\n    \"Step 4 - Handle Division\": \"For division, ensure the divisor is not zero, and handle floating-point precision to check if the result is close to 24.\",\n    \"Step 5 - Backtracking and Return\": \"If any recursive call evaluates to true, return true. Otherwise, backtrack and try other combinations. Return false if no solution is found.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"cards\": [\n          4,\n          1,\n          8,\n          7\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The expression (8 - 4) * (7 - 1) evaluates to 24.\"\n    },\n    {\n      \"input\": {\n        \"cards\": [\n          1,\n          2,\n          1,\n          2\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"No arrangement of numbers and operations can evaluate to 24.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"cards.length == 4\",\n    \"value_range\": \"1 <= cards[i] <= 9\"\n  },\n  \"follow_up\": \"Discuss the computational efficiency of recursive backtracking and how optimizations like pruning or memoization could improve performance for larger inputs.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find all triplets in an array that sum to zero."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums`, find all unique triplets `[nums[i], nums[j], nums[k]]` such that the sum of the triplet is zero (`nums[i] + nums[j] + nums[k] == 0`). Ensure that the solution set does not contain duplicate triplets, and the output order does not matter.\",\n  \"objective\": \"Design an efficient algorithm to find all unique triplets that sum to zero, ensuring the solution avoids duplicate results and handles large input sizes effectively.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves finding three numbers in the array that sum to zero. Ensure that indices `i`, `j`, and `k` are distinct and the result set does not include duplicates.\",\n    \"Step 2 - Initial Approach\": \"Use a brute-force approach by iterating over all possible triplets. However, this would result in `O(n^3)` time complexity and is inefficient for larger input sizes.\",\n    \"Step 3 - Optimal Solution with Two Pointers\": \"Sort the array and use a two-pointer approach to find pairs that sum to the negative of the current element. This reduces the time complexity to `O(n^2)`.\",\n    \"Step 4 - Handle Duplicates\": \"After sorting, skip duplicate values to ensure no duplicate triplets are added to the result set.\",\n    \"Step 5 - Edge Cases\": \"Handle edge cases such as arrays with all zeroes, arrays with no valid triplets, and arrays containing fewer than three elements.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          -1,\n          0,\n          1,\n          2,\n          -1,\n          -4\n        ]\n      },\n      \"output\": [\n        [\n          -1,\n          -1,\n          2\n        ],\n        [\n          -1,\n          0,\n          1\n        ]\n      ],\n      \"explanation\": \"The valid triplets are `[-1, -1, 2]` and `[-1, 0, 1]`, which sum to zero.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          1,\n          1\n        ]\n      },\n      \"output\": [],\n      \"explanation\": \"No triplet sums to zero.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          0,\n          0\n        ]\n      },\n      \"output\": [\n        [\n          0,\n          0,\n          0\n        ]\n      ],\n      \"explanation\": \"The only valid triplet is `[0, 0, 0]`.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"3 <= nums.length <= 3000\",\n    \"nums_values\": \"-10^5 <= nums[i] <= 10^5\",\n    \"time_complexity\": \"Aim for an `O(n^2)` solution.\"\n  },\n  \"follow_up\": \"Can you extend the solution to find unique quadruplets that sum to a target value?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "We have customers paying with different bills. We need to ensure we can give the correct change for every customer."}, {"role": "assistant", "content": "{\n  \"description\": \"You are at a lemonade stand, and customers are paying for their drinks using $5, $10, or $20 bills. You must provide the correct change to each customer such that the net transaction for each customer is $5. Your goal is to determine if you can provide the correct change for all customers in the queue. The sequence of bills is provided as an array, and you start with no change.\",\n  \"objective\": \"Return `true` if you can provide the correct change to every customer; otherwise, return `false`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Each customer pays with one of three bill denominations: $5, $10, or $20. You need to ensure that you can give the correct change (i.e., $0 for a $5 bill, $5 for a $10 bill, and $15 for a $20 bill) while tracking the change you have after each transaction. If at any point you cannot give the correct change, return `false`.\",\n    \"Step 2 - Initial Approach\": \"Start by iterating through the `bills` array. For each customer, check the bill they pay and update the amount of $5 and $10 bills you have on hand. If the customer pays with a $10 or $20 bill, ensure that you have enough $5 and/or $10 bills to give back the correct change.\",\n    \"Step 3 - Algorithmic Approach\": \"1. Initialize counters for $5 and $10 bills. 2. Iterate through the `bills` array. 3. If the customer pays with a $5 bill, increase the $5 bill counter. 4. If the customer pays with a $10 bill, check if you have at least one $5 bill. If so, decrease the $5 bill counter and increase the $10 bill counter. 5. If the customer pays with a $20 bill, check if you have one $10 bill and one $5 bill. If so, decrease both counters. If you don't have that, check if you have three $5 bills to provide the $15 change. If neither is possible, return `false`. 6. After all customers have been processed, return `true`.\",\n    \"Step 4 - Output Format\": \"Return `true` if you can provide the correct change to all customers; otherwise, return `false`.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"The solution should handle up to 100,000 customers efficiently. Consider edge cases such as a customer paying with a $20 bill when no change has been collected yet, or a sequence where the correct change is not available for all customers.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"bills\": [\n          5,\n          5,\n          5,\n          10,\n          20\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"You can provide change to all customers. After the first three customers pay with $5 bills, you have three $5 bills. For the fourth customer, pay $5 in change. For the fifth customer, pay $10 and $5 in change.\"\n    },\n    {\n      \"input\": {\n        \"bills\": [\n          5,\n          5,\n          10,\n          10,\n          20\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"You can't provide correct change to the last customer because you don't have enough $5 and $10 bills to give $15 in change.\"\n    }\n  ],\n  \"constraints\": {\n    \"length_range\": \"1 <= bills.length <= 10^5\",\n    \"bill_values\": \"bills[i] is either 5, 10, or 20\"\n  },\n  \"follow_up\": \"Can you optimize the solution further for a large number of customers or edge cases with rapid sequences of $20 bills?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if one string is formed by merging two others."}, {"role": "assistant", "content": "{\n  \"description\": \"Given strings `s1`, `s2`, and `s3`, determine whether `s3` is formed by interleaving `s1` and `s2`. An interleaving combines substrings from `s1` and `s2` while maintaining the order of characters in both strings.\",\n  \"objective\": \"Design an algorithm to verify if `s3` is a valid interleaving of `s1` and `s2` efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that `s3` is formed by merging `s1` and `s2` while preserving their order. Check the total length of `s3` against the combined lengths of `s1` and `s2`.\",\n    \"Step 2 - Dynamic Programming\": \"Use a 2D DP table where `dp[i][j]` indicates whether the first `i+j` characters of `s3` can be formed by interleaving the first `i` characters of `s1` and the first `j` characters of `s2`.\",\n    \"Step 3 - Base Case and Recurrence\": \"Initialize `dp[0][0] = true` and compute transitions based on matches between `s1`, `s2`, and `s3`.\",\n    \"Step 4 - Optimize Space\": \"Consider optimizing the solution to use O(s2.length) space by storing only the current and previous rows.\",\n    \"Step 5 - Handle Edge Cases\": \"Handle cases where one or both strings are empty, or where `s3` has characters not present in `s1` or `s2`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s1\": \"aabcc\",\n        \"s2\": \"dbbca\",\n        \"s3\": \"aadbbcbcac\"\n      },\n      \"output\": true,\n      \"explanation\": \"One valid interleaving of `s1` and `s2` forms `s3`.\"\n    },\n    {\n      \"input\": {\n        \"s1\": \"aabcc\",\n        \"s2\": \"dbbca\",\n        \"s3\": \"aadbbbaccc\"\n      },\n      \"output\": false,\n      \"explanation\": \"`s3` cannot be formed by interleaving `s1` and `s2`.\"\n    },\n    {\n      \"input\": {\n        \"s1\": \"\",\n        \"s2\": \"\",\n        \"s3\": \"\"\n      },\n      \"output\": true,\n      \"explanation\": \"An empty string can be interleaved from two empty strings.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_lengths\": \"0 <= s1.length, s2.length <= 100\",\n    \"s3_length\": \"0 <= s3.length <= 200\",\n    \"characters\": \"`s1`, `s2`, and `s3` consist of lowercase English letters only.\"\n  },\n  \"follow_up\": \"Can you solve the problem using O(s2.length) additional memory space?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Select projects to maximize total capital."}, {"role": "assistant", "content": "{\n  \"description\": \"LeetCode is planning an IPO and aims to maximize its total capital by completing a set of projects. Given limited resources, LeetCode can finish at most `k` distinct projects. Each project `i` has an associated profit `profits[i]` and requires a minimum capital `capital[i]` to start. Initially, you have `w` capital. After completing a project, the profit from it is added to the total capital, making it possible to start additional projects. Your task is to choose at most `k` projects to maximize the final capital.\",\n  \"objective\": \"Design an algorithm that selects up to `k` projects, yielding the highest possible capital at the end. The solution should be efficient given potentially large values of `k` and `n`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Analyze the input parameters: `k` limits the number of projects, `w` is the starting capital, `profits[i]` represents the profit from project `i`, and `capital[i]` is the minimum capital required to start project `i`. The goal is to select projects to maximize the capital after completing up to `k` projects.\",\n    \"Step 2 - Simple Case Analysis\": \"Consider the simplest case where `k = 1`. In this case, choose the most profitable project from those that can be started with the initial capital `w`. If no project meets the capital requirement, no project can be started.\",\n    \"Step 3 - Greedy Approach with Priority Queue\": \"Generalize for arbitrary `k`. Start with the most profitable available project, updating the capital after completing each one. As capital increases, more projects may become available, so always select the project with the highest profit that can be started.\",\n    \"Step 4 - Efficient Project Selection\": \"Sort projects by increasing capital requirement and use a pointer to mark the first project that cannot be started with the current capital. Use a max-priority queue to maintain the profits of all available projects, allowing for efficient retrieval of the highest profit project at each step.\",\n    \"Step 5 - Algorithm Implementation\": \"Sort projects by capital requirements and initialize a priority queue for available projects. For each iteration up to `k` times: 1) Add profits of newly available projects to the priority queue as capital increases. 2) Select and remove the highest profit project from the priority queue to maximize capital. If the queue becomes empty, terminate.\",\n    \"Step 6 - Complexity Considerations\": \"Ensure the solution handles large inputs within constraints (`1 <= k <= 10^5`, `1 <= n <= 10^5`). Efficiently manage insertion, deletion, and retrieval operations with a priority queue.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"k\": 2,\n        \"w\": 0,\n        \"profits\": [\n          1,\n          2,\n          3\n        ],\n        \"capital\": [\n          0,\n          1,\n          1\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"Starting with 0 capital, project 0 is completed first, adding 1 to the capital (new capital is 1). With capital 1, project 2 is selected next, adding 3 to the capital for a total of 4.\"\n    },\n    {\n      \"input\": {\n        \"k\": 3,\n        \"w\": 0,\n        \"profits\": [\n          1,\n          2,\n          3\n        ],\n        \"capital\": [\n          0,\n          1,\n          2\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"Projects are completed in order of increasing profit. Project 0 adds 1 to capital, then project 1 adds 2, and finally, project 2 adds 3 for a total of 6.\"\n    }\n  ],\n  \"constraints\": {\n    \"project_count_range\": \"1 <= n <= 10^5\",\n    \"projects_permitted\": \"1 <= k <= 10^5\",\n    \"initial_capital_range\": \"0 <= w <= 10^9\",\n    \"profit_range\": \"0 <= profits[i] <= 10^4\",\n    \"capital_required_range\": \"0 <= capital[i] <= 10^9\"\n  },\n  \"follow_up\": \"Optimize the solution to use minimal space, focusing on efficient handling of available projects and maintaining profitability while avoiding redundant checks or memory usage beyond the input requirements.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a given number has alternating bits in binary."}, {"role": "assistant", "content": "{\n  \"description\": \"Check whether a given positive integer has alternating bits in its binary representation.\",\n  \"objective\": \"Iteratively examine each bit of the binary representation of the number to verify if adjacent bits differ.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Variables\": \"Start with the input integer `n`. Extract the least significant bit using `n & 1` and store it as `cur`.\",\n    \"Step 2 - Iterate Over Bits\": \"Iterate while `n > 0`. At each step, shift `n` right by one bit using `n >>= 1` to examine the next bit.\",\n    \"Step 3 - Compare Adjacent Bits\": \"At each iteration, compare the least significant bit of the shifted number (`n & 1`) with `cur`. If they are equal, return `false`.\",\n    \"Step 4 - Update for Next Iteration\": \"Update `cur` to the current least significant bit (`n & 1`) and continue the loop.\",\n    \"Step 5 - Return Result\": \"If the loop completes without finding equal adjacent bits, return `true`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 5\n      },\n      \"output\": true,\n      \"explanation\": \"The binary representation of 5 is 101, which has alternating bits.\"\n    },\n    {\n      \"input\": {\n        \"n\": 7\n      },\n      \"output\": false,\n      \"explanation\": \"The binary representation of 7 is 111, which does not have alternating bits.\"\n    },\n    {\n      \"input\": {\n        \"n\": 11\n      },\n      \"output\": false,\n      \"explanation\": \"The binary representation of 11 is 1011, which does not have alternating bits.\"\n    }\n  ],\n  \"constraints\": {\n    \"number_range\": \"1 <= n <= 2^31 - 1\",\n    \"binary_representation\": \"The binary representation of the number is examined bit by bit.\"\n  },\n  \"follow_up\": \"Discuss the time complexity O(log(n)) of the algorithm due to examining each bit of the number, and the constant space complexity.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a number is a perfect square."}, {"role": "assistant", "content": "{\n  \"title\": \"Check for Perfect Square Without Library Functions\",\n  \"description\": \"Determine if a given positive integer `num` is a perfect square without using built-in functions such as `sqrt`.\",\n  \"input\": {\n    \"name\": \"num\",\n    \"type\": \"integer\",\n    \"description\": \"The positive integer to check for being a perfect square.\",\n    \"constraints\": \"1 <= num <= 2^31 - 1\"\n  },\n  \"output\": {\n    \"type\": \"boolean\",\n    \"description\": \"`true` if `num` is a perfect square, otherwise `false`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"num\": 16\n      },\n      \"output\": true,\n      \"explanation\": \"4 * 4 = 16, and 4 is an integer. Hence, 16 is a perfect square.\"\n    },\n    {\n      \"input\": {\n        \"num\": 14\n      },\n      \"output\": false,\n      \"explanation\": \"No integer squared equals 14. Hence, 14 is not a perfect square.\"\n    },\n    {\n      \"input\": {\n        \"num\": 1\n      },\n      \"output\": true,\n      \"explanation\": \"1 * 1 = 1, and 1 is an integer. Hence, 1 is a perfect square.\"\n    }\n  ],\n  \"hints\": [\n    \"Use binary search to check if there exists an integer `x` such that `x * x == num`.\",\n    \"Start with low = 1 and high = num, and iteratively narrow down the range.\",\n    \"Avoid using floating-point calculations for better precision.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(log(num)) time complexity using binary search.\",\n    \"constraints\": \"Avoid unnecessary multiplications by narrowing down the search space quickly.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given equations and values, return division results for queries."}, {"role": "assistant", "content": "{\n  \"title\": \"Evaluate Division Using Graph Traversal\",\n  \"description\": \"Given an array of equations representing relationships between variables, evaluate queries by determining the result of variable division.\",\n  \"objective\": \"Build a graph where variables are nodes and division relationships are weighted edges. Use graph traversal to compute query results.\",\n  \"input\": {\n    \"equations\": {\n      \"type\": \"array of arrays\",\n      \"description\": \"Each sub-array contains two strings [Ai, Bi] representing the equation Ai / Bi = value.\",\n      \"constraints\": \"1 <= equations.length <= 20, 1 <= Ai.length, Bi.length <= 5\"\n    },\n    \"values\": {\n      \"type\": \"array of floats\",\n      \"description\": \"Each value corresponds to the result of Ai / Bi in equations.\",\n      \"constraints\": \"0.0 < values[i] <= 20.0\"\n    },\n    \"queries\": {\n      \"type\": \"array of arrays\",\n      \"description\": \"Each sub-array contains two strings [Cj, Dj] representing the query Cj / Dj.\",\n      \"constraints\": \"1 <= queries.length <= 20, 1 <= Cj.length, Dj.length <= 5\"\n    }\n  },\n  \"output\": {\n    \"type\": \"array of floats\",\n    \"description\": \"For each query, return the division result or -1.0 if the result cannot be determined.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"equations\": [\n          [\n            \"a\",\n            \"b\"\n          ],\n          [\n            \"b\",\n            \"c\"\n          ]\n        ],\n        \"values\": [\n          2.0,\n          3.0\n        ],\n        \"queries\": [\n          [\n            \"a\",\n            \"c\"\n          ],\n          [\n            \"b\",\n            \"a\"\n          ],\n          [\n            \"a\",\n            \"e\"\n          ],\n          [\n            \"a\",\n            \"a\"\n          ],\n          [\n            \"x\",\n            \"x\"\n          ]\n        ]\n      },\n      \"output\": [\n        6.0,\n        0.5,\n        -1.0,\n        1.0,\n        -1.0\n      ],\n      \"explanation\": \"From equations, a / c = 2.0 * 3.0 = 6.0, b / a = 1 / 2.0 = 0.5. Variables e and x are not connected.\"\n    },\n    {\n      \"input\": {\n        \"equations\": [\n          [\n            \"a\",\n            \"b\"\n          ],\n          [\n            \"b\",\n            \"c\"\n          ],\n          [\n            \"bc\",\n            \"cd\"\n          ]\n        ],\n        \"values\": [\n          1.5,\n          2.5,\n          5.0\n        ],\n        \"queries\": [\n          [\n            \"a\",\n            \"c\"\n          ],\n          [\n            \"c\",\n            \"b\"\n          ],\n          [\n            \"bc\",\n            \"cd\"\n          ],\n          [\n            \"cd\",\n            \"bc\"\n          ]\n        ]\n      },\n      \"output\": [\n        3.75,\n        0.4,\n        5.0,\n        0.2\n      ],\n      \"explanation\": \"Use graph traversal to compute results between connected variables.\"\n    }\n  ],\n  \"hints\": [\n    \"Model the problem as a graph where each variable is a node and edges are weighted by division values.\",\n    \"Use depth-first search (DFS) or breadth-first search (BFS) to find paths between query nodes.\",\n    \"If nodes in a query are disconnected, the result is -1.0.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Efficiently compute query results using graph traversal. Minimize redundant computations with caching or union-find.\",\n    \"constraints\": \"Avoid iterating through all nodes repeatedly. Ensure time complexity is O(E + Q), where E is the number of equations and Q is the number of queries.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the skyline formed by buildings."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the dimensions of buildings in a city, determine the outer contour of the skyline as seen from a distance.\",\n  \"objective\": \"Implement an efficient algorithm to compute the skyline using a priority queue or line sweep approach.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Understand the skyline as a series of key points where the height changes.\",\n    \"Step 2 - Sort Critical Points\": \"Identify and sort all critical points (left and right edges of buildings).\",\n    \"Step 3 - Use Priority Queue\": \"Use a max-heap or multiset to track active building heights and calculate the skyline at each critical point.\",\n    \"Step 4 - Merge Redundant Points\": \"Ensure that consecutive points with the same height are merged.\",\n    \"Step 5 - Handle Edge Cases\": \"Account for overlapping buildings, single buildings, and large gaps in the input.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"buildings\": [\n          [\n            2,\n            9,\n            10\n          ],\n          [\n            3,\n            7,\n            15\n          ],\n          [\n            5,\n            12,\n            12\n          ],\n          [\n            15,\n            20,\n            10\n          ],\n          [\n            19,\n            24,\n            8\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          2,\n          10\n        ],\n        [\n          3,\n          15\n        ],\n        [\n          7,\n          12\n        ],\n        [\n          12,\n          0\n        ],\n        [\n          15,\n          10\n        ],\n        [\n          20,\n          8\n        ],\n        [\n          24,\n          0\n        ]\n      ],\n      \"explanation\": \"The key points represent changes in the skyline's height.\"\n    },\n    {\n      \"input\": {\n        \"buildings\": [\n          [\n            0,\n            2,\n            3\n          ],\n          [\n            2,\n            5,\n            3\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          0,\n          3\n        ],\n        [\n          5,\n          0\n        ]\n      ],\n      \"explanation\": \"Two adjacent buildings with the same height merge into one horizontal segment.\"\n    }\n  ],\n  \"constraints\": {\n    \"buildings_count\": \"1 <= buildings.length <= 10^4\",\n    \"value_range\": \"0 <= lefti < righti <= 2^31 - 1\",\n    \"height_range\": \"1 <= heighti <= 2^31 - 1\"\n  },\n  \"follow_up\": \"How can you further optimize the line sweep approach for extremely large input sizes?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Maximize points by deleting numbers and their neighbors from the array."}, {"role": "assistant", "content": "{\n  \"description\": \"Maximize points by deleting elements and their neighbors from an array while adhering to given constraints.\",\n  \"objective\": \"Use a space-optimized dynamic programming approach to calculate the maximum points by iteratively considering each unique element and maintaining state for only the last two elements.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Create a hash table `points` to store the total points for each unique number in the array. Loop through `nums` to populate `points` and find the maximum number in `nums`.\",\n    \"Step 2\": \"Initialize two variables `twoBack = 0` and `oneBack = points[1]` to represent the base states for DP.\",\n    \"Step 3\": \"Iterate from 2 to `maxNumber` to calculate the maximum points for each number using the recurrence relation: `max(oneBack, twoBack + points[num])`.\",\n    \"Step 4\": \"After calculating the maximum for the current number, update `twoBack` to the old value of `oneBack` and `oneBack` to the new maximum.\",\n    \"Step 5\": \"After processing all numbers, return `oneBack` as the final result.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          4,\n          2\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"Delete 4 to earn 4 points and remove 3. Then delete 2 to earn 2 points. Total = 6.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          2,\n          3,\n          3,\n          3,\n          4\n        ]\n      },\n      \"output\": 9,\n      \"explanation\": \"Delete all 3's to earn 9 points while removing 2's and 4's.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 2 * 10^4\",\n    \"value_range\": \"1 <= nums[i] <= 10^4\",\n    \"objective\": \"Optimize for space and time complexity.\"\n  },\n  \"follow_up\": \"Discuss the benefits of using a space-optimized approach over a full DP array for large input sizes.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Implement `read` to read `n` characters from a file using `read4`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a file and an API `read4` that reads up to 4 characters at a time, implement a method `read` to read up to `n` characters across multiple calls. Ensure the file pointer and buffer are handled correctly to support consecutive calls to `read`.\",\n  \"objective\": \"Design a robust solution to read up to `n` characters across multiple calls to `read`, using `read4` efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that `read4` reads up to 4 characters into a temporary buffer. `read` must utilize this efficiently to handle consecutive calls.\",\n    \"Step 2 - Maintain State\": \"Keep track of any unread characters from previous `read4` calls in a buffer to avoid redundant reads.\",\n    \"Step 3 - Handle Partial Reads\": \"When `read4` reads more than the required characters, store the extra characters in a buffer for the next call.\",\n    \"Step 4 - Optimize\": \"Ensure the implementation minimizes the number of `read4` calls and handles edge cases such as reading fewer characters than requested.\",\n    \"Step 5 - Validate Multiple Calls\": \"Ensure the solution handles multiple consecutive calls to `read` without resetting state unnecessarily.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"file\": \"abc\",\n        \"queries\": [\n          1,\n          2,\n          1\n        ]\n      },\n      \"output\": [\n        1,\n        2,\n        0\n      ],\n      \"explanation\": \"`read` reads 'a', 'bc', and then returns 0 since the end of the file is reached.\"\n    },\n    {\n      \"input\": {\n        \"file\": \"abc\",\n        \"queries\": [\n          4,\n          1\n        ]\n      },\n      \"output\": [\n        3,\n        0\n      ],\n      \"explanation\": \"`read` reads all 3 characters in the first call and returns 0 in the second call since there are no more characters.\"\n    }\n  ],\n  \"constraints\": {\n    \"file_length\": \"1 <= file.length <= 500\",\n    \"query_length\": \"1 <= queries.length <= 10\",\n    \"buffer_length\": \"1 <= queries[i] <= 500\"\n  },\n  \"follow_up\": \"How can you optimize the function to handle cases where `read` is called many times in a row, with varying values of `n`?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find a specific row in Pascal's triangle."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `rowIndex`, return the `rowIndex`th (0-indexed) row of Pascal's triangle. Pascal's triangle is constructed such that each number is the sum of the two numbers directly above it.\",\n  \"objective\": \"Design an algorithm to efficiently compute the `rowIndex`th row of Pascal's triangle.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the row can be constructed iteratively, with each element calculated as the sum of two elements from the previous iteration.\",\n    \"Step 2 - Space Optimization\": \"Use an array of size `rowIndex + 1` to build the row in-place to achieve O(rowIndex) space complexity.\",\n    \"Step 3 - Handle Edge Cases\": \"Handle edge cases such as `rowIndex = 0` (a single element row of [1]).\",\n    \"Step 4 - Optimize\": \"Ensure the solution runs in O(rowIndex^2) time.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"rowIndex\": 3\n      },\n      \"output\": [\n        1,\n        3,\n        3,\n        1\n      ],\n      \"explanation\": \"The 4th row (0-indexed) of Pascal's triangle is [1, 3, 3, 1].\"\n    },\n    {\n      \"input\": {\n        \"rowIndex\": 0\n      },\n      \"output\": [\n        1\n      ],\n      \"explanation\": \"The 1st row (0-indexed) of Pascal's triangle is [1].\"\n    },\n    {\n      \"input\": {\n        \"rowIndex\": 1\n      },\n      \"output\": [\n        1,\n        1\n      ],\n      \"explanation\": \"The 2nd row (0-indexed) of Pascal's triangle is [1, 1].\"\n    }\n  ],\n  \"constraints\": {\n    \"rowIndex_range\": \"0 <= rowIndex <= 33\",\n    \"space_complexity\": \"Follow-up: Achieve O(rowIndex) space complexity.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given k eggs and n floors. Find the minimum number of moves to determine the floor where eggs start breaking."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given k identical eggs and a building with n floors. Your task is to determine the minimum number of moves required to find the highest floor from which an egg can be dropped without breaking. You know that there is a floor f such that dropping an egg from any floor higher than f will break the egg, while dropping it from any floor at or below f will not break it. You must return the minimum number of moves needed to find the floor f with certainty.\",\n  \"objective\": \"Design an algorithm to minimize the number of moves required to identify the critical floor f. Optimize your solution to achieve the best time complexity given the constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Start by analyzing the building's floors and the number of eggs available. The goal is to minimize the number of moves to find the threshold floor f where the eggs start breaking.\",\n    \"Step 2 - Initial Approach\": \"A brute force approach would involve testing each floor one by one, but this would be inefficient. Instead, consider utilizing dynamic programming or a binary search-style approach to minimize the number of moves needed.\",\n    \"Step 3 - Optimal Solution\": \"Use a dynamic programming approach to solve the problem efficiently. Start by defining a function that tracks the minimum number of moves needed for each combination of eggs and floors, then compute the minimum moves based on previous results.\",\n    \"Step 4 - Output Format\": \"The output should be a single integer representing the minimum number of moves required to determine the threshold floor f.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Focus on optimizing the solution to run in a reasonable time frame for large inputs. Handle edge cases such as when only one egg is available or when there are very few floors.\",\n    \"Final Check - Constraints Verification\": \"Ensure the solution adheres to the problem constraints, particularly handling cases with the upper limits of floors and eggs effectively.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"k\": 1,\n        \"n\": 2\n      },\n      \"output\": 2,\n      \"explanation\": \"With one egg and two floors, we need to drop the egg from floor 1. If it breaks, we know the threshold floor is 0. If it does not break, the threshold floor is 2.\"\n    },\n    {\n      \"input\": {\n        \"k\": 2,\n        \"n\": 6\n      },\n      \"output\": 3,\n      \"explanation\": \"With two eggs and six floors, we can drop the first egg from the middle floors, adjusting based on whether the egg breaks or not, minimizing the number of moves.\"\n    },\n    {\n      \"input\": {\n        \"k\": 3,\n        \"n\": 14\n      },\n      \"output\": 4,\n      \"explanation\": \"With three eggs and fourteen floors, the optimal strategy will involve dividing the floors strategically and testing with each egg to minimize the total number of moves.\"\n    }\n  ],\n  \"constraints\": {\n    \"k_range\": \"1 <= k <= 100\",\n    \"n_range\": \"1 <= n <= 10^4\"\n  },\n  \"follow_up\": \"Can you improve the algorithm further to handle even larger values of k and n, ensuring the solution remains efficient and scalable?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create a stack that can push and pop the most frequent element."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a stack-like data structure, FreqStack, that supports two operations: pushing elements to the stack and popping the most frequent element from the stack. When popping, if there is a tie for the most frequent element, the element closest to the stack's top should be returned.\",\n  \"objective\": \"Implement the `FreqStack` class with the following methods: `FreqStack()`, `push(int val)`, and `pop()`. The `push` method adds an integer to the stack, while the `pop` method removes and returns the most frequent element. If multiple elements have the same frequency, return the one closest to the top of the stack.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"In this problem, we need to maintain the frequency of elements in the stack. Each time an element is pushed onto the stack, its frequency increases. The main challenge is to efficiently track and pop the most frequent element, which might involve tracking the frequency of elements in the stack and keeping track of the element positions.\",\n    \"Step 2 - Design Considerations\": \"We need to design a data structure that efficiently supports both operations. A hashmap can be used to track the frequency of elements, while a stack of elements corresponding to each frequency can be used to resolve ties by ensuring that the most recent element (closest to the stack's top) is popped.\",\n    \"Step 3 - Approach\": \"Use two hashmaps: one for storing the frequency of each element and another to store a stack of elements for each frequency. When pushing an element, update its frequency and push it onto the corresponding stack. For popping, check the stack corresponding to the most frequent frequency, pop the element from that stack, and update its frequency.\",\n    \"Step 4 - Efficiency\": \"To efficiently perform `push` and `pop` operations, aim for O(1) complexity for both operations using hashmaps and stack operations.\",\n    \"Step 5 - Constraints Handling\": \"The constraints indicate that there can be up to 20,000 operations. Ensure the solution handles this efficiently by maintaining frequency data and stack data in an optimized way.\",\n    \"Step 6 - Output Format\": \"The `pop()` method should return the most frequent element as per the rules described. The output should follow the sequence of operations provided in the example.\"\n  },\n  \"examples\": [\n    {\n      \"input\": [\n        \"FreqStack\",\n        \"push\",\n        \"push\",\n        \"push\",\n        \"push\",\n        \"push\",\n        \"push\",\n        \"pop\",\n        \"pop\",\n        \"pop\",\n        \"pop\"\n      ],\n      \"output\": [\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        5,\n        7,\n        5,\n        4\n      ],\n      \"explanation\": \"The FreqStack class is first initialized, and elements are pushed to the stack. The pop operations return the most frequent element as per the rules, with ties broken by proximity to the top of the stack.\"\n    }\n  ],\n  \"constraints\": {\n    \"val_range\": \"0 <= val <= 10^9\",\n    \"max_operations\": \"At most 2 * 10^4 calls will be made to `push` and `pop`.\",\n    \"pop_guarantee\": \"It is guaranteed that there will be at least one element in the stack before calling `pop`.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Merge two sorted linked lists into one sorted list."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the heads of two sorted linked lists `list1` and `list2`, merge the two lists into one sorted list. The merged list should be created by splicing together the nodes of the original two lists. Return the head of the merged linked list.\",\n  \"objective\": \"Design an efficient algorithm to merge two sorted linked lists while preserving the sorted order and minimizing additional space usage.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task is to merge two sorted linked lists into a single sorted linked list by rearranging the nodes. The input lists are already sorted, which simplifies merging.\",\n    \"Step 2 - Iterative Approach\": \"Use two pointers to traverse `list1` and `list2`. Compare the current nodes of both lists, append the smaller node to the merged list, and move the pointer forward. Continue until one list is fully traversed, then append the remaining nodes of the other list.\",\n    \"Step 3 - Recursive Approach\": \"Alternatively, use recursion to select the smaller node as the head of the merged list and recursively merge the remaining nodes.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the solution works for edge cases such as one or both lists being empty, lists with nodes of the same value, and negative node values.\",\n    \"Step 5 - Time and Space Complexity\": \"Aim for an `O(n + m)` time complexity where `n` and `m` are the lengths of `list1` and `list2`. Minimize space usage by avoiding extra memory allocation other than for the merged list.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"list1\": [\n          1,\n          2,\n          4\n        ],\n        \"list2\": [\n          1,\n          3,\n          4\n        ]\n      },\n      \"output\": [\n        1,\n        1,\n        2,\n        3,\n        4,\n        4\n      ],\n      \"explanation\": \"The merged list is formed by splicing together nodes from both input lists in sorted order.\"\n    },\n    {\n      \"input\": {\n        \"list1\": [],\n        \"list2\": []\n      },\n      \"output\": [],\n      \"explanation\": \"Both lists are empty, so the merged list is also empty.\"\n    },\n    {\n      \"input\": {\n        \"list1\": [],\n        \"list2\": [\n          0\n        ]\n      },\n      \"output\": [\n        0\n      ],\n      \"explanation\": \"Only `list2` has nodes, so the merged list is identical to `list2`.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"The number of nodes in both lists is in the range [0, 50]\",\n    \"node_values\": \"-100 <= Node.val <= 100\",\n    \"list_order\": \"Both `list1` and `list2` are sorted in non-decreasing order.\"\n  },\n  \"follow_up\": \"Can you merge `k` sorted linked lists instead of just two, ensuring optimal time complexity?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Create a playlist with n songs and a target length of goal, with some rule about song repetition."}, {"role": "assistant", "content": "{\n  \"description\": \"You are tasked with designing a music player that can create playlists. The playlist must consist of `goal` songs, chosen from `n` different songs. Each song must be played at least once, and a song can only be played again after `k` other songs have been played. The goal is to compute the total number of valid playlists, with the result modulo 10^9 + 7.\",\n  \"objective\": \"Design an efficient algorithm that calculates the number of possible playlists, ensuring that every song is played at least once, and no song is repeated until `k` other songs have been played. Return the result modulo 10^9 + 7.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"You are given three integers: `n` (number of different songs), `goal` (the desired length of the playlist), and `k` (the constraint on repeating songs). You need to compute how many valid playlists can be created under these conditions.\",\n    \"Step 2 - Key Observations\": \"The playlist must have a length of `goal`. Every song should be played at least once, and a song can only be repeated after `k` other songs have been played. This is a classic combinatorial problem with constraints.\",\n    \"Step 3 - Dynamic Programming Approach\": \"Use dynamic programming to keep track of the number of valid playlists of length `i` with `j` distinct songs. You need to account for the cases where you add a new song or repeat an existing one, ensuring that the repetition condition is respected.\",\n    \"Step 4 - Formula Derivation\": \"You can derive the formula using the principle of inclusion-exclusion and dynamic programming. Define `dp[i][j]` as the number of playlists of length `i` with `j` distinct songs, and iteratively calculate the values based on previous results.\",\n    \"Step 5 - Modulo Arithmetic\": \"Since the result can be very large, use modulo 10^9 + 7 throughout the calculation to prevent overflow and ensure the result fits within the required constraints.\",\n    \"Final Check - Constraints Verification\": \"Ensure the algorithm runs efficiently with time complexity of O(n * goal * k), which is feasible for the given constraints (0 <= k < n <= goal <= 100).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 3,\n        \"goal\": 3,\n        \"k\": 1\n      },\n      \"output\": 6,\n      \"explanation\": \"There are 6 possible playlists: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], and [3, 2, 1].\"\n    },\n    {\n      \"input\": {\n        \"n\": 2,\n        \"goal\": 3,\n        \"k\": 0\n      },\n      \"output\": 6,\n      \"explanation\": \"There are 6 possible playlists: [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], and [1, 2, 2].\"\n    },\n    {\n      \"input\": {\n        \"n\": 2,\n        \"goal\": 3,\n        \"k\": 1\n      },\n      \"output\": 2,\n      \"explanation\": \"There are 2 possible playlists: [1, 2, 1] and [2, 1, 2].\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"0 <= k < n <= goal <= 100\"\n  },\n  \"follow_up\": \"Can you optimize the solution further using a more efficient approach, such as memoization or other combinatorial techniques?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given a list of cards, partition them into groups with the same numbers."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an integer array deck where deck[i] represents the number written on the ith card. Your task is to partition the cards into one or more groups such that each group has exactly x cards, where x > 1, and all the cards in one group have the same number. You need to determine if such a partition is possible and return true if it is, otherwise return false.\",\n  \"objective\": \"Design an algorithm to check if it's possible to partition the deck into valid groups, where each group has more than one card and all cards in a group are identical. The solution should ensure efficient handling of larger arrays, taking into account the given constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that you are asked to partition the cards into groups with a size greater than 1, and each group must contain only cards with the same value. The goal is to check if a valid partition exists based on these conditions.\",\n    \"Step 2 - Key Insight\": \"The solution requires finding the greatest common divisor (GCD) of the counts of each unique card. If the GCD of all counts is greater than 1, then it's possible to divide the deck into valid groups. Otherwise, it's not.\",\n    \"Step 3 - Approach\": \"Start by counting the frequency of each unique card in the deck. Then, compute the GCD of all these frequencies. If the GCD is greater than 1, return true; otherwise, return false.\",\n    \"Step 4 - Output Format\": \"Return a boolean value (true or false) depending on whether a valid partition is possible.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"The solution should be efficient, ideally O(n), where n is the length of the deck. Handle edge cases like when all cards are identical or when the deck has only one card.\",\n    \"Final Check - Constraints Verification\": \"Ensure the solution handles cases where the deck size is up to 10^4 and the values of the cards range from 0 to 10^4.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"deck\": [\n          1,\n          2,\n          3,\n          4,\n          4,\n          3,\n          2,\n          1\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The deck can be partitioned into groups: [1,1], [2,2], [3,3], [4,4].\"\n    },\n    {\n      \"input\": {\n        \"deck\": [\n          1,\n          1,\n          1,\n          2,\n          2,\n          2,\n          3,\n          3\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The deck cannot be partitioned into valid groups as no common divisor exists for the card frequencies.\"\n    }\n  ],\n  \"constraints\": {\n    \"deck_length\": \"1 <= deck.length <= 10^4\",\n    \"deck_elements_range\": \"0 <= deck[i] < 10^4\"\n  },\n  \"follow_up\": \"Can you optimize this solution to handle large decks efficiently, keeping the time complexity within O(n)?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given an integer array `nums` and integer `k`, find a subarray of `nums` that has a sum of at least `k`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums` and an integer `k`, the task is to find the length of the shortest non-empty subarray that has a sum of at least `k`. If no such subarray exists, return -1.\",\n  \"objective\": \"Identify the length of the shortest subarray with a sum greater than or equal to `k` or return -1 if no such subarray exists.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We need to find a contiguous subarray in the array `nums` whose sum is at least `k`. The problem asks for the shortest length of such a subarray.\",\n    \"Step 2 - Initial Approach\": \"Start by checking all possible subarrays and calculating their sum. This brute force approach would be too slow for large arrays due to its O(n^2) time complexity, so we need to optimize the process.\",\n    \"Step 3 - Optimized Approach\": \"1. Compute a prefix sum array for the input array. 2. Use a deque to track potential subarrays and their indices while iterating through the prefix sum array. This allows us to efficiently check for subarrays that sum to at least `k` and find the shortest one.\",\n    \"Step 4 - Output Format\": \"Return the length of the shortest subarray, or -1 if no such subarray exists.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Consider edge cases where the array contains negative numbers and the value of `k` is large. Optimize the algorithm to work efficiently for up to 10^5 elements.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1\n        ],\n        \"k\": 1\n      },\n      \"output\": 1,\n      \"explanation\": \"The only subarray is [1], which has a sum of 1, meeting the requirement.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2\n        ],\n        \"k\": 4\n      },\n      \"output\": -1,\n      \"explanation\": \"There is no subarray with a sum of at least 4.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          -1,\n          2\n        ],\n        \"k\": 3\n      },\n      \"output\": 3,\n      \"explanation\": \"The subarray [2, -1, 2] has a sum of 3, which is the smallest subarray meeting the requirement.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"1 <= nums.length <= 10^5\",\n    \"range_of_values\": \"-10^5 <= nums[i] <= 10^5\",\n    \"value_of_k\": \"1 <= k <= 10^9\"\n  },\n  \"follow_up\": \"Can you implement a solution with a time complexity of O(n)?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum points you can get by removing groups of boxes with the same color from an array. Points are calculated as k * k for a group of size k."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of boxes with colors represented by integers, find the maximum points obtainable by removing contiguous groups of boxes with the same color. Points for each group are calculated as k * k, where k is the number of contiguous boxes removed in each move.\",\n  \"objective\": \"Implement a dynamic programming solution that uses memoization to track maximum points while accounting for different combinations of contiguous colored groups. Use a 3D dp array to store the best points possible for each subarray with trailing groups of similar elements, ensuring efficient computation without redundant calculations.\",\n  \"meta_prompt\": {\n    \"Step 1 - Define DP Array\": \"Define a 3D dp array `dp[l][r][k]` where l is the start index, r is the end index of the subarray, and k represents the number of contiguous elements similar to `boxes[r]` at the end. This array will store the maximum points achievable for each possible subarray configuration.\",\n    \"Step 2 - Initialize Base Cases\": \"Define base cases for the recursive function by setting dp values where only one group can be removed directly (e.g., contiguous end elements in the subarray). For each configuration, calculate points by removing trailing similar elements first.\",\n    \"Step 3 - Recursive DP with Memoization\": \"Define a recursive function `calculatePoints` that takes start and end indices `l` and `r` and trailing group size `k`. For each call, calculate the maximum points by exploring two main strategies: (1) directly removing trailing similar elements, and (2) finding earlier elements similar to the trailing group and combining them by recursively calculating points for intermediate subarrays.\",\n    \"Step 4 - Update DP Array for Optimal Points\": \"Within `calculatePoints`, update `dp[l][r][k]` with the maximum value obtained from either strategy. This ensures each subarray and trailing configuration yields the best possible points while avoiding recomputation.\",\n    \"Step 5 - Return Result\": \"After filling the DP array, return `dp[0][n-1][0]` as the result, which contains the maximum points for the entire array starting with zero trailing similar elements.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution handles arrays of maximum size (100) and that the dp array only stores configurations within feasible limits. Verify that all subarray calculations align with constraints and result in optimal points.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"boxes\": [\n          1,\n          3,\n          2,\n          2,\n          2,\n          3,\n          4,\n          3,\n          1\n        ]\n      },\n      \"output\": 23,\n      \"explanation\": \"Optimal sequence of moves includes removing `[2,2,2]` for 9 points, then remaining `[3]` for 1 point, followed by `[3,3,3]` for 9 points, and finally `[1,1]` for 4 points.\"\n    },\n    {\n      \"input\": {\n        \"boxes\": [\n          1,\n          1,\n          1\n        ]\n      },\n      \"output\": 9,\n      \"explanation\": \"Removing all three `[1,1,1]` in one move gives the maximum points (3*3 = 9).\"\n    }\n  ],\n  \"constraints\": {\n    \"box_length\": \"1 <= boxes.length <= 100\",\n    \"box_values\": \"1 <= boxes[i] <= 100\"\n  },\n  \"follow_up\": \"Explore methods to reduce the dp array's dimensions or apply bottom-up dynamic programming for further optimization.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count the number of black lonely pixels in an `m x n` picture grid. A black lonely pixel is a black pixel ('B') where no other black pixels exist in the same row or column."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `m x n` picture grid containing black `'B'` and white `'W'` pixels, count the number of black lonely pixels. A black lonely pixel is a pixel where no other black pixels exist in the same row or column.\",\n  \"objective\": \"Implement a space-optimized approach to count black lonely pixels by using the picture matrix itself to track counts of black pixels per row and column, avoiding additional space usage.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Identify that a lonely black pixel `'B'` must have no other black pixels in the same row or column. Leverage matrix properties to efficiently count black pixels per row and column.\",\n    \"Step 2 - Row and Column Counting Optimization\": \"Use the first row and first column of the matrix to store black pixel counts for each column and row respectively. Handle lonely pixels in the first row and column separately before using them as counters.\",\n    \"Step 3 - Initial Check for First Row and Column\": \"Count lonely pixels in the first row and column. For each black cell in these areas, confirm that no other black cells exist in the respective row or column.\",\n    \"Step 4 - In-Place Counting\": \"For each black cell outside the first row and column, increment the count in the first cell of its row and the first cell of its column. This uses the first row and column as black pixel counters.\",\n    \"Step 5 - Final Count Verification\": \"Iterate through the matrix to check if each black cell has a count of 1 in both its row and column counters (from the first row/column), confirming it\\u2019s a lonely pixel.\",\n    \"Step 6 - Complexity and Constraints\": \"Optimize to O(m * n) time complexity and O(1) space complexity beyond the input matrix by storing counts directly in the picture. Ensure the solution handles up to `500x500` grids.\",\n    \"Final Check - Constraints Verification\": \"Ensure the solution efficiently handles large matrices up to `500 x 500` with optimal space usage by using in-place row and column counters.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"picture\": [\n          [\n            \"W\",\n            \"W\",\n            \"B\"\n          ],\n          [\n            \"W\",\n            \"B\",\n            \"W\"\n          ],\n          [\n            \"B\",\n            \"W\",\n            \"W\"\n          ]\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"All three black pixels are lonely, so the output is 3.\"\n    },\n    {\n      \"input\": {\n        \"picture\": [\n          [\n            \"B\",\n            \"B\",\n            \"B\"\n          ],\n          [\n            \"B\",\n            \"B\",\n            \"W\"\n          ],\n          [\n            \"B\",\n            \"B\",\n            \"B\"\n          ]\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"No black pixel is lonely as each row and column contains multiple black pixels.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size_range\": \"1 <= m, n <= 500\",\n    \"cell_values\": \"Each cell is 'W' or 'B'.\"\n  },\n  \"follow_up\": \"Could you adapt this solution to handle cases where we dynamically update the grid and need to count lonely pixels efficiently after each update?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the kth largest number in a list."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `nums` and an integer `k`, find the kth largest element in the array.\",\n  \"objective\": \"Implement an efficient solution using a quickselect algorithm to achieve an average time complexity of `O(n)`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand Problem\": \"Clarify that the kth largest element is the kth in sorted order, not necessarily unique.\",\n    \"Step 2 - Partition Logic\": \"Use the partitioning concept from quicksort to isolate the kth largest element.\",\n    \"Step 3 - Optimize for Average Case\": \"Ensure the algorithm stops partitioning once the kth element is found.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider cases like single-element arrays or when all elements are equal.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          2,\n          1,\n          5,\n          6,\n          4\n        ],\n        \"k\": 2\n      },\n      \"output\": 5,\n      \"explanation\": \"The 2nd largest element is 5 in the sorted array [1, 2, 3, 4, 5, 6].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          2,\n          3,\n          1,\n          2,\n          4,\n          5,\n          5,\n          6\n        ],\n        \"k\": 4\n      },\n      \"output\": 4,\n      \"explanation\": \"The 4th largest element is 4 in the sorted array [1, 2, 2, 3, 3, 4, 5, 5, 6].\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10^5\",\n    \"value_range\": \"-10^4 <= nums[i] <= 10^4\",\n    \"k_range\": \"1 <= k <= nums.length\"\n  },\n  \"follow_up\": \"Could you solve the problem using a min-heap for an alternative `O(n log k)` solution?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find strings in words1 that contain all characters from words2."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given two string arrays, words1 and words2. A string b is a subset of string a if every letter in b occurs in a, including multiplicity. For example, 'wrr' is a subset of 'warrior' but is not a subset of 'world'. A string a from words1 is universal if for every string b in words2, b is a subset of a. Your task is to return all the universal strings from words1. The answer can be in any order.\",\n  \"objective\": \"Design an algorithm to identify all universal strings in words1 that satisfy the condition for every string in words2. Each string from words2 must be a subset of the universal strings from words1.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Start by understanding that words1 contains a list of strings, and words2 contains a list of strings that need to be checked as subsets of each string in words1.\",\n    \"Step 2 - Initial Approach\": \"For each string in words1, check if all strings in words2 are subsets of that string. A string b is a subset of string a if each letter of b occurs in a with the required multiplicity.\",\n    \"Step 3 - Efficient Subset Check\": \"Consider using a frequency counter to efficiently compare the character counts in words1 and words2. This will allow you to check if one string is a subset of another.\",\n    \"Step 4 - Output Format\": \"Return an array of all universal strings from words1, ensuring the output is an array of strings that satisfy the subset condition for every string in words2.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Focus on optimizing the solution to handle large input sizes. Pay attention to edge cases like strings with repeated characters and empty strings in the input.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution works within the provided constraints, i.e., words1 and words2 can each have up to 10^4 elements, and each word can be up to 10 characters long.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"words1\": [\n          \"amazon\",\n          \"apple\",\n          \"facebook\",\n          \"google\",\n          \"leetcode\"\n        ],\n        \"words2\": [\n          \"e\",\n          \"o\"\n        ]\n      },\n      \"output\": [\n        \"facebook\",\n        \"google\",\n        \"leetcode\"\n      ],\n      \"explanation\": \"The strings 'facebook', 'google', and 'leetcode' all contain the characters 'e' and 'o', making them universal strings.\"\n    },\n    {\n      \"input\": {\n        \"words1\": [\n          \"amazon\",\n          \"apple\",\n          \"facebook\",\n          \"google\",\n          \"leetcode\"\n        ],\n        \"words2\": [\n          \"l\",\n          \"e\"\n        ]\n      },\n      \"output\": [\n        \"apple\",\n        \"google\",\n        \"leetcode\"\n      ],\n      \"explanation\": \"The strings 'apple', 'google', and 'leetcode' all contain the characters 'l' and 'e', making them universal strings.\"\n    }\n  ],\n  \"constraints\": {\n    \"words1_length\": \"1 <= words1.length <= 10^4\",\n    \"words2_length\": \"1 <= words2.length <= 10^4\",\n    \"word_length_range\": \"1 <= words1[i].length, words2[i].length <= 10\",\n    \"unique_strings_in_words1\": \"All strings in words1 are unique.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle the maximum input sizes efficiently? Consider how you might reduce the time complexity by utilizing frequency counts or other data structures.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number in an array that appears only once while all others appear twice."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a non-empty array of integers `nums`, every element appears twice except for one. Find the element that appears only once. The solution must have linear runtime complexity and use only constant extra space.\",\n  \"objective\": \"Design an efficient algorithm to find the single number in the array.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task requires identifying a single unique element in an array where all other elements appear exactly twice.\",\n    \"Step 2 - Bit Manipulation\": \"Use the XOR operation to efficiently find the single number, as XOR cancels out duplicate values.\",\n    \"Step 3 - Implement the XOR Approach\": \"Iterate through the array and XOR all elements together. The result will be the unique number.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as arrays with a single element or large positive and negative values.\",\n    \"Step 5 - Optimize\": \"Ensure the solution runs in O(n) time and uses O(1) extra space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          2,\n          1\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"All elements except 1 appear twice, so 1 is the single number.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          4,\n          1,\n          2,\n          1,\n          2\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"All elements except 4 appear twice, so 4 is the single number.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The array contains only one element, which is the single number.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 3 * 10^4\",\n    \"element_values\": \"-3 * 10^4 <= nums[i] <= 3 * 10^4\"\n  },\n  \"follow_up\": \"Can you explain why XOR operation satisfies the requirements of this problem?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the smallest substring of `s` that contains all characters of `t`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two strings `s` and `t`, find the **minimum window substring** of `s` that contains all characters of `t` (including duplicates). If no such substring exists, return an empty string. The solution should be optimized for `O(m + n)` time complexity.\",\n  \"objective\": \"Design an efficient sliding window algorithm to find the minimum substring of `s` that includes all characters from `t`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves finding a substring of `s` that contains all characters of `t` with their frequencies. This is a sliding window problem.\",\n    \"Step 2 - Use Two Pointers\": \"Implement a sliding window approach using two pointers to expand and contract the window while checking if it contains all characters of `t`.\",\n    \"Step 3 - Frequency Map\": \"Maintain a frequency map of characters in `t` and another map for the current window in `s`. Track the number of valid characters in the current window.\",\n    \"Step 4 - Optimization\": \"Expand the window by moving the right pointer, and contract it by moving the left pointer only when the window is valid. Update the minimum window size during contraction.\",\n    \"Step 5 - Constraints Compliance\": \"Ensure the algorithm handles constraints such as `1 <= m, n <= 10^5` efficiently.\",\n    \"Step 6 - Handle Edge Cases\": \"Consider cases where `t` contains characters not in `s`, `t` is longer than `s`, or `s` contains repeated valid windows.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"ADOBECODEBANC\",\n        \"t\": \"ABC\"\n      },\n      \"output\": \"BANC\",\n      \"explanation\": \"The substring 'BANC' contains all characters of 'ABC' with the minimum length.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"a\",\n        \"t\": \"a\"\n      },\n      \"output\": \"a\",\n      \"explanation\": \"The entire string 'a' is the minimum window containing 'a'.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"a\",\n        \"t\": \"aa\"\n      },\n      \"output\": \"\",\n      \"explanation\": \"The string 's' does not contain enough 'a's to satisfy 't'.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= m, n <= 10^5\",\n    \"valid_characters\": \"`s` and `t` consist of uppercase and lowercase English letters.\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm to handle scenarios with very large strings and frequent updates to the target string `t`?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Perform a postorder traversal of a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary tree, return the postorder traversal of its nodes' values. Postorder traversal visits nodes in the order: left subtree, right subtree, and then the root.\",\n  \"objective\": \"Design an algorithm to perform postorder traversal of a binary tree.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that postorder traversal involves visiting nodes in the left, right, root order.\",\n    \"Step 2 - Recursive Approach\": \"Use a recursive function to traverse the tree in postorder.\",\n    \"Step 3 - Iterative Approach\": \"Implement an iterative solution using a stack to simulate recursion.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as an empty tree, a single-node tree, or highly unbalanced trees.\",\n    \"Step 5 - Optimize\": \"Ensure the solution handles large trees efficiently and is memory-efficient.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          null,\n          2,\n          3\n        ]\n      },\n      \"output\": [\n        3,\n        2,\n        1\n      ],\n      \"explanation\": \"Visit the left subtree first, then the right subtree, and finally the root.\"\n    },\n    {\n      \"input\": {\n        \"root\": []\n      },\n      \"output\": [],\n      \"explanation\": \"An empty tree results in an empty traversal.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1\n        ]\n      },\n      \"output\": [\n        1\n      ],\n      \"explanation\": \"A single-node tree results in a traversal with that node.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 100\",\n    \"node_values\": \"-100 <= Node.val <= 100\"\n  },\n  \"follow_up\": \"Can you implement the traversal iteratively and optimize for memory usage?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find two words in an array that don\u2019t share letters and return the product of their lengths."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of strings `words`, find the maximum value of `length(word[i]) * length(word[j])` where `word[i]` and `word[j]` do not share any common letters. Return `0` if no such pair of words exists.\",\n  \"objective\": \"Design an efficient algorithm to compute the maximum product of lengths of two words that do not share any letters, optimizing for both time and space complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Identify the key requirement: the two words must not share any common letters. Use bitwise representation for each word to efficiently check for common letters.\",\n    \"Step 2 - Preprocessing\": \"Precompute a bitmask for each word, where each bit represents whether a specific letter ('a' to 'z') exists in the word.\",\n    \"Step 3 - Pairwise Comparison\": \"Iterate over all pairs of words. For each pair, use the bitmasks to verify if the words share common letters by checking if the bitwise AND operation of their masks equals zero.\",\n    \"Step 4 - Compute Maximum Product\": \"If two words do not share letters, calculate their product of lengths and update the maximum value.\",\n    \"Step 5 - Edge Cases\": \"Handle cases where no such pair exists, and ensure the solution is robust for edge inputs like single-character words or arrays with duplicates.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"words\": [\n          \"abcw\",\n          \"baz\",\n          \"foo\",\n          \"bar\",\n          \"xtfn\",\n          \"abcdef\"\n        ]\n      },\n      \"output\": 16,\n      \"explanation\": \"The words 'abcw' and 'xtfn' do not share any letters, and their lengths are 4 and 4, respectively, resulting in a product of 16.\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"a\",\n          \"ab\",\n          \"abc\",\n          \"d\",\n          \"cd\",\n          \"bcd\",\n          \"abcd\"\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"The words 'ab' and 'cd' do not share letters, and their lengths are 2 and 2, respectively, resulting in a product of 4.\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"a\",\n          \"aa\",\n          \"aaa\",\n          \"aaaa\"\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"No two words in the array are free of common letters.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"2 <= words.length <= 1000\",\n    \"word_length\": \"1 <= words[i].length <= 1000\",\n    \"characters\": \"words[i] consists only of lowercase English letters.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle large input sizes using bitwise operations?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Write a function to reverse all vowels in a string."}, {"role": "assistant", "content": "{\n  \"description\": \"Reverse only the vowels in a given string `s` while preserving the order of all other characters.\",\n  \"objective\": \"Design an efficient algorithm to reverse vowels in the string in place with minimal auxiliary memory.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand the Problem\": \"The task is to reverse the order of vowels in the string `s` while keeping the non-vowel characters in their original positions.\",\n    \"Step 2 - Constraints\": [\n      \"Vowels include both lowercase (`a`, `e`, `i`, `o`, `u`) and uppercase (`A`, `E`, `I`, `O`, `U`) characters.\",\n      \"Non-vowel characters remain unchanged in their positions.\",\n      \"The input string length is between 1 and 3 \\u00d7 10^5.\"\n    ],\n    \"Step 3 - Algorithm\": [\n      \"1. Use a two-pointer approach:\",\n      \"   - Initialize `left` at the start of the string and `right` at the end.\",\n      \"   - While `left < right`, move the `left` pointer forward until it points to a vowel.\",\n      \"   - Similarly, move the `right` pointer backward until it points to a vowel.\",\n      \"2. Swap the vowels at the `left` and `right` pointers.\",\n      \"3. Move both pointers inward and repeat until they meet or cross.\"\n    ],\n    \"Step 4 - Complexity\": \"Ensure the solution runs in `O(n)` time and uses `O(1)` additional space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": \"hello\",\n      \"output\": \"holle\",\n      \"explanation\": \"The vowels 'e' and 'o' are reversed in their positions.\"\n    },\n    {\n      \"input\": \"leetcode\",\n      \"output\": \"leotcede\",\n      \"explanation\": \"The vowels 'e', 'e', and 'o' are reversed while the rest of the string remains unchanged.\"\n    }\n  ],\n  \"constraints\": {\n    \"length\": \"1 <= s.length <= 3 \\u00d7 10^5\",\n    \"character_set\": \"`s` consists of printable ASCII characters.\"\n  },\n  \"follow_up\": \"Can you adapt the algorithm to reverse only consonants while preserving vowel positions?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Design an algorithm to insert a new node into a complete binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Design an algorithm to insert a new node into a complete binary tree while maintaining the completeness of the tree. Implement the `CBTInserter` class that supports two operations: inserting a node and getting the root of the tree.\",\n  \"objective\": \"Ensure that a node is inserted into the complete binary tree such that the tree remains complete after each insertion. Implement methods for inserting nodes and retrieving the root of the tree.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"A complete binary tree requires every level to be filled except possibly the last, and the last level should be filled from left to right. We need to maintain this property when inserting a new node into the tree.\",\n    \"Step 2 - Initial Approach\": \"Use a queue to keep track of the nodes at the last level of the tree. Inserting a new node means adding it to the leftmost available position in the tree, which is the first node in the queue that doesn\\u2019t have a left child.\",\n    \"Step 3 - Efficient Algorithm\": \"To insert a node, pop a node from the queue, add the new node as its left or right child, and push any newly created child nodes into the queue. For the `get_root` method, simply return the current root of the tree.\",\n    \"Step 4 - Edge Case Considerations\": \"Consider cases where the tree has only one node or where all levels except the last are full. These cases should still maintain the completeness of the tree after insertion.\",\n    \"Step 5 - Constraints Handling\": \"The problem constraints are manageable for a BFS-like approach to keep track of the nodes in the last level. We can handle up to 10,000 operations efficiently by using a queue.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"operations\": [\n          [\n            \"CBTInserter\",\n            [\n              [\n                1,\n                2\n              ]\n            ]\n          ],\n          [\n            \"insert\",\n            [\n              3\n            ]\n          ],\n          [\n            \"insert\",\n            [\n              4\n            ]\n          ],\n          [\n            \"get_root\",\n            []\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        1,\n        2,\n        [\n          1,\n          2,\n          3,\n          4\n        ]\n      ],\n      \"explanation\": \"The tree initially contains [1, 2]. After inserting 3, it becomes [1, 2, 3], and after inserting 4, it becomes [1, 2, 3, 4]. The root remains [1, 2, 3, 4].\"\n    }\n  ],\n  \"constraints\": {\n    \"nodes_in_tree\": \"1 <= number of nodes <= 1000\",\n    \"value_range\": \"0 <= Node.val <= 5000\",\n    \"max_operations\": \"At most 10,000 calls to insert and get_root\"\n  },\n  \"follow_up\": \"Can you optimize the insertion process to work with a larger number of nodes or more frequent insertions?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum average of a subarray with a given length k."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array and an integer k, find the contiguous subarray of length k with the maximum average value and return the average.\",\n  \"objective\": \"Efficiently calculate the maximum average of all contiguous subarrays of length k using cumulative sum or sliding window techniques.\",\n  \"meta_prompt\": {\n    \"Step 1 - Compute Cumulative Sum\": \"Create a cumulative sum array where each entry represents the sum of elements in the original array up to that index.\",\n    \"Step 2 - Calculate Subarray Sums\": \"Iterate through the cumulative sum array to calculate the sum of each subarray of length k using the difference between two cumulative sums.\",\n    \"Step 3 - Track Maximum Average\": \"Keep track of the maximum sum encountered and divide it by k to find the maximum average.\",\n    \"Step 4 - Return Result\": \"Return the maximum average, ensuring precision to within 10^-5.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          12,\n          -5,\n          -6,\n          50,\n          3\n        ],\n        \"k\": 4\n      },\n      \"output\": 12.75,\n      \"explanation\": \"The subarray [12, -5, -6, 50] has the maximum sum of 51, and its average is 12.75.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          5\n        ],\n        \"k\": 1\n      },\n      \"output\": 5.0,\n      \"explanation\": \"With only one element, the subarray is [5] with an average of 5.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10^5\",\n    \"value_range\": \"-10^4 <= nums[i] <= 10^4\",\n    \"subarray_length\": \"1 <= k <= nums.length\"\n  },\n  \"follow_up\": \"Analyze the time and space complexity of using a sliding window approach instead of a cumulative sum array. Discuss which approach is more suitable for larger arrays.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Write a function to get the vertical order of a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary tree, return the **vertical order traversal** of its nodes' values. The traversal must be organized as follows: nodes in the same column should appear in top-to-bottom order. If two nodes share the same row and column, they should appear from **left to right**. The output is a list of lists, where each inner list represents the nodes in one vertical column, from leftmost column to rightmost column.\",\n  \"objective\": \"Implement a function to perform vertical order traversal of a binary tree efficiently, ensuring proper ordering within each column and handling edge cases like nodes with the same position.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that each node in the binary tree can be represented by a vertical column and horizontal level. Use a coordinate system where the root is at `(0, 0)`, left child is at `(x-1, y+1)`, and right child is at `(x+1, y+1)`.\",\n    \"Step 2 - Data Structure Selection\": \"Use a dictionary to map each column (x-coordinate) to a list of node values. Traverse the tree using level-order traversal (BFS) to ensure top-to-bottom and left-to-right order.\",\n    \"Step 3 - Sorting\": \"Sort the dictionary keys (column indices) to determine the order of the output. For nodes in the same column and row, preserve their insertion order to maintain left-to-right ordering.\",\n    \"Step 4 - Edge Cases\": \"Handle cases like an empty tree (return an empty list), or all nodes in a single column (e.g., a left-skewed tree).\",\n    \"Step 5 - Output Format\": \"Return a list of lists, where each sublist represents nodes in a single vertical column, ordered from leftmost to rightmost.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          9,\n          20,\n          null,\n          null,\n          15,\n          7\n        ]\n      },\n      \"output\": [\n        [\n          9\n        ],\n        [\n          3,\n          15\n        ],\n        [\n          20\n        ],\n        [\n          7\n        ]\n      ],\n      \"explanation\": \"Column -1: [9], Column 0: [3, 15], Column 1: [20], Column 2: [7]\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          9,\n          8,\n          4,\n          0,\n          1,\n          7\n        ]\n      },\n      \"output\": [\n        [\n          4\n        ],\n        [\n          9\n        ],\n        [\n          3,\n          0,\n          1\n        ],\n        [\n          8\n        ],\n        [\n          7\n        ]\n      ],\n      \"explanation\": \"Column -2: [4], Column -1: [9], Column 0: [3, 0, 1], Column 1: [8], Column 2: [7]\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          9,\n          8,\n          4,\n          0,\n          1,\n          7,\n          null,\n          null,\n          null,\n          2,\n          5\n        ]\n      },\n      \"output\": [\n        [\n          4\n        ],\n        [\n          9,\n          5\n        ],\n        [\n          3,\n          0,\n          1\n        ],\n        [\n          8,\n          2\n        ],\n        [\n          7\n        ]\n      ],\n      \"explanation\": \"Column -2: [4], Column -1: [9, 5], Column 0: [3, 0, 1], Column 1: [8, 2], Column 2: [7]\"\n    }\n  ],\n  \"constraints\": {\n    \"node_range\": \"The number of nodes is between 0 and 100.\",\n    \"value_range\": \"Each node value is between -100 and 100.\"\n  },\n  \"follow_up\": \"Can you solve the problem without sorting during traversal, ensuring an O(n) complexity solution where n is the number of nodes?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Use `rand7()` to create `rand10()`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the API `rand7()` that generates a uniform random integer in the range `[1, 7]`, your task is to implement `rand10()` that generates a uniform random integer in the range `[1, 10]`. The implementation must use only `rand7()` and ensure uniformity of the output distribution across all values in the range `[1, 10]`.\",\n  \"objective\": \"Design an algorithm to generate uniform random integers in the range `[1, 10]` while minimizing the number of calls to `rand7()` and ensuring the results are unbiased.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand the Problem\": \"The key challenge is to derive a uniform distribution for `[1, 10]` from a uniform distribution for `[1, 7]`. Since `rand7()` is uniform, we can use it to build larger random ranges and map these to `[1, 10]`.\",\n    \"Step 2 - Initial Idea\": \"Generate numbers in a larger range (e.g., `[1, 49]` by using `rand7()` twice). Then, map these numbers uniformly to `[1, 10]`. Reject numbers that exceed the largest multiple of 10 within the range to maintain uniformity.\",\n    \"Step 3 - Optimization\": \"Optimize by reducing the expected number of calls to `rand7()` through careful rejection sampling or other mathematical transformations.\",\n    \"Step 4 - Implementation\": \"1. Generate numbers in `[1, 49]` by computing `(rand7() - 1) * 7 + rand7()`. 2. Map valid results to `[1, 10]`. 3. Reject numbers outside the desired range and repeat the process until a valid number is produced.\",\n    \"Step 5 - Follow-Up Questions\": \"Consider the expected number of calls to `rand7()` and explore ways to minimize this value while maintaining correctness and uniformity.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 1\n      },\n      \"output\": [\n        2\n      ],\n      \"explanation\": \"In this case, `rand10()` was called once, and the result was 2, which is within the range `[1, 10]`.\"\n    },\n    {\n      \"input\": {\n        \"n\": 2\n      },\n      \"output\": [\n        3,\n        8\n      ],\n      \"explanation\": \"Two calls to `rand10()` were made, generating 3 and 8. Both are valid outputs in the range `[1, 10]`.\"\n    },\n    {\n      \"input\": {\n        \"n\": 3\n      },\n      \"output\": [\n        4,\n        7,\n        10\n      ],\n      \"explanation\": \"Three calls to `rand10()` were made, and the outputs are uniformly distributed in `[1, 10]`.\"\n    }\n  ],\n  \"constraints\": {\n    \"rand7_uniformity\": \"Ensure that `rand7()` is used in a way that maintains uniformity of output in `[1, 10]`.\",\n    \"minimize_calls\": \"Minimize the expected number of calls to `rand7()`.\",\n    \"valid_range\": \"Output must always lie in `[1, 10]`.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"What is the expected number of calls to `rand7()` in your solution?\",\n    \"question_2\": \"Can you further optimize the algorithm to reduce calls to `rand7()` while maintaining uniformity?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Design a data structure that can determine if one character in a word can be changed to match a word in a predefined dictionary."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a data structure that can determine if exactly one character in a given word can be changed to match any word in a pre-defined dictionary.\",\n  \"objective\": \"Implement a trie-based MagicDictionary with a method to build the dictionary and a search method that supports one-character modifications.\",\n  \"meta_prompt\": {\n    \"Step 1 - Define Trie Structure\": \"Use a TrieNode class where each node contains a map of child characters and a boolean indicating if the node is the end of a word.\",\n    \"Step 2 - Build the Dictionary\": \"Insert all words from the input dictionary into the trie, character by character.\",\n    \"Step 3 - Implement Search Logic\": \"Perform a recursive search to traverse the trie. Allow exactly one character modification during the traversal and verify if it matches a word in the dictionary.\",\n    \"Step 4 - Handle Exact Modification\": \"Use a flag during the search to ensure only one character change is made. If a match is found after exactly one modification, return `true`.\",\n    \"Step 5 - Return Result\": \"If no valid match is found during the traversal, return `false`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"commands\": [\n          \"MagicDictionary\",\n          \"buildDict\",\n          \"search\",\n          \"search\",\n          \"search\",\n          \"search\"\n        ],\n        \"arguments\": [\n          [],\n          [\n            [\n              \"hello\",\n              \"leetcode\"\n            ]\n          ],\n          [\n            \"hello\"\n          ],\n          [\n            \"hhllo\"\n          ],\n          [\n            \"hell\"\n          ],\n          [\n            \"leetcoded\"\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        null,\n        false,\n        true,\n        false,\n        false\n      ],\n      \"explanation\": \"The dictionary is built with words ['hello', 'leetcode']. Only 'hhllo' can be modified to match 'hello' with one character change.\"\n    },\n    {\n      \"input\": {\n        \"commands\": [\n          \"MagicDictionary\",\n          \"buildDict\",\n          \"search\"\n        ],\n        \"arguments\": [\n          [],\n          [\n            [\n              \"a\",\n              \"b\",\n              \"c\"\n            ]\n          ],\n          [\n            \"d\"\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        null,\n        false\n      ],\n      \"explanation\": \"The dictionary contains single-letter words ['a', 'b', 'c']. 'd' cannot match any word with one character change.\"\n    }\n  ],\n  \"constraints\": {\n    \"dictionary_size\": \"1 <= dictionary.length <= 100\",\n    \"word_length\": \"1 <= dictionary[i].length <= 100\",\n    \"query_word_length\": \"1 <= searchWord.length <= 100\",\n    \"character_set\": \"dictionary[i] and searchWord consist of lowercase English letters only\",\n    \"function_calls\": \"At most 100 calls to `search` are allowed.\"\n  },\n  \"follow_up\": \"Analyze the time complexity of the trie-based implementation and compare it to a brute-force approach for handling one-character modifications.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the next character that is larger than the target in a list of characters."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the smallest character in a sorted array of characters that is lexicographically greater than a target character using binary search.\",\n  \"objective\": \"Use binary search to efficiently identify the smallest character greater than the target, taking advantage of the sorted nature of the input array.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Perform a binary search to locate the position of the smallest character greater than the target.\",\n    \"Step 2\": \"If no character in the array is greater than the target, return the first character (wrap around). Otherwise, return the character at the located position.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"letters\": [\n          \"c\",\n          \"f\",\n          \"j\"\n        ],\n        \"target\": \"a\"\n      },\n      \"output\": \"c\",\n      \"explanation\": \"The smallest character greater than 'a' is 'c'.\"\n    },\n    {\n      \"input\": {\n        \"letters\": [\n          \"c\",\n          \"f\",\n          \"j\"\n        ],\n        \"target\": \"c\"\n      },\n      \"output\": \"f\",\n      \"explanation\": \"The smallest character greater than 'c' is 'f'.\"\n    },\n    {\n      \"input\": {\n        \"letters\": [\n          \"x\",\n          \"x\",\n          \"y\",\n          \"y\"\n        ],\n        \"target\": \"z\"\n      },\n      \"output\": \"x\",\n      \"explanation\": \"No character is greater than 'z', so wrap around to the first character 'x'.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"2 <= letters.length <= 10^4\",\n    \"array_content\": \"letters contains only lowercase English letters and is sorted.\",\n    \"target_validity\": \"Target is a lowercase English letter.\"\n  },\n  \"follow_up\": \"Analyze the time complexity and space complexity of the binary search approach. Compare its efficiency with linear search for both small and large datasets.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Convert a number to a Roman numeral."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `num`, convert it into its corresponding Roman numeral representation. Roman numerals are formed by combining specific symbols (`I`, `V`, `X`, `L`, `C`, `D`, `M`) based on their values and using subtraction rules for specific cases like 4, 9, 40, etc.\",\n  \"objective\": \"Design an efficient algorithm to convert an integer into its Roman numeral representation by systematically handling the values and subtraction rules.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the Roman numeral system and its subtraction rules. Roman numerals are formed by combining symbols from largest to smallest, and special cases use subtraction rules.\",\n    \"Step 2 - Initial Approach\": \"Iteratively subtract the largest possible Roman numeral values from the number and append their corresponding symbols to the result string.\",\n    \"Step 3 - Handling Subtraction Rules\": \"Incorporate cases where subtraction is required (e.g., `4 = IV`, `9 = IX`, `40 = XL`). Ensure these cases are prioritized appropriately in the conversion.\",\n    \"Step 4 - Edge Cases\": \"Handle edge cases like the smallest input (`num = 1` \\u2192 `I`) and the largest input (`num = 3999` \\u2192 `MMMCMXCIX`).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"num\": 3\n      },\n      \"output\": \"III\",\n      \"explanation\": \"The number 3 is represented as three ones: `III`.\"\n    },\n    {\n      \"input\": {\n        \"num\": 58\n      },\n      \"output\": \"LVIII\",\n      \"explanation\": \"The number 58 is represented as `L = 50`, `V = 5`, and `III = 3`.\"\n    },\n    {\n      \"input\": {\n        \"num\": 1994\n      },\n      \"output\": \"MCMXCIV\",\n      \"explanation\": \"The number 1994 is represented as `M = 1000`, `CM = 900`, `XC = 90`, and `IV = 4`.\"\n    }\n  ],\n  \"constraints\": {\n    \"num_range\": \"1 <= num <= 3999\"\n  },\n  \"follow_up\": \"Can you extend this solution to validate Roman numeral strings and convert them back into integers?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the smallest substring of `s1` that contains all characters of `s2` in order."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the minimum contiguous substring of `s1` that contains all characters of `s2` as a subsequence in the correct order.\",\n  \"objective\": \"Use dynamic programming to efficiently determine the minimum-length substring of `s1` such that `s2` is a subsequence, and return the leftmost solution if multiple substrings exist.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Initialize a 2D array `dp` where `dp[i][j]` stores the starting index of the substring of `s1[0...j]` that contains `s2[0...i]` as a subsequence. Set invalid values to -1.\",\n    \"Step 2\": \"Fill the base case for `dp[0][j]`, where `s2` is empty, to be all `j` (all starting indices are valid).\",\n    \"Step 3\": \"Iterate through `s1` and `s2`. If `s2[i-1] == s1[j-1]`, set `dp[i][j] = dp[i-1][j-1]`. Otherwise, inherit `dp[i][j] = dp[i][j-1]`.\",\n    \"Step 4\": \"After building the `dp` table, check the last row (corresponding to the entirety of `s2`) for the smallest valid substring by comparing lengths and choosing the leftmost starting index for ties.\",\n    \"Step 5\": \"If no valid starting index exists in the last row, return an empty string.\",\n    \"Step 6\": \"Construct the result substring using the identified starting and ending indices.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s1\": \"abcdebdde\",\n        \"s2\": \"bde\"\n      },\n      \"output\": \"bcde\",\n      \"explanation\": \"`s2` is found as a subsequence in `s1` starting at index 1 and ending at index 4. 'bcde' is the smallest window.\"\n    },\n    {\n      \"input\": {\n        \"s1\": \"jmeqksfrsdcmsiwvaovztaqenprpvnbstl\",\n        \"s2\": \"u\"\n      },\n      \"output\": \"\",\n      \"explanation\": \"`s2` is not a subsequence of any part of `s1`, so the result is an empty string.\"\n    }\n  ],\n  \"constraints\": {\n    \"length_constraints\": \"1 <= s1.length <= 2 * 10^4, 1 <= s2.length <= 100\",\n    \"characters\": \"s1 and s2 consist of lowercase English letters\"\n  },\n  \"follow_up\": \"Discuss optimizations for the `dp` approach and compare with a greedy two-pointer solution.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find two numbers in this list that add up to a target number."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of integers `nums` and an integer `target`, your task is to find the indices of two numbers within `nums` that add up to exactly `target`. Each input is guaranteed to have exactly one solution, meaning only one unique pair of indices will satisfy the condition `nums[i] + nums[j] == target`. You cannot use the same element twice in a solution, meaning `i` must not equal `j`. The output should be a list of two indices, which can be in any order.\",\n  \"objective\": \"Design an efficient algorithm that finds a pair of indices in the array whose corresponding values sum up to the given target, aiming for an optimal solution in terms of runtime complexity, ideally better than `O(n^2)`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Start by understanding the structure of the input: `nums` is an array with integer elements, and `target` is a single integer. The goal is to identify a pair of indices within `nums` such that the values at these indices sum to `target`.\",\n    \"Step 2 - Initial Approach\": \"Consider using a nested loop to check all pairs of elements; however, this would have `O(n^2)` time complexity and may not be efficient enough for large inputs. Instead, try using a hash map to store elements and their indices as you iterate through `nums`.\",\n    \"Step 3 - Optimal Solution with Hash Map\": \"Iterate over each element in `nums`, calculating the complement `target - nums[i]` at each step. Check if this complement is already in the hash map. If it is, then the current index and the index of the complement (stored in the hash map) are the solution. If not, store the current element and its index in the hash map for future reference.\",\n    \"Step 4 - Output Format\": \"Return the indices as a list in any order, such as `[index1, index2]`. Ensure that the code handles edge cases, such as when `nums` contains only two elements or elements with large values (positive or negative).\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Write the code focusing on runtime efficiency, achieving `O(n)` complexity by avoiding unnecessary nested iterations. Handle edge cases where `nums` may contain negative values, duplicates, or a minimal length of 2.\",\n    \"Final Check - Constraints Verification\": \"Verify that the code operates within the constraints `2 <= nums.length <= 10^4` and `-10^9 <= nums[i], target <= 10^9`, ensuring it is robust and handles large inputs effectively.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          7,\n          11,\n          15\n        ],\n        \"target\": 9\n      },\n      \"output\": [\n        0,\n        1\n      ],\n      \"explanation\": \"Since `nums[0] + nums[1] == 9`, the output is `[0, 1]`.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          2,\n          4\n        ],\n        \"target\": 6\n      },\n      \"output\": [\n        1,\n        2\n      ],\n      \"explanation\": \"Here, `nums[1] + nums[2] == 6`, so the output is `[1, 2]`.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          3\n        ],\n        \"target\": 6\n      },\n      \"output\": [\n        0,\n        1\n      ],\n      \"explanation\": \"In this case, `nums[0] + nums[1] == 6`, so we return `[0, 1]`.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"2 <= nums.length <= 10^4\",\n    \"nums_elements_range\": \"-10^9 <= nums[i] <= 10^9\",\n    \"target_range\": \"-10^9 <= target <= 10^9\",\n    \"single_solution\": \"Only one unique solution exists.\"\n  },\n  \"follow_up\": \"Can you come up with an algorithm that solves this in `O(n)` time complexity using only one pass through the array, while maintaining minimal space usage and avoiding unnecessary computations?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Generate Pascal's triangle up to a given number of rows."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `numRows`, generate the first `numRows` rows of Pascal's triangle. In Pascal's triangle, each number is the sum of the two numbers directly above it.\",\n  \"objective\": \"Design an efficient algorithm to generate Pascal's triangle up to the specified number of rows.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that Pascal's triangle is constructed row by row, with each element being the sum of the two elements above it, except for the edges which are always 1.\",\n    \"Step 2 - Iterative Construction\": \"Iteratively build each row by starting with a list of 1s and updating interior elements using values from the previous row.\",\n    \"Step 3 - Handle Edge Cases\": \"Handle edge cases such as `numRows = 1` (a single row of [1]).\",\n    \"Step 4 - Optimize\": \"Ensure the solution runs in O(n^2) time, where `n` is `numRows`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"numRows\": 5\n      },\n      \"output\": [\n        [\n          1\n        ],\n        [\n          1,\n          1\n        ],\n        [\n          1,\n          2,\n          1\n        ],\n        [\n          1,\n          3,\n          3,\n          1\n        ],\n        [\n          1,\n          4,\n          6,\n          4,\n          1\n        ]\n      ],\n      \"explanation\": \"The first 5 rows of Pascal's triangle are generated correctly.\"\n    },\n    {\n      \"input\": {\n        \"numRows\": 1\n      },\n      \"output\": [\n        [\n          1\n        ]\n      ],\n      \"explanation\": \"For `numRows = 1`, the triangle has only one row.\"\n    }\n  ],\n  \"constraints\": {\n    \"numRows_range\": \"1 <= numRows <= 30\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given an array of rectangles. Each rectangle is represented by four integers. Find the total area covered by all rectangles, considering overlaps."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a 2D array representing several axis-aligned rectangles. Each rectangle is described by four integers [xi1, yi1, xi2, yi2], where (xi1, yi1) is the bottom-left corner and (xi2, yi2) is the top-right corner. The task is to calculate the total area covered by all the rectangles. If any area is covered by more than one rectangle, it should only be counted once. Since the area may be too large, return the result modulo 10^9 + 7.\",\n  \"objective\": \"Design an algorithm that calculates the total area covered by multiple rectangles while avoiding double-counting the overlapping areas.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"You are given multiple rectangles, and each rectangle is represented by two corners. The problem asks you to calculate the total covered area, considering that overlapping areas should only be counted once. The input size and values are large, which suggests that the solution needs to handle large numbers and consider efficiency in both time and space.\",\n    \"Step 2 - Initial Approach\": \"To solve this problem, one approach could be to break the rectangles into smaller subproblems by dividing the space into vertical segments and then calculating the union of these segments. You will need to manage overlapping areas efficiently to avoid double-counting.\",\n    \"Step 3 - Optimization Consideration\": \"A direct approach to checking every pixel or small area covered by the rectangles might be too slow given the large constraints. Consider using computational geometry techniques such as line sweeping or segment trees to handle the union of rectangles efficiently.\",\n    \"Step 4 - Edge Cases\": \"Consider cases where the rectangles overlap partially or fully, and also cases where the rectangles are disjoint. Additionally, handle large numbers in the input, especially in the range from 0 to 10^9.\",\n    \"Step 5 - Output Format\": \"Return the total area modulo 10^9 + 7.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"rectangles\": [\n          [\n            0,\n            0,\n            2,\n            2\n          ],\n          [\n            1,\n            0,\n            2,\n            3\n          ],\n          [\n            1,\n            0,\n            3,\n            1\n          ]\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"The total area covered by all three rectangles is 6, taking into account the overlaps.\"\n    },\n    {\n      \"input\": {\n        \"rectangles\": [\n          [\n            0,\n            0,\n            1000000000,\n            1000000000\n          ]\n        ]\n      },\n      \"output\": 49,\n      \"explanation\": \"The area covered by the single large rectangle modulo 10^9 + 7 is 49.\"\n    }\n  ],\n  \"constraints\": {\n    \"rectangles_length\": \"1 <= rectangles.length <= 200\",\n    \"rectangle_dimensions\": \"Each rectangle has four elements: [xi1, yi1, xi2, yi2]\",\n    \"xi_values\": \"0 <= xi1, yi1, xi2, yi2 <= 10^9\",\n    \"xi1_leq_xi2\": \"xi1 <= xi2\",\n    \"yi1_leq_yi2\": \"yi1 <= yi2\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle larger inputs or more complex scenarios efficiently? Consider using advanced computational geometry techniques.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the largest subset of binary strings that fits within the given limits of '0's and '1's."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of binary strings `strs` and two integers `m` and `n`, determine the size of the largest subset of `strs` such that the total number of '0's in the subset is at most `m` and the total number of '1's in the subset is at most `n`. A subset means any combination of elements from `strs` without regard to order, and elements do not need to be contiguous.\",\n  \"objective\": \"Design an algorithm using dynamic programming to calculate the maximum size of the subset that meets the constraints, ensuring an efficient solution for large inputs within the given constraints.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Analyze the problem as a variation of the knapsack problem where each binary string has two weights: the count of '0's and '1's. The capacity constraints for these weights are defined by `m` and `n`, respectively.\",\n    \"Step 2 - Dynamic Programming Approach\": \"Use a 2D DP table `dp[i][j]` where `i` represents the remaining capacity for '0's and `j` represents the remaining capacity for '1's. The value of `dp[i][j]` stores the maximum size of the subset that can be formed with those capacities.\",\n    \"Step 3 - Transition Function\": \"Iterate over each string in `strs` and calculate its counts of '0's and '1's. For each string, update the DP table from the maximum capacities down to zero, ensuring previous states are not overwritten prematurely.\",\n    \"Step 4 - Base Case and Result\": \"Initialize `dp[i][j] = 0` for all `i` and `j`, as no subset has been selected initially. The final result will be stored in `dp[m][n]`, representing the maximum subset size that meets the constraints.\",\n    \"Step 5 - Complexity and Optimization\": \"Optimize the solution to ensure a time complexity of `O(len(strs) * m * n)` and a space complexity of `O(m * n)` by iterating backward through the DP table for each string in `strs`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"strs\": [\n          \"10\",\n          \"0001\",\n          \"111001\",\n          \"1\",\n          \"0\"\n        ],\n        \"m\": 5,\n        \"n\": 3\n      },\n      \"output\": 4,\n      \"explanation\": \"The largest subset is {\\\"10\\\", \\\"0001\\\", \\\"1\\\", \\\"0\\\"}, which uses at most 5 '0's and 3 '1's.\"\n    },\n    {\n      \"input\": {\n        \"strs\": [\n          \"10\",\n          \"0\",\n          \"1\"\n        ],\n        \"m\": 1,\n        \"n\": 1\n      },\n      \"output\": 2,\n      \"explanation\": \"The largest subset is {\\\"0\\\", \\\"1\\\"}, which uses at most 1 '0' and 1 '1'.\"\n    },\n    {\n      \"input\": {\n        \"strs\": [\n          \"111\",\n          \"110\",\n          \"000\"\n        ],\n        \"m\": 2,\n        \"n\": 2\n      },\n      \"output\": 0,\n      \"explanation\": \"No subset can be formed as all strings exceed the constraints.\"\n    }\n  ],\n  \"constraints\": {\n    \"strs_length\": \"1 <= strs.length <= 600\",\n    \"strs_element_length\": \"1 <= strs[i].length <= 100\",\n    \"characters\": \"strs[i] consists only of '0' and '1'\",\n    \"limits\": \"1 <= m, n <= 100\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"Can you optimize the memory usage to further reduce space complexity?\",\n    \"question_2\": \"How would the solution change if `strs` included other characters or if additional constraints were introduced?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number in an array that appears only once while all others appear three times."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums` where every element appears three times except for one, find the element that appears exactly once. The solution must have linear runtime complexity and use only constant extra space.\",\n  \"objective\": \"Design an efficient algorithm to identify the unique element in the array.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task requires finding a single unique element while all other elements appear exactly three times.\",\n    \"Step 2 - Bit Manipulation\": \"Use bit manipulation to track the count of each bit across all numbers and identify the unique element.\",\n    \"Step 3 - Handle Each Bit Separately\": \"Iterate through all bits (0 to 31) and count the occurrences of each bit. Use modular arithmetic to determine the unique element.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as arrays with only one element or very large positive/negative numbers.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(n) time and uses O(1) space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          2,\n          3,\n          2\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"All elements except 3 appear three times, so 3 is the unique element.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0,\n          1,\n          0,\n          1,\n          0,\n          1,\n          99\n        ]\n      },\n      \"output\": 99,\n      \"explanation\": \"All elements except 99 appear three times, so 99 is the unique element.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 3 * 10^4\",\n    \"element_values\": \"-2^31 <= nums[i] <= 2^31 - 1\"\n  },\n  \"follow_up\": \"Can you implement the solution without using additional arrays or hash maps?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given a grid of 0's and 1's. There are exactly two islands. Flip the minimum number of 0's to connect the two islands. Return the answer."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an n x n binary matrix grid where 1 represents land and 0 represents water. An **island** is a 4-directionally connected group of 1's that is not connected to any other 1's. There are exactly two islands in grid. You may change 0's to 1's to connect the two islands and form one island. The goal is to return the smallest number of 0's you must flip to connect the two islands.\",\n  \"objective\": \"Implement an algorithm to find the minimum number of 0's you must flip to connect the two islands in the grid.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understand the problem\": \"The grid is made up of two separate islands, and the task is to connect them by flipping the minimum number of water cells (0's) to land (1's). An island is defined as a connected component of 1's, where connection is allowed in four directions (up, down, left, right).\",\n    \"Step 2 - Input format\": \"You are given an n x n matrix where each cell is either 1 or 0. There are exactly two islands in the grid.\",\n    \"Step 3 - Approach\": \"You can approach the problem using a breadth-first search (BFS) or depth-first search (DFS). First, find the two islands in the grid by performing a DFS/BFS to locate all connected land cells (1's). Then, you need to find the minimum distance between the two islands by exploring the surrounding water cells (0's) and calculating how many flips are required to connect the islands.\",\n    \"Step 4 - Output format\": \"Return the smallest number of 0's that need to be flipped to connect the two islands.\",\n    \"Step 5 - Edge case considerations\": \"Handle small grids (like 2x2) where islands are adjacent. Ensure that you correctly find the two islands and compute the shortest path of 0's that needs to be flipped.\",\n    \"Step 6 - Optimized approach\": \"Use BFS to explore the grid and expand from the two islands, finding the minimum distance between them. This approach will ensure that you minimize the number of flips needed to connect the islands.\"\n  },\n  \"examples\": [\n    {\n      \"input\": [\n        [\n          0,\n          1\n        ],\n        [\n          1,\n          0\n        ]\n      ],\n      \"output\": 1,\n      \"explanation\": \"The two islands are adjacent, and only one flip is needed to connect them.\"\n    },\n    {\n      \"input\": [\n        [\n          0,\n          1,\n          0\n        ],\n        [\n          0,\n          0,\n          0\n        ],\n        [\n          0,\n          0,\n          1\n        ]\n      ],\n      \"output\": 2,\n      \"explanation\": \"You need to flip two cells of water to connect the two islands.\"\n    },\n    {\n      \"input\": [\n        [\n          1,\n          1,\n          1,\n          1,\n          1\n        ],\n        [\n          1,\n          0,\n          0,\n          0,\n          1\n        ],\n        [\n          1,\n          0,\n          1,\n          0,\n          1\n        ],\n        [\n          1,\n          0,\n          0,\n          0,\n          1\n        ],\n        [\n          1,\n          1,\n          1,\n          1,\n          1\n        ]\n      ],\n      \"output\": 1,\n      \"explanation\": \"You need to flip only one water cell to connect the two islands.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_size\": \"2 <= n <= 100\",\n    \"grid_elements\": \"grid[i][j] is either 0 or 1\",\n    \"island_count\": \"There are exactly two islands in the grid\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle larger grids more efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Reorder an array to satisfy the wiggle pattern condition."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums`, reorder it such that the resulting array satisfies the condition `nums[0] <= nums[1] >= nums[2] <= nums[3]...`. Return any valid result. The input array is guaranteed to always have a valid answer.\",\n  \"objective\": \"Design an efficient algorithm to reorder the array to meet the wiggle pattern condition, with an optimal solution running in `O(n)` time complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the wiggle pattern condition, where adjacent elements alternate between `<=` and `>=`. The task is to rearrange the array to satisfy this condition without sorting the entire array.\",\n    \"Step 2 - Greedy Approach\": \"Iterate through the array, ensuring the `i-th` element satisfies the wiggle condition:\\n- If `i` is even, ensure `nums[i] <= nums[i + 1]`.\\n- If `i` is odd, ensure `nums[i] >= nums[i + 1]`.\\nIf the condition is violated, swap `nums[i]` and `nums[i + 1]`.\",\n    \"Step 3 - Efficient Execution\": \"Perform a single pass through the array (`O(n)` complexity) by iterating and swapping elements only when necessary.\",\n    \"Step 4 - Edge Cases\": \"Handle edge cases such as arrays of length 1 (trivially valid) and arrays with repeated elements.\",\n    \"Step 5 - Output\": \"Return any valid wiggle pattern that satisfies the conditions.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          5,\n          2,\n          1,\n          6,\n          4\n        ]\n      },\n      \"output\": [\n        3,\n        5,\n        1,\n        6,\n        2,\n        4\n      ],\n      \"explanation\": \"The result satisfies the wiggle pattern `nums[0] <= nums[1] >= nums[2] <= nums[3]...`.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          6,\n          6,\n          5,\n          6,\n          3,\n          8\n        ]\n      },\n      \"output\": [\n        6,\n        6,\n        5,\n        6,\n        3,\n        8\n      ],\n      \"explanation\": \"The result satisfies the wiggle pattern.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 5 * 10^4\",\n    \"value_range\": \"0 <= nums[i] <= 10^4\",\n    \"guarantee\": \"A valid wiggle pattern exists for any given input array.\"\n  },\n  \"follow_up\": \"Can you implement the solution in `O(n)` time complexity and `O(1)` extra space using a single-pass greedy algorithm?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Determine if one string is part of another string."}, {"role": "assistant", "content": "{\n  \"title\": \"Check Subsequence in Strings\",\n  \"description\": \"Determine if one string `s` is a subsequence of another string `t` by maintaining the relative order of characters.\",\n  \"objective\": \"Efficiently verify if `s` can be derived from `t` while maintaining their character order using an optimized approach.\",\n  \"input\": [\n    {\n      \"name\": \"s\",\n      \"type\": \"string\",\n      \"description\": \"The target string to check if it is a subsequence of `t`.\",\n      \"constraints\": \"0 <= s.length <= 100, s consists only of lowercase English letters.\"\n    },\n    {\n      \"name\": \"t\",\n      \"type\": \"string\",\n      \"description\": \"The source string to check against.\",\n      \"constraints\": \"0 <= t.length <= 10^4, t consists only of lowercase English letters.\"\n    }\n  ],\n  \"output\": {\n    \"type\": \"boolean\",\n    \"description\": \"`true` if `s` is a subsequence of `t`, otherwise `false`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"abc\",\n        \"t\": \"ahbgdc\"\n      },\n      \"output\": true,\n      \"explanation\": \"`s` can be derived from `t` by selecting the characters in order.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"axc\",\n        \"t\": \"ahbgdc\"\n      },\n      \"output\": false,\n      \"explanation\": \"The order of characters in `s` does not align with the characters in `t`.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"\",\n        \"t\": \"ahbgdc\"\n      },\n      \"output\": true,\n      \"explanation\": \"An empty string is always a subsequence of any string.\"\n    }\n  ],\n  \"hints\": [\n    \"Use two pointers to iterate through `s` and `t` to check for matches.\",\n    \"If the pointer for `s` reaches the end, all characters of `s` have been found in `t` in the correct order.\",\n    \"Consider preprocessing `t` to create an index map for faster checking in scenarios with multiple `s` strings.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve `O(n + m)` complexity for a single check where `n` is the length of `s` and `m` is the length of `t`.\",\n    \"follow_up\": \"For scenarios with multiple `s` strings, preprocess `t` into an index map for each character, allowing `O(k * log m)` complexity for all checks.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if you can make a square using all matchsticks in the list."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of integers `matchsticks` where each element represents the length of a matchstick, determine whether it is possible to use all the matchsticks exactly once to form a square. A square has four equal sides, and the lengths of the sides must sum up to the total length of the matchsticks divided by four.\",\n  \"objective\": \"Design an algorithm to verify if the matchsticks can form a square by partitioning them into four equal-length subsets. Optimize the solution to handle all constraints effectively, especially focusing on backtracking with pruning to reduce unnecessary computations.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the problem constraints and requirements. The sum of the matchsticks must be divisible by 4 for it to be possible to form a square. Use backtracking to explore all valid subsets of matchsticks while ensuring that each subset sums up to one side of the square.\",\n    \"Step 2 - Initial Solution\": \"Sort the matchsticks in descending order to maximize efficiency during backtracking. Attempt to assign each matchstick to one of the four sides of the square, and backtrack if any side exceeds the target length.\",\n    \"Step 3 - Optimization\": \"Implement pruning to reduce unnecessary exploration. For example, if a matchstick does not fit on any side, terminate early. Additionally, skip redundant configurations by avoiding trying the same length multiple times in the same state.\",\n    \"Step 4 - Handle Constraints\": \"Ensure the solution works for edge cases, such as very large matchstick lengths, a single matchstick, or scenarios where forming a square is impossible due to an indivisible total sum.\",\n    \"Step 5 - Verify Output\": \"Verify the output is a boolean (`true` or `false`) indicating whether forming a square is possible, and ensure the algorithm adheres to the constraints `1 <= matchsticks.length <= 15` and `1 <= matchsticks[i] <= 10^8`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"matchsticks\": [\n          1,\n          1,\n          2,\n          2,\n          2\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The matchsticks can be divided into four sides of length 2: [1, 1], [2], [2], [2].\"\n    },\n    {\n      \"input\": {\n        \"matchsticks\": [\n          3,\n          3,\n          3,\n          3,\n          4\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The total length of the matchsticks is not divisible by 4, so it is impossible to form a square.\"\n    },\n    {\n      \"input\": {\n        \"matchsticks\": [\n          5,\n          5,\n          5,\n          5,\n          5,\n          5,\n          5,\n          5\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"All matchsticks can form four sides of length 10: [5, 5], [5, 5], [5, 5], [5, 5].\"\n    }\n  ],\n  \"constraints\": {\n    \"matchsticks_length\": \"1 <= matchsticks.length <= 15\",\n    \"matchstick_value\": \"1 <= matchsticks[i] <= 10^8\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"Can you optimize the backtracking to terminate earlier for cases where forming a square is clearly impossible?\",\n    \"question_2\": \"How would the solution change if the number of sides required to form the polygon is not fixed at four?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Convert an N-ary tree to a binary tree and back."}, {"role": "assistant", "content": "{\n  \"title\": \"Encode and Decode N-ary Tree to Binary Tree\",\n  \"description\": \"Design an algorithm to encode an N-ary tree into a binary tree and decode the binary tree back into the original N-ary tree. The encoded binary tree should preserve the structure of the N-ary tree, and the decoding process should reconstruct the exact N-ary tree.\",\n  \"objectives\": [\n    \"Encode an N-ary tree into a binary tree.\",\n    \"Decode the binary tree back to the original N-ary tree.\"\n  ],\n  \"input\": {\n    \"encode\": {\n      \"name\": \"root\",\n      \"type\": \"NaryNode\",\n      \"description\": \"The root of the N-ary tree.\",\n      \"constraints\": [\n        \"The number of nodes in the tree is in the range `[0, 10^4]`.\",\n        \"`0 <= Node.val <= 10^4`.\",\n        \"The height of the N-ary tree is less than or equal to `1000`.\"\n      ]\n    },\n    \"decode\": {\n      \"name\": \"root\",\n      \"type\": \"BinaryTreeNode\",\n      \"description\": \"The root of the binary tree produced by the encoding algorithm.\"\n    }\n  },\n  \"output\": {\n    \"encode\": {\n      \"type\": \"BinaryTreeNode\",\n      \"description\": \"The root of the binary tree that represents the encoded N-ary tree.\"\n    },\n    \"decode\": {\n      \"type\": \"NaryNode\",\n      \"description\": \"The root of the reconstructed N-ary tree.\"\n    }\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          null,\n          3,\n          2,\n          4,\n          null,\n          5,\n          6\n        ]\n      },\n      \"encodeOutput\": [\n        1,\n        null,\n        3,\n        2,\n        4,\n        null,\n        5,\n        6\n      ],\n      \"decodeOutput\": [\n        1,\n        null,\n        3,\n        2,\n        4,\n        null,\n        5,\n        6\n      ],\n      \"explanation\": \"The N-ary tree is encoded and then decoded back into the original structure.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          null,\n          2,\n          3,\n          4,\n          5,\n          null,\n          null,\n          6,\n          7,\n          null,\n          8,\n          null,\n          9,\n          10,\n          null,\n          null,\n          11,\n          null,\n          12,\n          null,\n          13,\n          null,\n          null,\n          14\n        ]\n      },\n      \"encodeOutput\": [\n        1,\n        null,\n        2,\n        3,\n        4,\n        5,\n        null,\n        null,\n        6,\n        7,\n        null,\n        8,\n        null,\n        9,\n        10,\n        null,\n        null,\n        11,\n        null,\n        12,\n        null,\n        13,\n        null,\n        null,\n        14\n      ],\n      \"decodeOutput\": [\n        1,\n        null,\n        2,\n        3,\n        4,\n        5,\n        null,\n        null,\n        6,\n        7,\n        null,\n        8,\n        null,\n        9,\n        10,\n        null,\n        null,\n        11,\n        null,\n        12,\n        null,\n        13,\n        null,\n        null,\n        14\n      ],\n      \"explanation\": \"The structure of a deeper N-ary tree is preserved during encoding and decoding.\"\n    },\n    {\n      \"input\": {\n        \"root\": []\n      },\n      \"encodeOutput\": [],\n      \"decodeOutput\": [],\n      \"explanation\": \"An empty N-ary tree remains empty after encoding and decoding.\"\n    }\n  ],\n  \"hints\": [\n    \"Use the `left` pointer of a binary tree node to represent the first child of an N-ary tree node.\",\n    \"Use the `right` pointer of a binary tree node to represent the next sibling of the first child.\",\n    \"Recurse on children of the N-ary node during encoding and siblings during decoding.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Design an efficient encoding and decoding algorithm that processes all nodes in O(n) time.\",\n    \"constraints\": \"Avoid extra space usage beyond the recursion stack for depth-first traversal.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the perimeter of the island in a grid where `1` is land and `0` is water."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a `row x col` 2D grid where `grid[i][j] = 1` represents land and `grid[i][j] = 0` represents water, determine the perimeter of the island formed by the land cells. The island is connected horizontally and vertically, is surrounded by water, and does not contain any lakes.\",\n  \"objective\": \"Design an efficient algorithm to calculate the total perimeter of the island by traversing the grid and counting the edges contributing to the perimeter.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that each land cell contributes 4 edges to the perimeter. If a land cell is adjacent to another land cell, the shared edge reduces the perimeter contribution by 1 for each shared side.\",\n    \"Step 2 - Iterative Calculation\": \"Iterate through the grid. For every land cell found (`grid[i][j] = 1`), add 4 to the perimeter. Check for adjacent land cells in the top and left directions to avoid double counting shared edges, and subtract 2 for each shared edge.\",\n    \"Step 3 - Edge Cases\": \"Ensure the algorithm handles edge cases such as a grid with a single cell of land, a grid with a single row or column, or land located at the boundaries of the grid.\",\n    \"Step 4 - Complexity\": \"Since the solution involves a single traversal of the grid, the algorithm runs in `O(row * col)` time complexity, which is efficient given the constraints.\",\n    \"Step 5 - Output\": \"The output should be a single integer representing the total perimeter of the island.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            0,\n            1,\n            0,\n            0\n          ],\n          [\n            1,\n            1,\n            1,\n            0\n          ],\n          [\n            0,\n            1,\n            0,\n            0\n          ],\n          [\n            1,\n            1,\n            0,\n            0\n          ]\n        ]\n      },\n      \"output\": 16,\n      \"explanation\": \"Each land cell contributes 4 edges minus the shared edges. The total perimeter is 16.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1\n          ]\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"A single cell of land contributes 4 edges.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            0\n          ]\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"A single row with one land cell contributes 4 edges.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_dimensions\": \"1 <= row, col <= 100\",\n    \"cell_values\": \"`grid[i][j]` is either 0 (water) or 1 (land)\",\n    \"island_uniqueness\": \"There is exactly one island.\"\n  },\n  \"follow_up\": \"Can you implement the algorithm in a recursive or DFS-based manner to verify that all land cells are part of the same island?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You have an array of rods. Find the largest possible height of the billboard."}, {"role": "assistant", "content": "{\n  \"description\": \"You are tasked with installing a billboard supported by two steel supports, where each support must be of equal height. You are given an array of rods of different lengths that can be welded together to form the supports. The objective is to determine the largest possible height for the billboard installation. If it is not possible to create two equal-height supports, return 0.\",\n  \"objective\": \"Design an algorithm to find the largest possible height of the two equal supports by welding rods together, ensuring that both supports have the same height. If it is not possible, return 0.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"You are given an array of rods of various lengths. The goal is to divide these rods into two groups where each group has an equal sum of lengths. The sum of each group represents the height of one support. If no such partition is possible, return 0.\",\n    \"Step 2 - Input Analysis\": \"The input consists of an array of rod lengths. The task is to check if it's possible to partition the rods into two subsets with equal sums.\",\n    \"Step 3 - Approach\": \"To solve this, the problem can be viewed as a variation of the 'Partition Problem' where the goal is to split the rods into two equal sum subsets. One way to approach it is using dynamic programming to check for subsets of sums that can form half of the total sum of the rods.\",\n    \"Step 4 - Output\": \"Return the largest possible height for the supports. If no such partition is found, return 0.\",\n    \"Step 5 - Code Efficiency\": \"Since the length of the rods array is small (up to 20), a dynamic programming approach with a time complexity of O(n * total_sum) should be efficient enough to handle the constraints.\",\n    \"Step 6 - Edge Cases\": \"Handle cases where no partition can be formed, or where a partition exists but the sum is not maximized.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"rods\": [\n          1,\n          2,\n          3,\n          6\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"We can partition the rods into two subsets {1, 2, 3} and {6}, both of which have a sum of 6.\"\n    },\n    {\n      \"input\": {\n        \"rods\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6\n        ]\n      },\n      \"output\": 10,\n      \"explanation\": \"The rods can be divided into two subsets {2, 3, 5} and {4, 6}, each summing to 10.\"\n    },\n    {\n      \"input\": {\n        \"rods\": [\n          1,\n          2\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"It is not possible to partition the rods into two subsets with equal sums, so the result is 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"rods_length\": \"1 <= rods.length <= 20\",\n    \"rod_length\": \"1 <= rods[i] <= 1000\",\n    \"max_sum\": \"sum(rods[i]) <= 5000\"\n  },\n  \"follow_up\": \"How would you modify the solution to handle larger arrays or larger values of rods?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum absolute difference between values of any two nodes in a Binary Search Tree (BST)."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the root of a Binary Search Tree (BST), return the minimum absolute difference between values of any two different nodes in the tree. Utilize in-order traversal to find consecutive node differences efficiently.\",\n  \"objective\": \"Implement an in-order traversal solution that calculates the minimum difference between consecutive nodes without storing values in an array, optimizing space and ensuring minimal comparisons.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that in a BST, the in-order traversal yields nodes in ascending order, allowing consecutive node comparisons to find the minimum difference.\",\n    \"Step 2 - In-Order Traversal with Single Pass\": \"During the in-order traversal, keep track of the last visited node value (`prevNode`) and compute the difference with the current node on-the-fly, updating the minimum difference when necessary.\",\n    \"Step 3 - Tracking Minimum Difference\": \"Use a variable `minDifference` initialized to infinity to store the minimum difference. For each node visited, compute `current difference = node.val - prevNode.val` and update `minDifference` as the minimum of `minDifference` and `current difference`.\",\n    \"Step 4 - Traversal Implementation\": \"Define a recursive in-order traversal function that maintains the `prevNode` and `minDifference` values, updating them as nodes are visited.\",\n    \"Step 5 - Complexity and Constraints\": \"The algorithm should operate in O(n) time complexity (single in-order traversal) and O(log n) to O(n) space complexity depending on the tree's balance, as it uses constant space beyond the recursion stack.\",\n    \"Final Check - Constraints Verification\": \"Ensure the solution meets constraints of up to `10^4` nodes, each with values up to `10^5`, and handles large trees efficiently with minimal space usage.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          4,\n          2,\n          6,\n          1,\n          3\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The minimum difference between nodes is 1, found between nodes with values 3 and 4 or between 2 and 3.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          0,\n          48,\n          null,\n          null,\n          12,\n          49\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The minimum difference of 1 is between nodes with values 48 and 49.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"2 <= number of nodes <= 10^4\",\n    \"node_value_range\": \"0 <= Node.val <= 10^5\"\n  },\n  \"follow_up\": \"Could you implement an iterative solution with a stack to avoid recursion depth issues in large trees?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Read `n` characters from a file using `read4`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a file and an API `read4` that reads up to 4 characters at a time, implement a method `read` to read up to `n` characters from the file and store them in a buffer array `buf`. The `read4` function can be called multiple times to read the required number of characters.\",\n  \"objective\": \"Design an efficient solution to implement `read` using `read4`, ensuring no extra characters are read unnecessarily.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that `read4` reads up to 4 characters at a time and stores them in a temporary buffer. Implement `read` to utilize this behavior efficiently.\",\n    \"Step 2 - Use Temporary Buffer\": \"Utilize a temporary buffer (`buf4`) to store characters read by `read4`. Copy these characters to the destination buffer `buf`.\",\n    \"Step 3 - Track Characters Read\": \"Track the number of characters read and stop when either `n` characters are read or the end of the file is reached.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as reading fewer characters than `n`, reading exactly `n` characters, or reaching the end of the file.\",\n    \"Step 5 - Optimize\": \"Minimize calls to `read4` by copying as many characters as possible from the temporary buffer to the destination buffer in one step.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"file\": \"abc\",\n        \"n\": 4\n      },\n      \"output\": 3,\n      \"explanation\": \"The file contains only 3 characters. `read` reads all of them, and `buf` contains 'abc'.\"\n    },\n    {\n      \"input\": {\n        \"file\": \"abcde\",\n        \"n\": 5\n      },\n      \"output\": 5,\n      \"explanation\": \"`read` reads all 5 characters using two calls to `read4`. `buf` contains 'abcde'.\"\n    }\n  ],\n  \"constraints\": {\n    \"file_length\": \"1 <= file.length <= 500\",\n    \"buffer_length\": \"1 <= n <= 1000\"\n  },\n  \"follow_up\": \"How would you optimize the function to handle edge cases such as files shorter than `n` or files of exactly `n` characters?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if two strings are one edit apart."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two strings `s` and `t`, determine if they are exactly one edit distance apart. An edit can be an insertion, deletion, or replacement of a single character.\",\n  \"objective\": \"Design an algorithm to determine if two strings are one edit distance apart efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves comparing two strings to determine if they can become identical with exactly one edit.\",\n    \"Step 2 - Compare Lengths\": \"If the length difference is greater than 1, the strings cannot be one edit apart.\",\n    \"Step 3 - Iterate Characters\": \"Iterate through the strings and check for mismatches. Allow one mismatch and validate if the rest matches.\",\n    \"Step 4 - Handle Edge Cases\": \"Consider cases such as empty strings, identical strings, or strings with very different lengths.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(n) time and uses O(1) extra space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"ab\",\n        \"t\": \"acb\"\n      },\n      \"output\": true,\n      \"explanation\": \"By inserting 'c' into `s`, we can make it equal to `t`.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"\",\n        \"t\": \"\"\n      },\n      \"output\": false,\n      \"explanation\": \"No edit can transform one empty string into the other.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"0 <= s.length, t.length <= 10^4\",\n    \"character_set\": \"s and t consist of lowercase letters, uppercase letters, and digits.\"\n  },\n  \"follow_up\": \"Can you optimize the solution for strings with large differences in length?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number of ways to paint a fence of `n` posts with `k` colors such that no three consecutive posts have the same color."}, {"role": "assistant", "content": "{\n  \"description\": \"You are painting a fence with `n` posts and `k` different colors. Each post must be painted exactly one color, and no three consecutive posts can have the same color. Return the total number of valid ways to paint the fence.\",\n  \"objective\": \"Design an efficient algorithm using dynamic programming to calculate the total number of ways to paint the fence, ensuring the constraints are respected.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the problem involves constraints on consecutive posts' colors. Use a dynamic programming approach to manage the combinations efficiently.\",\n    \"Step 2 - Define State Variables\": \"Let `same` represent the number of ways to paint the last two posts with the same color, and `diff` represent the number of ways to paint the last two posts with different colors. Use these to calculate the total number of ways.\",\n    \"Step 3 - Recursive Transition\": \"Use the formulas:\\n- `same[i] = diff[i-1]`\\n- `diff[i] = (same[i-1] + diff[i-1]) * (k - 1)`\\n- `total[i] = same[i] + diff[i]`\\n\",\n    \"Step 4 - Base Cases\": \"For `n = 1`, the total is `k`. For `n = 2`, `same = k`, and `diff = k * (k - 1)`.\",\n    \"Step 5 - Iterative Computation\": \"Iterate through the range of posts (`3` to `n`) and compute the values using the above formulas.\",\n    \"Step 6 - Edge Cases\": \"Handle edge cases like `n = 1` and `k = 1` (output is `1`). Ensure correctness for large values of `k`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 3,\n        \"k\": 2\n      },\n      \"output\": 6,\n      \"explanation\": \"All valid combinations are: RGB, RBG, BRG, BGR, RRG, BBG.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1,\n        \"k\": 1\n      },\n      \"output\": 1,\n      \"explanation\": \"With only one post and one color, there is only one way to paint it.\"\n    },\n    {\n      \"input\": {\n        \"n\": 7,\n        \"k\": 2\n      },\n      \"output\": 42,\n      \"explanation\": \"Using the recursive formula, the total number of ways to paint the fence is 42.\"\n    }\n  ],\n  \"constraints\": {\n    \"number_of_posts\": \"1 <= n <= 50\",\n    \"number_of_colors\": \"1 <= k <= 10^5\",\n    \"result_range\": \"The answer is guaranteed to fit within a 32-bit signed integer.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to use constant space for dynamic programming while maintaining time efficiency?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given a graph where some nodes are infected. You need to remove one node from the infected nodes and minimize the number of nodes infected after removal."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a network of `n` nodes represented as an `n x n` adjacency matrix `graph`, where the `i`th node is directly connected to the `j`th node if `graph[i][j] == 1`. Some nodes `initial` are initially infected by malware. The malware spreads across the network such that any directly connected node will get infected if one of them is infected. Your task is to find which node, when removed from the `initial` infected nodes list, will minimize the total number of nodes that will be infected by malware at the end of the process.\",\n  \"objective\": \"Remove exactly one node from the `initial` list of infected nodes and return the node that minimizes the total number of infected nodes. If multiple nodes can be removed to minimize the number of infected nodes, return the node with the smallest index.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Breakdown\": \"The spread of malware must be simulated for different configurations, with one infected node removed from the `initial` list each time. After each removal, the spread of malware should be recalculated, and the minimum number of infected nodes should be recorded.\",\n    \"Step 2 - Key Observations\": \"The problem requires simulating the spread of malware, so the approach must efficiently compute the number of nodes infected by the malware after each node removal.\",\n    \"Step 3 - Approach\": \"For each node in the `initial` list, remove the node and simulate the spread of malware from the remaining nodes in the `initial` list. The spread continues until no more nodes can be infected.\",\n    \"Step 4 - Edge Case Considerations\": \"Ensure that the node removal results in a valid state where the network still spreads malware as expected. Also, consider cases where the initial list is small, or the graph is disconnected.\",\n    \"Step 5 - Output Format\": \"Return the index of the node that minimizes the final number of infected nodes. If multiple nodes can achieve the same result, return the node with the smallest index.\",\n    \"Step 6 - Code Efficiency\": \"The algorithm needs to be efficient enough to handle networks of up to 300 nodes, which means the solution should avoid unnecessary recalculations and ensure that each simulation is performed efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"graph\": [\n          [\n            1,\n            1,\n            0\n          ],\n          [\n            1,\n            1,\n            0\n          ],\n          [\n            0,\n            0,\n            1\n          ]\n        ],\n        \"initial\": [\n          0,\n          1\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"Removing node 0 minimizes the spread of malware and results in fewer nodes being infected.\"\n    },\n    {\n      \"input\": {\n        \"graph\": [\n          [\n            1,\n            1,\n            0\n          ],\n          [\n            1,\n            1,\n            1\n          ],\n          [\n            0,\n            1,\n            1\n          ]\n        ],\n        \"initial\": [\n          0,\n          1\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"Removing node 1 minimizes the spread of malware, causing fewer nodes to become infected.\"\n    },\n    {\n      \"input\": {\n        \"graph\": [\n          [\n            1,\n            1,\n            0,\n            0\n          ],\n          [\n            1,\n            1,\n            1,\n            0\n          ],\n          [\n            0,\n            1,\n            1,\n            1\n          ],\n          [\n            0,\n            0,\n            1,\n            1\n          ]\n        ],\n        \"initial\": [\n          0,\n          1\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"Removing node 1 minimizes the number of infected nodes at the end.\"\n    }\n  ],\n  \"constraints\": {\n    \"graph_size\": \"2 <= n <= 300\",\n    \"graph_structure\": \"The graph is an undirected adjacency matrix, with `graph[i][j] == graph[j][i]` and `graph[i][i] == 1`.\",\n    \"initial_nodes\": \"1 <= initial.length < n\",\n    \"node_indices\": \"All nodes in `initial` are unique and valid indices.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle larger networks efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count the number of boomerangs in a list of points."}, {"role": "assistant", "content": "{\n  \"title\": \"Count Boomerangs in Plane\",\n  \"description\": \"You are given `n` distinct points in a 2D plane, represented as an array `points`, where `points[i] = [xi, yi]`. A **boomerang** is a tuple `(i, j, k)` such that the distance between `i` and `j` is equal to the distance between `i` and `k`. Note that **the order of the tuple matters**.\\n\\nReturn the total number of boomerangs that can be formed.\",\n  \"input\": {\n    \"points\": {\n      \"type\": \"array\",\n      \"description\": \"An array of `n` points, each represented as a list of two integers `[xi, yi]`.\",\n      \"constraints\": {\n        \"length\": \"[1, 500]\",\n        \"values\": \"Each point lies in the range [-10^4, 10^4].\"\n      }\n    }\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The total number of boomerangs that can be formed.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"points\": [\n          [\n            0,\n            0\n          ],\n          [\n            1,\n            0\n          ],\n          [\n            2,\n            0\n          ]\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The two boomerangs are [(1,0), (0,0), (2,0)] and [(1,0), (2,0), (0,0)].\"\n    },\n    {\n      \"input\": {\n        \"points\": [\n          [\n            1,\n            1\n          ],\n          [\n            2,\n            2\n          ],\n          [\n            3,\n            3\n          ]\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The two boomerangs are [(1,1), (2,2), (3,3)] and [(2,2), (1,1), (3,3)].\"\n    },\n    {\n      \"input\": {\n        \"points\": [\n          [\n            1,\n            1\n          ]\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"No boomerangs can be formed with only one point.\"\n    }\n  ],\n  \"hints\": [\n    \"For each point, calculate distances to all other points.\",\n    \"Store distances in a hashmap to count the number of equal distances.\",\n    \"Use the counts to calculate permutations for boomerangs.\"\n  ],\n  \"constraints\": {\n    \"timeComplexity\": \"O(n^2)\",\n    \"spaceComplexity\": \"O(n)\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": ""}, {"role": "assistant", "content": "{\n  \"title\": \"Logger Rate Limiter Design\",\n  \"description\": \"Design a logger system that controls the printing of messages based on their timestamps. A message can be printed only if it has not been printed in the last 10 seconds.\",\n  \"methods\": {\n    \"Logger\": {\n      \"description\": \"Initializes the logger object.\",\n      \"parameters\": []\n    },\n    \"shouldPrintMessage\": {\n      \"description\": \"Determines if a message should be printed at a given timestamp.\",\n      \"parameters\": [\n        {\n          \"name\": \"timestamp\",\n          \"type\": \"integer\",\n          \"description\": \"The current timestamp in seconds.\"\n        },\n        {\n          \"name\": \"message\",\n          \"type\": \"string\",\n          \"description\": \"The message to be evaluated.\"\n        }\n      ],\n      \"output\": {\n        \"type\": \"boolean\",\n        \"description\": \"`true` if the message should be printed, `false` otherwise.\"\n      }\n    }\n  },\n  \"constraints\": [\n    \"`0 <= timestamp <= 10^9`\",\n    \"`1 <= message.length <= 30`\",\n    \"Messages arrive in chronological order.\",\n    \"At most `10^4` calls will be made to `shouldPrintMessage`.\"\n  ],\n  \"examples\": [\n    {\n      \"input\": [\n        \"Logger\",\n        \"shouldPrintMessage(1, 'foo')\",\n        \"shouldPrintMessage(2, 'bar')\",\n        \"shouldPrintMessage(3, 'foo')\",\n        \"shouldPrintMessage(8, 'bar')\",\n        \"shouldPrintMessage(10, 'foo')\",\n        \"shouldPrintMessage(11, 'foo')\"\n      ],\n      \"output\": [\n        null,\n        true,\n        true,\n        false,\n        false,\n        false,\n        true\n      ],\n      \"explanation\": [\n        \"Logger is initialized.\",\n        \"`foo` is printed at timestamp 1, next allowed at 11.\",\n        \"`bar` is printed at timestamp 2, next allowed at 12.\",\n        \"`foo` at timestamp 3 is rejected (next allowed at 11).\",\n        \"`bar` at timestamp 8 is rejected (next allowed at 12).\",\n        \"`foo` at timestamp 10 is rejected (next allowed at 11).\",\n        \"`foo` at timestamp 11 is printed, next allowed at 21.\"\n      ]\n    }\n  ],\n  \"hints\": [\n    \"Use a hashmap to store the last printed timestamp for each message.\",\n    \"Check if the difference between the current timestamp and the last printed timestamp is at least 10.\",\n    \"Update the timestamp for the message if it is printed.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Ensure `shouldPrintMessage` runs in `O(1)` time complexity.\",\n    \"constraints\": \"Avoid unnecessary storage or recomputation for past messages.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given two strings, `name` and `typed`. Determine if `typed` could be `name` with some extra characters possibly being repeated."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given two strings, `name` and `typed`. The `name` represents the intended sequence of characters your friend wants to type, while the `typed` string contains the actual sequence of characters typed. Sometimes, a key might get long pressed, meaning a character could appear more than once in `typed`. Your task is to determine if it is possible that the `typed` string is a result of typing the `name` with some characters possibly being long pressed. Return `True` if the `typed` string can be formed by long pressing characters from `name`, otherwise return `False`.\",\n  \"objective\": \"Check if the `typed` string can be formed by typing the `name` with potential long presses of some characters, where characters in `typed` may repeat due to long presses but must follow the order of `name`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Start by observing that the `typed` string might have repeated characters for any of the characters in the `name`. However, the sequence of characters must still match the order of the characters in `name`.\",\n    \"Step 2 - Conditions for Long Presses\": \"For every character in `name`, the typed string must have the same character or multiple consecutive occurrences of that character. If a character in `name` is not found in `typed` or is not in the correct order, return False.\",\n    \"Step 3 - Approach\": \"Iterate through both strings, maintaining an index for each. For each character in `name`, ensure that the corresponding character in `typed` either matches or is repeated consecutively. If at any point, the characters do not match or the order is incorrect, return False.\",\n    \"Step 4 - Efficiency Consideration\": \"The time complexity of this approach is O(n), where n is the length of `typed`, as we only need to traverse through both strings once.\",\n    \"Step 5 - Output Format\": \"Return `True` if the `typed` string can be derived from `name` with possible long presses; otherwise, return `False`.\",\n    \"Step 6 - Code Efficiency and Edge Cases\": \"Handle edge cases like when the length of `typed` is shorter or longer than `name`, or if the characters in `typed` do not follow the sequence in `name`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"name\": \"alex\",\n        \"typed\": \"aaleex\"\n      },\n      \"output\": true,\n      \"explanation\": \"In this case, 'a' and 'e' are long pressed, making it a valid representation of 'alex'.\"\n    },\n    {\n      \"input\": {\n        \"name\": \"saeed\",\n        \"typed\": \"ssaaedd\"\n      },\n      \"output\": false,\n      \"explanation\": \"Here, 'e' should have been pressed twice in `typed`, but it wasn't.\"\n    }\n  ],\n  \"constraints\": {\n    \"name_length\": \"1 <= name.length <= 1000\",\n    \"typed_length\": \"1 <= typed.length <= 1000\",\n    \"character_set\": \"Both `name` and `typed` consist of lowercase English letters.\"\n  },\n  \"follow_up\": \"Can you think of an approach to optimize this further or handle edge cases where one string is much longer than the other?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a list of ages, count how many friend requests are made based on the following rules: 1) `age[y] <= 0.5 * age[x] + 7`, 2) `age[y] > age[x]`, 3) `age[y] > 100` and `age[x] < 100`. Do not count requests to yourself."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an integer array `ages` where each element `ages[i]` represents the age of the `i`th person on a social media website. The task is to calculate the total number of friend requests made between persons. A person `x` will not send a friend request to a person `y` (where `x != y`) if any of the following conditions are true: 1) `age[y] <= 0.5 * age[x] + 7`, 2) `age[y] > age[x]`, 3) `age[y] > 100` and `age[x] < 100`. Otherwise, `x` will send a friend request to `y`. Note that if `x` sends a request to `y`, `y` will not necessarily send a request back to `x`, and a person will not send a friend request to themselves.\",\n  \"objective\": \"Write a function that calculates and returns the total number of friend requests made on the website, adhering to the conditions for sending requests.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Each person can send a friend request to other people based on their age and a set of rules that are given. You must check these rules to decide whether a person sends a friend request to another person.\",\n    \"Step 2 - Conditions for Friend Request\": \"For each pair of distinct persons `x` and `y`, check whether the conditions for a friend request are met. If all the conditions are satisfied, count it as a valid friend request.\",\n    \"Step 3 - Efficiency Considerations\": \"The solution should handle arrays with up to 20,000 people efficiently, so aim for a time complexity that avoids a brute force O(n^2) approach when possible.\",\n    \"Step 4 - Output\": \"Return the total number of valid friend requests as an integer.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"ages\": [\n          16,\n          16\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"Both persons will send friend requests to each other, resulting in 2 requests.\"\n    },\n    {\n      \"input\": {\n        \"ages\": [\n          16,\n          17,\n          18\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"Friend requests are made from 17 to 16, and from 18 to 17, resulting in 2 requests.\"\n    },\n    {\n      \"input\": {\n        \"ages\": [\n          20,\n          30,\n          100,\n          110,\n          120\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"Friend requests are made from 110 to 100, from 120 to 110, and from 120 to 100, resulting in 3 requests.\"\n    }\n  ],\n  \"constraints\": {\n    \"n\": \"The length of `ages` is between 1 and 20,000.\",\n    \"ages\": \"Each age is between 1 and 120.\"\n  },\n  \"follow_up\": \"Can you optimize your solution to avoid checking every pair of people explicitly?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Design a map that supports inserting a key-value pair and retrieving the sum of all values for keys with a given prefix."}, {"role": "assistant", "content": "{\n  \"description\": \"Design a map data structure that supports mapping a string key to a value and retrieving the sum of all values for keys with a given prefix.\",\n  \"objective\": \"Use a Trie data structure to efficiently store and retrieve values based on prefixes.\",\n  \"meta_prompt\": {\n    \"Step 1 - Define Trie Structure\": \"Create a TrieNode class where each node stores a map of child characters and a `value` to store the cumulative sum for the prefix ending at that node.\",\n    \"Step 2 - Insert Keys\": \"Implement an `insert` method that updates the Trie. Adjust the cumulative sums of the nodes along the path for the key to reflect the new value.\",\n    \"Step 3 - Compute Prefix Sum\": \"Implement a `sum` method that traverses the Trie along the given prefix. Return the cumulative sum stored at the node corresponding to the end of the prefix.\",\n    \"Step 4 - Handle Overwrites\": \"If a key already exists in the map, calculate the difference between the old and new values and update the Trie nodes accordingly.\",\n    \"Step 5 - Return Result\": \"For `sum`, return the cumulative value for the prefix if it exists, or return 0 if the prefix does not exist.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"commands\": [\n          \"MapSum\",\n          \"insert\",\n          \"sum\",\n          \"insert\",\n          \"sum\"\n        ],\n        \"arguments\": [\n          [],\n          [\n            \"apple\",\n            3\n          ],\n          [\n            \"ap\"\n          ],\n          [\n            \"app\",\n            2\n          ],\n          [\n            \"ap\"\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        null,\n        3,\n        null,\n        5\n      ],\n      \"explanation\": \"After inserting 'apple' with value 3, the sum for prefix 'ap' is 3. Adding 'app' with value 2 results in a total sum of 5 for prefix 'ap'.\"\n    },\n    {\n      \"input\": {\n        \"commands\": [\n          \"MapSum\",\n          \"insert\",\n          \"insert\",\n          \"sum\",\n          \"insert\",\n          \"sum\"\n        ],\n        \"arguments\": [\n          [],\n          [\n            \"cat\",\n            5\n          ],\n          [\n            \"car\",\n            7\n          ],\n          [\n            \"ca\"\n          ],\n          [\n            \"cat\",\n            10\n          ],\n          [\n            \"ca\"\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        null,\n        null,\n        12,\n        null,\n        17\n      ],\n      \"explanation\": \"The initial sum for prefix 'ca' is 12 ('cat' + 'car'). Updating 'cat' to 10 results in a new total sum of 17 for prefix 'ca'.\"\n    }\n  ],\n  \"constraints\": {\n    \"key_length\": \"1 <= key.length <= 50\",\n    \"prefix_length\": \"1 <= prefix.length <= 50\",\n    \"value_range\": \"1 <= val <= 1000\",\n    \"function_calls\": \"At most 50 calls to `insert` and `sum`.\"\n  },\n  \"follow_up\": \"Analyze the time complexity of the Trie-based implementation and compare it to alternative approaches using hash maps for this problem.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the largest square made of 1s in a grid."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the largest square containing only `1`s in a binary matrix and return its area.\",\n  \"objective\": \"Develop a dynamic programming solution to efficiently compute the largest square area.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Understand that the problem involves finding a maximal square of `1`s and computing its area.\",\n    \"Step 2 - Dynamic Programming\": \"Define a DP table where dp[i][j] represents the size of the largest square whose bottom-right corner is at cell (i, j).\",\n    \"Step 3 - Transition Formula\": \"Update dp[i][j] using the formula: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 if matrix[i][j] == 1.\",\n    \"Step 4 - Iterate Through Matrix\": \"Traverse the matrix, updating the DP table and tracking the maximum square size.\",\n    \"Step 5 - Return Area\": \"Calculate the area as the square of the maximum size.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            \"1\",\n            \"0\",\n            \"1\",\n            \"0\",\n            \"0\"\n          ],\n          [\n            \"1\",\n            \"0\",\n            \"1\",\n            \"1\",\n            \"1\"\n          ],\n          [\n            \"1\",\n            \"1\",\n            \"1\",\n            \"1\",\n            \"1\"\n          ],\n          [\n            \"1\",\n            \"0\",\n            \"0\",\n            \"1\",\n            \"0\"\n          ]\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"The largest square of `1`s has a size of 2x2, so the area is 4.\"\n    },\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            \"0\",\n            \"1\"\n          ],\n          [\n            \"1\",\n            \"0\"\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The largest square of `1`s has a size of 1x1, so the area is 1.\"\n    },\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            \"0\"\n          ]\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"There are no `1`s in the matrix.\"\n    }\n  ],\n  \"constraints\": {\n    \"matrix_size\": \"1 <= m, n <= 300\",\n    \"cell_values\": \"matrix[i][j] is '0' or '1'\"\n  },\n  \"follow_up\": \"How can the DP table be optimized to use only O(n) space for rows and columns?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Evaluate an arithmetic expression in Reverse Polish Notation."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of strings `tokens` that represents an arithmetic expression in Reverse Polish Notation (RPN), evaluate the expression and return the result as an integer. Valid operators are `+`, `-`, `*`, and `/`. Division truncates toward zero.\",\n  \"objective\": \"Design an efficient algorithm to evaluate an arithmetic expression in RPN.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves processing RPN by iterating over the tokens and using a stack to evaluate the expression.\",\n    \"Step 2 - Use a Stack\": \"Push operands onto the stack. When an operator is encountered, pop the necessary operands, evaluate the expression, and push the result back onto the stack.\",\n    \"Step 3 - Handle Division\": \"Ensure that division between integers truncates toward zero.\",\n    \"Step 4 - Validate Input\": \"Handle cases where the input contains invalid operators or insufficient operands.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(n) time, where `n` is the number of tokens.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"tokens\": [\n          \"2\",\n          \"1\",\n          \"+\",\n          \"3\",\n          \"*\"\n        ]\n      },\n      \"output\": 9,\n      \"explanation\": \"((2 + 1) * 3) = 9\"\n    },\n    {\n      \"input\": {\n        \"tokens\": [\n          \"4\",\n          \"13\",\n          \"5\",\n          \"/\",\n          \"+\"\n        ]\n      },\n      \"output\": 6,\n      \"explanation\": \"(4 + (13 / 5)) = 6\"\n    },\n    {\n      \"input\": {\n        \"tokens\": [\n          \"10\",\n          \"6\",\n          \"9\",\n          \"3\",\n          \"+\",\n          \"-11\",\n          \"*\",\n          \"/\",\n          \"*\",\n          \"17\",\n          \"+\",\n          \"5\",\n          \"+\"\n        ]\n      },\n      \"output\": 22,\n      \"explanation\": \"((10 * (6 / ((9 + 3) * -11))) + 17) + 5 = 22\"\n    }\n  ],\n  \"constraints\": {\n    \"token_count\": \"1 <= tokens.length <= 10^4\",\n    \"value_range\": \"-200 <= operand value <= 200\",\n    \"operators\": \"Valid operators are `+`, `-`, `*`, `/`.\"\n  },\n  \"follow_up\": \"Can you optimize the solution for memory usage in cases of very large input arrays?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Reverse the first `k` characters of every `2k` characters in a string `s`. If fewer than `k` characters remain, reverse them all; if at least `k` but fewer than `2k` characters remain, reverse only the first `k` characters."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s` and an integer `k`, reverse the first `k` characters of every `2k` characters, starting from the beginning of the string. If fewer than `k` characters remain, reverse them all; if there are at least `k` but fewer than `2k` characters, reverse only the first `k` characters.\",\n  \"objective\": \"Implement a solution that processes the string in blocks of `2k`, reversing the first `k` characters of each block, with special handling for cases where fewer than `k` characters remain.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize the Process\": \"Set up a loop to iterate over the string with a step size of `2k`, starting from index 0 and moving in increments of `2k`. This ensures that each block is processed independently.\",\n    \"Step 2 - Determine Reversal Range for Each Block\": \"For each block starting at index `i`, calculate the end index for the portion to be reversed as the minimum of `i + k` and the length of `s`. This ensures that only the first `k` characters are reversed, or all remaining characters if fewer than `k` remain.\",\n    \"Step 3 - Reverse the First `k` Characters\": \"Use slicing to reverse the characters in the range from `i` to the determined end index (`i + k`). Then, append this reversed substring along with the unchanged portion (from `i + k` to `i + 2k`, if present) to build the final output string.\",\n    \"Step 4 - Output the Result\": \"Return the final string after processing all `2k` blocks in `s`, ensuring the string meets the specified format with correct reversal applied.\",\n    \"Final Check - Constraints Verification\": \"Confirm that the solution efficiently handles strings up to the maximum length of `10^4`, and adheres to constraints ensuring `1 <= s.length <= 10^4` and `1 <= k <= 10^4`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"abcdefg\",\n        \"k\": 2\n      },\n      \"output\": \"bacdfeg\",\n      \"explanation\": \"The first `k=2` characters of 'abcdefg' are reversed to form 'bacd', and then the first 2 of the next block 'efg' are also reversed.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"abcd\",\n        \"k\": 2\n      },\n      \"output\": \"bacd\",\n      \"explanation\": \"The first `k=2` characters are reversed to form 'bacd'. The remaining characters are less than `2k`, so only the first `k` characters are reversed.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 10^4\",\n    \"value_of_k\": \"1 <= k <= 10^4\"\n  },\n  \"follow_up\": \"Consider how the approach could be optimized for memory usage in cases where string concatenation might be inefficient. Explore other use cases where reversing chunks of a sequence can be applied.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a string matches a pattern through character-to-substring mapping."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a `pattern` string and a string `s`, determine if `s` matches the `pattern` through a bijective mapping of characters in `pattern` to substrings of `s`. Bijective mapping means:\\n1. Each character in `pattern` maps to a unique substring in `s`.\\n2. No two characters map to the same substring, and no character maps to multiple substrings.\",\n  \"objective\": \"Implement a recursive or backtracking algorithm to explore all possible mappings and verify if a valid bijective mapping exists between `pattern` and `s`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that `pattern` must map to `s` such that replacing each character in `pattern` with its mapped substring reconstructs `s` exactly.\",\n    \"Step 2 - Backtracking Approach\": \"Use a backtracking algorithm:\\n- Iterate through substrings of `s` to try mapping each character in `pattern`.\\n- Ensure mappings are bijective using two dictionaries (one for `pattern` to `s` and one for `s` to `pattern`).\\n- Recursively check remaining characters and substrings.\",\n    \"Step 3 - Base Cases\": \"Handle base cases:\\n- If `pattern` and `s` are both empty, return `true`.\\n- If only one of them is empty, return `false`.\",\n    \"Step 4 - Edge Cases\": \"Ensure the mapping is valid even for repetitive characters in `pattern` or substrings in `s`.\",\n    \"Step 5 - Output\": \"Return `true` if a valid bijective mapping exists, otherwise return `false`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"pattern\": \"abab\",\n        \"s\": \"redblueredblue\"\n      },\n      \"output\": true,\n      \"explanation\": \"Mapping: 'a' -> 'red', 'b' -> 'blue'.\"\n    },\n    {\n      \"input\": {\n        \"pattern\": \"aaaa\",\n        \"s\": \"asdasdasdasd\"\n      },\n      \"output\": true,\n      \"explanation\": \"Mapping: 'a' -> 'asd'.\"\n    },\n    {\n      \"input\": {\n        \"pattern\": \"aabb\",\n        \"s\": \"xyzabcxzyabc\"\n      },\n      \"output\": false,\n      \"explanation\": \"No valid bijective mapping exists.\"\n    }\n  ],\n  \"constraints\": {\n    \"pattern_length\": \"1 <= pattern.length <= 20\",\n    \"string_length\": \"1 <= s.length <= 20\",\n    \"valid_characters\": \"Both `pattern` and `s` consist of lowercase English letters.\"\n  },\n  \"follow_up\": [\n    \"How would you optimize the solution to handle larger inputs if constraints were relaxed?\",\n    \"Can you modify the solution to find all possible valid mappings, instead of returning a boolean result?\"\n  ]\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum number of times string `a` must be repeated so that string `b` is a substring of it."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine the minimum number of times string `a` must be repeated so that string `b` is a substring of it, or return -1 if it is impossible.\",\n  \"objective\": \"Implement the Rabin-Karp rolling hash algorithm to efficiently check whether `b` is a substring of repeated `a`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Rolling Hash Function\": \"Define a hash function for strings based on ASCII values and a prime modulus. Precompute powers of a prime base for hash calculations.\",\n    \"Step 2 - Extend String `a`\": \"Repeat string `a` enough times such that its length surpasses or equals `b`. Stop when the length difference guarantees that further repeats won't help.\",\n    \"Step 3 - Compute Rolling Hashes\": \"Calculate the hash for `b` and sliding-window hashes for substrings of repeated `a` with the same length as `b`.\",\n    \"Step 4 - Check for Matches\": \"Compare hashes of `b` and substrings of repeated `a`. If hashes match, verify the substrings to eliminate hash collisions.\",\n    \"Step 5 - Return Result\": \"If `b` is found as a substring, return the number of repetitions of `a`. Otherwise, return -1.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"a\": \"abcd\",\n        \"b\": \"cdabcdab\"\n      },\n      \"output\": 3,\n      \"explanation\": \"Repeating 'abcd' 3 times forms 'abcdabcdabcd', where 'cdabcdab' is a substring.\"\n    },\n    {\n      \"input\": {\n        \"a\": \"a\",\n        \"b\": \"aa\"\n      },\n      \"output\": 2,\n      \"explanation\": \"Repeating 'a' twice forms 'aa', where 'aa' is a substring.\"\n    },\n    {\n      \"input\": {\n        \"a\": \"abc\",\n        \"b\": \"def\"\n      },\n      \"output\": -1,\n      \"explanation\": \"'def' is not a substring of any repetition of 'abc'.\"\n    }\n  ],\n  \"constraints\": {\n    \"length\": \"1 <= a.length, b.length <= 10^4\",\n    \"characters\": \"a and b consist of lowercase English letters.\"\n  },\n  \"follow_up\": \"Discuss the efficiency of Rabin-Karp in terms of collision handling and compare it to naive substring matching approaches.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Reconstruct a permutation based on the given string."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s` of length `n` representing a sequence of 'I' (increasing) and 'D' (decreasing), your task is to reconstruct a permutation `perm` of `n + 1` integers that satisfies the following condition: 1) If `s[i] == 'I'`, then `perm[i] < perm[i + 1]`; 2) If `s[i] == 'D'`, then `perm[i] > perm[i + 1]`. If there are multiple valid permutations, return any of them.\",\n  \"objective\": \"Design an algorithm that efficiently constructs a valid permutation `perm` based on the given string `s` while minimizing time and space complexity.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the relationship between the string `s` and the required permutation `perm`. The string dictates the relative order of adjacent elements in the permutation.\",\n    \"Step 2 - Initial Approach\": \"Start with the range `[0, n]` for the permutation elements. For each character in `s`, decide the next number to place based on whether it corresponds to an 'I' or 'D'.\",\n    \"Step 3 - Optimal Solution Using Two Pointers\": \"Use a two-pointer approach. Begin with `low = 0` and `high = n`. For each 'I' in `s`, assign the next lowest number and increment `low`. For each 'D', assign the next highest number and decrement `high`. This ensures the permutation satisfies the conditions while remaining efficient.\",\n    \"Step 4 - Output Format\": \"Return the resulting permutation as a list of integers. Ensure that the solution adheres to the constraints and handles edge cases effectively.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Write code with O(n) time complexity by iterating through the string `s` once. Handle edge cases such as all 'I's, all 'D's, or mixed patterns.\",\n    \"Final Check - Constraints Verification\": \"Ensure the algorithm works within the constraints `1 <= s.length <= 10^5` and handles large inputs efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"IDID\"\n      },\n      \"output\": [\n        0,\n        4,\n        1,\n        3,\n        2\n      ],\n      \"explanation\": \"The permutation satisfies the conditions: 0 < 4 > 1 < 3 > 2.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"III\"\n      },\n      \"output\": [\n        0,\n        1,\n        2,\n        3\n      ],\n      \"explanation\": \"The permutation satisfies the conditions: 0 < 1 < 2 < 3.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"DDI\"\n      },\n      \"output\": [\n        3,\n        2,\n        0,\n        1\n      ],\n      \"explanation\": \"The permutation satisfies the conditions: 3 > 2 > 0 < 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 10^5\",\n    \"character_set\": \"s[i] is either 'I' or 'D'.\"\n  },\n  \"follow_up\": \"Can you come up with a solution that constructs the permutation in O(n) time and O(1) additional space (not including the output)?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Generate a list of numbers with given length and a difference between digits."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two integers, `n` and `k`, generate an array of all integers of length `n` where the difference between every two consecutive digits is exactly `k`. Ensure that no integers have leading zeros.\",\n  \"objective\": \"Return an array of integers satisfying the conditions on length and the difference between consecutive digits. The output may contain the integers in any order.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"We are tasked with generating integers of a specific length `n` where the difference between consecutive digits is `k`. We need to ensure that the integers are valid (i.e., no leading zeros and digits meet the difference condition).\",\n    \"Step 2 - Solution Approach\": \"We can start with each digit from 1 to 9 (since leading zeros are not allowed) and recursively try to build the number digit by digit. For each digit, we try both adding and subtracting `k` to the current digit, ensuring that the new digit stays within valid bounds (0 to 9). This will give us all possible numbers.\",\n    \"Step 3 - Output Format\": \"The output should be an array of valid numbers that match the given constraints. The order of the numbers does not matter.\",\n    \"Step 4 - Optimization\": \"By using a backtracking approach, we can efficiently explore all possible numbers of length `n` and ensure that we avoid generating numbers with leading zeros. This also allows us to avoid unnecessary computation by stopping the exploration early when a number becomes invalid.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Ensure that we handle edge cases such as small values of `n` and when `k` is 0. We must also ensure that our approach works within the given constraints and doesn't exceed time limits.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 3,\n        \"k\": 7\n      },\n      \"output\": [\n        181,\n        292,\n        707,\n        818,\n        929\n      ],\n      \"explanation\": \"Each of these numbers has a difference of 7 between consecutive digits.\"\n    },\n    {\n      \"input\": {\n        \"n\": 2,\n        \"k\": 1\n      },\n      \"output\": [\n        10,\n        12,\n        21,\n        23,\n        32,\n        34,\n        43,\n        45,\n        54,\n        56,\n        65,\n        67,\n        76,\n        78,\n        87,\n        89,\n        98\n      ],\n      \"explanation\": \"The numbers in the output all satisfy the condition that the difference between consecutive digits is 1.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"2 <= n <= 9\",\n    \"k_range\": \"0 <= k <= 9\",\n    \"no_leading_zeros\": \"Numbers should not have leading zeros.\"\n  },\n  \"follow_up\": \"Can you implement a more optimized solution to handle larger values of `n`?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find duplicates in the array."}, {"role": "assistant", "content": "{\n  \"title\": \"Find All Duplicates in Array\",\n  \"description\": \"Given an integer array `nums` of length `n` where integers are in the range `[1, n]` and each integer appears **once** or **twice**, return an array of all integers that appear **twice**. The solution must run in `O(n)` time and use constant extra space.\",\n  \"input\": {\n    \"nums\": {\n      \"type\": \"array\",\n      \"description\": \"An integer array of length `n` where each integer is in the range `[1, n]`.\",\n      \"constraints\": {\n        \"length\": \"[1, 10^5]\",\n        \"element_range\": \"[1, n]\"\n      }\n    }\n  },\n  \"output\": {\n    \"type\": \"array\",\n    \"description\": \"An array of integers that appear exactly twice in `nums`.\",\n    \"constraints\": {\n      \"each_element\": \"Each element appears exactly twice in `nums`.\"\n    }\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          4,\n          3,\n          2,\n          7,\n          8,\n          2,\n          3,\n          1\n        ]\n      },\n      \"output\": [\n        2,\n        3\n      ],\n      \"explanation\": \"Numbers 2 and 3 appear twice in the array.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          1,\n          2\n        ]\n      },\n      \"output\": [\n        1\n      ],\n      \"explanation\": \"Number 1 appears twice in the array.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1\n        ]\n      },\n      \"output\": [],\n      \"explanation\": \"No numbers appear twice in the array.\"\n    }\n  ],\n  \"hints\": [\n    \"To achieve constant space, consider using the input array itself for tracking occurrences.\",\n    \"Mark elements in `nums` by negating the value at the index corresponding to the element.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(n) time complexity with O(1) extra space by modifying the input array in place.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "There are `n` bulbs. Toggle them `n` times. Find how many are on."}, {"role": "assistant", "content": "{\n  \"description\": \"Given `n` bulbs initially turned off, simulate a toggling process where in the `i-th` round, every `i-th` bulb is toggled (turned on if off, and turned off if on). Determine how many bulbs are on after `n` rounds.\",\n  \"objective\": \"Optimize the solution by understanding that a bulb is toggled during every round corresponding to its divisors. A bulb will remain on if and only if it has an odd number of divisors, which occurs only for perfect squares.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Identify the behavior of toggling. A bulb remains on if it is toggled an odd number of times. This happens only if the bulb's index is a perfect square because only perfect squares have an odd number of divisors.\",\n    \"Step 2 - Solution Observation\": \"Count the number of perfect squares less than or equal to `n`. The result is equivalent to the integer part of the square root of `n`.\",\n    \"Step 3 - Implementation\": \"Efficiently compute the square root of `n` using a mathematical function, ensuring the solution handles large values of `n`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 3\n      },\n      \"output\": 1,\n      \"explanation\": \"Only bulb 1 remains on since it is the only bulb toggled an odd number of times (once).\"\n    },\n    {\n      \"input\": {\n        \"n\": 0\n      },\n      \"output\": 0,\n      \"explanation\": \"No bulbs are toggled, so none remain on.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1\n      },\n      \"output\": 1,\n      \"explanation\": \"Only bulb 1 is toggled once and remains on.\"\n    },\n    {\n      \"input\": {\n        \"n\": 9\n      },\n      \"output\": 3,\n      \"explanation\": \"Bulbs 1, 4, and 9 remain on as they are toggled an odd number of times.\"\n    }\n  ],\n  \"constraints\": {\n    \"bulb_count\": \"0 <= n <= 10^9\"\n  },\n  \"follow_up\": \"Can you explain why the solution is constant time with respect to the toggling simulation?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the number of unique k-diff pairs in an array, where a k-diff pair is defined as `(nums[i], nums[j])` such that the absolute difference between the two numbers is `k`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of integers `nums` and an integer `k`, find the number of unique k-diff pairs in the array, where a k-diff pair is defined as `(nums[i], nums[j])` such that the absolute difference between the two numbers is `k`.\",\n  \"objective\": \"Use a hashmap to count the frequency of each number in `nums` and then iterate through the hashmap to identify unique k-diff pairs based on the value of `k`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Identify that the problem requires finding pairs with an absolute difference of `k` without counting duplicate pairs and focusing on unique numbers.\",\n    \"Step 2 - Frequency Count with Hashmap\": \"Create a hashmap where each unique number in `nums` is a key, and its frequency is the value. This helps identify potential pairs without sorting.\",\n    \"Step 3 - Identify k-Diff Pairs\": \"For each unique number `x` in the hashmap, check two conditions: (1) if `k > 0`, check if `x + k` exists in the hashmap, ensuring unique pairs, and (2) if `k = 0`, check if the frequency of `x` is greater than 1 to form a valid pair `(x, x)`.\",\n    \"Step 4 - Count Unique Pairs\": \"Each time a valid pair is found based on these conditions, increment a result counter. This ensures only unique pairs are counted.\",\n    \"Step 5 - Complexity and Constraints\": \"Ensure that the solution is O(n) in time complexity with O(n) space complexity using a single pass through `nums` to create the hashmap and a second pass to check each unique number.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution handles up to `10^4` elements efficiently and considers the absolute difference constraint (`0 <= k <= 10^7`).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          1,\n          4,\n          1,\n          5\n        ],\n        \"k\": 2\n      },\n      \"output\": 2,\n      \"explanation\": \"There are two unique 2-diff pairs: (1, 3) and (3, 5).\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          4,\n          5\n        ],\n        \"k\": 1\n      },\n      \"output\": 4,\n      \"explanation\": \"There are four unique 1-diff pairs: (1, 2), (2, 3), (3, 4), and (4, 5).\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          3,\n          1,\n          5,\n          4\n        ],\n        \"k\": 0\n      },\n      \"output\": 1,\n      \"explanation\": \"There is one unique 0-diff pair: (1, 1), since 1 appears more than once.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"1 <= nums.length <= 10^4\",\n    \"array_element_range\": \"-10^7 <= nums[i] <= 10^7\",\n    \"k_value_range\": \"0 <= k <= 10^7\"\n  },\n  \"follow_up\": \"Can you optimize further by reducing unnecessary hashmap lookups, especially when `k = 0`?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given two strings s and t, return true if they are equal after processing backspace characters (#)."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two strings `s` and `t`, your task is to determine if they are equal after processing backspaces (represented by `#`) in both strings. A `#` means a backspace character, and any backspace applied to an empty text will result in no change. Return `true` if both strings are equal after all backspaces are processed, otherwise return `false`.\",\n  \"objective\": \"Design an efficient algorithm to simulate the backspace operation in both strings, ensuring that after processing all `#` characters, both strings are compared for equality.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Start by understanding that the `#` character represents a backspace. Each backspace should remove the last valid character in the string, if possible. The task is to compare the final results of both strings after applying all backspaces.\",\n    \"Step 2 - Initial Approach\": \"You can iterate over both strings and simulate the backspace operation by using a stack or by directly modifying the string. Each time you encounter a `#`, you remove the last valid character. Compare the resulting strings after processing all characters.\",\n    \"Step 3 - Efficient Solution\": \"Instead of modifying the string directly, consider using two pointers that traverse the strings from the end, skipping over any `#` characters and backtracking to the previous valid character. This can be done in O(n) time complexity.\",\n    \"Step 4 - Output Format\": \"Return `true` if both strings are equal after processing the backspaces, otherwise return `false`.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Write an efficient solution that works in O(n) time and O(1) space. Consider edge cases such as strings with only `#` characters or cases where the backspace results in an empty string.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution works within the constraints of 1 <= s.length, t.length <= 200 and only contains lowercase letters and `#` characters.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"ab#c \",\n        \"t\": \"ad#c \"\n      },\n      \"output\": true,\n      \"explanation\": \"Both strings become 'ac ', so the result is true.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"ab## \",\n        \"t\": \"c#d# \"\n      },\n      \"output\": true,\n      \"explanation\": \"Both strings become empty, so the result is true.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"a#c \",\n        \"t\": \"b \"\n      },\n      \"output\": false,\n      \"explanation\": \"After applying backspaces, s becomes 'c ', while t becomes 'b ', so the result is false.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length, t.length <= 200\",\n    \"characters\": \"s and t only contain lowercase letters and '#' characters.\"\n  },\n  \"follow_up\": \"Can you come up with a solution that operates in O(n) time complexity and O(1) space, avoiding additional data structures like stacks?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if one string is a permutation of another in a substring."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two strings `s1` and `s2`, determine if `s2` contains any permutation of `s1`. Return `true` if so, otherwise return `false`.\",\n  \"objective\": \"Implement an efficient sliding window solution to track and update character counts across `s2` in a way that enables checking for permutations of `s1`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Set Up Character Counts\": \"Initialize two arrays of size 26 to represent the counts of each character for `s1` and `s2` in the ASCII range for lowercase letters. Populate `s1`'s character count array based on its letters.\",\n    \"Step 2 - Initialize Sliding Window\": \"Set up the first window of length `s1` in `s2` by populating `s2`'s character count array for this initial window.\",\n    \"Step 3 - Slide the Window Across `s2`\": \"Iterate over `s2`, sliding the window one character to the right each time by removing the character that is no longer in the window and adding the new one. Update `s2`'s character count array accordingly.\",\n    \"Step 4 - Compare Arrays for Permutation\": \"After each slide, compare `s1`'s character count array with the current `s2` window\\u2019s character count array. If they match, a permutation of `s1` is present, so return `true` immediately.\",\n    \"Final Step - Return Result\": \"If the loop completes without a match, return `false`.\",\n    \"Final Check - Constraints Verification\": \"Ensure the solution handles edge cases where `s1` or `s2` is minimal (length of 1) or maximum (up to 10,000 characters), and meets the time complexity of O(m + n) where `m` and `n` are lengths of `s1` and `s2`, respectively.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s1\": \"ab\",\n        \"s2\": \"eidbaooo\"\n      },\n      \"output\": true,\n      \"explanation\": \"`s2` contains the substring 'ba', which is a permutation of `s1`.\"\n    },\n    {\n      \"input\": {\n        \"s1\": \"ab\",\n        \"s2\": \"eidboaoo\"\n      },\n      \"output\": false,\n      \"explanation\": \"No permutation of `s1` exists as a substring in `s2`.\"\n    }\n  ],\n  \"constraints\": {\n    \"s1_length\": \"1 <= s1.length <= 10^4\",\n    \"s2_length\": \"1 <= s2.length <= 10^4\",\n    \"character_set\": \"Both `s1` and `s2` consist only of lowercase English letters.\"\n  },\n  \"follow_up\": \"How to optimize the sliding window method\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the largest plus sign of 1's in a grid."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer `n` and a list `mines` representing the coordinates of `0`'s in an `n x n` binary grid, return the order of the largest axis-aligned plus sign of 1's in the grid. If there is no plus sign, return 0.\",\n  \"objective\": \"Find the largest axis-aligned plus sign of 1's in the grid and return its order. The order of a plus sign is determined by the length of its arms, and it should have a center of `1` with arms extending up, down, left, and right.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We need to find the largest plus sign formed by `1`'s in a grid, where some cells are blocked (marked as `0` based on the `mines` list). The center of the plus sign must be a `1`, and the arms of the plus sign must consist of `1`'s extending in four directions. We need to determine the maximum order of such a plus sign.\",\n    \"Step 2 - Strategy\": \"We can use a dynamic programming approach where we calculate the maximum arm lengths in each of the four directions (up, down, left, right) for each cell in the grid. The minimum of these arm lengths will give us the order of the plus sign for that cell.\",\n    \"Step 3 - Approach\": \"We'll construct a grid and update it based on the given mines list. For each valid cell, we'll check the lengths of arms in all four directions and determine the maximum size of the plus sign.\",\n    \"Step 4 - Efficient Solution Approach\": \"Using dynamic programming, we can compute the maximum arm lengths efficiently. We'll process the grid row-wise and column-wise to determine the arm lengths in each direction. The solution complexity will be `O(n^2)`, which is efficient given the constraints.\",\n    \"Step 5 - Edge Cases\": \"We need to consider cases where the grid is entirely blocked by `0`s, where no plus sign exists, and where the grid is very small (e.g., 1x1).\",\n    \"Step 6 - Output Explanation\": \"The output is the order of the largest plus sign, where the order is defined as the number of `1`s along one arm (excluding the center). If no plus sign exists, return `0`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 5,\n        \"mines\": [\n          [\n            4,\n            2\n          ]\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The largest plus sign has an order of 2, with the center at grid[2][2].\"\n    },\n    {\n      \"input\": {\n        \"n\": 1,\n        \"mines\": [\n          [\n            0,\n            0\n          ]\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"The grid is completely blocked, so no plus sign can exist.\"\n    }\n  ],\n  \"constraints\": {\n    \"n\": \"1 <= n <= 500\",\n    \"mines_length\": \"1 <= mines.length <= 5000\",\n    \"xi_yi\": \"0 <= xi, yi < n\"\n  },\n  \"follow_up\": \"How would the solution approach change if the grid size and number of mines were significantly larger?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Add two binary strings and return their sum as a binary string."}, {"role": "assistant", "content": "{\n  \"description\": \"Given two binary strings `a` and `b`, return their sum as a binary string. The result should represent the binary addition of the two input strings.\",\n  \"objective\": \"Design an efficient algorithm to perform binary addition of two strings without converting them into decimal numbers.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that binary addition involves summing digits from right to left, accounting for carry-over at each position.\",\n    \"Step 2 - Use Two Pointers\": \"Use two pointers to iterate through the binary strings from their least significant digits (rightmost). Add corresponding digits, along with any carry from the previous step.\",\n    \"Step 3 - Handle Unequal Lengths\": \"If one string is shorter, treat missing digits as 0 during the addition process. Continue processing until both strings and the carry are fully handled.\",\n    \"Step 4 - Result Construction\": \"Append the sum digit (mod 2) to the result string and update the carry (sum divided by 2). Reverse the result string at the end to obtain the final binary sum.\",\n    \"Step 5 - Constraints Compliance\": \"Ensure the solution handles constraints such as `1 <= a.length, b.length <= 10^4` efficiently in both time and space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"a\": \"11\",\n        \"b\": \"1\"\n      },\n      \"output\": \"100\",\n      \"explanation\": \"Binary addition of '11' and '1' results in '100'.\"\n    },\n    {\n      \"input\": {\n        \"a\": \"1010\",\n        \"b\": \"1011\"\n      },\n      \"output\": \"10101\",\n      \"explanation\": \"Binary addition of '1010' and '1011' results in '10101'.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= a.length, b.length <= 10^4\",\n    \"character_range\": \"`a` and `b` consist only of '0' or '1'\",\n    \"leading_zeros\": \"Neither string contains leading zeros except for the number '0' itself.\"\n  },\n  \"follow_up\": \"Can you extend this approach to handle binary subtraction or multiplication efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a person can attend all meetings from an array of intervals."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array of meeting time intervals `intervals` where each interval is represented as `[starti, endi]`, determine if a person can attend all meetings without any overlap. Return `true` if the person can attend all meetings and `false` otherwise.\",\n  \"objective\": \"Design an efficient algorithm to check for overlapping intervals. Ensure the solution handles a large number of intervals and edge cases such as empty input or intervals that just touch but do not overlap.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that overlapping intervals occur when the start time of one meeting is less than the end time of the previous meeting after sorting the intervals by their start times.\",\n    \"Step 2 - Initial Approach\": \"Sort the intervals by their start times and check for overlaps by comparing the end time of the current meeting with the start time of the next.\",\n    \"Step 3 - Optimize for Edge Cases\": \"Handle cases such as empty intervals (always return `true`), single intervals (always return `true`), and intervals with large or minimal start and end times.\",\n    \"Step 4 - Output\": \"Return a boolean indicating whether all meetings can be attended without any overlaps.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"intervals\": [\n          [\n            0,\n            30\n          ],\n          [\n            5,\n            10\n          ],\n          [\n            15,\n            20\n          ]\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The intervals `[0, 30]` and `[5, 10]` overlap, so it is not possible to attend all meetings.\"\n    },\n    {\n      \"input\": {\n        \"intervals\": [\n          [\n            7,\n            10\n          ],\n          [\n            2,\n            4\n          ]\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The intervals do not overlap, so all meetings can be attended.\"\n    },\n    {\n      \"input\": {\n        \"intervals\": []\n      },\n      \"output\": true,\n      \"explanation\": \"With no intervals, there are no meetings to attend.\"\n    },\n    {\n      \"input\": {\n        \"intervals\": [\n          [\n            1,\n            5\n          ]\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"A single interval means there are no overlaps.\"\n    }\n  ],\n  \"constraints\": {\n    \"intervals_length\": \"0 <= intervals.length <= 10^4\",\n    \"interval_length\": \"intervals[i].length == 2\",\n    \"start_and_end\": \"0 <= starti < endi <= 10^6\"\n  },\n  \"follow_up\": \"Can you extend this solution to return the minimum number of meeting rooms required to attend all meetings?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if one string can make another string."}, {"role": "assistant", "content": "{\n  \"title\": \"Check Constructability of Ransom Note\",\n  \"description\": \"Determine if a string `ransomNote` can be constructed using letters from another string `magazine`. Each letter in `magazine` can only be used once.\",\n  \"objective\": \"Efficiently verify if all letters in `ransomNote` are present in `magazine` with the required frequency.\",\n  \"meta_prompt\": {\n    \"Step 1 - Count Frequencies\": {\n      \"ransomNote\": \"Count the occurrences of each character in `ransomNote`.\",\n      \"magazine\": \"Count the occurrences of each character in `magazine`.\"\n    },\n    \"Step 2 - Compare Frequencies\": {\n      \"Check\": \"Verify if every character in `ransomNote` has a frequency in `magazine` that is equal to or greater than its frequency in `ransomNote`.\"\n    },\n    \"Step 3 - Return Result\": {\n      \"True or False\": \"Return `true` if all conditions are met, otherwise return `false`.\"\n    }\n  },\n  \"input\": {\n    \"ransomNote\": {\n      \"type\": \"string\",\n      \"description\": \"The string representing the note to construct.\",\n      \"constraints\": \"1 <= ransomNote.length <= 10^5\"\n    },\n    \"magazine\": {\n      \"type\": \"string\",\n      \"description\": \"The string containing letters available for constructing the note.\",\n      \"constraints\": \"1 <= magazine.length <= 10^5\"\n    }\n  },\n  \"output\": {\n    \"type\": \"boolean\",\n    \"description\": \"`true` if `ransomNote` can be constructed, otherwise `false`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"ransomNote\": \"a\",\n        \"magazine\": \"b\"\n      },\n      \"output\": false,\n      \"explanation\": \"The letter 'a' is not present in the magazine.\"\n    },\n    {\n      \"input\": {\n        \"ransomNote\": \"aa\",\n        \"magazine\": \"ab\"\n      },\n      \"output\": false,\n      \"explanation\": \"The letter 'a' appears twice in `ransomNote` but only once in `magazine`.\"\n    },\n    {\n      \"input\": {\n        \"ransomNote\": \"aa\",\n        \"magazine\": \"aab\"\n      },\n      \"output\": true,\n      \"explanation\": \"The letters 'aa' can be constructed using the first two letters of `magazine`.\"\n    }\n  ],\n  \"hints\": [\n    \"Use a hashmap or array to store character counts from both `ransomNote` and `magazine`.\",\n    \"Iterate over `ransomNote` and check against counts in `magazine`.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Ensure linear time complexity `O(n)` where `n` is the length of the longer string.\",\n    \"constraints\": \"Avoid constructing unnecessary intermediate data structures.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Capture regions in a grid of 'X' and 'O'."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `m x n` matrix `board` containing `'X'` and `'O'`, capture all regions that are 4-directionally surrounded by `'X'`. A region is captured by flipping all `'O'`s into `'X'`s in that surrounded region. An 'O' is not flipped if it is on the border or adjacent to an 'O' that cannot be flipped.\",\n  \"objective\": \"Design an algorithm to modify the board in-place, capturing all surrounded regions.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves identifying 'O' regions that are not surrounded and ensuring they remain unchanged.\",\n    \"Step 2 - Border Traversal\": \"Mark all 'O' regions connected to the border as not flippable using DFS or BFS.\",\n    \"Step 3 - Flip Regions\": \"Traverse the board again to flip all 'O' regions not connected to the border into 'X'.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as a single-row or single-column board, or boards with no 'O's.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(m * n) time and O(m + n) space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"board\": [\n          [\n            \"X\",\n            \"X\",\n            \"X\",\n            \"X\"\n          ],\n          [\n            \"X\",\n            \"O\",\n            \"O\",\n            \"X\"\n          ],\n          [\n            \"X\",\n            \"X\",\n            \"O\",\n            \"X\"\n          ],\n          [\n            \"X\",\n            \"O\",\n            \"X\",\n            \"X\"\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          \"X\",\n          \"X\",\n          \"X\",\n          \"X\"\n        ],\n        [\n          \"X\",\n          \"X\",\n          \"X\",\n          \"X\"\n        ],\n        [\n          \"X\",\n          \"X\",\n          \"X\",\n          \"X\"\n        ],\n        [\n          \"X\",\n          \"O\",\n          \"X\",\n          \"X\"\n        ]\n      ],\n      \"explanation\": \"The bottom 'O' is not surrounded and is not flipped. The other 'O's are flipped as they are surrounded.\"\n    },\n    {\n      \"input\": {\n        \"board\": [\n          [\n            \"X\"\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          \"X\"\n        ]\n      ],\n      \"explanation\": \"A single-element board remains unchanged.\"\n    }\n  ],\n  \"constraints\": {\n    \"board_size\": \"1 <= m, n <= 200\",\n    \"board_values\": \"board[i][j] is 'X' or 'O'.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to use constant extra space for marking regions?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find subsequences of an array that are in non-decreasing order."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums`, find all distinct non-decreasing subsequences that contain at least two elements. A subsequence is derived by deleting some or no elements from the array while maintaining the relative order of the remaining elements.\",\n  \"objective\": \"Implement an efficient algorithm to generate all valid non-decreasing subsequences from the array while ensuring that duplicate subsequences are not included in the result.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Understand that the goal is to find subsequences (not subarrays) where elements are in non-decreasing order. A subsequence is derived by selecting elements in order without rearranging them.\",\n    \"Step 2 - Approach\": \"Use backtracking to explore all possible subsequences. At each step, choose to include or skip the current element while maintaining non-decreasing order.\",\n    \"Step 3 - Avoid Duplicates\": \"To avoid duplicate subsequences, use a set or similar data structure to store intermediate results. This ensures only unique subsequences are considered.\",\n    \"Step 4 - Edge Cases\": \"Handle edge cases such as arrays with all identical elements, strictly decreasing arrays, or arrays of length less than two.\",\n    \"Step 5 - Optimization\": \"Ensure that the algorithm avoids redundant calculations by skipping elements that do not maintain the non-decreasing order or have already been considered at the current position.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          4,\n          6,\n          7,\n          7\n        ]\n      },\n      \"output\": [\n        [\n          4,\n          6\n        ],\n        [\n          4,\n          6,\n          7\n        ],\n        [\n          4,\n          6,\n          7,\n          7\n        ],\n        [\n          4,\n          7\n        ],\n        [\n          4,\n          7,\n          7\n        ],\n        [\n          6,\n          7\n        ],\n        [\n          6,\n          7,\n          7\n        ],\n        [\n          7,\n          7\n        ]\n      ],\n      \"explanation\": \"By selecting elements in non-decreasing order, all unique subsequences of length 2 or more are included.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          4,\n          4,\n          3,\n          2,\n          1\n        ]\n      },\n      \"output\": [\n        [\n          4,\n          4\n        ]\n      ],\n      \"explanation\": \"The only valid non-decreasing subsequence is [4, 4].\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          3,\n          2\n        ]\n      },\n      \"output\": [\n        [\n          1,\n          3\n        ],\n        [\n          1,\n          2\n        ]\n      ],\n      \"explanation\": \"Only subsequences that maintain non-decreasing order are included.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 15\",\n    \"element_range\": \"-100 <= nums[i] <= 100\",\n    \"minimum_subsequence_length\": \"Subsequences must have at least two elements.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"Can you optimize the algorithm to minimize the number of recursive calls?\",\n    \"question_2\": \"What changes would you make if the input array could be infinitely large and streamed?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Reverse the bits of a binary number."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a 32-bit unsigned integer, reverse its binary representation.\",\n  \"objective\": \"Implement a function to reverse the binary representation of the input integer efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that reversing bits involves flipping the order of binary digits from least significant to most significant.\",\n    \"Step 2 - Bit Manipulation\": \"Use bitwise operations to extract and set bits efficiently.\",\n    \"Step 3 - Handle Edge Cases\": \"Consider cases where the input has leading zeros or all bits are zero.\",\n    \"Step 4 - Optimize for Repeated Calls\": \"If the function is called multiple times, precompute and store results for common bit patterns.\",\n    \"Step 5 - Validate Output\": \"Ensure the output matches the expected reversed bit representation for all 32-bit integers.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": \"00000010100101000001111010011100\"\n      },\n      \"output\": 964176192,\n      \"explanation\": \"The reversed binary string is '00111001011110000010100101000000'.\"\n    },\n    {\n      \"input\": {\n        \"n\": \"11111111111111111111111111111101\"\n      },\n      \"output\": 3221225471,\n      \"explanation\": \"The reversed binary string is '10111111111111111111111111111111'.\"\n    }\n  ],\n  \"constraints\": {\n    \"input_format\": \"32-bit unsigned integer represented as a binary string.\",\n    \"length\": \"The input binary string is always 32 characters long.\"\n  },\n  \"follow_up\": \"Can you optimize the function for repeated calls by using precomputed results?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the least number of coins to make up an amount."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `coins` representing coin denominations and an integer `amount`, find the minimum number of coins required to make up the amount. If it is not possible to achieve the amount, return `-1`.\",\n  \"objective\": \"Design an algorithm to compute the minimum number of coins needed to sum up to a given amount using the available denominations, ensuring efficient handling of edge cases.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that this is a variation of the coin change problem, and we need to minimize the number of coins used to reach the target amount.\",\n    \"Step 2 - State Representation\": \"Use dynamic programming to represent the minimum number of coins needed to make each value from `0` to `amount`. Let `dp[x]` be the minimum number of coins to make the amount `x`.\",\n    \"Step 3 - Recursive Transition\": \"For each coin in the `coins` array and each target value `x`, compute `dp[x] = min(dp[x], dp[x - coin] + 1)` if `x >= coin`.\",\n    \"Step 4 - Base Cases\": \"Set `dp[0] = 0` (0 coins needed to make amount 0) and initialize `dp[x]` for all other values as infinity (`inf`).\",\n    \"Step 5 - Result\": \"After iterating through all coins and amounts, check if `dp[amount]` is still `inf`. If it is, return `-1`, else return `dp[amount]`.\",\n    \"Step 6 - Optimization\": \"Ensure the solution is optimized for both small and large inputs by maintaining `O(amount * coins.length)` time complexity.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"coins\": [\n          1,\n          2,\n          5\n        ],\n        \"amount\": 11\n      },\n      \"output\": 3,\n      \"explanation\": \"The minimum number of coins to make 11 is 3: 5 + 5 + 1.\"\n    },\n    {\n      \"input\": {\n        \"coins\": [\n          2\n        ],\n        \"amount\": 3\n      },\n      \"output\": -1,\n      \"explanation\": \"It is not possible to make amount 3 using only coin denomination 2.\"\n    },\n    {\n      \"input\": {\n        \"coins\": [\n          1\n        ],\n        \"amount\": 0\n      },\n      \"output\": 0,\n      \"explanation\": \"No coins are needed to make amount 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"length\": \"1 <= coins.length <= 12\",\n    \"values\": \"1 <= coins[i] <= 2^31 - 1\",\n    \"amount_range\": \"0 <= amount <= 10^4\"\n  },\n  \"follow_up\": \"Can you optimize space usage to `O(amount)` by avoiding a two-dimensional DP array?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find a masked version of a personal information string. It can be an email or a phone number."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a personal information string `s`, which can either be an email address or a phone number. Your task is to return a masked version of the personal information based on the following rules: For an email address, convert the name and domain to lowercase and replace the middle letters of the name with asterisks. For a phone number, remove all separators and mask it according to the country code and local number. Follow the specified rules for each type of personal information.\",\n  \"objective\": \"Design a function that accurately identifies whether the given string `s` is an email address or a phone number, and then applies the appropriate masking rules for each case.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"The input `s` is either an email address or a phone number. The goal is to apply the appropriate masking rules based on the type of information provided.\",\n    \"Step 2 - Email Address Handling\": \"If `s` is an email, the name part before the '@' should have all uppercase letters converted to lowercase and the middle characters (except the first and last) replaced by 5 asterisks. The domain part after '@' should also be converted to lowercase.\",\n    \"Step 3 - Phone Number Handling\": \"If `s` is a phone number, first remove all separators such as spaces, parentheses, hyphens, and plus signs. Then, based on the country code length, format the phone number as per the provided masking rules. Ensure that the last 4 digits of the local number are displayed as 'XXXX'.\",\n    \"Step 4 - Code Efficiency\": \"Ensure that the function processes the input efficiently and handles both email and phone number formats correctly. Consider edge cases, such as email addresses with short names or long phone numbers with varied formats.\",\n    \"Step 5 - Output Format\": \"The output should return a masked version of the personal information, ensuring that the format matches the specified rules for either email or phone number.\",\n    \"Final Check - Constraints Verification\": \"Verify that the code adheres to the constraints, handling input lengths and formats correctly. Ensure that both email addresses and phone numbers are masked as required.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"LeetCode@LeetCode.com\"\n      },\n      \"output\": \"l*****e@leetcode.com\",\n      \"explanation\": \"The email address is masked by converting the name and domain to lowercase, and replacing the middle part of the name with asterisks.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"AB@qq.com\"\n      },\n      \"output\": \"a*****b@qq.com\",\n      \"explanation\": \"Even though the name part is 2 characters, the middle is still replaced by 5 asterisks as per the rule.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"1(234)567-890\"\n      },\n      \"output\": \"***-***-7890\",\n      \"explanation\": \"The phone number is masked by removing separators and displaying the last 4 digits of the local number.\"\n    }\n  ],\n  \"constraints\": {\n    \"email_length\": \"8 <= s.length <= 40\",\n    \"email_characters\": \"Only uppercase and lowercase English letters, one '@' symbol, and one '.' symbol in the domain.\",\n    \"phone_number_length\": \"10 <= s.length <= 20\",\n    \"phone_number_characters\": \"Digits, spaces, and the symbols '(', ')', '-', and '+' are allowed.\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm to handle both types of personal information (email and phone number) with a single pass over the string, while ensuring minimal memory usage?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Add a new row to a binary tree at a specific depth."}, {"role": "assistant", "content": "{\n  \"description\": \"Given `m` arrays, each sorted in ascending order, calculate the maximum possible distance between integers picked from two different arrays.\",\n  \"objective\": \"Efficiently determine the maximum absolute difference between two integers from different arrays, leveraging the sorted nature of the arrays.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Values\": \"Start by initializing variables `min_val` and `max_val` with the smallest and largest elements of the first array, respectively. Also, initialize `max_distance` to zero.\",\n    \"Step 2 - Traverse Arrays\": \"Iterate through each subsequent array. For each array, calculate the potential maximum distances by comparing its first element with `max_val` and its last element with `min_val`.\",\n    \"Step 3 - Update Maximum Distance\": \"Update `max_distance` with the larger value of the current calculated distances.\",\n    \"Step 4 - Update Extremes\": \"Update `min_val` and `max_val` based on the first and last elements of the current array for future calculations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"arrays\": [\n          [\n            1,\n            2,\n            3\n          ],\n          [\n            4,\n            5\n          ],\n          [\n            1,\n            2,\n            3\n          ]\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"Maximum distance is achieved by picking 1 from the first or third array and 5 from the second array.\"\n    },\n    {\n      \"input\": {\n        \"arrays\": [\n          [\n            1\n          ],\n          [\n            1\n          ]\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"All values are the same; hence the maximum distance is 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_count\": \"2 <= m <= 10^5\",\n    \"array_length\": \"1 <= arrays[i].length <= 500\",\n    \"value_range\": \"-10^4 <= arrays[i][j] <= 10^4\",\n    \"total_elements\": \"At most 10^5 integers across all arrays\"\n  },\n  \"follow_up\": \"Investigate the trade-offs of using a divide-and-conquer approach versus this single-scan solution for large inputs.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Insert a value into the maximum binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a maximum binary tree and an integer `val`, return the root of the maximum binary tree after appending `val` to the original array `a` used to construct the tree. A **maximum tree** is a tree where every node has a value greater than any other value in its subtree. The tree is constructed with the largest element as the root, left child is recursively constructed from the elements to the left of the largest element, and right child is constructed from the elements to the right.\",\n  \"objective\": \"Design an algorithm to insert `val` into the maximum binary tree represented by the root node, and return the new root of the modified tree.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the requirements: Insert `val` into the maximum binary tree such that the properties of the maximum tree are maintained.\",\n    \"Step 2 - Initial Approach\": \"Consider the structure of the maximum tree: The largest element becomes the root, and recursively construct the tree for elements on the left and right.\",\n    \"Step 3 - Insertion Strategy\": \"To insert `val`, traverse the tree and find the correct position. If `val` is larger than the root, create a new root with `val` and attach the current tree as its left child. Otherwise, recursively insert `val` into the right subtree.\",\n    \"Step 4 - Algorithm Steps\": \"1. Traverse the tree starting from the root. 2. If `val` is larger than the current root, create a new root with `val` and attach the current tree as its left child. 3. Otherwise, recursively insert `val` into the right subtree. 4. Return the new root of the modified tree.\",\n    \"Step 5 - Output Format\": \"Ensure the function returns the root of the new maximum binary tree.\",\n    \"Step 6 - Code Efficiency and Edge Cases\": \"Focus on achieving an efficient solution with time complexity of O(n), where `n` is the number of nodes. Handle edge cases such as when the tree is empty or `val` is the largest or smallest value in the tree.\",\n    \"Final Check - Constraints Verification\": \"Verify the solution operates within the constraints: `1 <= number of nodes <= 100`, `1 <= Node.val <= 100`, and all values are unique. Ensure the algorithm is robust and handles various tree configurations efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          4,\n          1,\n          3,\n          null,\n          null,\n          2\n        ],\n        \"val\": 5\n      },\n      \"output\": [\n        5,\n        4,\n        null,\n        1,\n        3,\n        null,\n        null,\n        2\n      ],\n      \"explanation\": \"Inserting 5 into the tree results in 5 becoming the new root.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          5,\n          2,\n          4,\n          null,\n          1\n        ],\n        \"val\": 3\n      },\n      \"output\": [\n        5,\n        2,\n        4,\n        null,\n        1,\n        null,\n        3\n      ],\n      \"explanation\": \"Inserting 3 into the tree results in 3 being added to the right subtree.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          5,\n          2,\n          3,\n          null,\n          1\n        ],\n        \"val\": 4\n      },\n      \"output\": [\n        5,\n        2,\n        4,\n        null,\n        1,\n        3\n      ],\n      \"explanation\": \"Inserting 4 into the tree results in 4 being added to the right subtree.\"\n    }\n  ],\n  \"constraints\": {\n    \"nodes_range\": \"The number of nodes in the tree is in the range [1, 100]\",\n    \"node_values_range\": \"1 <= Node.val <= 100\",\n    \"unique_values\": \"All values of the tree are unique\",\n    \"val_range\": \"1 <= val <= 100\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle larger trees efficiently while maintaining the constraints and ensuring the correctness of the maximum tree properties?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Rearrange the array so that even numbers come first and odd numbers come last."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an integer array `nums`. The goal is to rearrange the array such that all even integers come before all odd integers, while preserving the relative order of even and odd numbers. The output should be any valid array that satisfies this condition.\",\n  \"objective\": \"Implement an algorithm to rearrange the given array `nums` such that all even integers appear before all odd integers. Ensure that the relative order of even numbers and odd numbers is preserved.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We are given an array of integers. The task is to move all even numbers to the beginning of the array, followed by all odd numbers. The relative order of even and odd numbers should remain the same.\",\n    \"Step 2 - Approach Overview\": \"You can solve this problem by iterating over the array and placing even numbers first, followed by odd numbers. The most efficient solution can be implemented in O(n) time complexity using a two-pointer or partitioning approach.\",\n    \"Step 3 - In-Place Rearrangement\": \"Consider solving the problem in-place without using extra space for another array. You can use a pointer to track the position where the next even number should go and move through the array once.\",\n    \"Step 4 - Edge Cases\": \"Consider cases where the array is already sorted with even or odd numbers. Handle edge cases like arrays with a single element or all even/odd numbers.\",\n    \"Step 5 - Time Complexity\": \"Aim for a solution with O(n) time complexity, where n is the length of the array, to ensure it works efficiently even with large arrays.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution handles arrays with sizes up to 5000 and that the solution runs within the time limit for large inputs.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          1,\n          2,\n          4\n        ]\n      },\n      \"output\": [\n        2,\n        4,\n        3,\n        1\n      ],\n      \"explanation\": \"The even numbers 2 and 4 are placed before the odd numbers 3 and 1, preserving the relative order.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          0\n        ]\n      },\n      \"output\": [\n        0\n      ],\n      \"explanation\": \"Since there is only one element, the array is already in the desired form.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 5000\",\n    \"nums_values\": \"0 <= nums[i] <= 5000\"\n  },\n  \"follow_up\": \"Can you optimize the solution further for arrays with a larger size by minimizing the number of swaps or moves?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum depth of a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Given the `root` of a binary tree, return its maximum depth. Maximum depth is the number of nodes along the longest path from the root node to the farthest leaf node.\",\n  \"objective\": \"Design an algorithm to compute the maximum depth of a binary tree.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that maximum depth is defined as the height of the tree, requiring traversal to the deepest leaf nodes.\",\n    \"Step 2 - Recursive Approach\": \"Use recursion to calculate the depth of left and right subtrees, and return the maximum of the two plus one.\",\n    \"Step 3 - Iterative Approach\": \"Use a stack or queue to traverse the tree iteratively, keeping track of the depth at each level.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as an empty tree and a single-node tree.\",\n    \"Step 5 - Optimize\": \"Ensure the solution runs in O(n) time and uses space proportional to the height of the tree.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          9,\n          20,\n          null,\n          null,\n          15,\n          7\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The longest path is from root (3) to leaf (15 or 7), with 3 levels.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          null,\n          2\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The longest path is from root (1) to leaf (2), with 2 levels.\"\n    }\n  ],\n  \"constraints\": {\n    \"node_count\": \"0 <= number of nodes <= 10^4\",\n    \"node_values\": \"-100 <= Node.val <= 100\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum in a rotated sorted array with duplicates."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a sorted rotated array `nums` that may contain duplicates, return the minimum element of this array. The array is rotated between 1 and `n` times.\",\n  \"objective\": \"Design an efficient algorithm to find the minimum element in the array while minimizing the number of operations.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves finding the smallest element in a rotated array which may contain duplicates.\",\n    \"Step 2 - Adapt Binary Search\": \"Modify the binary search to handle duplicate values by adjusting the pointers when encountering repeated elements.\",\n    \"Step 3 - Comparison Logic\": \"Compare the middle element with the rightmost element to determine which half contains the minimum.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as an array with all duplicates, an already sorted array, or arrays with one element.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs as efficiently as possible, considering the impact of duplicates on time complexity.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          3,\n          5\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The array is not rotated, and the minimum element is the first element.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          2,\n          2,\n          0,\n          1\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"The array is rotated, and the minimum element is at index 3.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= n <= 5000\",\n    \"element_values\": \"-5000 <= nums[i] <= 5000\",\n    \"rotation_count\": \"Array is rotated between 1 and n times.\"\n  },\n  \"follow_up\": \"How does the presence of duplicates affect the runtime complexity, and how can it be mitigated?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the most money you can rob from circular houses without alerting anyone."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `nums` where each value represents the amount of money in a circular street of houses, determine the maximum amount of money that can be robbed without alerting the police by robbing adjacent houses.\",\n  \"objective\": \"Optimize a dynamic programming solution to solve the circular variant of the house robber problem.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Identify the circular dependency of the houses. If the first house is robbed, the last cannot be robbed and vice versa.\",\n    \"Step 2 - Define Subproblems\": \"Break the problem into two subarrays: one excluding the first house and the other excluding the last house.\",\n    \"Step 3 - Apply Dynamic Programming\": \"Use the `House Robber I` logic to calculate the maximum robbery for each subarray.\",\n    \"Step 4 - Combine Results\": \"Return the maximum of the two computed subarray values to account for the circular nature.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider edge cases like a single house or two houses in the input.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          3,\n          2\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"Rob house 2 (money = 3). Robbing houses 1 and 3 is invalid as they are adjacent.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          1\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"Rob house 1 and house 3 for a total of 4.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"Rob house 3 (money = 3).\"\n    }\n  ],\n  \"constraints\": {\n    \"house_count\": \"1 <= nums.length <= 100\",\n    \"money_range\": \"0 <= nums[i] <= 1000\"\n  },\n  \"follow_up\": \"How would you optimize the space complexity of the solution to `O(1)` instead of maintaining an additional DP array?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You have a list from 1 to `n`. Keep removing numbers until one is left."}, {"role": "assistant", "content": "{\n  \"title\": \"Last Remaining Number After Eliminations\",\n  \"description\": \"Determine the last remaining number in a list `[1, n]` after repeatedly applying elimination rules alternately from left-to-right and right-to-left.\",\n  \"objective\": \"Efficiently compute the last remaining number without simulating the entire list, leveraging mathematical insights for large inputs.\",\n  \"input\": {\n    \"parameters\": [\n      {\n        \"name\": \"n\",\n        \"type\": \"integer\",\n        \"description\": \"The upper limit of the range of numbers `[1, n]`.\",\n        \"constraints\": \"1 <= n <= 10^9\"\n      }\n    ]\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The last remaining number after repeatedly applying the elimination process.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 9\n      },\n      \"output\": 6,\n      \"explanation\": \"Starting with [1, 2, 3, 4, 5, 6, 7, 8, 9], repeated elimination results in [2, 4, 6, 8] -> [2, 6] -> [6].\"\n    },\n    {\n      \"input\": {\n        \"n\": 1\n      },\n      \"output\": 1,\n      \"explanation\": \"Only one number exists, so it is the last remaining number.\"\n    },\n    {\n      \"input\": {\n        \"n\": 10\n      },\n      \"output\": 8,\n      \"explanation\": \"Starting with [1, 2, ..., 10], repeated elimination results in [2, 4, 6, 8, 10] -> [2, 6, 10] -> [6, 10] -> [8].\"\n    }\n  ],\n  \"hints\": [\n    \"Observe the pattern in the indices of numbers that survive each round of elimination.\",\n    \"Track the head of the sequence and how it shifts after each elimination.\",\n    \"The sequence alternates between left-to-right and right-to-left eliminations.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve O(log n) time complexity with O(1) space.\",\n    \"constraints\": \"Avoid simulating the full list for large values of `n` due to memory and performance limitations.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find k frequent numbers from nums array."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the `k` most frequent elements in an array `nums`. Ensure that the solution is efficient and can handle large arrays while meeting the constraint of time complexity better than `O(n log n)`.\",\n  \"objective\": \"Design an algorithm that uses a frequency map and an optimized approach (e.g., a heap or bucket sort) to identify the `k` most frequent elements in the array.\",\n  \"meta_prompt\": {\n    \"Step 1 - Count Frequencies\": \"Use a hash map to count the frequency of each element in `nums`.\",\n    \"Step 2 - Organize Frequencies\": \"Use an efficient structure (e.g., min-heap for top-k elements or bucket sort) to find the `k` elements with the highest frequency.\",\n    \"Step 3 - Output Result\": \"Return the `k` most frequent elements in any order.\",\n    \"Step 4 - Optimization\": \"Ensure the solution achieves better than `O(n log n)` time complexity.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          1,\n          1,\n          2,\n          2,\n          3\n        ],\n        \"k\": 2\n      },\n      \"output\": [\n        1,\n        2\n      ],\n      \"explanation\": [\n        \"Frequencies: {1: 3, 2: 2, 3: 1}.\",\n        \"The top 2 most frequent elements are [1, 2].\"\n      ]\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1\n        ],\n        \"k\": 1\n      },\n      \"output\": [\n        1\n      ],\n      \"explanation\": [\n        \"Only one unique element exists in the array: [1].\",\n        \"Return the only element [1].\"\n      ]\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10^5\",\n    \"element_range\": \"-10^4 <= nums[i] <= 10^4\",\n    \"k_range\": \"1 <= k <= number of unique elements in nums\"\n  },\n  \"follow_up\": \"Can you adapt the solution to return the elements in descending order of frequency if required?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Parse a chemical formula and count atoms."}, {"role": "assistant", "content": "{\n  \"description\": \"Parse a chemical formula string and count the occurrences of each atom.\",\n  \"objective\": \"Extract the counts of all atomic elements in the chemical formula, including handling parentheses and multipliers, and return them in sorted order.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Initialize a stack to manage multipliers for nested parentheses and a hashmap to store counts of atoms.\",\n    \"Step 2\": \"Traverse the formula from right to left to process digits, parentheses, and atom names in reverse order.\",\n    \"Step 3\": \"Handle digits: Build the current count for an atom or multiplier as you traverse the string.\",\n    \"Step 4\": \"Handle lowercase and uppercase letters: Build the full atom name. Once complete, add the atom to the hashmap with its adjusted count using the running multiplier.\",\n    \"Step 5\": \"Handle closing parentheses ')': Push the current multiplier onto the stack and update the running multiplier.\",\n    \"Step 6\": \"Handle opening parentheses '(': Pop the stack to update the running multiplier.\",\n    \"Step 7\": \"Sort the hashmap by atom names and construct the output string by appending the atom names and their counts (if greater than 1).\",\n    \"Step 8\": \"Return the final result string.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"formula\": \"H2O\"\n      },\n      \"output\": \"H2O\",\n      \"explanation\": \"The formula 'H2O' has 2 H atoms and 1 O atom.\"\n    },\n    {\n      \"input\": {\n        \"formula\": \"Mg(OH)2\"\n      },\n      \"output\": \"H2MgO2\",\n      \"explanation\": \"The formula 'Mg(OH)2' has 1 Mg atom, 2 O atoms, and 2 H atoms.\"\n    },\n    {\n      \"input\": {\n        \"formula\": \"K4(ON(SO3)2)2\"\n      },\n      \"output\": \"K4N2O14S4\",\n      \"explanation\": \"The formula 'K4(ON(SO3)2)2' has 4 K atoms, 2 N atoms, 14 O atoms, and 4 S atoms.\"\n    }\n  ],\n  \"constraints\": {\n    \"formula_length\": \"1 <= formula.length <= 1000\",\n    \"characters\": \"formula consists of English letters, digits, '(', and ')'\",\n    \"validity\": \"formula is always valid\"\n  },\n  \"follow_up\": \"Discuss how the algorithm can handle cases where additional validation is needed, such as detecting unbalanced parentheses.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a string 's' and an array 'widths', return the number of lines required to write the string with each line having a width of at most 100 pixels."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a string 's' of lowercase English letters and an array 'widths' that represents how many pixels wide each lowercase letter is. Each element in 'widths' corresponds to the width of the respective letter from 'a' to 'z'. The task is to write the string 's' across multiple lines, where each line cannot exceed 100 pixels in width. You must determine the total number of lines required and the width of the last line in pixels.\",\n  \"objective\": \"Design a function that calculates how many lines are needed to write the string 's' such that no line exceeds 100 pixels in width, and also calculates the width of the last line.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We need to calculate how the string 's' will be split across multiple lines, considering the pixel widths for each character. Each line can hold characters as long as the total width of the characters does not exceed 100 pixels.\",\n    \"Step 2 - Key Concepts\": \"The concept here involves calculating the total width for each line and ensuring that it doesn't exceed 100 pixels. The width of each character is defined by the 'widths' array, where each element corresponds to a letter's width.\",\n    \"Step 3 - Approach\": \"We need to iterate through the string, accumulating the width of each character and tracking how many lines are needed to accommodate all characters. Whenever the accumulated width exceeds 100 pixels, we reset the width counter and start a new line.\",\n    \"Step 4 - Solution Strategy\": \"1. Initialize a counter for the total width of the current line. 2. Traverse through each character in the string. 3. Add the width of the character to the current line's total width. 4. If the width exceeds 100, start a new line and reset the width counter. 5. At the end, the total number of lines and the width of the last line are the desired results.\",\n    \"Step 5 - Optimizations\": \"This approach works in a linear time complexity of O(n), where n is the length of the string, which should be efficient given the constraint of s.length <= 1000.\",\n    \"Step 6 - Final Solution\": \"The solution should iterate over the string once, maintaining a running total of the current line width and counting the lines required to write the entire string.\",\n    \"Step 7 - Edge Case Handling\": \"Consider edge cases such as a single character in the string or a string where all characters are the same. These should be handled seamlessly by the described approach.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"widths\": [\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10\n        ],\n        \"s\": \"abcdefghijklmnopqrstuvwxyz\"\n      },\n      \"output\": [\n        3,\n        60\n      ],\n      \"explanation\": \"The string can be split into three lines: the first line contains 'abcdefghij' (100 pixels), the second line contains 'klmnopqrst' (100 pixels), and the third line contains 'uvwxyz' (60 pixels). Therefore, the result is [3, 60].\"\n    },\n    {\n      \"input\": {\n        \"widths\": [\n          4,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10,\n          10\n        ],\n        \"s\": \"bbbcccdddaaa\"\n      },\n      \"output\": [\n        2,\n        4\n      ],\n      \"explanation\": \"The first line contains 'bbbcccdddaa' (98 pixels), and the second line contains 'a' (4 pixels). Hence, the result is [2, 4].\"\n    }\n  ],\n  \"constraints\": {\n    \"widths_length\": \"26\",\n    \"width_range\": \"2 <= widths[i] <= 10\",\n    \"string_length\": \"1 <= s.length <= 1000\",\n    \"letters_in_string\": \"s contains only lowercase English letters\"\n  },\n  \"follow_up\": \"What optimizations would you consider if the width of each line could be dynamically adjusted?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the best empty land cell to build a house so that the total travel distance to all buildings is smallest. Return -1 if not possible."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `m x n` grid where `0` represents empty land, `1` represents buildings, and `2` represents obstacles, find the shortest total Manhattan distance to all buildings from an empty land cell. Return the distance if possible; otherwise, return -1.\",\n  \"objective\": \"Design an efficient algorithm to compute the minimal total travel distance to all buildings in the grid, ensuring all calculations respect movement constraints and grid boundaries.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the grid composition and the movement constraints. Note that Manhattan distance is used to calculate travel distance, and the goal is to minimize the sum of distances from an empty land cell to all buildings.\",\n    \"Step 2 - Algorithm Choice\": \"Use Breadth-First Search (BFS) from each building to calculate distances to all reachable empty cells. Track cumulative distances and the count of buildings reachable from each empty cell.\",\n    \"Step 3 - Output Logic\": \"Iterate through all empty land cells to find the one with the smallest total distance to all buildings. Return -1 if no such cell exists due to obstacles or unreachable areas.\",\n    \"Step 4 - Complexity\": \"Ensure the solution is efficient, leveraging BFS from all buildings to calculate distances in O(m * n) time complexity for each building.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            0,\n            2,\n            0,\n            1\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            1,\n            0,\n            0\n          ]\n        ]\n      },\n      \"output\": 7,\n      \"explanation\": \"The empty cell at (1,2) minimizes the total travel distance to all buildings, summing up to 7.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1,\n            0\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The empty cell at (0,1) has a travel distance of 1 to the only building.\"\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\n            1\n          ]\n        ]\n      },\n      \"output\": -1,\n      \"explanation\": \"No empty land exists, so it is impossible to build a house.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_size\": \"1 <= m, n <= 50\",\n    \"grid_values\": \"grid[i][j] is either 0, 1, or 2\",\n    \"buildings\": \"At least one building exists in the grid.\"\n  },\n  \"follow_up\": \"How would you optimize the solution if there were significantly more buildings or obstacles than empty land cells?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given two strings, `start` and `end`, containing characters 'L', 'R', and 'X', check if one string can be transformed into the other."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string composed of 'L', 'R', and 'X' characters, your task is to determine if you can transform the starting string `start` into the ending string `end` by applying a series of specific moves. A move consists of either replacing one occurrence of 'XL' with 'LX' or replacing one occurrence of 'RX' with 'XR'. Return `True` if it is possible to transform the string, otherwise return `False`.\",\n  \"objective\": \"Design an algorithm to check if it's possible to transform the `start` string into the `end` string by applying the allowed moves. The key here is to evaluate if a sequence of moves can be performed to match the two strings.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We are given two strings, `start` and `end`, both containing only the characters 'L', 'R', and 'X'. We can only make two types of swaps: 'XL' to 'LX' and 'RX' to 'XR'. We need to check if the transformation from `start` to `end` is possible with these swaps.\",\n    \"Step 2 - Observation on Swaps\": \"These swaps involve 'X' characters, which means they only affect the relative positions of 'R' and 'L'. Therefore, the problem is reduced to evaluating whether the relative ordering of 'R' and 'L' can be adjusted to match the `end` string using the allowed swaps.\",\n    \"Step 3 - Strategy and Approach\": \"The approach involves simulating the transformation process. We can check for a sequence of valid swaps by moving through the string and attempting to perform the swaps wherever applicable, and at the end, check if the transformed `start` matches the `end` string.\",\n    \"Step 4 - Edge Cases\": \"Consider edge cases where no transformations are needed (i.e., `start` is already equal to `end`). Another case to handle is when no sequence of swaps can lead to a match, e.g., if `start` contains too many 'X' characters at certain positions that cannot be swapped with 'R' and 'L'.\",\n    \"Step 5 - Algorithm Optimization\": \"To efficiently check if the transformation is possible, an optimal approach could involve scanning through the string and applying swaps directly where necessary. This can be done by checking pairs of adjacent characters and applying the swap if the condition matches.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution is efficient, with the time complexity manageable for string lengths up to 10^4, as specified in the constraints.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"start\": \"RXXLRXRXL\",\n        \"end\": \"XRLXXRRLX\"\n      },\n      \"output\": true,\n      \"explanation\": \"We can transform `start` to `end` following these steps: RXXLRXRXL -> XRXLRXRXL -> XRLXRXRXL -> XRLXXRRXL -> XRLXXRRLX.\"\n    },\n    {\n      \"input\": {\n        \"start\": \"X\",\n        \"end\": \"L\"\n      },\n      \"output\": false,\n      \"explanation\": \"It is impossible to transform `X` into `L` using the allowed swaps.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length_range\": \"1 <= start.length <= 10^4\",\n    \"string_content\": \"The string will only contain characters 'L', 'R', and 'X'.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to avoid repeatedly checking the same pairs of characters?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given an array, return true if you can split it into two subarrays with the same average."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an integer array 'nums'. Your task is to determine if it's possible to divide this array into two non-empty subarrays, 'A' and 'B', such that the average of elements in 'A' equals the average of elements in 'B'. The average of an array is defined as the sum of its elements divided by the number of elements. Return 'true' if it is possible to split the array into two subarrays with equal averages, and 'false' otherwise.\",\n  \"objective\": \"Design a solution that checks if it's possible to split the array into two non-empty subarrays with equal averages.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The goal is to check if we can split the given array into two non-empty subarrays such that the averages of the two subarrays are equal. The average of an array is defined as the sum of the array's elements divided by its length.\",\n    \"Step 2 - Key Concepts\": \"The key concept is the average of an array, which is computed by dividing the sum of the array by its length. We need to ensure that both subarrays have the same average.\",\n    \"Step 3 - Approach\": \"To solve this, we need to explore possible ways of splitting the array into two subarrays and check if their averages are equal. We can iterate through all possible non-empty splits and compute the averages.\",\n    \"Step 4 - Solution Strategy\": \"1. For each possible split of the array, compute the sum and length of the two subarrays. 2. Check if the averages of the two subarrays are equal. 3. If any split results in equal averages, return true; otherwise, return false.\",\n    \"Step 5 - Optimizations\": \"We can optimize the solution by recognizing that checking each possible split could be computationally expensive. A more efficient approach could involve leveraging mathematical properties like the sum of elements and their counts, rather than iterating through all splits explicitly.\",\n    \"Step 6 - Final Solution\": \"The solution should have a time complexity of O(n^2), where n is the length of the array. This should work efficiently for the given constraint (array length <= 30).\",\n    \"Step 7 - Edge Case Handling\": \"Consider edge cases such as very small arrays (length 1 or 2), and ensure that the arrays are non-empty after splitting. Handle cases where no valid split is possible.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          8\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"We can split the array into [1, 4, 5, 8] and [2, 3, 6, 7], and both have an average of 4.5.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          1\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"There is no way to split the array into two subarrays with equal averages.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 30\",\n    \"nums_elements\": \"0 <= nums[i] <= 104\"\n  },\n  \"follow_up\": \"How would you improve your solution if the array length were larger, say up to 1000 elements?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Calculate the sum of distances between each node and all other nodes in a tree."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an undirected, connected tree with `n` nodes labeled from `0` to `n - 1` and `n - 1` edges. You are tasked with calculating the sum of the distances from each node to all other nodes in the tree. Return an array `answer` where `answer[i]` is the sum of distances from node `i` to every other node in the tree.\",\n  \"objective\": \"Design an efficient algorithm to compute the sum of distances for each node in the tree. You can use a DFS/BFS approach to first calculate the distances from one node and then propagate the results to other nodes to avoid recalculating distances repeatedly.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"You are given an undirected tree, which means the graph has no cycles, and there are `n` nodes connected by `n-1` edges. Each node is connected to other nodes by an edge, and the goal is to compute the sum of the distances from each node to all other nodes.\",\n    \"Step 2 - Approach Design\": \"One efficient approach is to use Depth-First Search (DFS) or Breadth-First Search (BFS) starting from an arbitrary node to compute the distances from that node to all other nodes. Then, propagate the results from this initial calculation to other nodes in a way that avoids redundant calculations.\",\n    \"Step 3 - Algorithm Efficiency\": \"This approach must be efficient enough to handle large inputs, where `n` can be as large as 30,000. Aim for a time complexity of O(n) or O(n log n) to ensure the solution scales well with input size.\",\n    \"Step 4 - Algorithm Details\": \"Start by calculating the distance from an arbitrary node (say node `0`) to all other nodes using DFS or BFS. Then, using the properties of a tree, propagate the results from node `0` to all other nodes. This propagation involves adjusting the distance sums based on the tree structure.\",\n    \"Step 5 - Output\": \"Return the resulting array `answer`, where each element represents the sum of distances from that node to every other node in the tree.\",\n    \"Final Check - Constraints Verification\": \"Verify that your algorithm works efficiently within the constraints: the number of nodes `n` is between 1 and 30,000, and the edges represent a valid tree.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 6,\n        \"edges\": [\n          [\n            0,\n            1\n          ],\n          [\n            0,\n            2\n          ],\n          [\n            2,\n            3\n          ],\n          [\n            2,\n            4\n          ],\n          [\n            2,\n            5\n          ]\n        ]\n      },\n      \"output\": [\n        8,\n        12,\n        6,\n        10,\n        10,\n        10\n      ],\n      \"explanation\": \"In this tree, the sum of distances for each node is calculated as follows: `answer[0] = 8`, `answer[1] = 12`, `answer[2] = 6`, and so on.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1,\n        \"edges\": []\n      },\n      \"output\": [\n        0\n      ],\n      \"explanation\": \"With only one node, there are no distances to compute, so the result is [0].\"\n    },\n    {\n      \"input\": {\n        \"n\": 2,\n        \"edges\": [\n          [\n            1,\n            0\n          ]\n        ]\n      },\n      \"output\": [\n        1,\n        1\n      ],\n      \"explanation\": \"For two nodes connected by one edge, the distance between them is 1 for both nodes.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 30,000\",\n    \"edges_length\": \"edges.length == n - 1\",\n    \"valid_edges\": \"0 <= ai, bi < n, ai != bi, and the input represents a valid tree.\"\n  },\n  \"follow_up\": \"Can you improve the efficiency of your solution to handle the upper limit of n (30,000)? Consider optimizing the distance propagation step.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a string can be made by repeating some smaller string multiple times."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a string `s`, determine if it can be constructed by taking a substring of `s` and appending multiple copies of the substring together to recreate `s`. The substring must be non-empty, and the repeated concatenations must equal the original string exactly.\",\n  \"objective\": \"Design an efficient algorithm to check if the string can be formed by repeated concatenations of a substring. The solution should aim for optimal performance, ideally with a time complexity better than `O(n^2)`.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Understand that the problem involves identifying a repeated pattern in the string. If such a pattern exists, the string length should be divisible by the length of the potential substring, and the substring should repeat seamlessly to form the string.\",\n    \"Step 2 - Naive Approach\": \"Check all possible substrings of `s` that could be the repeating unit by iterating over all lengths up to `n/2`. Verify if repeating the substring forms `s`. This approach, however, has `O(n^2)` complexity and may not perform well for large inputs.\",\n    \"Step 3 - Optimized Approach\": \"Use a combination of string manipulation and mathematical properties. For example, construct a new string `t = s + s` (excluding the first and last characters) and check if `s` exists as a substring of `t`. If `s` is found, it implies a repeating pattern.\",\n    \"Step 4 - Implementation\": \"Write code that computes whether the input string `s` can be constructed by repeated concatenations of a substring. Optimize the solution to handle edge cases such as strings with a single character or no repeating pattern.\",\n    \"Step 5 - Complexity and Validation\": \"Ensure the solution has a time complexity of `O(n)` by leveraging efficient substring checking methods. Validate the implementation with edge cases like single-character strings, large strings, and strings with no repetitions.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"abab\"\n      },\n      \"output\": true,\n      \"explanation\": \"The string 'abab' can be constructed by repeating the substring 'ab' twice.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"aba\"\n      },\n      \"output\": false,\n      \"explanation\": \"The string 'aba' cannot be constructed by repeating any substring.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"abcabcabcabc\"\n      },\n      \"output\": true,\n      \"explanation\": \"The string 'abcabcabcabc' can be constructed by repeating the substring 'abc' four times.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 10^4\",\n    \"character_set\": \"s consists of lowercase English letters.\"\n  },\n  \"follow_up\": \"Can you modify the solution to efficiently handle scenarios where you need to find the smallest repeating substring instead of simply checking for a repeating pattern?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You are given two strings `jewels` and `stones`. Find how many jewels are in stones."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given two strings, `jewels` and `stones`. The string `jewels` represents the types of stones that are considered jewels, and the string `stones` represents the stones you have. The goal is to determine how many of the stones you have are also jewels, considering that the letters are case-sensitive. Each character in `stones` is a stone type you own, and the task is to count how many of these are present in the `jewels` string.\",\n  \"objective\": \"Return the number of stones in `stones` that are also present in `jewels`. The solution should be case-sensitive, meaning that uppercase and lowercase letters should be treated as distinct.\",\n  \"meta_prompt\": {\n    \"Step 1 - Understanding the Strings\": \"You are given two strings: `jewels` and `stones`. The string `jewels` contains the characters representing the types of stones that are considered jewels, and `stones` contains the types of stones you currently have.\",\n    \"Step 2 - Analyzing the Case-Sensitivity\": \"The problem specifies that the comparison between stones and jewels is case-sensitive, meaning that 'a' is different from 'A'. Ensure that you take this into account when performing the comparison.\",\n    \"Step 3 - Counting Matching Stones\": \"The task is to count how many characters from `stones` are found in `jewels`. This means iterating over the characters in `stones` and checking if they exist in the `jewels` string.\",\n    \"Step 4 - Edge Case Consideration\": \"Consider edge cases where no stones are jewels (for example, if `stones` contains no characters found in `jewels`), or when all stones are jewels (all characters in `stones` are present in `jewels`).\",\n    \"Step 5 - Constraints Check\": \"The solution should handle inputs where the length of both `jewels` and `stones` is between 1 and 50, as per the given constraints.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"jewels\": \"aA\",\n        \"stones\": \"aAAbbbb\"\n      },\n      \"output\": 3,\n      \"explanation\": \"In this case, 'a' and 'A' are both jewels. The stones string contains 1 'a', 2 'A's, and 4 other stones that are not jewels. So, the total count of jewels is 3.\"\n    },\n    {\n      \"input\": {\n        \"jewels\": \"z\",\n        \"stones\": \"ZZ\"\n      },\n      \"output\": 0,\n      \"explanation\": \"In this case, 'z' is the only jewel, but there are no 'z's in the `stones` string, so the result is 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"jewels_length\": \"1 <= jewels.length <= 50\",\n    \"stones_length\": \"1 <= stones.length <= 50\",\n    \"letters\": \"jewels and stones consist only of English letters (lowercase and uppercase).\",\n    \"unique_jewels\": \"All characters in `jewels` are unique.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to handle larger inputs more efficiently, given that `stones` and `jewels` can both be up to 50 characters long?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the sum of all left leaves in a binary tree."}, {"role": "assistant", "content": "{\n  \"title\": \"Sum of Left Leaves in Binary Tree\",\n  \"description\": \"Calculate the sum of all left leaf nodes in a given binary tree.\",\n  \"input\": {\n    \"root\": {\n      \"type\": \"TreeNode\",\n      \"description\": \"The root node of a binary tree.\",\n      \"constraints\": \"The tree contains 1 to 1000 nodes, and each node value is an integer in the range [-1000, 1000].\"\n    }\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The sum of all left leaf node values in the binary tree.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          9,\n          20,\n          null,\n          null,\n          15,\n          7\n        ]\n      },\n      \"output\": 24,\n      \"explanation\": \"The left leaf nodes are 9 and 15, with a sum of 9 + 15 = 24.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"There are no left leaves in the tree.\"\n    }\n  ],\n  \"hints\": [\n    \"A left leaf is a leaf node that is a left child of its parent.\",\n    \"Use a recursive or iterative approach to traverse the binary tree.\",\n    \"At each node, check if its left child is a leaf node. If it is, add its value to the sum.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve a time complexity of O(n) by visiting each node once.\",\n    \"constraints\": \"Avoid redundant checks by distinguishing between left and right children at each step.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum initial health needed for the knight to rescue the princess."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a grid `dungeon`, calculate the knight's minimum initial health required to rescue the princess at the bottom-right corner, starting from the top-left corner.\",\n  \"objective\": \"Design an efficient algorithm to calculate the minimum health required using dynamic programming.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the knight moves either right or down and must maintain positive health at all times.\",\n    \"Step 2 - Define Dynamic Programming States\": \"Define `dp[i][j]` as the minimum health required to reach the princess from cell `(i, j)`.\",\n    \"Step 3 - Work Backwards\": \"Start from the princess's position and calculate `dp[i][j]` using the minimum health required for the right and down cells.\",\n    \"Step 4 - Base Case\": \"Set `dp[m-1][n-1]` based on the health required in the last room.\",\n    \"Step 5 - Optimize Space\": \"Consider using a single row or column for the `dp` array to reduce memory usage.\",\n    \"Step 6 - Handle Edge Cases\": \"Ensure the solution handles single-cell grids, grids with only positive or negative values, and large grids.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"dungeon\": [\n          [\n            -2,\n            -3,\n            3\n          ],\n          [\n            -5,\n            -10,\n            1\n          ],\n          [\n            10,\n            30,\n            -5\n          ]\n        ]\n      },\n      \"output\": 7,\n      \"explanation\": \"The optimal path is RIGHT -> RIGHT -> DOWN -> DOWN. Minimum health needed to survive is 7.\"\n    },\n    {\n      \"input\": {\n        \"dungeon\": [\n          [\n            0\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"In a single-cell grid, the knight needs at least 1 health to survive.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_size\": \"1 <= m, n <= 200\",\n    \"cell_value\": \"-1000 <= dungeon[i][j] <= 1000\"\n  },\n  \"follow_up\": \"Can you optimize the solution to use O(n) space where n is the number of columns?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Two players play a game on a graph. The Mouse and Cat alternate turns. The objective is to figure out the winner."}, {"role": "assistant", "content": "{\n  \"description\": \"In a game played on an undirected graph, two players, Mouse and Cat, alternate turns. The Mouse starts at node 1, and the Cat starts at node 2. The objective is for the Mouse to reach the Hole at node 0, and the Cat to capture the Mouse. If they both move to the same node, the Cat wins. The game ends when one player wins or a position repeats, resulting in a draw.\",\n  \"objective\": \"Given a graph where `graph[a]` represents the adjacent nodes of node `a`, implement a function to determine the winner assuming both players play optimally. Return 1 if the Mouse wins, 2 if the Cat wins, or 0 if the game results in a draw.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The problem involves simulating a game on an undirected graph. The Mouse must avoid being caught by the Cat, while the Cat must catch the Mouse or prevent it from reaching the Hole at node 0.\",\n    \"Step 2 - Algorithm Design\": \"Since the game has multiple states (positions of both players), we need to think about this as a graph search problem, potentially using dynamic programming or memoization to explore different game states.\",\n    \"Step 3 - Optimizing for Game States\": \"The challenge is to calculate the winner efficiently, which may involve simulating all possible game moves and states. Memoization or backtracking can help store and reuse results for states that have already been encountered.\",\n    \"Step 4 - Edge Case Consideration\": \"Consider cases where the graph has multiple paths or when the graph has cycles, which can cause the game to repeat states. Ensure the solution works with various graph sizes and edge configurations.\",\n    \"Step 5 - Finalization\": \"Test the solution on graphs with various configurations, ensuring the solution handles the constraints efficiently and produces the correct winner for each scenario.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"graph\": [\n          [\n            2,\n            5\n          ],\n          [\n            3\n          ],\n          [\n            0,\n            4,\n            5\n          ],\n          [\n            1,\n            4,\n            5\n          ],\n          [\n            2,\n            3\n          ],\n          [\n            0,\n            2,\n            3\n          ]\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"Both players play optimally, leading to a draw.\"\n    },\n    {\n      \"input\": {\n        \"graph\": [\n          [\n            1,\n            3\n          ],\n          [\n            0\n          ],\n          [\n            3\n          ],\n          [\n            0,\n            2\n          ]\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The Mouse can reach the Hole first, so the Mouse wins.\"\n    }\n  ],\n  \"constraints\": {\n    \"graph_length\": \"3 <= graph.length <= 50\",\n    \"graph_edges\": \"1 <= graph[i].length < graph.length\",\n    \"graph_node_range\": \"0 <= graph[i][j] < graph.length\",\n    \"unique_edges\": \"graph[i][j] != i, and graph[i] is unique\"\n  },\n  \"follow_up\": \"What if the graph is large and has many nodes? Can the solution handle such cases efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a binary string, return the largest possible string."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a special binary string `s`. A special binary string has two properties: the number of `0`'s equals the number of `1`'s, and every prefix of the string contains at least as many `1`'s as `0`'s. The task is to return the lexicographically largest string that can be obtained after performing a series of moves, where a move consists of swapping two consecutive special substrings of `s`.\",\n  \"objective\": \"Return the lexicographically largest possible string after swapping consecutive special binary substrings.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The string `s` is guaranteed to be a special binary string, so it already satisfies the conditions of having equal numbers of `0`'s and `1`'s, with no prefix having more `0`'s than `1`'s.\",\n    \"Step 2 - Strategy\": \"To maximize the lexicographical order, we need to perform swaps on consecutive special binary substrings to arrange the `1`'s towards the left as much as possible. The challenge is to determine the valid consecutive substrings and perform the swaps optimally.\",\n    \"Step 3 - Approach\": \"We can recursively split the string into its special substrings, and for each substring, recursively sort it to maximize the string order. The idea is to break down the problem into smaller parts, sort them, and then combine them back.\",\n    \"Step 4 - Efficient Solution Approach\": \"A recursive approach works well here. Start by identifying the special substrings of `s`. Once you split the string into smaller substrings, recursively process each substring and concatenate the results to form the final string.\",\n    \"Step 5 - Edge Cases\": \"The smallest string could be of length 2, where no swap is possible, so ensure that such cases are handled correctly. The algorithm should also be efficient for strings up to length 50.\",\n    \"Step 6 - Output Explanation\": \"The output should be the lexicographically largest string that can be formed by recursively swapping consecutive special binary substrings.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"11011000\"\n      },\n      \"output\": \"11100100\",\n      \"explanation\": \"In this example, the two special substrings '10' and '1100' are swapped to form the lexicographically largest string.\"\n    },\n    {\n      \"input\": {\n        \"s\": \"10\"\n      },\n      \"output\": \"10\",\n      \"explanation\": \"Since the string is already the lexicographically largest possible, no swap is needed.\"\n    }\n  ],\n  \"constraints\": {\n    \"string_length\": \"1 <= s.length <= 50\",\n    \"binary_values\": \"Each character in the string is either '0' or '1'.\",\n    \"special_binary_condition\": \"The input string `s` is guaranteed to be a special binary string.\"\n  },\n  \"follow_up\": \"If the string were to be extended to a length of 100 or more, how would you optimize the solution for better performance?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find all word squares from a list of unique words."}, {"role": "assistant", "content": "{\n  \"title\": \"Find All Word Squares\",\n  \"description\": \"Given an array of unique strings `words`, return all possible word squares you can build using these words. Each word square must satisfy the property that the `kth` row and the `kth` column read the same string, for all `0 <= k < max(numRows, numColumns)`.\",\n  \"objective\": \"Generate all valid word squares from the input `words` array. The same word can be used multiple times, and the order of the word squares in the output does not matter.\",\n  \"input\": {\n    \"words\": {\n      \"type\": \"array of strings\",\n      \"description\": \"A list of unique words.\",\n      \"constraints\": [\n        \"1 <= words.length <= 1000\",\n        \"1 <= words[i].length <= 4\",\n        \"Each word consists of lowercase English letters.\",\n        \"All words have the same length.\"\n      ]\n    }\n  },\n  \"output\": {\n    \"type\": \"2D array of strings\",\n    \"description\": \"A list of all valid word squares. Each word square is represented as a list of strings.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"words\": [\n          \"area\",\n          \"lead\",\n          \"wall\",\n          \"lady\",\n          \"ball\"\n        ]\n      },\n      \"output\": [\n        [\n          \"ball\",\n          \"area\",\n          \"lead\",\n          \"lady\"\n        ],\n        [\n          \"wall\",\n          \"area\",\n          \"lead\",\n          \"lady\"\n        ]\n      ],\n      \"explanation\": \"Each output represents a valid word square. For example, 'ball', 'area', 'lead', 'lady' forms a square because the rows and columns match.\"\n    },\n    {\n      \"input\": {\n        \"words\": [\n          \"abat\",\n          \"baba\",\n          \"atan\",\n          \"atal\"\n        ]\n      },\n      \"output\": [\n        [\n          \"baba\",\n          \"abat\",\n          \"baba\",\n          \"atal\"\n        ],\n        [\n          \"baba\",\n          \"abat\",\n          \"baba\",\n          \"atan\"\n        ]\n      ],\n      \"explanation\": \"Multiple valid word squares can be formed. The order of squares in the output doesn't matter.\"\n    }\n  ],\n  \"hints\": [\n    \"Use backtracking to explore all possible combinations of words that can form a valid word square.\",\n    \"For efficient prefix matching, consider building a trie or hash map where the keys are prefixes.\",\n    \"At each step of backtracking, ensure that the `kth` row matches the `kth` column by checking prefixes.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Minimize redundant computations by leveraging prefix-based pruning during backtracking.\",\n    \"constraints\": \"Aim to reduce the time complexity by avoiding unnecessary explorations of invalid combinations.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the common ancestor of two nodes in a binary tree."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the lowest common ancestor (LCA) of two nodes in a binary tree.\",\n  \"objective\": \"Return the LCA node of the two input nodes.\",\n  \"steps\": [\n    \"Start from the root of the tree.\",\n    \"Recursively check if the root is either `p` or `q`.\",\n    \"If either left or right subtree contains both nodes, return the root as the LCA.\",\n    \"Propagate the result upwards until the LCA is found.\"\n  ],\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          5,\n          1,\n          6,\n          2,\n          0,\n          8,\n          null,\n          null,\n          7,\n          4\n        ],\n        \"p\": 5,\n        \"q\": 1\n      },\n      \"output\": 3\n    },\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          5,\n          1,\n          6,\n          2,\n          0,\n          8,\n          null,\n          null,\n          7,\n          4\n        ],\n        \"p\": 5,\n        \"q\": 4\n      },\n      \"output\": 5\n    },\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          2\n        ],\n        \"p\": 1,\n        \"q\": 2\n      },\n      \"output\": 1\n    }\n  ],\n  \"constraints\": \"Both `p` and `q` exist in the binary tree.\",\n  \"follow_up\": \"What changes would you make if the tree nodes could have parent pointers?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum in a sorted rotated array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a sorted rotated array `nums` of unique elements, return the minimum element of the array. The array is rotated between 1 and `n` times.\",\n  \"objective\": \"Design an algorithm to find the minimum element in O(log n) time.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves finding the smallest element in a sorted rotated array using binary search.\",\n    \"Step 2 - Binary Search\": \"Iteratively narrow down the search space by comparing the middle element with the rightmost element.\",\n    \"Step 3 - Handle Rotation\": \"Adjust the search space based on whether the middle element is greater or smaller than the rightmost element.\",\n    \"Step 4 - Handle Edge Cases\": \"Handle cases such as a fully sorted array (no rotation) or arrays with only one element.\",\n    \"Step 5 - Optimize\": \"Ensure the algorithm runs in O(log n) time and uses O(1) space.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          3,\n          4,\n          5,\n          1,\n          2\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The array was rotated 3 times, and the minimum element is 1.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          4,\n          5,\n          6,\n          7,\n          0,\n          1,\n          2\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"The array was rotated 4 times, and the minimum element is 0.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          11,\n          13,\n          15,\n          17\n        ]\n      },\n      \"output\": 11,\n      \"explanation\": \"The array was not rotated, and the minimum element is 11.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= n <= 5000\",\n    \"element_values\": \"-5000 <= nums[i] <= 5000\",\n    \"uniqueness\": \"All elements in the array are unique.\"\n  },\n  \"follow_up\": \"Can you explain why binary search guarantees O(log n) time complexity for this problem?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the k-th smallest distance between pairs in an integer array."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the k-th smallest distance among all pairs in a given integer array `nums`.\",\n  \"objective\": \"Use binary search combined with two pointers to efficiently count pair distances and determine the k-th smallest distance.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Sort the array `nums` to simplify distance calculations.\",\n    \"Step 2\": \"Set the binary search range with `low = 0` (minimum possible distance) and `high = nums[-1] - nums[0]` (maximum possible distance in a sorted array).\",\n    \"Step 3\": \"Use binary search to find the k-th smallest distance:\",\n    \"Step 4\": \"For each mid-point in the range, count the number of pairs with distances \\u2264 mid using the two-pointer technique:\",\n    \"Step 5\": \"Iterate through `nums` and, for each `i`, find the largest `j` such that `nums[j] - nums[i] <= mid`.\",\n    \"Step 6\": \"Count the number of valid pairs (pairs with distances \\u2264 mid).\",\n    \"Step 7\": \"Adjust the binary search range:\",\n    \"Step 8\": \"If the count of pairs \\u2264 mid is greater than or equal to k, update `high = mid`.\",\n    \"Step 9\": \"Otherwise, update `low = mid + 1`.\",\n    \"Step 10\": \"When `low == high`, the value of `low` is the k-th smallest distance.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          3,\n          1\n        ],\n        \"k\": 1\n      },\n      \"output\": 0,\n      \"explanation\": \"The smallest distance pair is (1, 1) with a distance of 0.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          6,\n          1\n        ],\n        \"k\": 3\n      },\n      \"output\": 5,\n      \"explanation\": \"The 3rd smallest distance is 5 (from the pair (1, 6)).\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"2 <= nums.length <= 10^4\",\n    \"element_range\": \"0 <= nums[i] <= 10^6\",\n    \"k_range\": \"1 <= k <= n * (n - 1) / 2\"\n  },\n  \"follow_up\": \"Analyze the time complexity of this approach as O(n log d + n log n), where d is the range of distances, and discuss edge cases such as all elements being identical or having a large k.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the shortest distance for a ball to stop at the destination in a maze."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a maze represented by a 2D array `maze` with empty spaces (`0`) and walls (`1`), along with a `start` position and a `destination` position, your task is to find the shortest distance for a ball to stop at the destination. The ball can roll in four directions (up, down, left, right) and only stops when it hits a wall. Return the shortest distance in terms of empty spaces traveled. If it is not possible to stop at the destination, return `-1`.\",\n  \"objective\": \"Design an algorithm using Dijkstra's approach with a priority queue to efficiently determine the shortest path in a maze with roll-stop dynamics, ensuring optimal pathfinding performance.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the maze structure as a 2D grid where `0` represents an open space, `1` represents a wall, and the ball can roll until it encounters a wall. The goal is to calculate the minimum steps required to reach the destination or return `-1` if it is unreachable.\",\n    \"Step 2 - Dijkstra's Algorithm with Priority Queue\": \"Use a priority queue (min-heap) to always process the node (position in the maze) with the shortest distance first. This ensures that we explore the shortest paths to each reachable point.\",\n    \"Step 3 - Traversing and Updating Distance\": \"For each position, attempt to roll in all four directions. Track the number of spaces traveled until hitting a wall. If this distance to a new position is shorter than any previously calculated distance, update it and push the new position onto the priority queue.\",\n    \"Step 4 - Distance Array Management\": \"Maintain a distance array where each entry keeps track of the minimum distance from the start to each position. Update distances and queue entries only when a shorter path to a position is found.\",\n    \"Step 5 - Handling Edge Cases\": \"Ensure the algorithm handles cases where the ball cannot stop exactly at the destination, despite passing through it, or where the maze layout precludes any route to the destination.\",\n    \"Final Check - Constraints Verification\": \"Verify the algorithm operates within constraints (`1 <= m, n <= 100`) and can handle large grids and complex maze paths efficiently using Dijkstra's algorithm.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"maze\": [\n          [\n            0,\n            0,\n            1,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0,\n            1,\n            0\n          ],\n          [\n            1,\n            1,\n            0,\n            1,\n            1\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            0\n          ]\n        ],\n        \"start\": [\n          0,\n          4\n        ],\n        \"destination\": [\n          4,\n          4\n        ]\n      },\n      \"output\": 12,\n      \"explanation\": \"A possible path is left -> down -> left -> down -> right -> down -> right, with a total distance of 12.\"\n    },\n    {\n      \"input\": {\n        \"maze\": [\n          [\n            0,\n            0,\n            1,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0,\n            1,\n            0\n          ],\n          [\n            1,\n            1,\n            0,\n            1,\n            1\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            0\n          ]\n        ],\n        \"start\": [\n          0,\n          4\n        ],\n        \"destination\": [\n          3,\n          2\n        ]\n      },\n      \"output\": -1,\n      \"explanation\": \"There is no way for the ball to stop exactly at the destination position.\"\n    },\n    {\n      \"input\": {\n        \"maze\": [\n          [\n            0,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            1,\n            1,\n            0,\n            0,\n            1\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            1,\n            0,\n            0,\n            1\n          ],\n          [\n            0,\n            1,\n            0,\n            0,\n            0\n          ]\n        ],\n        \"start\": [\n          4,\n          3\n        ],\n        \"destination\": [\n          0,\n          1\n        ]\n      },\n      \"output\": -1,\n      \"explanation\": \"No path allows the ball to stop exactly at the destination position.\"\n    }\n  ],\n  \"constraints\": {\n    \"maze_dimensions\": \"1 <= m, n <= 100\",\n    \"cell_values\": \"maze[i][j] is 0 or 1\",\n    \"start_destination_range\": \"0 <= startrow, destinationrow < m; 0 <= startcol, destinationcol < n\",\n    \"ball_destination\": \"Both start and destination are in empty spaces, and they are different initially.\"\n  },\n  \"follow_up\": \"Could you implement an optimized solution with minimal space usage, focusing on avoiding revisits to already optimized paths, while ensuring each position in the maze is processed efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the nth super ugly number using the primes array."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an integer `n` and a list of unique prime numbers `primes`. A **super ugly number** is a positive integer whose prime factors are only from the list `primes`. Your task is to find and return the `nth` super ugly number. Super ugly numbers start from `1` (the first super ugly number) and increase based on the prime factors in `primes`.\",\n  \"objective\": \"Design an efficient algorithm using a min-heap or multiple pointers to generate the sequence of super ugly numbers in ascending order and return the `nth` number.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the super ugly numbers are constructed by repeatedly multiplying the primes in `primes` with previously computed super ugly numbers.\",\n    \"Step 2 - Using Pointers\": \"Maintain an array of pointers, each pointing to a position in the super ugly number sequence, for generating candidates for the next super ugly number.\",\n    \"Step 3 - Min-Heap Approach\": \"Alternatively, use a min-heap to efficiently fetch the smallest candidate super ugly number at each step.\",\n    \"Step 4 - Duplicate Handling\": \"Ensure no duplicates are added to the sequence by maintaining a visited set or ensuring the next candidates are unique.\",\n    \"Step 5 - Edge Cases\": \"Handle edge cases such as `n = 1` (output is always `1`) or `primes` containing only a single prime number.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 12,\n        \"primes\": [\n          2,\n          7,\n          13,\n          19\n        ]\n      },\n      \"output\": 32,\n      \"explanation\": \"The sequence of the first 12 super ugly numbers is [1, 2, 4, 7, 8, 13, 14, 16, 19, 26, 28, 32]. The 12th number is 32.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1,\n        \"primes\": [\n          2,\n          3,\n          5\n        ]\n      },\n      \"output\": 1,\n      \"explanation\": \"The first super ugly number is always `1`.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 10^5\",\n    \"primes_range\": \"1 <= primes.length <= 100\",\n    \"prime_values\": \"2 <= primes[i] <= 1000\",\n    \"primes_uniqueness\": \"All primes are unique and sorted in ascending order.\"\n  },\n  \"follow_up\": \"Can you optimize the space complexity to ensure the solution works efficiently for large values of `n`?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Count all numbers with no repeated digits for `n` digits."}, {"role": "assistant", "content": "{\n  \"title\": \"Count Unique Digit Numbers\",\n  \"description\": \"Given an integer `n`, calculate the count of all numbers `x` where `0 <= x < 10^n` such that every digit in `x` is unique.\",\n  \"input\": {\n    \"name\": \"n\",\n    \"type\": \"integer\",\n    \"description\": \"The number of digits to consider for generating numbers.\",\n    \"constraints\": \"0 <= n <= 8\"\n  },\n  \"output\": {\n    \"type\": \"integer\",\n    \"description\": \"The count of numbers with unique digits in the range `0 <= x < 10^n`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": \"n = 2\",\n      \"output\": \"91\",\n      \"explanation\": \"The range is 0-99. Exclude numbers like 11, 22, ..., 99. Total unique numbers: 91.\"\n    },\n    {\n      \"input\": \"n = 0\",\n      \"output\": \"1\",\n      \"explanation\": \"Only the number 0 exists in the range.\"\n    },\n    {\n      \"input\": \"n = 3\",\n      \"output\": \"739\",\n      \"explanation\": \"For 0 <= x < 1000, exclude numbers with repeated digits like 101, 112, etc.\"\n    }\n  ],\n  \"hints\": [\n    \"The total numbers in the range 0 <= x < 10^n is 10^n.\",\n    \"To count numbers with unique digits, use combinatorics to determine the valid configurations for each digit.\",\n    \"For each `k` digits, compute permutations to avoid repeated digits.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Use iterative or mathematical methods to calculate counts efficiently without explicitly enumerating all numbers.\",\n    \"constraints\": \"Avoid brute-force enumeration of all numbers to minimize runtime.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Check if a ball in a maze can reach its destination."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an `m x n` maze represented as a grid, determine if a ball starting at a specific position can stop at a given destination. The maze is made of empty spaces (0) and walls (1). The ball moves through empty spaces but stops rolling only when it hits a wall. At this stopping point, it can choose the next direction.\",\n  \"objective\": \"Implement an algorithm to check if the ball can stop at the destination using a depth-first search (DFS) or breadth-first search (BFS) approach. Focus on visiting every reachable position efficiently and avoiding revisiting the same state.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the rules of movement: the ball rolls until hitting a wall, then it can change direction. The goal is to determine if the destination can be a valid stopping point.\",\n    \"Step 2 - Modeling the Maze\": \"Use the maze grid to represent visited states. Maintain a visited set to avoid redundant exploration.\",\n    \"Step 3 - Algorithm Selection\": \"Use BFS for iterative exploration or DFS for recursive exploration. Start from the `start` position, simulate rolling the ball in all directions, and mark positions as visited.\",\n    \"Step 4 - Handling Edge Cases\": \"Ensure that the ball doesn\\u2019t stop in the middle of a path unless it hits a wall. Verify that the maze boundaries and constraints are respected.\",\n    \"Step 5 - Efficiency Considerations\": \"Optimize the algorithm to avoid unnecessary computations by marking cells as visited only when they are reached for the first time.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"maze\": [\n          [\n            0,\n            0,\n            1,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0,\n            1,\n            0\n          ],\n          [\n            1,\n            1,\n            0,\n            1,\n            1\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            0\n          ]\n        ],\n        \"start\": [\n          0,\n          4\n        ],\n        \"destination\": [\n          4,\n          4\n        ]\n      },\n      \"output\": true,\n      \"explanation\": \"The ball can roll in several directions and ultimately stop at the destination position.\"\n    },\n    {\n      \"input\": {\n        \"maze\": [\n          [\n            0,\n            0,\n            1,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            0,\n            0,\n            1,\n            0\n          ],\n          [\n            1,\n            1,\n            0,\n            1,\n            1\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            0\n          ]\n        ],\n        \"start\": [\n          0,\n          4\n        ],\n        \"destination\": [\n          3,\n          2\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"Although the ball can pass through the destination, it cannot stop there.\"\n    },\n    {\n      \"input\": {\n        \"maze\": [\n          [\n            0,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            1,\n            1,\n            0,\n            0,\n            1\n          ],\n          [\n            0,\n            0,\n            0,\n            0,\n            0\n          ],\n          [\n            0,\n            1,\n            0,\n            0,\n            1\n          ],\n          [\n            0,\n            1,\n            0,\n            0,\n            0\n          ]\n        ],\n        \"start\": [\n          4,\n          3\n        ],\n        \"destination\": [\n          0,\n          1\n        ]\n      },\n      \"output\": false,\n      \"explanation\": \"The ball cannot reach the destination and stop there due to the maze structure.\"\n    }\n  ],\n  \"constraints\": {\n    \"grid_dimensions\": \"1 <= m, n <= 100\",\n    \"cell_values\": \"0 for empty spaces, 1 for walls\",\n    \"starting_and_destination_positions\": \"Both are in empty spaces (0) and not the same.\"\n  },\n  \"follow_up\": {\n    \"question_1\": \"How can the solution be extended to find the shortest path to the destination if reachable?\",\n    \"question_2\": \"How would the algorithm change if multiple destinations were allowed?\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the time for all nodes to get a signal from a source node."}, {"role": "assistant", "content": "{\n  \"description\": \"Determine the minimum time for all nodes in a network to receive a signal from a source node using Dijkstra's Algorithm.\",\n  \"objective\": \"Use a priority queue to find the shortest path from the source node to all other nodes and return the maximum time it takes for the signal to propagate. If any node is unreachable, return -1.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Construct an adjacency list from the input `times` where each source node maps to its target nodes and respective weights.\",\n    \"Step 2\": \"Initialize an array `signalReceivedAt` to store the earliest time each node receives the signal. Set all values to a large constant except for the source node, which is set to 0.\",\n    \"Step 3\": \"Use a priority queue (min-heap) to store nodes prioritized by their current shortest distance from the source node.\",\n    \"Step 4\": \"While the priority queue is not empty, process the node with the shortest travel time. For each neighbor of this node, update its shortest path time if the current path is faster and push it into the priority queue.\",\n    \"Step 5\": \"After all nodes have been processed, check `signalReceivedAt` for any unreachable nodes. Return the maximum value in `signalReceivedAt` if all nodes are reachable, or -1 otherwise.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"times\": [\n          [\n            2,\n            1,\n            1\n          ],\n          [\n            2,\n            3,\n            1\n          ],\n          [\n            3,\n            4,\n            1\n          ]\n        ],\n        \"n\": 4,\n        \"k\": 2\n      },\n      \"output\": 2,\n      \"explanation\": \"Node 2 broadcasts to nodes 1 and 3. Node 3 further propagates to node 4, making the total signal time 2.\"\n    },\n    {\n      \"input\": {\n        \"times\": [\n          [\n            1,\n            2,\n            1\n          ]\n        ],\n        \"n\": 2,\n        \"k\": 1\n      },\n      \"output\": 1,\n      \"explanation\": \"Node 1 directly sends the signal to node 2 in 1 unit of time.\"\n    },\n    {\n      \"input\": {\n        \"times\": [\n          [\n            1,\n            2,\n            1\n          ]\n        ],\n        \"n\": 2,\n        \"k\": 2\n      },\n      \"output\": -1,\n      \"explanation\": \"Node 2 cannot reach any other nodes, so the network is not fully connected.\"\n    }\n  ],\n  \"constraints\": {\n    \"nodes_range\": \"1 <= n <= 100\",\n    \"edges_range\": \"1 <= times.length <= 6000\",\n    \"time_weight\": \"0 <= wi <= 100\",\n    \"uniqueness\": \"Each edge (ui, vi) is unique.\"\n  },\n  \"follow_up\": \"Discuss the scalability of Dijkstra's Algorithm for dense graphs or graphs with higher node counts. Consider alternative algorithms such as Bellman-Ford for graphs with negative weights.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given a number `x` and a target, find an expression with operations like `+`, `-`, `*`, `/` that evaluates to the target."}, {"role": "assistant", "content": "{\n  \"description\": \"Given a positive integer `x` and a target value, your task is to find an expression of the form `x (op1) x (op2) x (op3) ...` using the four basic operators (+, -, *, /) that evaluates to the given target. The expression must have the fewest number of operators, and it cannot use unary negation. The division operator (/) must result in rational numbers, and multiplication and division take precedence over addition and subtraction. Return the minimum number of operators needed to achieve the target.\",\n  \"objective\": \"Design an efficient algorithm to generate an expression involving `x` and the operators such that the result equals the target with the least number of operations, ensuring the expression adheres to the rules outlined.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand the input: `x` is a single integer, and `target` is the value you need to reach. The challenge is to form an expression using `x` and the four operators that equals `target` while minimizing the number of operations.\",\n    \"Step 2 - Initial Approach\": \"Start by considering different combinations of operations. Multiplication may help scale `x` up, and division may help reduce it, but minimizing the operations is the key challenge. Subtraction and addition might be needed to fine-tune the result.\",\n    \"Step 3 - Strategy to Minimize Operations\": \"Think about how to use multiplication to quickly increase the value of `x`. Once you've reached a value close to the target, consider using division or addition/subtraction to adjust the result to match the target.\",\n    \"Step 4 - Output Format\": \"The solution should return the number of operators used in the expression. Ensure the expression is constructed without using parentheses and respects the operation order (multiplication/division before addition/subtraction).\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"Focus on efficiency by using multiplication to scale `x` towards the target quickly. Handle any edge cases, such as small values for `x`, large target values, or when `x` is very close to the target.\",\n    \"Final Check - Constraints Verification\": \"Make sure that the solution works within the constraints where `2 <= x <= 100` and `1 <= target <= 2 * 10^8`. Check if the algorithm is optimal and handles both small and large values of `target` efficiently.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"x\": 3,\n        \"target\": 19\n      },\n      \"output\": 5,\n      \"explanation\": \"The expression `3 * 3 + 3 * 3 + 3 / 3` uses 5 operators to reach 19.\"\n    },\n    {\n      \"input\": {\n        \"x\": 5,\n        \"target\": 501\n      },\n      \"output\": 8,\n      \"explanation\": \"The expression `5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5` uses 8 operators to reach 501.\"\n    },\n    {\n      \"input\": {\n        \"x\": 100,\n        \"target\": 100000000\n      },\n      \"output\": 3,\n      \"explanation\": \"The expression `100 * 100 * 100 * 100` uses 3 operators to reach 100000000.\"\n    }\n  ],\n  \"constraints\": {\n    \"x_range\": \"2 <= x <= 100\",\n    \"target_range\": \"1 <= target <= 2 * 10^8\",\n    \"no_negation\": \"Unary negation is not allowed.\"\n  },\n  \"follow_up\": \"Can you optimize the solution to minimize the number of operations further? Try using multiplication to scale `x` quickly, and carefully adjust the result with addition, subtraction, or division as necessary.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the minimum number of moves needed to balance the dresses across washing machines, or return `-1` if it's impossible."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `machines` where each element represents the number of dresses in a washing machine, return the minimum number of moves required to make all washing machines contain an equal number of dresses. Each move allows passing a dress from one washing machine to its adjacent machine. If it's not possible to equalize the dresses, return `-1`.\",\n  \"objective\": \"Implement a greedy algorithm that calculates the minimum number of moves needed to balance the dresses across all washing machines, or determines if balancing is impossible.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Identify that the problem can be solved only if the total number of dresses can be evenly divided among all machines, which implies that `sum(machines) % n == 0` where `n` is the number of machines.\",\n    \"Step 2 - Calculating Target Dresses per Machine\": \"Calculate `dresses_per_machine = sum(machines) / n` as the target number of dresses each machine should hold after balancing. If `sum(machines) % n != 0`, return `-1` since balancing is impossible.\",\n    \"Step 3 - Using Greedy Approach to Track Imbalance\": \"Iterate through `machines` and replace each element with the number of dresses needed to reach the target. Track the cumulative imbalance `curr_sum` for each machine and store the maximum imbalance `max_sum` at each step.\",\n    \"Step 4 - Computing the Result\": \"Update `res` by taking the maximum of the current machine\\u2019s imbalance (`m`), `max_sum`, and `res` at each step. This ensures `res` stores the minimum moves needed to balance the array.\",\n    \"Step 5 - Complexity and Constraints\": \"The algorithm should have O(n) complexity and handle cases where `1 <= n <= 10^4` and `0 <= machines[i] <= 10^5` efficiently.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the solution meets constraints by handling up to 10,000 machines and large numbers of dresses while verifying the total dresses can be evenly distributed.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"machines\": [\n          1,\n          0,\n          5\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The minimum moves to balance the array are 3. Moves required are: 1 0 <-- 5 => 1 1 4, then 1 <-- 1 <-- 4 => 2 1 3, and finally 2 1 <-- 3 => 2 2 2.\"\n    },\n    {\n      \"input\": {\n        \"machines\": [\n          0,\n          3,\n          0\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The minimum moves are 2 to reach [1, 1, 1] by first moving 0 <-- 3 0 => 1 2 0, and then 1 2 --> 0 => 1 1 1.\"\n    },\n    {\n      \"input\": {\n        \"machines\": [\n          0,\n          2,\n          0\n        ]\n      },\n      \"output\": -1,\n      \"explanation\": \"Balancing is impossible because the dresses cannot be evenly divided among all machines.\"\n    }\n  ],\n  \"constraints\": {\n    \"machines_length_range\": \"1 <= machines.length <= 10^4\",\n    \"dresses_range\": \"0 <= machines[i] <= 10^5\"\n  },\n  \"follow_up\": \"Could you further optimize the solution to handle larger values of `n` or cases with significant imbalance by adjusting the cumulative imbalance tracking method?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Trim a binary search tree so that all nodes have values within a given range while preserving the tree structure."}, {"role": "assistant", "content": "{\n  \"description\": \"Trim a binary search tree so that all nodes have values within the range `[low, high]` while preserving the relative structure of the nodes.\",\n  \"objective\": \"Use recursion to traverse and modify the tree, ensuring nodes outside the range are excluded and the tree structure remains valid.\",\n  \"meta_prompt\": {\n    \"Step 1 - Base Case\": \"If the current node is null, return null as there is nothing to trim.\",\n    \"Step 2 - Handle Nodes Out of Range\": \"If the current node's value is greater than `high`, recursively trim and return the left subtree since all nodes in the right subtree are also greater than `high`. If the current node's value is less than `low`, recursively trim and return the right subtree.\",\n    \"Step 3 - Handle Nodes Within Range\": \"If the current node's value is within `[low, high]`, recursively trim both the left and right subtrees and update the current node's left and right pointers accordingly.\",\n    \"Step 4 - Return Result\": \"Return the current node as the root of the trimmed subtree.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          1,\n          0,\n          2\n        ],\n        \"low\": 1,\n        \"high\": 2\n      },\n      \"output\": [\n        1,\n        null,\n        2\n      ],\n      \"explanation\": \"Node 0 is outside the range and removed. The resulting tree is [1, null, 2].\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          3,\n          0,\n          4,\n          null,\n          2,\n          null,\n          null,\n          1\n        ],\n        \"low\": 1,\n        \"high\": 3\n      },\n      \"output\": [\n        3,\n        2,\n        null,\n        1\n      ],\n      \"explanation\": \"Nodes 0 and 4 are removed as they are outside the range. The resulting tree is [3, 2, null, 1].\"\n    }\n  ],\n  \"constraints\": {\n    \"node_range\": \"1 <= number of nodes <= 10^4\",\n    \"node_value_range\": \"0 <= Node.val <= 10^4\",\n    \"bounds_range\": \"0 <= low <= high <= 10^4\",\n    \"tree_property\": \"The tree is a valid binary search tree with unique values.\"\n  },\n  \"follow_up\": \"Analyze the time complexity of the recursive approach and discuss its efficiency for very large trees.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given an array of people's weights and a limit, find the number of boats needed."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given an array 'people' where each element represents the weight of a person. You also have an infinite number of boats, where each boat can carry a maximum weight, 'limit', and each boat can carry at most two people at the same time. The goal is to find the minimum number of boats required to carry all people, such that the sum of the weights in each boat does not exceed the weight limit.\",\n  \"objective\": \"Design an efficient algorithm that calculates the minimum number of boats required to carry all people, while ensuring the total weight in each boat does not exceed the specified limit.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"Start by analyzing the constraints. We need to optimize the number of boats used, which requires ensuring that at most two people are assigned to a boat, and the total weight does not exceed the limit.\",\n    \"Step 2 - Approach with Sorting\": \"Sort the 'people' array to allow pairing the lightest and heaviest person together, optimizing space in each boat. Use a two-pointer technique where one pointer starts from the lightest person and the other starts from the heaviest.\",\n    \"Step 3 - Pairing Strategy\": \"Iterate over the sorted 'people' array, and at each step, try to pair the heaviest remaining person with the lightest remaining person. If their combined weight is less than or equal to the limit, they share a boat. If not, the heaviest person goes alone.\",\n    \"Step 4 - Output Format\": \"Return the minimum number of boats required. The result should be an integer representing the total boats used.\",\n    \"Step 5 - Code Efficiency\": \"Ensure the solution runs efficiently with a time complexity of O(n log n) due to sorting, which is acceptable given the input size constraints. Avoid unnecessary iterations or checks.\",\n    \"Final Check - Constraints Verification\": \"Verify that the solution works within the constraints, including large input sizes (up to 50,000 people) and handles edge cases like one person or all people being at the maximum weight.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"people\": [\n          1,\n          2\n        ],\n        \"limit\": 3\n      },\n      \"output\": 1,\n      \"explanation\": \"One boat can carry both people: (1, 2).\"\n    },\n    {\n      \"input\": {\n        \"people\": [\n          3,\n          2,\n          2,\n          1\n        ],\n        \"limit\": 3\n      },\n      \"output\": 3,\n      \"explanation\": \"Three boats are needed: (1, 2), (2), and (3).\"\n    },\n    {\n      \"input\": {\n        \"people\": [\n          3,\n          5,\n          3,\n          4\n        ],\n        \"limit\": 5\n      },\n      \"output\": 4,\n      \"explanation\": \"Four boats are needed: (3), (3), (4), and (5).\"\n    }\n  ],\n  \"constraints\": {\n    \"people_length\": \"1 <= people.length <= 50000\",\n    \"people_weight\": \"1 <= people[i] <= limit <= 30000\",\n    \"boats_capacity\": \"Each boat can carry at most two people with a total weight of 'limit'.\"\n  },\n  \"follow_up\": \"Can you improve the algorithm to work in O(n log n) time complexity or lower, and handle the largest inputs efficiently?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the pivot index where the sum of the left and right parts are equal."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the pivot index in an array where the sum of all elements strictly to the left equals the sum of all elements strictly to the right.\",\n  \"objective\": \"Implement an efficient solution using a prefix sum approach to identify the leftmost pivot index, or return -1 if no such index exists.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Calculate the total sum of the array and store it in a variable `totalSum`.\",\n    \"Step 2\": \"Initialize a variable `leftSum` to 0, representing the sum of elements to the left of the current index.\",\n    \"Step 3\": \"Iterate through the array. For each index `i`, calculate the right sum as `totalSum - nums[i] - leftSum`.\",\n    \"Step 4\": \"If `leftSum` equals the calculated right sum, return the current index `i` as the pivot index.\",\n    \"Step 5\": \"If no pivot index is found after the iteration, return -1.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          7,\n          3,\n          6,\n          5,\n          6\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The pivot index is 3. Left sum = 11, Right sum = 11.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3\n        ]\n      },\n      \"output\": -1,\n      \"explanation\": \"No pivot index exists as no index satisfies the left sum equals right sum condition.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          1,\n          -1\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"The pivot index is 0. Left sum = 0, Right sum = 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_size\": \"1 <= nums.length <= 10^4\",\n    \"element_range\": \"-1000 <= nums[i] <= 1000\"\n  },\n  \"follow_up\": \"Discuss how the algorithm can be modified to handle arrays with floating-point numbers or handle multiple pivot indices.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Turn a BST into a circular doubly linked list."}, {"role": "assistant", "content": "{\n  \"title\": \"Convert BST to Circular Doubly-Linked List\",\n  \"description\": \"Convert a given Binary Search Tree (BST) into a sorted circular doubly-linked list in place. The transformation should maintain the sorted order of the BST.\",\n  \"objective\": \"Perform an in-place transformation of the BST such that the left pointer of each node points to its predecessor and the right pointer points to its successor. The first and last nodes should link to each other, forming a circular structure.\",\n  \"input\": {\n    \"root\": {\n      \"type\": \"TreeNode\",\n      \"description\": \"The root node of a BST.\",\n      \"constraints\": [\n        \"The number of nodes in the BST is in the range `[0, 2000]`.\",\n        \"`-1000 <= Node.val <= 1000`.\",\n        \"All values in the BST are unique.\"\n      ]\n    }\n  },\n  \"output\": {\n    \"type\": \"TreeNode\",\n    \"description\": \"The smallest node in the BST, now the head of the circular doubly-linked list.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [\n          4,\n          2,\n          5,\n          1,\n          3\n        ]\n      },\n      \"output\": [\n        1,\n        2,\n        3,\n        4,\n        5\n      ],\n      \"explanation\": \"The BST [4, 2, 5, 1, 3] is converted into a circular doubly-linked list with nodes in the order 1 <-> 2 <-> 3 <-> 4 <-> 5. The first node (1) is connected to the last node (5), and vice versa.\"\n    },\n    {\n      \"input\": {\n        \"root\": [\n          2,\n          1,\n          3\n        ]\n      },\n      \"output\": [\n        1,\n        2,\n        3\n      ],\n      \"explanation\": \"The BST [2, 1, 3] is converted into a circular doubly-linked list: 1 <-> 2 <-> 3. The first node (1) connects to the last node (3).\"\n    }\n  ],\n  \"hints\": [\n    \"Perform an in-order traversal to access nodes in sorted order.\",\n    \"Maintain references to the smallest and largest nodes during traversal to link them circularly.\",\n    \"Modify the pointers of the nodes directly to avoid creating new nodes.\"\n  ],\n  \"optimization\": {\n    \"goal\": \"Achieve an in-place solution using O(n) time complexity and O(h) space complexity, where h is the height of the tree.\",\n    \"constraints\": \"Do not allocate additional data structures to store nodes.\"\n  }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Solve the n-queens puzzle for a given board size."}, {"role": "assistant", "content": "{\n  \"description\": \"The **n-queens** puzzle requires placing `n` queens on an `n x n` chessboard such that no two queens attack each other. Given an integer `n`, return all distinct solutions to the n-queens puzzle in any order. Each solution should represent a board configuration using `'Q'` for queens and `'.'` for empty spaces.\",\n  \"objective\": \"Design an efficient backtracking algorithm to solve the n-queens puzzle and return all unique board configurations.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that queens attack vertically, horizontally, and diagonally. A valid solution must place all queens such that none share a row, column, or diagonal.\",\n    \"Step 2 - Backtracking Approach\": \"Use a backtracking algorithm to explore possible placements row by row. Maintain sets or arrays to track attacked columns and diagonals.\",\n    \"Step 3 - Pruning\": \"Avoid unnecessary computations by skipping columns and diagonals already under attack. Stop recursion early when a placement leads to an invalid state.\",\n    \"Step 4 - Handle Constraints\": \"Ensure the solution handles constraints such as `1 <= n <= 9` efficiently, minimizing computation for larger boards.\",\n    \"Step 5 - Edge Cases\": \"Handle edge cases like `n = 1` (one queen, one solution) and `n = 2` or `n = 3` (no solutions).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 4\n      },\n      \"output\": [\n        [\n          \".Q..\",\n          \"...Q\",\n          \"Q...\",\n          \"..Q.\"\n        ],\n        [\n          \"..Q.\",\n          \"Q...\",\n          \"...Q\",\n          \".Q..\"\n        ]\n      ],\n      \"explanation\": \"There are two distinct solutions to the 4-queens puzzle.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1\n      },\n      \"output\": [\n        [\n          \"Q\"\n        ]\n      ],\n      \"explanation\": \"There is only one valid configuration for a 1x1 board.\"\n    }\n  ],\n  \"constraints\": {\n    \"board_size\": \"1 <= n <= 9\",\n    \"output_format\": \"Each solution is represented as an `n x n` board configuration using 'Q' for queens and '.' for empty spaces.\"\n  },\n  \"follow_up\": \"Can you optimize the algorithm to find solutions faster for larger values of `n` using bitwise operations?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Given 8 prison cells in a row, each either occupied or vacant, return the state of the prison after `n` days based on specific rules."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given a row of 8 prison cells, each either occupied (1) or vacant (0). The state of the cells changes daily according to the following rules: If a cell has two adjacent neighbors that are both occupied or both vacant, the cell becomes occupied; otherwise, it becomes vacant. The first and last cells don't have two adjacent neighbors. Your task is to determine the state of the prison after `n` days, given an array of integers `cells` representing the initial state of the cells and the number of days `n`.\",\n  \"objective\": \"Write an algorithm that simulates the changes to the prison cells for `n` days and returns the final state of the cells. The algorithm should handle large values of `n` efficiently.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"We need to simulate the change in the state of 8 cells based on the given rules for `n` days. The challenge is to avoid simulating `n` steps for large values of `n`, as `n` can be as large as 1 billion.\",\n    \"Step 2 - Initial Approach\": \"The naive approach is to iterate through `n` days, applying the rules to update the cells one by one. However, this can be inefficient for large `n`.\",\n    \"Step 3 - Optimization Strategy\": \"We can observe that after a certain number of days, the state of the cells may start to repeat due to the finite number of possible states (2^8 = 256 possible configurations). We can use this repetition to reduce the number of actual simulations needed.\",\n    \"Step 4 - Output Format\": \"Return the final state of the cells as an array of 8 integers, where each integer is either 0 or 1, representing the vacancy or occupation of each cell.\",\n    \"Step 5 - Code Efficiency and Edge Cases\": \"We need to optimize the solution for large `n` and ensure that the simulation can handle up to 1 billion days without running out of memory or time. Additionally, we should handle edge cases such as minimal input values and cases where `n` is extremely large.\",\n    \"Final Check - Constraints Verification\": \"Ensure that the code respects the constraints, where `cells.length == 8` and `1 <= n <= 10^9`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"cells\": [\n          0,\n          1,\n          0,\n          1,\n          1,\n          0,\n          0,\n          1\n        ],\n        \"n\": 7\n      },\n      \"output\": [\n        0,\n        0,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0\n      ],\n      \"explanation\": \"After applying the rules for 7 days, the final state of the cells is [0, 0, 1, 1, 0, 0, 0, 0].\"\n    },\n    {\n      \"input\": {\n        \"cells\": [\n          1,\n          0,\n          0,\n          1,\n          0,\n          0,\n          1,\n          0\n        ],\n        \"n\": 1000000000\n      },\n      \"output\": [\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0\n      ],\n      \"explanation\": \"After a large number of days (1 billion), the final state of the cells stabilizes to [0, 0, 1, 1, 1, 1, 1, 0].\"\n    }\n  ],\n  \"constraints\": {\n    \"cells_length\": \"cells.length == 8\",\n    \"cell_values\": \"cells[i] is either 0 or 1\",\n    \"n_range\": \"1 <= n <= 10^9\"\n  },\n  \"follow_up\": \"Can you optimize the solution to avoid simulating each day individually, taking advantage of repeating cycles in the cell states?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Look for a number in a grid."}, {"role": "assistant", "content": "{\n  \"description\": \"Search for a target value in a sorted 2D matrix.\",\n  \"objective\": \"Return true if the target exists in the matrix; otherwise, return false.\",\n  \"steps\": [\n    \"Start at the top-right corner of the matrix.\",\n    \"Compare the target with the current value at the pointer.\",\n    \"If the current value equals the target, return true.\",\n    \"If the target is smaller than the current value, move left in the same row.\",\n    \"If the target is larger than the current value, move down to the next row.\",\n    \"Stop when the pointer moves out of the matrix bounds.\"\n  ],\n  \"examples\": [\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            1,\n            4,\n            7,\n            11,\n            15\n          ],\n          [\n            2,\n            5,\n            8,\n            12,\n            19\n          ],\n          [\n            3,\n            6,\n            9,\n            16,\n            22\n          ],\n          [\n            10,\n            13,\n            14,\n            17,\n            24\n          ],\n          [\n            18,\n            21,\n            23,\n            26,\n            30\n          ]\n        ],\n        \"target\": 5\n      },\n      \"output\": true\n    },\n    {\n      \"input\": {\n        \"matrix\": [\n          [\n            1,\n            4,\n            7,\n            11,\n            15\n          ],\n          [\n            2,\n            5,\n            8,\n            12,\n            19\n          ],\n          [\n            3,\n            6,\n            9,\n            16,\n            22\n          ],\n          [\n            10,\n            13,\n            14,\n            17,\n            24\n          ],\n          [\n            18,\n            21,\n            23,\n            26,\n            30\n          ]\n        ],\n        \"target\": 20\n      },\n      \"output\": false\n    }\n  ],\n  \"constraints\": \"The matrix is m x n with 1 <= m, n <= 300. The integers in each row and column are sorted in ascending order.\",\n  \"follow_up\": \"Can you optimize further for very large matrices? How would you handle sparse matrices where most values are zeros?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the length of the longest harmonious subsequence in an array."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array `nums`, find the length of its longest harmonious subsequence. A harmonious subsequence is defined as a sequence of numbers where the difference between the maximum and minimum values is exactly 1.\",\n  \"objective\": \"Identify the longest subsequence within the array `nums` where the difference between the maximum and minimum elements is exactly 1.\",\n  \"meta_prompt\": {\n    \"Step 1 - Create Frequency Map\": \"Traverse `nums` to create a frequency map of each unique number, where each key is a number in `nums` and its value is the count of that number.\",\n    \"Step 2 - Iterate Through Frequency Map\": \"For each key in the frequency map, check if `key+1` or `key-1` exists in the map. Calculate the combined frequency of `key` and `key+1` or `key-1`.\",\n    \"Step 3 - Update Longest Harmonious Subsequence Length\": \"For each valid pair (key, key+1 or key, key-1), calculate the combined length and update the maximum harmonious length if it exceeds the previous maximum.\",\n    \"Final Step - Return Result\": \"Return the maximum length of the harmonious subsequence found. If no valid subsequence exists, return 0.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          3,\n          2,\n          2,\n          5,\n          2,\n          3,\n          7\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"The longest harmonious subsequence is [3, 2, 2, 2, 3], where the difference between the max and min values is exactly 1.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          4\n        ]\n      },\n      \"output\": 2,\n      \"explanation\": \"The longest harmonious subsequence is [1, 2] or [2, 3] or [3, 4], with a length of 2.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          1,\n          1,\n          1\n        ]\n      },\n      \"output\": 0,\n      \"explanation\": \"There are no pairs of values with a difference of 1, so the result is 0.\"\n    }\n  ],\n  \"constraints\": {\n    \"input_length\": \"1 <= nums.length <= 2 * 10^4\",\n    \"value_range\": \"-10^9 <= nums[i] <= 10^9\",\n    \"output_range\": \"0 <= result <= nums.length\"\n  },\n  \"follow_up\": \"Explore optimizing the algorithm to handle larger input sizes efficiently, or extend the approach to find harmonious subsequences with a specified difference other than 1.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Write a program to find how close two words are in a list."}, {"role": "assistant", "content": "{\n  \"description\": \"Implement a class to calculate the shortest distance between two words in a string array.\",\n  \"objective\": \"Design a class with methods to initialize with an array and calculate the minimum distance between two words using efficient lookups.\",\n  \"steps\": [\n    \"Create a `WordDistance` class to store word indices during initialization.\",\n    \"Implement a `shortest` method to calculate the shortest distance between two words by iterating through their stored indices.\",\n    \"Optimize the distance calculation using two pointers to compare word positions.\",\n    \"Handle multiple queries efficiently by precomputing or reusing stored data.\"\n  ],\n  \"examples\": [\n    {\n      \"input\": {\n        \"class\": \"WordDistance\",\n        \"operations\": [\n          \"WordDistance\",\n          \"shortest\",\n          \"shortest\"\n        ],\n        \"arguments\": [\n          [\n            [\n              \"practice\",\n              \"makes\",\n              \"perfect\",\n              \"coding\",\n              \"makes\"\n            ]\n          ],\n          [\n            \"coding\",\n            \"practice\"\n          ],\n          [\n            \"makes\",\n            \"coding\"\n          ]\n        ]\n      },\n      \"output\": [\n        null,\n        3,\n        1\n      ]\n    }\n  ],\n  \"constraints\": [\n    \"The array wordsDict contains between 1 and 3 * 104 elements.\",\n    \"Each word in wordsDict has a length between 1 and 10 characters.\",\n    \"Both word1 and word2 are guaranteed to be present in the array.\",\n    \"word1 and word2 are different.\"\n  ],\n  \"follow_up\": \"If queries are frequent, how can the solution be optimized to reduce runtime for each query?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the `nth` ugly number."}, {"role": "assistant", "content": "{\n  \"description\": \"An **ugly number** is a positive integer whose prime factors are limited to `2`, `3`, and `5`. Given an integer `n`, return the `nth` ugly number in the sequence of ugly numbers, where the sequence starts with `1`.\",\n  \"objective\": \"Design an efficient algorithm to generate the sequence of ugly numbers and find the `nth` value. Use dynamic programming with a three-pointer approach to maintain the sequence in sorted order without computing unnecessary numbers.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that ugly numbers are generated by multiplying previous ugly numbers with `2`, `3`, and `5`. To maintain efficiency, keep track of the next multiple of each factor and use a priority mechanism to ensure numbers are added in sorted order.\",\n    \"Step 2 - Dynamic Programming Approach\": \"Use an array `dp` of size `n` to store the first `n` ugly numbers. Start with `dp[0] = 1`, and use three pointers to track the smallest values that need to be multiplied by `2`, `3`, and `5`.\",\n    \"Step 3 - Pointer Updates\": \"At each step, choose the smallest value among the next multiples of `2`, `3`, and `5`. Update the pointer(s) that generated the chosen value and add the value to `dp`.\",\n    \"Step 4 - Edge Cases\": \"Handle cases such as `n = 1` (return `1` immediately) and small values of `n` (generate only the required numbers).\",\n    \"Step 5 - Output\": \"Return the value at `dp[n-1]`, which represents the `nth` ugly number.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 10\n      },\n      \"output\": 12,\n      \"explanation\": \"The first 10 ugly numbers are `[1, 2, 3, 4, 5, 6, 8, 9, 10, 12]`. The 10th ugly number is `12`.\"\n    },\n    {\n      \"input\": {\n        \"n\": 1\n      },\n      \"output\": 1,\n      \"explanation\": \"The first ugly number is `1`.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 1690\",\n    \"ugly_number_definition\": \"A positive integer with prime factors limited to `2`, `3`, and `5` is an ugly number.\"\n  },\n  \"follow_up\": \"Can you solve this problem using a heap-based approach to dynamically generate ugly numbers while maintaining sorted order?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum length of a subarray that appears in both arrays."}, {"role": "assistant", "content": "{\n  \"description\": \"Find the maximum length of a subarray that appears in both given integer arrays.\",\n  \"objective\": \"Use dynamic programming to compute the length of the longest common subarray between the two arrays.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Define a 2D DP table `dp` where `dp[i][j]` represents the length of the longest common subarray starting at `nums1[i]` and `nums2[j]`.\",\n    \"Step 2\": \"Initialize the dimensions of `dp` to `(len(nums1)+1) x (len(nums2)+1)` and set all elements to 0.\",\n    \"Step 3\": \"Iterate through both arrays in reverse order, starting from the last indices of `nums1` and `nums2`.\",\n    \"Step 4\": \"For each pair `(i, j)` where `nums1[i] == nums2[j]`, set `dp[i][j] = dp[i+1][j+1] + 1`. Otherwise, set `dp[i][j] = 0`.\",\n    \"Step 5\": \"Keep track of the maximum value in `dp` during iteration as it represents the length of the longest common subarray.\",\n    \"Step 6\": \"Return the maximum value after completing all iterations.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums1\": [\n          1,\n          2,\n          3,\n          2,\n          1\n        ],\n        \"nums2\": [\n          3,\n          2,\n          1,\n          4,\n          7\n        ]\n      },\n      \"output\": 3,\n      \"explanation\": \"The longest common subarray is [3, 2, 1].\"\n    },\n    {\n      \"input\": {\n        \"nums1\": [\n          0,\n          0,\n          0,\n          0,\n          0\n        ],\n        \"nums2\": [\n          0,\n          0,\n          0,\n          0,\n          0\n        ]\n      },\n      \"output\": 5,\n      \"explanation\": \"The longest common subarray is [0, 0, 0, 0, 0].\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums1.length, nums2.length <= 1000\",\n    \"element_values\": \"0 <= nums1[i], nums2[i] <= 100\"\n  },\n  \"follow_up\": \"Analyze the time complexity O(n * m) and space complexity O(n * m). Discuss space optimization techniques, such as using a 1D array instead of a 2D array.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Return the middle node of the linked list."}, {"role": "assistant", "content": "{\n  \"description\": \"The task is to return the middle node of a singly linked list. If there are two middle nodes, return the second one. The middle node is determined by the total number of nodes in the list.\",\n  \"objective\": \"Given a singly linked list, find the middle node. If there are two middle nodes, return the second one.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Understanding\": \"The middle node is the node that divides the list into two equal halves. If the list has an odd number of nodes, there is one middle node. If the list has an even number of nodes, there are two middle nodes, and we return the second one.\",\n    \"Step 2 - Approach\": \"We can find the middle node by using two pointers: a slow pointer that moves one step at a time and a fast pointer that moves two steps at a time. When the fast pointer reaches the end of the list, the slow pointer will be at the middle node.\",\n    \"Step 3 - Output Format\": \"Return the node starting from the middle node and all subsequent nodes.\",\n    \"Step 4 - Code Efficiency and Edge Cases\": \"The approach runs in O(n) time where n is the number of nodes, and the space complexity is O(1) since we are using only two pointers. This solution handles edge cases such as single-node lists.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2,\n          3,\n          4,\n          5\n        ]\n      },\n      \"output\": [\n        3,\n        4,\n        5\n      ],\n      \"explanation\": \"The middle node is node 3, and the list after node 3 is [3, 4, 5].\"\n    },\n    {\n      \"input\": {\n        \"head\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6\n        ]\n      },\n      \"output\": [\n        4,\n        5,\n        6\n      ],\n      \"explanation\": \"Since the list has an even number of nodes, the two middle nodes are 3 and 4, and we return the second one.\"\n    }\n  ],\n  \"constraints\": {\n    \"nodes_range\": \"1 <= number of nodes <= 100\",\n    \"node_value_range\": \"1 <= Node.val <= 100\"\n  },\n  \"follow_up\": \"How would this solution change if the input list was circular?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the `kth` permutation of the numbers 1 to `n`."}, {"role": "assistant", "content": "{\n  \"description\": \"Given integers `n` and `k`, return the `kth` permutation sequence of the set `[1, 2, 3, ..., n]`. The permutations are generated in lexicographical order.\",\n  \"objective\": \"Design an efficient algorithm to compute the `kth` permutation sequence directly without generating all permutations.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the task involves finding the `kth` permutation of numbers from 1 to `n`. Lexicographical ordering implies sorting the permutations in dictionary order.\",\n    \"Step 2 - Factorial-Based Selection\": \"Use factorial values to determine the position of each digit in the permutation. For example, `(k - 1) / (n - 1)!` determines the index of the first number.\",\n    \"Step 3 - Iterative Construction\": \"Iteratively select and remove digits from the list of available numbers based on the factorial values, reducing the problem size in each step.\",\n    \"Step 4 - Constraints Compliance\": \"Ensure the algorithm efficiently handles constraints such as `1 <= n <= 9` and `1 <= k <= n!`, where factorial growth can make brute force infeasible.\",\n    \"Step 5 - Edge Cases\": \"Consider cases like `n = 1` (only one permutation) and `k = n!` (last permutation).\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 3,\n        \"k\": 3\n      },\n      \"output\": \"213\",\n      \"explanation\": \"The permutations of [1, 2, 3] in order are '123', '132', '213', '231', '312', '321'. The 3rd permutation is '213'.\"\n    },\n    {\n      \"input\": {\n        \"n\": 4,\n        \"k\": 9\n      },\n      \"output\": \"2314\",\n      \"explanation\": \"The 9th permutation of [1, 2, 3, 4] in lexicographical order is '2314'.\"\n    },\n    {\n      \"input\": {\n        \"n\": 3,\n        \"k\": 1\n      },\n      \"output\": \"123\",\n      \"explanation\": \"The 1st permutation of [1, 2, 3] is '123'.\"\n    }\n  ],\n  \"constraints\": {\n    \"n_range\": \"1 <= n <= 9\",\n    \"k_range\": \"1 <= k <= n!\"\n  },\n  \"follow_up\": \"Can you extend the algorithm to handle dynamic updates, such as finding the `kth` permutation after modifying the input set?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Merge accounts with common emails."}, {"role": "assistant", "content": "{\n  \"description\": \"Merge accounts that share common emails and return the merged accounts with emails in sorted order.\",\n  \"objective\": \"Use Union-Find to efficiently group emails belonging to the same person, then retrieve and sort the merged accounts.\",\n  \"meta_prompt\": {\n    \"Step 1\": \"Initialize a Union-Find data structure to manage email groups. Each email starts as its own group.\",\n    \"Step 2\": \"Traverse each account and its emails, unionizing the groups of all emails within the same account.\",\n    \"Step 3\": \"Traverse the emails again to determine the representative (root) for each email, grouping emails by their representatives.\",\n    \"Step 4\": \"Sort the emails within each group and append the account name (from the input) at the beginning of each email group.\",\n    \"Step 5\": \"Store the resulting merged accounts in a list and return the list.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"accounts\": [\n          [\n            \"John\",\n            \"johnsmith@mail.com\",\n            \"john_newyork@mail.com\"\n          ],\n          [\n            \"John\",\n            \"johnsmith@mail.com\",\n            \"john00@mail.com\"\n          ],\n          [\n            \"Mary\",\n            \"mary@mail.com\"\n          ],\n          [\n            \"John\",\n            \"johnnybravo@mail.com\"\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          \"John\",\n          \"john00@mail.com\",\n          \"john_newyork@mail.com\",\n          \"johnsmith@mail.com\"\n        ],\n        [\n          \"Mary\",\n          \"mary@mail.com\"\n        ],\n        [\n          \"John\",\n          \"johnnybravo@mail.com\"\n        ]\n      ],\n      \"explanation\": \"The first two John's accounts share 'johnsmith@mail.com' and are merged. The others remain separate.\"\n    },\n    {\n      \"input\": {\n        \"accounts\": [\n          [\n            \"Gabe\",\n            \"Gabe0@m.co\",\n            \"Gabe3@m.co\",\n            \"Gabe1@m.co\"\n          ],\n          [\n            \"Kevin\",\n            \"Kevin3@m.co\",\n            \"Kevin5@m.co\",\n            \"Kevin0@m.co\"\n          ],\n          [\n            \"Ethan\",\n            \"Ethan5@m.co\",\n            \"Ethan4@m.co\",\n            \"Ethan0@m.co\"\n          ],\n          [\n            \"Hanzo\",\n            \"Hanzo3@m.co\",\n            \"Hanzo1@m.co\",\n            \"Hanzo0@m.co\"\n          ],\n          [\n            \"Fern\",\n            \"Fern5@m.co\",\n            \"Fern1@m.co\",\n            \"Fern0@m.co\"\n          ]\n        ]\n      },\n      \"output\": [\n        [\n          \"Gabe\",\n          \"Gabe0@m.co\",\n          \"Gabe1@m.co\",\n          \"Gabe3@m.co\"\n        ],\n        [\n          \"Kevin\",\n          \"Kevin0@m.co\",\n          \"Kevin3@m.co\",\n          \"Kevin5@m.co\"\n        ],\n        [\n          \"Ethan\",\n          \"Ethan0@m.co\",\n          \"Ethan4@m.co\",\n          \"Ethan5@m.co\"\n        ],\n        [\n          \"Hanzo\",\n          \"Hanzo0@m.co\",\n          \"Hanzo1@m.co\",\n          \"Hanzo3@m.co\"\n        ],\n        [\n          \"Fern\",\n          \"Fern0@m.co\",\n          \"Fern1@m.co\",\n          \"Fern5@m.co\"\n        ]\n      ],\n      \"explanation\": \"Each account is distinct; no emails overlap, so no merging occurs.\"\n    }\n  ],\n  \"constraints\": {\n    \"accounts_length\": \"1 <= accounts.length <= 1000\",\n    \"account_emails\": \"2 <= accounts[i].length <= 10\",\n    \"email_length\": \"1 <= accounts[i][j].length <= 30\",\n    \"name_constraints\": \"accounts[i][0] consists of English letters\",\n    \"email_constraints\": \"accounts[i][j] (for j > 0) is a valid email\"\n  },\n  \"follow_up\": \"Discuss how Union-Find with path compression improves performance and how it compares to other methods like graph-based traversal (DFS or BFS) for this problem.\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "You have to find the best way to rob houses without getting caught. Make sure you don't pick two houses next to each other."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an array `nums` where each element represents the amount of money in a house, find the maximum sum you can rob without robbing two adjacent houses.\",\n  \"objective\": \"Design a dynamic programming algorithm to determine the maximum sum of non-adjacent elements in the array.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that you cannot rob two adjacent houses, which creates a problem of choosing non-consecutive elements to maximize the sum.\",\n    \"Step 2 - Dynamic Programming Approach\": \"Use a DP array where `dp[i]` represents the maximum money robbed up to the `i-th` house.\",\n    \"Step 3 - Transition Formula\": \"Calculate `dp[i] = max(dp[i-1], dp[i-2] + nums[i])`.\",\n    \"Step 4 - Optimize Space\": \"Instead of a DP array, use two variables to store results for the previous two houses.\",\n    \"Step 5 - Handle Edge Cases\": \"Consider cases with one house, all houses with zero money, or houses with equal amounts of money.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          2,\n          3,\n          1\n        ]\n      },\n      \"output\": 4,\n      \"explanation\": \"Rob house 1 (1) and house 3 (3), total = 4.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          2,\n          7,\n          9,\n          3,\n          1\n        ]\n      },\n      \"output\": 12,\n      \"explanation\": \"Rob house 1 (2), house 3 (9), and house 5 (1), total = 12.\"\n    }\n  ],\n  \"constraints\": {\n    \"nums_length\": \"1 <= nums.length <= 100\",\n    \"money_range\": \"0 <= nums[i] <= 400\"\n  },\n  \"follow_up\": \"Can you solve the problem in `O(1)` space by eliminating the DP array?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Add two numbers given as linked lists."}, {"role": "assistant", "content": "{\n  \"description\": \"You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each node contains a single digit. Your task is to add the two numbers and return the sum as a linked list. The result should also be represented in reverse order. You may assume that the two numbers do not contain any leading zeros, except the number 0 itself.\",\n  \"objective\": \"Design an efficient algorithm to traverse the two linked lists, perform addition digit by digit while handling carry, and construct the resulting linked list.\",\n  \"meta_prompt\": {\n    \"Step 1 - Problem Analysis\": \"Understand that the digits of the numbers are stored in reverse order within two linked lists. The goal is to sum these two numbers digit by digit and return the result as a linked list in reverse order as well.\",\n    \"Step 2 - Initial Approach\": \"Consider traversing both linked lists simultaneously, adding the digits along with any carry from the previous operation. Create nodes dynamically to construct the result linked list.\",\n    \"Step 3 - Optimal Implementation\": \"Use a loop to traverse both lists. Add the digits at corresponding positions and manage carry. If one list is shorter, continue processing the remaining digits of the longer list while adding the carry. If a carry remains at the end, create an additional node for it.\",\n    \"Step 4 - Output Format\": \"Return the head of the linked list representing the sum. Ensure the linked list is properly formed and does not have extraneous nodes.\",\n    \"Step 5 - Edge Cases and Constraints\": \"Handle edge cases such as one or both lists having a single node, all nodes being zeros, and numbers of different lengths. Ensure the solution operates within the constraints `[1, 100]` nodes per list and digit values in the range `0 <= Node.val <= 9`.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"l1\": [\n          2,\n          4,\n          3\n        ],\n        \"l2\": [\n          5,\n          6,\n          4\n        ]\n      },\n      \"output\": [\n        7,\n        0,\n        8\n      ],\n      \"explanation\": \"342 + 465 = 807, represented as [7, 0, 8] in reverse order.\"\n    },\n    {\n      \"input\": {\n        \"l1\": [\n          0\n        ],\n        \"l2\": [\n          0\n        ]\n      },\n      \"output\": [\n        0\n      ],\n      \"explanation\": \"0 + 0 = 0, represented as [0].\"\n    },\n    {\n      \"input\": {\n        \"l1\": [\n          9,\n          9,\n          9,\n          9,\n          9,\n          9,\n          9\n        ],\n        \"l2\": [\n          9,\n          9,\n          9,\n          9\n        ]\n      },\n      \"output\": [\n        8,\n        9,\n        9,\n        9,\n        0,\n        0,\n        0,\n        1\n      ],\n      \"explanation\": \"9999999 + 9999 = 10009998, represented as [8, 9, 9, 9, 0, 0, 0, 1] in reverse order.\"\n    }\n  ],\n  \"constraints\": {\n    \"list_size\": \"1 <= number of nodes in each linked list <= 100\",\n    \"node_value\": \"0 <= Node.val <= 9\",\n    \"leading_zeros\": \"The numbers do not contain leading zeros except for the number 0 itself.\"\n  },\n  \"follow_up\": \"Can you solve the problem using only `O(1)` extra space, meaning without reversing the linked lists or creating temporary arrays?\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant that enhances user prompts for better coding problem-solving. Your task is to take a user's incomplete or vague description of a problem and return a well-structured, detailed prompt, using technical terms, Chain-of-Thought reasoning, and Meta Prompting. Include descriptions, examples, constraints, and optimization focus (runtime and memory) without providing actual code ."}, {"role": "user", "content": "Find the maximum average of subarrays with a length at least k."}, {"role": "assistant", "content": "{\n  \"description\": \"Given an integer array and an integer k, find the maximum average of all contiguous subarrays with a length greater than or equal to k.\",\n  \"objective\": \"Use binary search over the possible average values combined with a linear scan to check feasibility, ensuring precision within 10^-5.\",\n  \"meta_prompt\": {\n    \"Step 1 - Initialize Search Range\": \"Set the initial range for binary search with the minimum and maximum values from the array, representing the possible bounds for the average.\",\n    \"Step 2 - Perform Binary Search\": \"Iteratively compute the middle value of the current range and determine if a subarray with a length >= k and an average greater than this middle value exists.\",\n    \"Step 3 - Check Feasibility\": \"Use a linear scan to calculate cumulative sums and check if any subarray of the required length satisfies the condition of having a reduced sum >= 0.\",\n    \"Step 4 - Update Search Range\": \"If a valid subarray is found, adjust the search range to narrow down towards higher averages; otherwise, adjust towards lower averages.\",\n    \"Step 5 - Return Result\": \"Continue until the difference between the upper and lower bounds of the range is within the precision threshold (10^-5), and return the upper bound as the maximum average.\"\n  },\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [\n          1,\n          12,\n          -5,\n          -6,\n          50,\n          3\n        ],\n        \"k\": 4\n      },\n      \"output\": 12.75,\n      \"explanation\": \"The subarray [12, -5, -6, 50] of length 4 has the maximum average of 12.75.\"\n    },\n    {\n      \"input\": {\n        \"nums\": [\n          5\n        ],\n        \"k\": 1\n      },\n      \"output\": 5.0,\n      \"explanation\": \"With only one element, the maximum average is 5.\"\n    }\n  ],\n  \"constraints\": {\n    \"array_length\": \"1 <= nums.length <= 10^4\",\n    \"value_range\": \"-10^4 <= nums[i] <= 10^4\",\n    \"subarray_length\": \"1 <= k <= nums.length\"\n  },\n  \"follow_up\": \"Analyze the time complexity of using binary search combined with a linear scan. Discuss optimization possibilities for larger datasets or stricter precision requirements.\"\n}"}]}
